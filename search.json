[{"path":"https://usdaforestservice.github.io/gdalraster/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"See General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Welcome","title":"Welcome","text":"’re glad ’re thinking contributing open source project USDA Forest Service, Rocky Montain Research Station. want ensure welcoming environment. ’re unsure anything, just ask – submit issue pull request anyway. worst can happen ’ll politely asked change something. welcome friendly contributions.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"public-domain","dir":"","previous_headings":"","what":"Public domain","title":"Welcome","text":"project released MIT license. Portions project public domain within United States, copyright related rights waived worldwide CC0 1.0 Universal public domain dedication. See file inst/COPYRIGHTS details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"development-practices","dir":"","previous_headings":"","what":"Development practices","title":"Welcome","text":"EditorConfig use development environment .editorconfig file included repository. automatically tell popular code editors basic style settings like indentation, whitespaces end--line markers distinguished types plain text files. (EditorConfig may need installed, e.g., Debian/Ubuntu sudo apt install editorconfig. See main EditorConfig link list available plugins various editors IDEs, e.g., EditorConfig VS Code.) lintr use development environment static analysis R code, .lintr file included repository. Cpplint use development environment C++ code style checking. cppcheck also used static analysis C++ code. can installed various package managers, e.g., sudo apt install cppcheck Debian/Ubuntu. Documentation, source code Windows installer available cppcheck website. new functionality must include tests added automated test suite tests/testthat/. Documentation testthat available https://testthat.r-lib.org/. Dynamic analysis C++ code using Valgrind, Clang AddressSanitizer Clang UndefinedBehaviorSanitizer done regularly development, new version release. analyses performed GitHub Actions using workflows provided rhub.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023-2025 gdalraster authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/SECURITY.html","id":null,"dir":"","previous_headings":"","what":"Security Policy","title":"Security Policy","text":"Private vulnerability reporting enabled repository. package provides API bindings GDAL, large software library dealing hundreds file formats protocols. Please see GDAL security policy additional information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GDAL Block Cache","text":"GDAL implements read/write memory caching raster /O. Caching operates raster blocks offers potential substantial performance improvement accessing pixel data across block boundaries. analytical context processing may row-oriented, means /O can efficient even rows intersect many tiles raster arranged square blocks (opposed blocks arranged one whole row). Consideration caching mechanism helpful scaling /O large datasets need processed many chunks. article describe operation caching mechanism, relative performance accessing data row tile relation different raster block arrangements. Implications configuring cache memory size GDAL_CACHEMAX setting described. Focus reading pixel data, similar concepts apply writing well.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"relative-performance","dir":"Articles","previous_headings":"","what":"Relative performance","title":"GDAL Block Cache","text":"dataset containing 16-bit integer elevation 30-m pixel resolution conterminous US obtained LANDFIRE. version “LF 2020 [LF 2.2.0]” available 8.4 GB download. download includes raster overviews (.ovr), elevation raster 6.8 GB GeoTIFF file using LZW compression 128 x 128 tiles. direct download link LF 2020 elevation :https://landfire.gov/bulk/downloadfile.php?FNAME=US_Topo_2020-LF2020_Elev_220_CONUS.zip&TYPE=landfire Tests run laptop Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, 8 GB RAM SSD, Ubuntu 22.04.2, R 4.3.0, gdalraster 1.2.1 (dev), GDAL 3.6.2. Open elevation dataset get parameters: first test reads pixels raster row. tile size 128 x 128 pixels, row intersects 1222 raster blocks (156335 / 128 = 1221.4, last block incomplete). test reflects performance implications GDAL read-ahead caching: comparison, read data raster arranged blocks whole rows (efficient row-level access). gdalraster::createCopy() copies raster dataset optional changes format. extent, number bands, data type, projection, geotransform copied source raster: creates “striped” tif raster blocks arranged row-level access (TILED=default creation option GTiff format driver). resulting file larger 10.6 GB vs. 6.8 GB, since compression efficient strips vs. tiles. Substituting new file (f2) test gives following time read pixels row: final test reads block original tiled raster distributed LANDFIRE. read square blocks need calculate row/column offsets x/y sizes tile, including incomplete tiles along right bottom edges. Package stars provides helper function use . stars represents raster data using R’s 1-based indexing column-major array order (raster rows array columns R). Accounting differences native GDAL indexing, get matrix block boundaries using: terms expected efficiency, reading tiled raster block similar reading striped raster row (reading block boundaries, retrieval cache). difference striped tif contains fewer larger blocks (101538 blocks, 156335 pixels per block), tiled tif contains order magnitude blocks smaller (970268 blocks, 16384 pixels per block). test reads pixels tile original LANDFIRE elevation file (f):","code":"library(gdalraster)  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize() print(paste(\"Size is\", ncols, \"x\",  nrows))  # 1.587394e+10 pixels #> [1] \"Size is 156335 x 101538\"  ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\" \"INTERLEAVE=BAND\"  ds$getBlockSize(band=1) #> [1] 128 128  ds$getDataTypeName(band=1) #> [1] \"Int16\" process_row = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   ## process pixels, possibly write output...   return() }  ## Test 1 ## original tiled raster, reading by row (across block boundaries)  system.time( lapply(0:(nrows-1), process_row) ) #>    user  system elapsed  #> 228.269  11.319 242.195  ds$close() f2 = \"LC20_Elev_220_striped.tif\" opt = c(\"COMPRESS=LZW\", \"TILED=NO\", \"BLOCKYSIZE=1\", \"BIGTIFF=YES\") gdalraster::createCopy(format=\"GTiff\", dst_filename=f2, src_filename=f,                        options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds2 = new(GDALRaster, f2, read_only = TRUE) ds2$getBlockSize(band=1) #> [1] 156335      1  ds2$close() ## Test 2 ## striped tif, reading on block boundaries (rows) ## cache retrieval not involved  system.time( lapply(0:(nrows-1), process_row) ) #>    user  system elapsed #> 230.650   5.112 236.370 library(stars)  r = read_stars(f, proxy = TRUE) nrows = nrow(r) ncols = ncol(r) blocks = st_tile(nrows, ncols, 128, 128) blocks[, 1:2] = blocks[, 1:2] - 1L  nrow(blocks) #> [1] 970268 ## Test 3 ## original tiled raster, reading on block boundaries (tiles) ## cache retrieval not involved  system.time({   for (i in seq_len(nrow(blocks))) {     ds$read(1, blocks[i, 1], blocks[i, 2], blocks[i, 3], blocks[i, 4],         blocks[i, 3], blocks[i, 4])     }   }) #>    user  system elapsed  #> 237.920   7.165 251.200"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"description-of-cache-operation","dir":"Articles","previous_headings":"","what":"Description of cache operation","title":"GDAL Block Cache","text":"GDAL block caching enables reading large tiled raster efficiently row (1.6e+10 total pixels test dataset). default size limit memory cache 5% usable physical RAM. row LANDFIRE tiled raster intersects 1222 blocks size 128 x 128. intersected block read file, decoded LZW compression, placed cache memory. data successive read() intersects block retrieved cache. Caching intersected blocks requires 128 x 128 x 2 bytes = 32768 bytes per block, 32768 x 1222 = 40042496 bytes, approximately 40 MB. decoded block data row can held cache case, meaning 1 every 128 row-level read() involves retrieval file decoding compressed blocks. 127/128 provided cache. Memory recovered request new cache block put cache memory use established limit (least recently used blocks flushed cache accommodate adding new blocks). code uses function gdalraster::get_cache_used() demonstrate behavior:  examples focus reading tiled raster row, similar considerations apply processing large row-oriented rasters 2-D chunks.","code":"## run in a new R session library(gdalraster)  f = \"LC20_Elev_220.tif\" ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize()  ## Default cache size is approximately 400 MB in this case (5% of 8 GB RAM) ## Read enough data to reach cache max rows_read = 0 cache_use = get_cache_used() for (row in 0:1536) {   rowdata = ds$read(1, 0, row, ncols, 1, ncols, 1)   rows_read = c(rows_read, row+1)   cache_use = c(cache_use, get_cache_used()) }  get_cache_used() #> [1] 401 ds$close() get_cache_used() #> [1] 0  plot(rows_read, cache_use, type=\"S\",       xlab=\"rows read\", ylab=\"cache in use (MB)\",       col=\"blue\", lwd=2, xaxt=\"n\") axis(1, at = seq(0, 1536, by = 128), las=2)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"configuring-cache-size","dir":"Articles","previous_headings":"","what":"Configuring cache size","title":"GDAL Block Cache","text":"cache size limit can set GDAL_CACHEMAX configuration option, e.g., Note size limit block cache set upon first use (first /O). Setting GDAL_CACHEMAX point resize cache. per-session setting. GDAL_CACHEMAX configured upon first use cache, default cache size effect current session. /O involves block caching large datasets may require setting GDAL_CACHEMAX larger default. LANDFIRE elevation raster tiled 256 x 256, block require 65536 x 2 = 131072 bytes 16-bit data. cache size needed hold intersected blocks row approximately 160 MB (likewise, 640 MB 512 x 512 tiles). Similarly, cache size configured case multiple large rasters need read (written) simultaneously processing. cache flushed upon dataset closing recover memory. behavior described assumes GDAL dataset opened , required /O completed closing dataset. normally case using GDAL API via gdalraster (GDALRaster-class encapsulates GDALDataset object associated GDALRasterBand objects underlying API). also worth noting without block caching mechanism, possible read tiled elevation raster row reasonable time. can checked repeating Test 1 cache disabled:","code":"## set to a specific size in MB gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"1000\")  ## or percent of physical RAM gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"20%\") ## Test 4 ## original tiled raster, reading by row (across block boundaries) ## cache disabled for testing ## run in a new R session  library(gdalraster)  ## for testing only set_config_option(\"GDAL_CACHEMAX\", \"0\")  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize()  process_row = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   return() }  system.time( lapply(0:(nrows-1), process_row) ) #> ^C #> Timing stopped at: 3650 42.97 3694  # killed with ctrl-c  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"GDAL Block Cache","text":"RFC 26: GDAL Block Cache Improvements Configuration options GDAL Performance optimization GDAL Warp GDALRasterBlock Class Reference gcore/gdalrasterblock.cpp","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GDAL Config Quick Reference","text":"Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. large number configuration options available. overall discussion along full list available options apply GDAL documentation https://gdal.org/en/stable/user/configoptions.html. quick reference covers small subset configuration options may useful common scenarios, links topic-specific documentation provided GDAL project. Options can set R gdalraster::set_config_option(). Note specific usage context dependent. Passing value = \"\" (empty string) unset value previously set set_config_option():","code":"library(gdalraster) #> GDAL 3.8.4 (released 2024-02-08), GEOS 3.12.1, PROJ 9.4.0  set_config_option(\"GDAL_NUM_THREADS\", \"ALL_CPUS\") # unset: set_config_option(\"GDAL_NUM_THREADS\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"general-options","dir":"Articles","previous_headings":"","what":"General options","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/en/stable/user/configoptions.html#general-options GDAL_RASTERIO_RESAMPLING $read() method GDALRaster object perform automatic resampling specified output size (out_xsize * out_ysize) different size source region read (xsize * ysize). case, resampling can configured override default NEAR one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE, MODE, RMS, GAUSS: CPL_TMPDIR default, temporary files written current working directory. can changed :","code":"# bilinear interpolation (2x2 neighborhood of pixels) set_config_option(\"GDAL_RASTERIO_RESAMPLING\", \"BILINEAR\") set_config_option(\"CPL_TMPDIR\", \"<dirname>\")  # tmpdir to use"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"performance-and-caching","dir":"Articles","previous_headings":"","what":"Performance and caching","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/en/stable/user/configoptions.html#performance--caching GDAL_NUM_THREADS Sets number worker threads used GDAL operations support multithreading. affects several different parts GDAL including multi-threaded compression GeoTiff SOZip, multithreaded computation warp() (see topics ). GDAL_CACHEMAX size limit block cache set upon first use (first /O). Setting GDAL_CACHEMAX point resize cache. per-session setting. GDAL_CACHEMAX set upon first use cache, default cache size (5% physical RAM) effect current session. See also GDAL Block Cache. GDAL_MAX_DATASET_POOL_SIZE default number datasets can opened simultaneously GDALProxyPool mechanism (used VRT example) 100. can increased get better random /O performance VRT mosaics made numerous underlying raster files. Note: Linux systems, number file handles can opened process generally limited 1024. currently clamped 2 1000. Also note gdalwarp increases pool size 450: PG_USE_COPY configures PostgreSQL/PostGIS use COPY inserting data significantly faster INSERT. can increase performance substantially using gdalraster::polygonize() write polygons PostGIS vector. See also GDAL configuration options PostgreSQL. SQLITE_USE_OGR_VFS SQLite-based formats GeoPackage (.gpkg) Spatialite (.sqlite), setting SQLITE_USE_OGR_VFS enables extra buffering/caching GDAL/OGR /O layer can speed /O. aware file locking occur option activated, concurrent edits may lead database corruption. setting may increase performance substantially using gdalraster::polygonize() write polygons vector layer formats. Additional configuration performance hints SQLite databases driver documentation : https://gdal.org/en/stable/drivers/vector/sqlite.html#configuration-options. OGR_SQLITE_JOURNAL SQLite transactional DBMS. many INSERT statements executed close sequence, application code may group large batches within transactions order get optimal performance. default, transaction explicitly started, SQLite autocommit every statement slow. OGR_SQLITE_JOURNAL option configures operation rollback journal implements transactions SQLite. SQLite documentation describes default operation: DELETE journaling mode normal behavior. DELETE mode, rollback journal deleted conclusion transaction. Indeed, delete operation action causes transaction commit. DELETE mode requires file system /O performance degraded many INSERTs autocommitted individually. Using MEMORY journaling mode (even ) can much faster case: MEMORY journaling mode stores rollback journal volatile RAM. saves disk /O expense database safety integrity. application using SQLite crashes middle transaction MEMORY journaling mode set, database file likely go corrupt. See SQLite documentation available journal modes. setting also applies using gdalraster::polygonize() write polygons vector layer GeoPackage (.gpkg) Spatialite (.sqlite) formats (see SQLITE_USE_OGR_VFS ).","code":"# set to a specific size in MB set_config_option(\"GDAL_CACHEMAX\", \"800\")  # or percent of physical RAM set_config_option(\"GDAL_CACHEMAX\", \"10%\") # default is 100 set_config_option(\"GDAL_MAX_DATASET_POOL_SIZE\", \"450\") # use COPY for inserting to PostGIS set_config_option(\"PG_USE_COPY\", \"YES\") # SQLite: GPKG (.gpkg) and Spatialite (.sqlite) # enable extra buffering/caching by the GDAL/OGR I/O layer set_config_option(\"SQLITE_USE_OGR_VFS\", \"YES\") # configure SQLite to store the rollback journal in RAM set_config_option(\"OGR_SQLITE_JOURNAL\", \"MEMORY\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"networking","dir":"Articles","previous_headings":"","what":"Networking","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/en/stable/user/configoptions.html#networking-options CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE Whether use local temporary file support random writes certain virtual file systems. temporary file located CPL_TMPDIR (see ).","code":"# YES|NO to use a temp file set_config_option(\"CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE\", \"YES\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"proj","dir":"Articles","previous_headings":"","what":"PROJ","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/en/stable/user/configoptions.html#proj-options OSR_DEFAULT_AXIS_MAPPING_STRATEGY option can set either TRADITIONAL_GIS_ORDER AUTHORITY_COMPLIANT. GDAL >= 3.5 defaults AUTHORITY_COMPLIANT. Determines whether honor declared axis mapping CRS override traditional GIS ordering (x = longitude, y = latitude). OSR_WKT_FORMAT GDAL 3.0, default format exporting spatial reference definition Well Known Text WKT 1. can overridden :","code":"# SFSQL/WKT1_SIMPLE/WKT1/WKT1_GDAL/WKT1_ESRI/WKT2_2015/WKT2_2018/WKT2/DEFAULT set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"warp","dir":"Articles","previous_headings":"","what":"Warp","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/en/stable/programs/gdalwarp.html#memory-usage performance caching topic generally applies processing gdalraster::warp() (reproject/resample/crop/mosaic). GDAL_NUM_THREADS Multithreaded computation warp() can enabled : Increasing memory available warp() may also increase performance (.e., options passed cl_arg include value like c(\"-wm\", \"1000\")). warp memory specified \"-wm\" shared among threads. especially beneficial increase value running warp() multithreading enabled. Multithreading also enabled including GDAL warp option cl_arg c(\"-wo\", \"NUM_THREADS=<value>\") greater 1, equivalent setting GDAL_NUM_THREADS configuration option shown . option can combined -multi command-line argument passed warp() cl_arg. -multi, two threads used process chunks raster perform input/output operation simultaneously, whereas GDAL_NUM_THREADS configuration option affects computation separately. GDAL_CACHEMAX Increasing size /O block cache may also help. can done setting GDAL_CACHEMAX described performance caching topic .","code":"# note this also affects several other parts of GDAL set_config_option(\"GDAL_NUM_THREADS\", \"4\")  # number of threads or ALL_CPUS"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"geotiff","dir":"Articles","previous_headings":"","what":"GeoTIFF","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/en/stable/drivers/raster/gtiff.html#configuration-options behavior GTiff driver highly configurable, including respect overview creation. full discussion, see link also documentation gdaladdo command-line utility. GDAL_NUM_THREADS GTiff driver supports multi-threaded compression (default compression main thread). GDAL documentation states worth slow compression algorithms DEFLATE LZMA. Starting GDAL 3.6, option also enables multi-threaded decoding read requests intersect several tiles/strips: COMPRESS_OVERVIEW Raster overviews (.k.. pyramids) can built $buildOverviews() method GDALRaster object. may desirable compress overviews building: PREDICTOR_OVERVIEW Sets predictor use overviews LZW, DEFLATE ZSTD compression. default 1 (predictor), 2 horizontal differencing 3 floating point prediction. PREDICTOR=2 supported 8, 16, 32 64 bit samples (support 64 bit added libtiff > 4.3.0). PREDICTOR=3 supported 16, 32 64 bit floating-point data.","code":"# specify the number of worker threads or ALL_CPUS # note this also affects several other parts of GDAL set_config_option(\"GDAL_NUM_THREADS\", \"ALL_CPUS\") # applies to external overviews (.ovr), and internal overviews if GDAL >= 3.6 # LZW is a good default but several other compression algorithms are available set_config_option(\"COMPRESS_OVERVIEW\", \"LZW\") # horizontal differencing set_config_option(\"PREDICTOR_OVERVIEW\", \"2\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"httphttps","dir":"Articles","previous_headings":"","what":"HTTP/HTTPS","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsicurl/ (HTTP/HTTPS random access) GDAL_HTTP_CONNECTTIMEOUT Maximum delay connection established aborted. GDAL_HTTP_TIMEOUT Maximum delay whole request complete aborted. CPL_VSIL_CURL_CHUNK_SIZE Partial downloads (requires HTTP server support random reading) done 16 KB granularity default. chunk size can configured option. driver detects sequential reading, progressively increase chunk size 128 times CPL_VSIL_CURL_CHUNK_SIZE (2 MB default) improve download performance. increasing value CPL_VSIL_CURL_CHUNK_SIZE optimize sequential reading, recommended increase CPL_VSIL_CURL_CACHE_SIZE well 128 times value CPL_VSIL_CURL_CHUNK_SIZE. CPL_VSIL_CURL_CACHE_SIZE global least-recently-used cache 16 MB shared among downloaded content used, content may reused file handle closed reopen, life-time process vsi_curl_clear_cache() called. size global LRU cache can modified :","code":"# max delay for connection establishment in seconds set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"<seconds>\") # max delay for whole request completion in seconds set_config_option(\"GDAL_HTTP_TIMEOUT\", \"<seconds>\") # chunk size in bytes set_config_option(\"CPL_VSIL_CURL_CHUNK_SIZE\", \"<bytes>\") # size in bytes defaults to 16 MB set_config_option(\"CPL_VSIL_CURL_CACHE_SIZE\", \"<bytes>\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"aws-s3-buckets","dir":"Articles","previous_headings":"","what":"AWS S3 buckets","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsis3/ (AWS S3 file system handler) AWS_NO_SIGN_REQUEST Request signing can disabled public buckets require AWS account: AWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEY AWS_SESSION_TOKENAWS_REQUEST_PAYER authentication required, configure credentials : AWS_REGION Sets AWS region requests sent. Defaults us-east-1.","code":"# public bucket no AWS account required set_config_option(\"AWS_NO_SIGN_REQUEST\", \"YES\") set_config_option(\"AWS_ACCESS_KEY_ID\", \"<value>\")  # key ID set_config_option(\"AWS_SECRET_ACCESS_KEY\", \"<value>\")  # secret access key # used for validation if using temporary credentials: set_config_option(\"AWS_SESSION_TOKEN\", \"<value>\")  # session token # if requester pays: set_config_option(\"AWS_REQUEST_PAYER\", \"<value>\")  # requester # specify region set_config_option(\"AWS_REGION\", \"us-west-2\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"google-cloud-storage","dir":"Articles","previous_headings":"","what":"Google Cloud Storage","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsigs/ (Google Cloud Storage files)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"microsoft-azure-blob","dir":"Articles","previous_headings":"","what":"Microsoft Azure Blob","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsiaz/ (Microsoft Azure Blob files) Recognized filenames form /vsiaz/container/key, container name container key object “key”, .e. filename potentially containing subdirectories. AZURE_NO_SIGN_REQUEST Controls whether requests signed. AZURE_STORAGE_CONNECTION_STRING Credential string provided Access Keys section administrative interface, containing account name secret key. AZURE_STORAGE_ACCOUNTAZURE_STORAGE_ACCESS_TOKENAZURE_STORAGE_ACCESS_KEYAZURE_STORAGE_SAS_TOKEN Whereas Azure connection string contains account name key, storage account name might set using AZURE_STORAGE_ACCOUNT along one : AZURE_STORAGE_ACCESS_TOKEN: value obtained using Microsoft Authentication Library (MSAL) AZURE_STORAGE_ACCESS_KEY: value secret key associated AZURE_STORAGE_ACCOUNT AZURE_STORAGE_SAS_TOKEN: value Shared Access Signature AZURE_NO_SIGN_REQUEST=YES disable request signing AZURE_STORAGE_SAS_TOKEN used, example, Microsoft Planetary Computer documented : https://planetarycomputer.microsoft.com/docs/concepts/sas/ SAS token can requested via API token endpoint: https://planetarycomputer.microsoft.com/api/sas/v1/token/{collection_id} https://planetarycomputer.microsoft.com/api/sas/v1/token/{storage_account}/{container} authentication methods possible Azure. See GDAL documentation details.","code":"# public access set_config_option(\"AZURE_NO_SIGN_REQUEST\", \"YES\") set_config_option(\"AZURE_STORAGE_CONNECTION_STRING\", \"<my_connection_string>\") # e.g., Planetary Computer access to STAC items as geoparquet datasets # https://planetarycomputer.microsoft.com/docs/quickstarts/stac-geoparquet/ set_config_option(\"AZURE_STORAGE_ACCOUNT\", \"pcstacitems\") # SAS token is the value of \"token\" in the JSON returned by: # https://planetarycomputer.microsoft.com/api/sas/v1/token/pcstacitems/items set_config_option(\"AZURE_STORAGE_SAS_TOKEN\", \"<token>\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"microsoft-azure-data-lake","dir":"Articles","previous_headings":"","what":"Microsoft Azure Data Lake","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsiadls/ (Microsoft Azure Data Lake Storage Gen2)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"sozip","dir":"Articles","previous_headings":"","what":"SOZip","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsizip/ (Seek-Optimized ZIP files, GDAL >= 3.7) function gdalraster::addFilesInZip() can used create new append existing ZIP files, potentially using seek optimization extension. Function arguments available options , configuration options can set change default behavior. GDAL_NUM_THREADS GDAL_NUM_THREADS configuration option can set ALL_CPUS integer value specify number threads use SOZip-compressed files. option similarly described compression GeoTiff. Note option also affects several parts GDAL. CPL_SOZIP_ENABLED Defaults AUTO. Determines whether SOZip optimization enabled. AUTO, SOZip enabled uncompressed files larger CPL_SOZIP_MIN_FILE_SIZE. CPL_SOZIP_MIN_FILE_SIZE Defaults 1M. Determines minimum file size SOZip automatically enabled. Specified bytes, K, M G suffix can used respectively specify value kilobytes, megabytes gigabytes.","code":"# SOZip optimization defaults to AUTO set_config_option(\"CPL_SOZIP_ENABLED\", \"YES\") # SOZip minimum file size set_config_option(\"CPL_SOZIP_MIN_FILE_SIZE\", \"100K\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Draft Bindings to the GDAL/OGR Vector API","text":"document describes R bindings GDAL/OGR Vector API proposed inclusion package gdalraster, analogous existing raster support. package providing low-level access raster vector APIs GDAL interest developers creating higher level interfaces. example, custom workflows /O intensive may benefit direct access GDAL’s /O capabilities. R bindings vector API support persistent connections data store, cursors attribute spatial filtering, transactions, feature-level insert/delete, update attributes geometries, OGR facilities geoprocessing. Calling signatures class-based interface resemble C++ Python APIs provided GDAL project. intended bindings gdalraster provide long-term API stability tracking changes GDAL. proposed interface described terms GDAL Vector Data Model, along draft class definition implementation via RCPP_EXPOSED_CLASS. initial implemetation supporting read access merged gdalraster main branch (v. 1.11.1.9100, 2024-07-23), online documentation available : https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"description-of-the-interface","dir":"Articles","previous_headings":"","what":"Description of the interface","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Bindings implemented Rcpp modules including RCPP_EXPOSED_CLASS. Exposing C++ classes directly R provides natural interface underlying object model.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"vector-dataset","dir":"Articles","previous_headings":"Description of the interface","what":"Vector dataset","title":"Draft Bindings to the GDAL/OGR Vector API","text":"GDAL Dataset vector file database containing one OGR layers. vector dataset represented R data source name (DSN), character string may filename, database connection string, URL, virtual file, etc. Management datasets vector schemas done : existing management functions gdalraster operate vector datasets: copyDatasetFiles(), deleteDataset(), renameDataset() addFilesInZip() (supports SOZip) existing utility functions managing vector data sources (gdalraster 1.11.0): ogr_manage ogr_define existing wrappers ogr2ogr() ogrinfo() GDAL Utils API (gdalraster 1.10.0) ogr_execute_sql(): execute SQL statement data store edit data (SQL SELECT statement can used constructor class GDALVector described , open layer features)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"vector-layer","dir":"Articles","previous_headings":"Description of the interface","what":"Vector layer","title":"Draft Bindings to the GDAL/OGR Vector API","text":"OGR Layer class represents layer features within data source. modeled R class GDALVector, exposed C++ class encapsulating OGR Layer GDAL Dataset owns . GDALVector object persist open connection dataset, expose methods retrieving layer information, setting attribute spatial filters, reading/writing features, layer geoprocessing. draft definition class GDALVector given .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"feature-class-field-definitions","dir":"Articles","previous_headings":"Description of the interface","what":"Feature class / field definitions","title":"Draft Bindings to the GDAL/OGR Vector API","text":"features OGR Layer share common schema (feature class) modeled GDAL OGR Feature Definition. feature class definition includes set attribute fields data types, geometry field(s), feature class name (normally used layer name). feature class definition represented list R, names attribute/geometry field names, list element holding field definition. attribute field definition list named elements: geometry field definition list named elements:","code":"$type       : OGR Field Type (\"OFTString\", \"OFTInteger\", ...) $subtype    : optional (\"OFSTBoolean\", ...) $width      : optional max number of characters $precision  : optional number of digits after the decimal point $is_nullable: optional NOT NULL constraint (logical scalar) $is_unique  : optional UNIQUE constraint (logical scalar) $default    : optional field default value as character string $domain     : optional domain name $is_geom    : FALSE for attribute fields $type       : geom type (\"Point\", \"Polygon\", etc.) $srs        : optional spatial reference as WKT string $is_nullable: optional NOT NULL constraint (logical scalar) $is_geom    : TRUE for geometry fields"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"feature-retrieval","dir":"Articles","previous_headings":"Description of the interface","what":"Feature retrieval","title":"Draft Bindings to the GDAL/OGR Vector API","text":"OGR Feature – read GDALVector::getNextFeature() GDALVector::getFeature(), passed write methods – list unique feature identifier (FID), attribute geometry field names, values. GDALVector::fetch() fetches next n features layer returns data frame (analog DBI::dbFetch()). allows retrieving entire feature set (potentially attribute /spatial filter applied), one page features time, remaining features. fetch() can called multiple times (forward paging). Fetching zero features also possible retrieve structure result set data frame. OGR field types returned corresponding native R types (NA OGR NULL values): OFTInteger: integer (subtype OFSTBoolean logical) OFTIntegerList: vector integer (list column data frames) OFTInteger64: bit64::integer64 (subtype OFSTBoolean logical) OFTInteger64List: vector bit64::integer64 (list column data frames) OFTReal: numeric OFTRealList: vector numeric (list column data frames) OFTString: character string OFTStringList: vector character strings (list column data frames) OFTDate: Date OFTDateTime: POSIXct (millisecond accuracy, adjustment time zone flag present) OFTBinary: raw vector (list column data frames)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"geometry","dir":"Articles","previous_headings":"Description of the interface","what":"Geometry","title":"Draft Bindings to the GDAL/OGR Vector API","text":"OGR Geometry can represented R either character string containing OGC Well Known Text (WKT), raw vector bytes containing Well Known Binary (WKB). OGR Spatial Reference, encapsulates definition projection datum, represented R WKT. gdalraster existing functions working spatial reference systems WKT (srs_to_wkt(), srs_is_projected(), etc.), set geometry convenience functions also operating WKT (GEOS via GDAL headers). Package wk supports parsing WKB WKT representation geometries R-native formats. Interoperability sf classes simple features also straightforward (e.g., sf::st_sf()). Returning geometries optional retrieving features data store gdalraster. Omitting geometries can improve performance memory utilization access attributes needed (currently default). geometries included, can retrieved either WKB WKT (optionally ISO versions). WKB compact fast parse, e.g., using high performance functions provided wk. setting geometry retrieval per-object class GDALvector, can set back forth needed lifetime object.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"class-gdalvector","dir":"Articles","previous_headings":"","what":"class GDALVector","title":"Draft Bindings to the GDAL/OGR Vector API","text":"draft class definition partially implemented : https://github.com/USDAForestService/gdalraster/blob/gdalvector/src/gdalvector.cpp header file can referenced public class methods implemented far prototype (subset draft class definition ): https://github.com/USDAForestService/gdalraster/blob/gdalvector/src/gdalvector.h","code":"class GDALVector {  public:     GDALVector();     explicit GDALVector(Rcpp::CharacterVector dsn);     GDALVector(Rcpp::CharacterVector dsn, std::string layer);     GDALVector(Rcpp::CharacterVector dsn, std::string layer, bool read_only);     GDALVector(Rcpp::CharacterVector dsn, std::string layer, bool read_only,                Rcpp::CharacterVector open_options);     GDALVector(Rcpp::CharacterVector dsn, std::string layer, bool read_only,                Rcpp::Nullable<Rcpp::CharacterVector> open_options,                std::string spatial_filter, std::string dialect);      // undocumented, exposed read-only fields for internal use     std::string m_layer_name {\"\"};  // layer name or sql statement     bool m_is_sql {false};     std::string m_dialect {\"\"};      // exposed read/write fields     std::string defaultGeomFldName {\"geometry\"};     bool promoteToMulti {false};     std::string returnGeomAs {\"WKB\"};     std::string wkbByteOrder {\"LSB\"};      // exposed methods     void open(bool read_only);     bool isOpen() const;     std::string getDsn() const;     Rcpp::CharacterVector getFileList() const;     std::string getDriverShortName() const;     std::string getDriverLongName() const;      std::string getName() const;     Rcpp::CharacterVector getFieldNames() const;     Rcpp::List testCapability() const;     std::string getFIDColumn() const;     std::string getGeomType() const;     std::string getGeometryColumn() const;     std::string getSpatialRef() const;     Rcpp::NumericVector bbox();     Rcpp::List getLayerDefn() const;      void setAttributeFilter(const std::string &query);     std::string getAttributeFilter() const;     void setIgnoredFields(const Rcpp::RObject &fields);     void setSelectedFields(const Rcpp::RObject &fields);      void setSpatialFilter(const std::string &wkt);     void setSpatialFilterRect(const Rcpp::RObject &bbox);     std::string getSpatialFilter() const;     void clearSpatialFilter();      double getFeatureCount();     SEXP getNextFeature();     void setNextByIndex(double i);     // fid must be a length-1 numeric vector, since numeric vector can carry     // the class attribute for integer64:     SEXP getFeature(const Rcpp::RObject &fid);     void resetReading();      Rcpp::DataFrame fetch(double n);      bool setFeature(const Rcpp::RObject &feature);     bool createFeature(const Rcpp::RObject &feature);     bool upsertFeature(const Rcpp::RObject &feature);     SEXP getLastWriteFID() const;     bool deleteFeature(const Rcpp::RObject &fid);     bool syncToDisk() const;      bool startTransaction(bool force);     bool commitTransaction();     bool rollbackTransaction();      bool layerIntersection(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);     bool layerUnion(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);     bool layerSymDifference(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);     bool layerIdentity(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);     bool layerUpdate(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);     bool layerClip(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);     bool layerErase(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             const Rcpp::Nullable<const Rcpp::CharacterVector> &options);      void close();      void OGRFeatureFromList_dumpReadble(const Rcpp::RObject &feat) const;      // methods for internal use not exposed to R     void checkAccess_(GDALAccess access_needed) const;     void setDsn_(std::string dsn);     GDALDatasetH getGDALDatasetH_() const;     void setGDALDatasetH_(const GDALDatasetH hDs, bool with_update);     OGRLayerH getOGRLayerH_() const;     void setOGRLayerH_(const OGRLayerH hLyr, const std::string &lyr_name);     void setFieldNames_();     SEXP initDF_(R_xlen_t nrow) const;     OGRFeatureH OGRFeatureFromList_(const Rcpp::RObject &feature) const;   private:     std::string m_dsn {\"\"};     Rcpp::CharacterVector m_open_options {};     std::string m_attr_filter {\"\"};     std::string m_spatial_filter {\"\"};     Rcpp::CharacterVector m_field_names {};     Rcpp::CharacterVector m_ignored_fields {};     GDALDatasetH m_hDataset {nullptr};     GDALAccess m_eAccess {GA_ReadOnly};     OGRLayerH m_hLayer {nullptr};     int64_t m_last_write_fid {NA_INTEGER64}; };  RCPP_EXPOSED_CLASS(GDALVector)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"example-usage-for-class-gdalvector","dir":"Articles","previous_headings":"","what":"Example: usage for class GDALVector","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Created 2024-07-21 reprex v2.1.1","code":"## usage for GDALVector class  library(gdalraster) #> GDAL 3.8.4, released 2024/02/08, GEOS 3.12.1, PROJ 9.3.1  # MTBS fires in Yellowstone National Park 1984-2022 f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") # copy to a temporary in-memory file that is writeable dsn <- paste0(\"/vsimem/\", basename(f)) vsi_copy_file(f, dsn) #> [1] 0  lyr <- new(GDALVector, dsn, \"mtbs_perims\")  # object of class GDALVector lyr #> C++ object <0x58bb870345b0> of class 'GDALVector' <0x58bb8825b400> str(lyr) #> Reference class 'Rcpp_GDALVector' [package \"gdalraster\"] with 3 fields #>  $ defaultGeomFldName: chr \"geometry\" #>  $ returnGeomAs      : chr \"NONE\" #>  $ wkbByteOrder      : chr \"LSB\" #>  and 46 methods, of which 32 are  possibly relevant: #>    bbox, clearSpatialFilter, close, fetch, finalize, getDriverLongName, #>    getDriverShortName, getDsn, getFeature, getFeatureCount, getFIDColumn, #>    getFileList, getGeometryColumn, getGeomType, getLayerDefn, getName, #>    getNextFeature, getSpatialRef, initialize, isOpen, layerClip, layerErase, #>    layerIdentity, layerIntersection, layerSymDifference, layerUnion, #>    layerUpdate, open, resetReading, setAttributeFilter, setSpatialFilterRect, #>    testCapability  # dataset info lyr$getDriverShortName() #> [1] \"GPKG\" lyr$getDriverLongName() #> [1] \"GeoPackage\" lyr$getFileList() #> [1] \"/vsimem/ynp_fires_1984_2022.gpkg\"  # layer info lyr$getName() #> [1] \"mtbs_perims\" lyr$getGeomType() #> [1] \"MULTIPOLYGON\" lyr$getGeometryColumn() #> [1] \"geom\" lyr$getFIDColumn() #> [1] \"fid\" lyr$getSpatialRef() #> [1] \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Lambert_Conformal_Conic_2SP\\\"],PARAMETER[\\\"latitude_of_origin\\\",44.25],PARAMETER[\\\"central_meridian\\\",-109.5],PARAMETER[\\\"standard_parallel_1\\\",49],PARAMETER[\\\"standard_parallel_2\\\",45],PARAMETER[\\\"false_easting\\\",600000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"32100\\\"]]\" lyr$bbox() #> [1] 469685.73 -12917.76 573531.72  96577.34  # layer capabilities lyr$testCapability() #> $RandomRead #> [1] TRUE #>  #> $SequentialWrite #> [1] FALSE #>  #> $RandomWrite #> [1] FALSE #>  #> $UpsertFeature #> [1] FALSE #>  #> $FastSpatialFilter #> [1] TRUE #>  #> $FastFeatureCount #> [1] TRUE #>  #> $FastGetExtent #> [1] TRUE #>  #> $FastSetNextByIndex #> [1] TRUE #>  #> $CreateField #> [1] FALSE #>  #> $CreateGeomField #> [1] FALSE #>  #> $DeleteField #> [1] FALSE #>  #> $ReorderFields #> [1] FALSE #>  #> $AlterFieldDefn #> [1] FALSE #>  #> $AlterGeomFieldDefn #> [1] FALSE #>  #> $DeleteFeature #> [1] FALSE #>  #> $StringsAsUTF8 #> [1] TRUE #>  #> $Transactions #> [1] TRUE #>  #> $CurveGeometries #> [1] TRUE  # re-open with write access lyr$open(read_only = FALSE) lyr$testCapability()$SequentialWrite #> [1] TRUE lyr$testCapability()$RandomWrite #> [1] TRUE  # feature class definition - a list of fields and their definitions defn <- lyr$getLayerDefn() names(defn) #>  [1] \"event_id\"     \"incid_name\"   \"incid_type\"   \"map_id\"       \"burn_bnd_ac\"  #>  [6] \"burn_bnd_lat\" \"burn_bnd_lon\" \"ig_date\"      \"ig_year\"      \"geom\"  # each list element holds a field definition list str(defn) #> List of 10 #>  $ event_id    :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ incid_name  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ incid_type  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ map_id      :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_ac :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lat:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lon:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ ig_date     :List of 9 #>   ..$ type       : chr \"OFTDate\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ ig_year     :List of 9 #>   ..$ type       : chr \"OFTInteger\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ geom        :List of 5 #>   ..$ type       : chr \"MULTIPOLYGON\" #>   ..$ srs        : chr \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,2\"| __truncated__ #>   ..$ is_nullable: logi TRUE #>   ..$ is_geom    : logi TRUE  lyr$getFeatureCount() #> [1] 61  # cursor feat <- lyr$getNextFeature() # a list of field names and their values str(feat) #> List of 10 #>  $ FID         :integer64 1  #>  $ event_id    : chr \"WY4413411069519870807\" #>  $ incid_name  : chr \"POLECAT\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10015934  #>  $ burn_bnd_ac :integer64 1093  #>  $ burn_bnd_lat: chr \"44.132\" #>  $ burn_bnd_lon: chr \"-110.696\" #>  $ ig_date     : Date[1:1], format: \"1987-08-07\" #>  $ ig_year     : int 1987  # attribute filter lyr$setAttributeFilter(\"ig_year = 2020\") lyr$getFeatureCount() #> [1] 1  # default value of read/write field 'returnGeomAs' lyr$returnGeomAs #> [1] \"NONE\"  feat <- lyr$getNextFeature() str(feat) #> List of 10 #>  $ FID         :integer64 61  #>  $ event_id    : chr \"WY4438911082120200822\" #>  $ incid_name  : chr \"LONE STAR\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10020495  #>  $ burn_bnd_ac :integer64 3348  #>  $ burn_bnd_lat: chr \"44.4\" #>  $ burn_bnd_lon: chr \"-110.782\" #>  $ ig_date     : Date[1:1], format: \"2020-08-22\" #>  $ ig_year     : int 2020  # NULL if no more features are available feat <- lyr$getNextFeature() str(feat) #>  NULL  # reset reading to the start and return geometry as WKT lyr$resetReading() lyr$returnGeomAs <- \"WKT\" feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 61  #>  $ event_id    : chr \"WY4438911082120200822\" #>  $ incid_name  : chr \"LONE STAR\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10020495  #>  $ burn_bnd_ac :integer64 3348  #>  $ burn_bnd_lat: chr \"44.4\" #>  $ burn_bnd_lon: chr \"-110.782\" #>  $ ig_date     : Date[1:1], format: \"2020-08-22\" #>  $ ig_year     : int 2020 #>  $ geom        : chr \"MULTIPOLYGON (((496593.122306971 15506.8828590633,496491.761299067 15605.3612548792,496290.812130161 15388.0465\"| __truncated__  # clear attribute filter lyr$setAttributeFilter(\"\") lyr$getFeatureCount() #> [1] 61  # spatial filter # get the bounding box of the largest 1988 fire and use as spatial filter # first set a temporary attribute filter to do the lookup lyr$setAttributeFilter(\"ig_year = 1988 ORDER BY burn_bnd_ac DESC\") feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 7  #>  $ event_id    : chr \"WY4470811082119880722\" #>  $ incid_name  : chr \"NORTH FORK\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10014217  #>  $ burn_bnd_ac :integer64 563527  #>  $ burn_bnd_lat: chr \"44.678\" #>  $ burn_bnd_lon: chr \"-110.716\" #>  $ ig_date     : Date[1:1], format: \"1988-07-22\" #>  $ ig_year     : int 1988 #>  $ geom        : chr \"MULTIPOLYGON (((469685.969312071 29526.2354109807,469918.933844832 29654.3220754602,470030.299119989 29518.7441\"| __truncated__  bbox <- bbox_from_wkt(feat$geom) print(bbox) #> [1] 469685.97  11442.45 544069.63  85508.15  # set spatial filter on the full layer lyr$setAttributeFilter(\"\") lyr$setSpatialFilterRect(bbox) lyr$getFeatureCount() #> [1] 40  # fetch n features at a time and return as a data frame # analog of DBI::dbFetch() where the lyr object is a result set # geometry can optionally be returned as NONE, WKT or WKB d <- lyr$fetch(20) str(d) #> 'data.frame':    20 obs. of  11 variables: #>  $ FID         :integer64 38 7 32 25 6 40 36 8 ...  #>  $ event_id    : chr  \"MT4471311115120070627\" \"WY4470811082119880722\" \"MT4491211108020030820\" \"WY4433011103020000816\" ... #>  $ incid_name  : chr  \"MADISON ARM\" \"NORTH FORK\" \"RATHBONE\" \"SPRUCE COMPLEX (PLATEAU)\" ... #>  $ incid_type  : chr  \"Wildfire\" \"Wildfire\" \"Wildfire\" \"Wildfire\" ... #>  $ map_id      :integer64 16113 10014217 13014 10014141 10014215 16428 15432 10014218 ...  #>  $ burn_bnd_ac :integer64 3564 563527 2701 2808 20422 2175 3745 95233 ...  #>  $ burn_bnd_lat: chr  \"44.713\" \"44.678\" \"44.912\" \"44.329\" ... #>  $ burn_bnd_lon: chr  \"-111.151\" \"-110.716\" \"-111.080\" \"-111.027\" ... #>  $ ig_date     : Date, format: \"2007-06-27\" \"1988-07-22\" ... #>  $ ig_year     : int  2007 1988 2003 2000 1988 2007 2006 1988 1988 1988 ... #>  $ geom        : chr  \"MULTIPOLYGON (((469685.969631834 54506.9481370259,470235.509134591 54383.4837249131,470939.42854159 53898.69574\"| __truncated__ \"MULTIPOLYGON (((469685.969312071 29526.2354109807,469918.933844832 29654.3220754602,470030.299119989 29518.7441\"| __truncated__ \"MULTIPOLYGON (((475136.766856355 74053.2153491452,475188.847231864 74366.3342955356,475341.959781024 74368.4856\"| __truncated__ \"MULTIPOLYGON (((477992.723214764 8483.08443989834,477312.456870818 7630.95433906866,477088.305832492 6955.09786\"| __truncated__ ...  # the next 20 features d <- lyr$fetch(20) nrow(d) #> [1] 20  # no features remaining d <- lyr$fetch(20) nrow(d) #> [1] 0 str(d)  # 0-row data frame with columns typed #> 'data.frame':    0 obs. of  11 variables: #>  $ FID         :integer64   #>  $ event_id    : chr  #>  $ incid_name  : chr  #>  $ incid_type  : chr  #>  $ map_id      :integer64   #>  $ burn_bnd_ac :integer64   #>  $ burn_bnd_lat: chr  #>  $ burn_bnd_lon: chr  #>  $ ig_date     : 'Date' num(0)  #>  $ ig_year     : int  #>  $ geom        : chr  # fetch all available features by passing n = -1, resets to first feature # return geom as a list column of WKB raw vectors lyr$returnGeomAs <- \"WKB\" d <- lyr$fetch(-1) str(d) #> 'data.frame':    40 obs. of  11 variables: #>  $ FID         :integer64 38 7 32 25 6 40 36 8 ...  #>  $ event_id    : chr  \"MT4471311115120070627\" \"WY4470811082119880722\" \"MT4491211108020030820\" \"WY4433011103020000816\" ... #>  $ incid_name  : chr  \"MADISON ARM\" \"NORTH FORK\" \"RATHBONE\" \"SPRUCE COMPLEX (PLATEAU)\" ... #>  $ incid_type  : chr  \"Wildfire\" \"Wildfire\" \"Wildfire\" \"Wildfire\" ... #>  $ map_id      :integer64 16113 10014217 13014 10014141 10014215 16428 15432 10014218 ...  #>  $ burn_bnd_ac :integer64 3564 563527 2701 2808 20422 2175 3745 95233 ...  #>  $ burn_bnd_lat: chr  \"44.713\" \"44.678\" \"44.912\" \"44.329\" ... #>  $ burn_bnd_lon: chr  \"-111.151\" \"-110.716\" \"-111.080\" \"-111.027\" ... #>  $ ig_date     : Date, format: \"2007-06-27\" \"1988-07-22\" ... #>  $ ig_year     : int  2007 1988 2003 2000 1988 2007 2006 1988 1988 1988 ... #>  $ geom        :List of 40 #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ...  # parse WKB using the wk package wk_obj <- wk::wkb(d$geom, crs = lyr$getSpatialRef()) plot(wk_obj) lyr$clearSpatialFilter() lyr$getFeatureCount() #> [1] 61  lyr$close() vsi_unlink(dsn) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"example-layer-geoprocessing","dir":"Articles","previous_headings":"","what":"Example: layer geoprocessing","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Created 2024-07-30 reprex v2.1.1","code":"## layer intersection example  library(gdalraster) #> GDAL 3.8.4, released 2024/02/08, GEOS 3.12.1, PROJ 9.3.1  # MTBS fires in Yellowstone National Park 1984-2022 dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # layer filtered to fires since year 2000 lyr1 <- new(GDALVector, dsn, \"mtbs_perims\") lyr1$setAttributeFilter(\"ig_year >= 2000\") lyr1$getFeatureCount() #> [1] 40  # second layer for the 1988 North Fork fire perimeter sql <- paste0(\"SELECT incid_name, ig_year, geom \",               \"FROM mtbs_perims \",               \"WHERE incid_name = 'NORTH FORK'\") lyr2 <- new(GDALVector, dsn, sql) lyr2$getFeatureCount() #> [1] 1  # intersect to obtain areas re-burned since 2000 tmp_dsn <- tempfile(fileext = \".gpkg\") opt <- c(\"INPUT_PREFIX=layer1_\",          \"METHOD_PREFIX=layer2_\",          \"PROMOTE_TO_MULTI=YES\")  lyr_out <- ogr_proc(mode = \"Intersection\",                      input_lyr = lyr1,                     method_lyr = lyr2,                      out_dsn = tmp_dsn,                     out_lyr_name = \"north_fork_reburned\",                     out_geom_type = \"MULTIPOLYGON\",                     mode_opt = opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # result layer has attributes of the input and the method layers lyr_out$returnGeomAs <- \"TYPE_NAME\" d <- lyr_out$fetch(-1) print(d) #>   FID       layer1_event_id layer1_incid_name layer1_incid_type layer1_map_id #> 1   1 WY4484611038620100914          ANTELOPE          Wildfire      10013735 #> 2   2 WY4466711063920120810            CYGNET          Wildfire          1961 #> 3   3 WY4474311097820160809             MAPLE          Wildfire      10005020 #> 4   4 WY4492611093820160805              FAWN          Wildfire      10005117 #> 5   5 WY4457911058620160826           CENTRAL          Wildfire      10014143 #>   layer1_burn_bnd_ac layer1_burn_bnd_lat layer1_burn_bnd_lon layer1_ig_date #> 1               4888              44.839            -110.368     2010-09-14 #> 2               3188              44.682            -110.622     2012-08-10 #> 3             103193              44.731            -110.982     2016-08-09 #> 4               3161              44.936            -110.913     2016-08-05 #> 5               2340              44.595            -110.574     2016-08-26 #>   layer1_ig_year layer2_incid_name layer2_ig_year         geom #> 1           2010        NORTH FORK           1988 MULTIPOLYGON #> 2           2012        NORTH FORK           1988 MULTIPOLYGON #> 3           2016        NORTH FORK           1988 MULTIPOLYGON #> 4           2016        NORTH FORK           1988 MULTIPOLYGON #> 5           2016        NORTH FORK           1988 MULTIPOLYGON  # clean up lyr1$close() lyr2$close() lyr_out$close() deleteDataset(tmp_dsn) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"example-worldcover-sentinel-2-composites","dir":"Articles","previous_headings":"","what":"Example: WorldCover Sentinel-2 composites","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Created 2024-07-21 reprex v2.1.1","code":"## WorldCover Sentinel-2 annual composites ## see: https://blog.vito.be/remotesensing/worldcover-annual-composites ## tile index lookup on remote filesystem and obtain raster data  library(gdalraster) #> GDAL 3.8.4, released 2024/02/08, GEOS 3.12.1, PROJ 9.3.1  fgb = \"/vsicurl/https://esa-worldcover.s3.eu-central-1.amazonaws.com/esa_worldcover_grid_composites.fgb\" lyr_tiles <- new(GDALVector, fgb)  lyr_tiles$getDriverShortName() #> [1] \"FlatGeobuf\" lyr_tiles$getName() #> [1] \"worldcover_composites_grid_aws\" lyr_tiles$getGeomType() #> [1] \"POLYGON\" lyr_tiles$getSpatialRef() #> [1] \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"  lyr_tiles$testCapability()$RandomRead #> [1] TRUE lyr_tiles$testCapability()$FastSpatialFilter #> [1] TRUE lyr_tiles$testCapability()$FastFeatureCount #> [1] TRUE lyr_tiles$testCapability()$FastGetExtent #> [1] TRUE  lyr_tiles$getFeatureCount() #> [1] 19363 lyr_tiles$bbox() #> [1] -180  -60  180   83  defn <- lyr_tiles$getLayerDefn() names(defn) #>  [1] \"tile\"              \"s1_vvvhratio_2020\" \"s1_vvvhratio_2021\" #>  [4] \"s2_rgbnir_2020\"    \"s2_rgbnir_2021\"    \"s2_ndvi_2020\"      #>  [7] \"s2_ndvi_2021\"      \"s2_swir_2020\"      \"s2_swir_2021\"      #> [10] \"geometry\"  # AOI for the Fishhawk fire dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") lyr_ynp <- new(GDALVector, dsn, \"mtbs_perims\")  lyr_ynp$setAttributeFilter(\"incid_name = 'FISHHAWK'\") lyr_ynp$getFeatureCount() #> [1] 1 lyr_ynp$returnGeomAs <- \"WKT\" feat <- lyr_ynp$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 60  #>  $ event_id    : chr \"WY4437710988020190902\" #>  $ incid_name  : chr \"FISHHAWK\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10016957  #>  $ burn_bnd_ac :integer64 10775  #>  $ burn_bnd_lat: chr \"44.384\" #>  $ burn_bnd_lon: chr \"-109.85\" #>  $ ig_date     : Date[1:1], format: \"2019-09-02\" #>  $ ig_year     : int 2019 #>  $ geom        : chr \"MULTIPOLYGON (((573530.585472236 9160.22088906913,573266.183153384 9415.42216938034,573137.427110327 9285.44517\"| __truncated__  # get the feature bbox in WGS84 bb <- g_transform(feat$geom, lyr_ynp$getSpatialRef(), epsg_to_wkt(4326)) |>   bbox_from_wkt() print(bb) #> [1] -109.89753   44.32714 -109.83172   44.44030  # tile index lookup lyr_tiles$setSpatialFilterRect(bb) lyr_tiles$getFeatureCount() #> [1] 1 feat <- lyr_tiles$getNextFeature() str(feat) #> List of 10 #>  $ FID              :integer64 16615  #>  $ tile             : chr \"N44W110\" #>  $ s1_vvvhratio_2020: chr \"s3://esa-worldcover-s1/vvvhratio/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_S1VVVHratio.tif\" #>  $ s1_vvvhratio_2021: chr \"s3://esa-worldcover-s1/vvvhratio/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_S1VVVHratio.tif\" #>  $ s2_rgbnir_2020   : chr \"s3://esa-worldcover-s2/rgbnir/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_S2RGBNIR.tif\" #>  $ s2_rgbnir_2021   : chr \"s3://esa-worldcover-s2/rgbnir/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_S2RGBNIR.tif\" #>  $ s2_ndvi_2020     : chr \"s3://esa-worldcover-s2/ndvi/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_NDVI.tif\" #>  $ s2_ndvi_2021     : chr \"s3://esa-worldcover-s2/ndvi/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_NDVI.tif\" #>  $ s2_swir_2020     : chr \"s3://esa-worldcover-s2/swir/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_SWIR.tif\" #>  $ s2_swir_2021     : chr \"s3://esa-worldcover-s2/swir/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_SWIR.tif\"  # get the Sentinel-2 RGBNIR composite for this AOI tif_file <- sub(\"s3://\", \"/vsis3/\", feat$s2_rgbnir_2021, fixed = TRUE) print(tif_file) #> [1] \"/vsis3/esa-worldcover-s2/rgbnir/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_S2RGBNIR.tif\"  # public bucket so disable request signing set_config_option(\"AWS_NO_SIGN_REQUEST\", \"YES\")  # check if file exists and get size in MB vsi_stat(tif_file) #> [1] TRUE vsi_stat(tif_file, \"size\") / (1000 * 1000) #> [1] 562.039  # copy to a local or remote filesystem, e.g., # tif_copy <- file.path(tempdir(), basename(tif_file)) # vsi_copy_file(tif_file, tif_copy, show_progress = TRUE)  # or open the dataset for reading ds <- new(GDALRaster, tif_file) ds$dim() #> [1] 12000 12000     4 ds$getMetadata(band=0, domain=\"\") #>  [1] \"algorithm_version=V2.0.0\"                                                                                                                                             #>  [2] \"AREA_OR_POINT=Area\"                                                                                                                                                   #>  [3] \"bands=Band 1: B04 (Red), Band 2: B03 (Green), Band 3: B02 (Blue), Band 4: B08 (Infrared)\"                                                                             #>  [4] \"copyright=ESA WorldCover project 2021 / Contains modified Copernicus Sentinel data (2021) processed by ESA WorldCover consortium\"                                     #>  [5] \"creation_time=2022-12-09 17:08:25.881589\"                                                                                                                             #>  [6] \"description=The ESA WorldCover Sentinel-2 median L2A (RGBNIR) composite is a color image made from images in Blue (B02), Green (B03), Red (B04) and Infrared (B08). \" #>  [7] \"license=CC-BY 4.0 - https://creativecommons.org/licenses/by/4.0/\"                                                                                                     #>  [8] \"product_crs=EPSG:4326\"                                                                                                                                                #>  [9] \"product_grid=1x1 degree tiling grid\"                                                                                                                                  #> [10] \"product_tile=N44W110\"                                                                                                                                                 #> [11] \"product_type=Sentinel-2 median L2A (RGBNIR) composite\"                                                                                                                #> [12] \"product_version=V2.0.0\"                                                                                                                                               #> [13] \"reference=https://esa-worldcover.org\"                                                                                                                                 #> [14] \"time_end=2021-12-31T23:59:59Z\"                                                                                                                                        #> [15] \"time_start=2021-01-01T00:00:00Z\"                                                                                                                                      #> [16] \"title=ESA WorldCover Sentinel-2 median L2A (RGBNIR) composite at 10m resolution for year 2021\" ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=DEFLATE\" \"INTERLEAVE=PIXEL\"    \"LAYOUT=COG\"          #> [4] \"PREDICTOR=2\"  r <- read_ds(ds, bands=c(4,1,2), out_xsize = 800, out_ysize = 800) txt <- paste0(tools::file_path_sans_ext(basename(tif_file)),               \"\\n(color infrared B8-B4-B3)\") plot_raster(r,             minmax_pct_cut = c(2, 98),             xlab = \"longitude\",             ylab = \"latitude\",             main = txt) ds$close() lyr_ynp$close() lyr_tiles$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"further-consideration-tbd","dir":"Articles","previous_headings":"","what":"Further consideration / TBD","title":"Draft Bindings to the GDAL/OGR Vector API","text":"working list potential issues design questions need consideration, determined: OGR’s Arrow C interface: Implement GDALVector::getArrowStream() (GDAL >= 3.6) GDALVector::writeArrowBatch() (GDAL >= 3.8), supported R side package nanoarrow. OGR layer geoprocessing expected moved stand-alone functions instead class methods GDALVector, implemented ogr_proc() interface.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"document-changelog","dir":"Articles","previous_headings":"","what":"Document changelog","title":"Draft Bindings to the GDAL/OGR Vector API","text":"add GDALVector::setSpatialFilter() draft class definition - set spatial filter WKT geometry (2024-03-02) add comment layer intersection example re: feature retrieval FID (2024-03-02) add arguments fields geom_column GDALVector::getFeatureSet() - optionally retrieve subset attribute fields, specify whether include geometry column(s) returned data frame (2024-03-02) return value feature writing methods FID newly created/set/deleted feature upon successful write, OGRNullFID failure (2024-03-02) add note class GDALVector re: handling 64-bit integer types determined (2024-03-02) add GDALVector::setIgnoredFields(): set fields can omitted retrieving features layer. driver supports functionality (testable using OLCIgnoreFields capability), fetch specified fields subsequent calls getFeature() / getNextFeature() thus save processing time /bandwidth. (2024-03-02) add ogr_execute_sql() dataset/schema management (2024-03-02) add GDALVector::setNextByIndex() cursor positioning (2024-03-03) add GDALVector::getSpatialFilter(): get WKT geometry currently use spatial filter, \"\" (2024-03-03) add section “consideration / TBD” (2024-03-03) ogr2ogr() ogrinfo() available 1.9.0.9080 dev (2024-03-04) add potential output vectors geos ogr pointers, wkb/wkt support {wk} (@mdsumner, 2024-03-04) add section “Contributors” (2024-03-04) add link issue 241 discussion thread (2024-03-05) OGR layer geoprocessing may stand-alone functions instead class methods TBD (2024-03-10) add link header file reference class methods implemented far prototype (2024-03-10) ogr2ogr() ogrinfo() available gdalraster 1.10.0 CRAN (2024-03-26) initial int64 support; now linking RcppInt64, importing bit64; FID OFTInteger64 fields now returned R integer64; updated examples (2024-04-06) add GDALVector::getFeature(): fetch feature FID (2024-04-06) add GDALVector class constructor spatial_filter SQL dialect arguments (2024-04-28) ogr_manage ogr_define added gdalraster dev; examples updated (2024-05-14) update draft class definition: Add read/write fields per-object settings (defaultGeomFldName, returnGeomAs wkbByteOrder). Rename method getFeatureSet() fetch(), analog DBI::dbFetch(), fetch next n features layer return data frame. (2024-07-11) update usage example recent changes gdalvector branch: defaultGeomFldName, returnGeomAs = NONE|WKT|WKT_ISO|WKB|WKB_ISO, GDALVector::fetch(), OGR attribute field types now supported (2024-07-12) add sub-headings heading “Description interface”, add specifications “Feature retrieval” “Geometry” (2024-07-13) GDALVector::testCapability() returns list named capabilities TRUE|FALSE, class method version ogr_layer_test_cap() (2024-07-21) branch gdalvector merged main (2024-07-23) added ogr_proc(), interface GDAL OGR facilities vector geoprocessing; updated “Example: layer geoprocessing” (2024-07-30) removed is_ignored feature class defintion, needed feature class / field creation (2024-09-11) feature write methods implemented #504: $createFeature(), $setFeature(), $upsertFeature(); documentation examples (online reference)[https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html] (2024-09-11) updated GDALVector class declaration draft document (2024-09-11) remove read-field GDALVector::featureTemplate needed / useful (2024-09-14)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"contributors","dir":"Articles","previous_headings":"","what":"Contributors","title":"Draft Bindings to the GDAL/OGR Vector API","text":"@goergen95 (#205) @mdsumner","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"opening-a-raster-dataset","dir":"Articles","previous_headings":"","what":"Opening a raster dataset","title":"Raster API Tutorial","text":"opening GDAL-supported data store necessary register drivers. driver supported raster format. gdalraster automatically registers drivers package loaded. raster dataset opened creating new instance GDALRaster-class passing filename access desired (read_only = TRUE default specified, read_only = FALSE open update access): error returned dataset opened (creation GDALRaster object fails). Also, note filename may actually name physical file (though usually ). interpretation driver dependent, might URL, database connection string, file name additional parameters, etc. GDALRaster C++ class exposed directly R (via RCPP_EXPOSED_CLASS) encapsulates GDAL dataset object associated raster band objects. Methods class accessed R using $ operator:","code":"library(gdalraster) #> GDAL 3.8.4 (released 2024-02-08), GEOS 3.12.1, PROJ 9.4.0  tcc_file <- system.file(\"extdata/storml_tcc.tif\", package=\"gdalraster\") ds <- new(GDALRaster, tcc_file, read_only = TRUE) ds #> C++ object of class GDALRaster #>  Driver : GeoTIFF (GTiff) #>  DSN    : /home/runner/work/_temp/Library/gdalraster/extdata/storml_tcc.tif #>  Dim    : 143, 107, 1 #>  CRS    : NAD83 / UTM zone 12N (EPSG:26912) #>  Res    : 30.000000, 30.000000 #>  Bbox   : 323476.100000, 5101872.000000, 327766.100000, 5105082.000000 str(ds) #> Reference class 'Rcpp_GDALRaster' [package \"gdalraster\"] with 3 fields #>  $ infoOptions  : chr(0)  #>  $ quiet        : logi FALSE #>  $ readByteAsRaw: logi FALSE #>  and 84 methods, of which 70 are  possibly relevant: #>    addBand, apply_geotransform, bbox, buildOverviews, clearColorTable, #>    clearStatistics, close, deleteNoDataValue, dim, fillRaster, finalize, #>    flushCache, get_block_indexing, get_pixel_line, getActualBlockSize, #>    getBlockSize, getChecksum, getColorTable, getDataTypeName, #>    getDefaultHistogram, getDefaultRAT, getDescription, getDriverLongName, #>    getDriverShortName, getFileList, getFilename, getGeoTransform, getHistogram, #>    getMaskBand, getMaskFlags, getMetadata, getMetadataDomainList, #>    getMetadataItem, getMinMax, getNoDataValue, getOffset, getOverviewCount, #>    getPaletteInterp, getProjection, getProjectionRef, getRasterColorInterp, #>    getRasterCount, getRasterXSize, getRasterYSize, getScale, getStatistics, #>    getUnitType, info, infoAsJSON, initialize, isOpen, open, pixel_extract, #>    read, res, setColorTable, setDefaultRAT, setDescription, setFilename, #>    setGeoTransform, setMetadata, setMetadataItem, setNoDataValue, setOffset, #>    setProjection, setRasterColorInterp, setScale, setUnitType, #>    show#envRefClass, write"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"getting-dataset-information","dir":"Articles","previous_headings":"","what":"Getting dataset information","title":"Raster API Tutorial","text":"described GDAL Raster Data Model, GDAL dataset contains list raster bands, pertaining area resolution. also metadata, coordinate system, georeferencing transform, size raster various information. particular common case “north ” raster without rotation shearing, georeferencing transform (see Geotransform Tutorial) takes following form 1-based indexing R: general case, affine transform. Class GDALRaster includes convenience methods case north-raster: following code retrieves additional information dataset:","code":"gt <- ds$getGeoTransform() gt[1]  # x-coordinate of upper-left corner of the upper-left pixel #> [1] 323476.1 gt[2]  # pixel width (w-e resolution) #> [1] 30 gt[3]  # 0 for north-up #> [1] 0 gt[4]  # y-coordinate of upper-left corner of the upper-left pixel #> [1] 5105082 gt[5]  # 0 for north-up #> [1] 0 gt[6]  # pixel height (n-s resolution, negative value) #> [1] -30 ds$bbox()  # xmin, ymin, xmax, ymax #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res()   # pixel width, pixel height as positive values #> [1] 30 30 # GDAL format driver ds$getDriverShortName() #> [1] \"GTiff\" ds$getDriverLongName() #> [1] \"GeoTIFF\"  # raster size in pixels, number of bands ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getRasterCount() #> [1] 1 ds$dim() #> [1] 143 107   1  # coordinate reference system as WKT string ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"26912\\\"]]\"  # origin and pixel size from the geotransform print(paste(\"Origin:\", gt[1], gt[4])) #> [1] \"Origin: 323476.1 5105082\" print(paste(\"Pixel size:\", gt[2], gt[6])) #> [1] \"Pixel size: 30 -30\""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"fetching-a-raster-band","dir":"Articles","previous_headings":"","what":"Fetching a raster band","title":"Raster API Tutorial","text":"time access raster data via GDAL done one band time. Also, metadata, block sizes, nodata values various information available per-band basis. Class GDALRaster provides methods access raster band objects dataset (numbered 1 ds$getRasterCount()) specifying band number first argument:","code":"# block size ds$getBlockSize(band = 1) #> [1] 143  57  # data type ds$getDataTypeName(band = 1) #> [1] \"Byte\"  # nodata value ds$getNoDataValue(band = 1) #> [1] 255  # min, max, mean, sd of pixel values in the band ds$getStatistics(band = 1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  0.00000 71.00000 23.69950 23.17744  # does this band have overviews? (aka \"pyramids\") ds$getOverviewCount(band = 1) #> [1] 0  # does this band have a color table? col_tbl <- ds$getColorTable(band = 1) if (!is.null(col_tbl))   head(col_tbl) #>      value red green blue alpha #> [1,]     0 255   255  255   255 #> [2,]     1 252   254  252   255 #> [3,]     2 250   253  250   255 #> [4,]     3 248   252  247   255 #> [5,]     4 245   251  245   255 #> [6,]     5 243   250  242   255"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"reading-raster-data","dir":"Articles","previous_headings":"","what":"Reading raster data","title":"Raster API Tutorial","text":"GDALRaster$read() wrapper GDALRasterBand::RasterIO() method underlying API. method automatically take care data type conversion, /sampling windowing. following code read first row data similarly sized vector. GDALRaster$read() return data R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise returned vector type double (UInt32, Float32, Float64) complex (CInt16, CInt32, CFloat32, CFloat64). returned data organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band: Writing data GDALRaster$write() similar $read() additional argument specifying vector pixel data write (arranged left right, top bottom pixel order). xoff, yoff, xsize, ysize arguments describe window raster data disk read (write). doesn’t fall tile boundaries, though access may efficient cases . Note GDAL uses memory caching algorithms raster /O improve performance. operation caching mechanism configuration cache memory size might considered scaling /O large datasets (see GDAL Block Cache). values out_xsize out_ysize describe size output buffer (R vector length out_xsize * out_ysize data read ). reading data full resolution window size (xsize, ysize). However, load reduced resolution overview, out_xsize, out_ysize set smaller window disk. $read() method perform automatic resampling necessary specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, overviews (.k.. “pyramids”) utilized /O efficiently overviews available suitable resolution. stand-alone function plot_raster() uses base R graphics display raster data read open dataset (options display subwindow, read reduced resolution overview, read multiple bands RGB data):","code":"# read the first row of pixel values ncols <- ds$getRasterXSize() rowdata <- ds$read(band = 1,                    xoff = 0,                    yoff = 0,                    xsize = ncols,                    ysize = 1,                    out_xsize = ncols,                    out_ysize = 1)  length(rowdata) #> [1] 143 typeof(rowdata) #> [1] \"integer\" head(rowdata) #> [1] 59 63 64 51 25 20 plot_raster(ds, legend = TRUE, main = \"Storm Lake Tree Canopy Cover (%)\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"closing-the-dataset","dir":"Articles","previous_headings":"","what":"Closing the dataset","title":"Raster API Tutorial","text":"Calling GDALRaster$close() result proper cleanup, flushing pending writes. Forgetting close dataset opened update mode popular format like GTiff likely result unable open afterwards.","code":"# close the dataset for proper cleanup ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"techniques-for-creating-datasets","dir":"Articles","previous_headings":"","what":"Techniques for creating datasets","title":"Raster API Tutorial","text":"New raster datasets GDAL-supported formats may created format driver supports creation. two general techniques creating datasets GDAL API: GDALDriver::CreateCopy() GDALDriver::Create(). Using CreateCopy method R involves calling stand-alone function createCopy(), passing source raster file name copied. Using Create method R involves calling stand-alone function create(), explicitly writing metadata raster data separate calls. format drivers support creating new datasets support createCopy(), support create(). function gdal_formats() lists currently configured raster formats along following read/write flags: ro - read rw - read/write, supports createCopy() rw+ - read/write/update, supports create() table GDAL raster format drivers can also consulted determine particular driver supports Create CreateCopy methods. Note number drivers read-support either creation method.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"using-createcopy","dir":"Articles","previous_headings":"","what":"Using createCopy()","title":"Raster API Tutorial","text":"createCopy() simple use information collected source dataset. includes argument passing list format specific creation options. can used copy raster different format, /change options block size arrangement, compression, various metadata, etc. following code copies multi-band raster FARSITE v.4 LCP format (basically raw format without support compression nodata values) LZW-compressed GeoTiff: Note createCopy() method return_obj = TRUE returns writable dataset, must closed properly complete writing flushing dataset disk. createCopy() also optional strict argument defaults FALSE indicating call proceed without fatal error even destination dataset created exactly match input dataset. might output format support pixel datatype input dataset, destination support writing georeferencing instance. Information format specific creation options can obtained function getCreationOptions(). default, function lists available creation options format. Output can also filtered specific options:","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- file.path(tempdir(), \"storml_lndscp.tif\") ds <- createCopy(format = \"GTiff\",                  dst_filename = tif_file,                  src_filename = lcp_file,                  options = \"COMPRESS=LZW\",                  return_obj = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # band = 0 for dataset-level metadata: ds$getMetadata(band = 0, domain = \"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\"  # set nodata value for all bands for (band in 1:ds$getRasterCount())   ds$setNoDataValue(band, -9999)  # band 2 of an LCP file is slope degrees ds$getStatistics(band = 2, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  0.00000 54.00000 22.93012 12.51330 ds$close()  vsi_stat(lcp_file, \"size\") #> integer64 #> [1] 252132 vsi_stat(tif_file, \"size\") #> integer64 #> [1] 113942 getCreationOptions(\"GTiff\", \"COMPRESS\") #> $COMPRESS #> $COMPRESS$type #> [1] \"string-select\" #>  #> $COMPRESS$description #> [1] NA #>  #> $COMPRESS$default #> [1] NA #>  #> $COMPRESS$values #>  [1] \"NONE\"         \"LZW\"          \"PACKBITS\"     \"JPEG\"         \"CCITTRLE\"     #>  [6] \"CCITTFAX3\"    \"CCITTFAX4\"    \"DEFLATE\"      \"LZMA\"         \"ZSTD\"         #> [11] \"WEBP\"         \"LERC\"         \"LERC_DEFLATE\" \"LERC_ZSTD\"  getCreationOptions(\"GTiff\", \"SPARSE_OK\") #> $SPARSE_OK #> $SPARSE_OK$type #> [1] \"boolean\" #>  #> $SPARSE_OK$description #> [1] \"Should empty blocks be omitted on disk?\" #>  #> $SPARSE_OK$default #> [1] \"FALSE\" #>  #> $SPARSE_OK$values #> NULL"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"using-create","dir":"Articles","previous_headings":"","what":"Using create()","title":"Raster API Tutorial","text":"create() can used create new raster dataset manually. function can also take list creation options described createCopy(), raster size, number bands band type must provided explicitly: dataset successfully created, appropriate metadata raster data must written file. includes vary according usage, simple case projection, geotransform raster data covered :","code":"new_file <- file.path(tempdir(), \"newdata.tif\") ds <- create(format = \"GTiff\",              dst_filename = new_file,              xsize = 143,              ysize = 107,              nbands = 1,               dataType = \"Int16\",              return_obj = TRUE) # EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE  gt <- c(323476.1, 30, 0, 5105082.0, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE  ds$setNoDataValue(band = 1, -9999) #> [1] TRUE ds$fillRaster(band = 1, -9999, 0)  # ...  # close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Raster API Tutorial","text":"gdalraster provides two additional functions creating raster datasets: rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value. rasterToVRT() creates virtual raster dataset (VRT) derived source raster options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter. Wrapper functions several GDAL utilities, including translate() warp(), also available. See package overview full summary functionality provided GDAL API bindings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Raster API Tutorial","text":"example datasets National Land Cover Database (NLCD) Tree Canopy Cover (TCC v2021.4) USDA Forest Service (https://data.fs.usda.gov/geodata/rastergateway/treecanopycover/), multi-band FARSITE landscape file describing terrain, vegetation wildland fuels LANDFIRE Program (LF 2020 version, https://landfire.gov/).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"format-of-gdal-rat","dir":"Articles","previous_headings":"","what":"Format of GDAL RAT","title":"Raster Attribute Tables","text":"column raster attribute table name, type (integer, floating point string), GDALRATFieldUsage. field usage distinguishes columns particular understood purposes (color, histogram count, class name), columns purposes understood library (long labels, ancillary attributes, etc). general case, row field indicating minimum pixel value falling category, field indicating maximum pixel value. GDAL API, indicated usage values GFU_Min GFU_Max (GDALRATFieldUsage enumeration constants). vignette focus particular common case row discrete pixel value. case, single column usage GFU_MinMax (indicating class value) used instead separate min max columns. table represented R data frame column attribute \"GFU\" containing field usage, e.g., \"MinMax\" (case-sensitive string). field usage types include \"PixelCount\" (GFU_PixelCount, histogram pixel count), \"Name\" (GFU_Name, class name), \"Red\" (GFU_Red, class color 0-255), \"Green\" (GFU_Green, class color 0-255), \"Blue\" (GFU_Blue, class color 0-255), \"Generic\" (GFU_Generic, general purpose field). raster attribute table can used thematic athematic (continuous) data. defined R attribute data frame named \"GDALRATTableType\" value either \"thematic\" \"athematic\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"readbuildset-attribute-tables","dir":"Articles","previous_headings":"","what":"Read/build/set attribute tables","title":"Raster Attribute Tables","text":"gdalraster can read, build set Raster Attribute Tables via data frame. object class GDALRaster method $getDefaultRAT() read existing RAT, method $setDefaultRAT() set RAT data frame. stand-alone function buildRAT() scans raster obtain set unique pixel values counts, optionally joins additional columns passed data frame, returns data frame appropriate metadata automatically assigned (.e., R attributes assigned data frame columns define usage GDAL RAT, passing GDALRaster$setDefaultRAT()):","code":"library(gdalraster) #> GDAL 3.8.4 (released 2024-02-08), GEOS 3.12.1, PROJ 9.4.0  # LANDFIRE Existing Vegetation Type (EVT) evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\")  # make a copy to modify f <- paste0(tempdir(), \"/\", \"storml_evt_tmp.tif\") file.copy(evt_file,  f) #> [1] TRUE ds <- new(GDALRaster, f, read_only=FALSE) ds$getDefaultRAT(band=1) #> NULL  # get the full attribute table for LANDFIRE EVT from its CSV file evt_csv <- system.file(\"extdata/LF20_EVT_220.csv\", package=\"gdalraster\") evt_df <- read.csv(evt_csv) nrow(evt_df) #> [1] 860 head(evt_df) #>   VALUE                                            EVT_NAME EVT_LF EVT_PHYS   R #> 1 -9999                                         Fill-NoData   <NA>     <NA> 255 #> 2  7008                          North Pacific Oak Woodland   Tree Hardwood 203 #> 3  7009 Northwestern Great Plains Aspen Forest and Parkland   Tree Hardwood 192 #> 4  7010       Northern Rocky Mountain Western Larch Savanna   Tree  Conifer 180 #> 5  7011            Rocky Mountain Aspen Forest and Woodland   Tree Hardwood 192 #> 6  7012       Rocky Mountain Bigtooth Maple Ravine Woodland   Tree Hardwood 171 #>     G   B      RED GREEN     BLUE #> 1 255 255 1.000000     1 1.000000 #> 2 255 171 0.796078     1 0.670588 #> 3 255 138 0.752941     1 0.541176 #> 4 255 148 0.705882     1 0.580392 #> 5 255 138 0.752941     1 0.541176 #> 6 255 138 0.670588     1 0.541176  # keep just the R, G, B fields (0-255) and drop RED, GREEN, BLUE evt_df <- evt_df[,1:7]  # build a RAT for the EVT raster, attaching additional columns from evt_df tbl <- buildRAT(ds,                 table_type = \"thematic\",                 na_value = -9999,                 join_df = evt_df) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done.  nrow(tbl) #> [1] 24 head(tbl) #>   VALUE COUNT                                                          EVT_NAME #> 1 -9999   876                                                       Fill-NoData #> 2  7011    28                          Rocky Mountain Aspen Forest and Woodland #> 3  7046  4564           Northern Rocky Mountain Subalpine Woodland and Parkland #> 4  7050   570                              Rocky Mountain Lodgepole Pine Forest #> 5  7055   889 Rocky Mountain Subalpine Dry-Mesic Spruce-Fir Forest and Woodland #> 6  7056   304 Rocky Mountain Subalpine Mesic-Wet Spruce-Fir Forest and Woodland #>   EVT_LF EVT_PHYS   R   G   B #> 1   <NA>     <NA> 255 255 255 #> 2   Tree Hardwood 192 255 138 #> 3   Tree  Conifer 191 255 233 #> 4   Tree  Conifer 163 240 219 #> 5   Tree  Conifer 236 252 204 #> 6   Tree  Conifer 236 252 204  # attributes on the returned data frame and its columns define RAT metadata attr(tbl, \"GDALRATTableType\") #> [1] \"thematic\" attributes(tbl$VALUE)     # GFU_MinMax for column of discrete pixel values #> $GFU #> [1] \"MinMax\" attributes(tbl$COUNT)     # pixel counts #> $GFU #> [1] \"PixelCount\" attributes(tbl$EVT_NAME)  # the class names #> $GFU #> [1] \"Name\" attributes(tbl$EVT_LF)    # ancillary attribute #> $GFU #> [1] \"Generic\" attributes(tbl$EVT_PHYS)  # ancillary attribute #> $GFU #> [1] \"Generic\" attributes(tbl$R)         # red 0-255 #> $GFU #> [1] \"Red\" attributes(tbl$G)         # green 0-255 #> $GFU #> [1] \"Green\" attributes(tbl$B)         # blue 0-255 #> $GFU #> [1] \"Blue\"  # set as default RAT on the EVT raster ds$setDefaultRAT(band=1, tbl) #> [1] TRUE ds$flushCache()  # it can now be read from the raster dataset rm(tbl) tbl <- ds$getDefaultRAT(band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl) #> [1] 24"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"display-attribute-tables","dir":"Articles","previous_headings":"","what":"Display attribute tables","title":"Raster Attribute Tables","text":"attribute table RGB columns can passed gdalraster::plot_raster() color table (columns VALUE, R, G, B):  function displayRAT() generates nicely formatted table display. Colors shown RAT contains RGB columns: displayRAT() returns object class \"gt_tbl\". table object can modified using functions gt package.","code":"bb <- ds$bbox() #| fig.alt: > #|   A plot of LANDFIRE Existing Vegetation Type (EVT) for an area of interest #|   named Storm Lake which is used for several example datasets in package #|   gdalraster. A color map has been to the pixels using color values provided #|   by LANDFIRE in the CSV attribute table for the EVT layer. plot_raster(data = ds,             col_tbl = tbl[,c(1,6:8)],             maxColorValue = 255,             interpolate = FALSE,             main = \"Storm Lake LANDFIRE EVT\") displayRAT(tbl, title = \"Raster Attribute Table for Storm Lake EVT\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"using-in-qgis","dir":"Articles","previous_headings":"","what":"Using in QGIS","title":"Raster Attribute Tables","text":"QGIS since 3.30 includes extensive support Raster Attribute Tables. QGIS < 3.30, Raster Attribute Table Plugin can used edit display RATs discrete rasters using paletted/unique-values renderer (QGIS-style classification arbitrary RAT columns). plugin enabled, “Open Attribute Table” can selected right-clicking raster layer associated RAT. LANDFIRE EVT layer modified , classifying EVT_NAME generates following display: LANDFIRE EVT Raster Attribute Table QGIS Plugin","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Raster Attribute Tables","text":"Documentation gdalraster::buildRAT() GDALRasterAttributeTable Class Reference Raster Attribute Table QGIS GUI (since QGIS 3.30; examples different use cases workflows) Raster Attribute Table QGIS Plugin (QGIS < 3.30) Package gt","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Raster Attribute Tables","text":"example dataset Existing Vegetation Type (EVT) LANDFIRE Program (LF 2020 version, https://landfire.gov/). Map units based NatureServe Ecological Systems.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"single-band-grayscale-or-color-ramp","dir":"Articles","previous_headings":"","what":"Single-band grayscale or color ramp","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"lf_elev_220_mt_hood_utm.tif\") ds <- new(GDALRaster, f)  # gray plot_raster(ds, legend=TRUE, main=\"Mount Hood elevation (m)\") elev_pal <- c(\"#00A60E\",\"#63C600\",\"#E6E600\",\"#E9BD3B\",\"#ECB176\",\"#EFC2B3\",\"#F2F2F2\") ramp <- scales::colour_ramp(elev_pal, alpha=FALSE)  plot_raster(ds, legend=TRUE, col_map_fn=ramp, main=\"Mount Hood elevation (m)\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"rgb","dir":"Articles","previous_headings":"","what":"RGB","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\") ds <- new(GDALRaster, f)  # passing a vector of pixel values rather than the open dataset r <- read_ds(ds, bands=c(7,5,4)) ds$close()  # normalizing to ranges derived from the full Landsat scene (2-98 percentiles) plot_raster(r,             minmax_def=c(7551,7679,7585,14842,24997,12451),             main=\"Mount Hood July 2022 Landsat 7-5-4 (SWIR)\"            )"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"color-table","dir":"Articles","previous_headings":"","what":"Color table","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"lf_fbfm40_220_mt_hood_utm.tif\") ds <- new(GDALRaster, f) dm <- ds$dim() print(paste(\"Size is\", dm[1], \"x\",  dm[2], \"x\", dm[3])) #> [1] \"Size is 1013 x 799 x 1\"  # using the CSV attribute table distributed by LANDFIRE fbfm_csv <- system.file(\"extdata/LF20_F40_220.csv\", package=\"gdalraster\") vat <- read.csv(fbfm_csv) head(vat) #>   VALUE FBFM40   R   G   B      RED    GREEN     BLUE #> 1    91    NB1 104 104 104 0.407843 0.407843 0.407843 #> 2    92    NB2 225 225 225 0.882353 0.882353 0.882353 #> 3    93    NB3 255 237 237 1.000000 0.929412 0.929412 #> 4    98    NB8   0  14 214 0.000000 0.054902 0.839216 #> 5    99    NB9  77 110 112 0.301961 0.431373 0.439216 #> 6   101    GR1 255 235 190 1.000000 0.921569 0.745098 vat <- vat[,c(1,6:8)]  # read at reduced resolution for display plot_raster(ds, xsize=dm[1] / 2, ysize=dm[2] / 2,             col_tbl=vat, interpolate=FALSE,             main=\"LANDFIRE surface fuel class (FBFM40)\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"axis-labels","dir":"Articles","previous_headings":"","what":"Axis labels","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"bl_mrbl_ng_jul2004_rgb_720x360.tif\") ds <- new(GDALRaster, f) srs_is_projected(ds$getProjectionRef()) #> [1] FALSE r <- read_ds(ds) ds$close()  plot_raster(r,             xlab=\"longitude\", ylab=\"latitude\",             main=\"NASA Earth Observatory Blue Marble July 2004\"            )"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Vector API Overview","text":"Beginning version 2.0, gdalraster includes bindings substantial subset GDAL Vector API. vector bindings provide R implementation GDAL Vector Data Model. Readers encouraged review document background underlying object model relates usage API gdalraster. prefix OGR used GDAL class names, command-line utilities, etc., refer vector-specific components library. gdalraster, “ogr” used throughout documentation prefix function names, consistent style source library. also certain amount unification raster vector APIs GDAL. gdalraster, also refer “GDAL Vector API” use GDALVector class name. support vector API, gdalraster 2.0 builds already existing bindings portions GDAL’s Spatial Reference System Geometry APIs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"Vector API Overview","text":"implementation GDAL’s Raster Vector Data Models, gdalraster intended direct alternative existing R packages sf terra primarily implement higher-level analytical data models. gdalraster primarily focused API-level bindings, attempting expose underlying C++ library R. direct access GDAL’s /O capabilities may benefit workflows deal source data provided continuum ranging local storage -memory formats database servers cloud systems, often involving various compression formats, SQL dialects, etc. Modularized, low-level access GDAL/OGR functionality interest R developers creating higher-level interfaces, analytical data models may designed use cases mind. API bindings facilitate code translation reuse can benefit hybrid environments GDAL used multiple languages. Long-term stability bindings library level desirable production scenarios, major goal package. intended gdalraster complement interoperate within R’s extensive evolving spatial ecosystem.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"vector-api-components","dir":"Articles","previous_headings":"","what":"Vector API components","title":"Vector API Overview","text":"section describes organization vector components gdalraster, linking package documentation extended text specific topics.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"core-bindings","dir":"Articles","previous_headings":"Vector API components","what":"Core bindings","title":"Vector API Overview","text":"Core functionality vector provided exposed C++ class GDALVector, along set stand-along functions ogr_ prefix.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"class-gdalvector","dir":"Articles","previous_headings":"Vector API components > Core bindings","what":"Class GDALVector","title":"Vector API Overview","text":"GDALVector C++ class exposed R via Rcpp modules. encapsulates single OGRLayer GDALDataset contains . object class GDALVector persists open connection dataset, exposes methods : retrieve layer information set attribute spatial filters set ignored fields/selected fields traverse read feature data traditional row-based cursor fetch full feature set return data frame fetch progressively batches n features time read via column-oriented ArrowArrayStream write new features layer upsert edit/overwrite existing features delete perform operations within transactions GDALVector object typically generated call new() also returned certain ogr_*() functions. documentation ?GDALVector gives full list available methods Usage section, along descriptions Details. Methods class accessed using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"ogr-stand-alone-functions","dir":"Articles","previous_headings":"Vector API components > Core bindings","what":"OGR stand-alone functions","title":"Vector API Overview","text":"Several stand-alone ogr_*() functions grouped documentation topics ?ogr_manage ?ogr_define. ogr_manage functions can used : create new vector datasets scratch test existence datasets, layers fields test dataset layer capabilities create new layers existing dataset delete layers create new attribute geometry fields existing layer rename delete fields edit data SQL statements ogr_define provides documentation helper functions defining feature classes. OGR feature class definition (.k.. layer definition) modeled R named list containing zero attribute field definitions, along one geometry field definitions. Specifications list structures definitions given ?ogr_define. associated helper functions make easy create new layer definitions scratch modify existing definition. layer definition convenient required creating new vector dataset, new layer within existing dataset, using ogr_ds_create() / ogr_layer_create(). OGR facilities vector geoprocessing available ogr_proc(). function can perform following GIS overlay operations: Intersection, Union, SymDifference, Identity, Update, Clip Erase (https://en.wikipedia.org/wiki/Vector_overlay). ogr_proc() basically R port command-line utility ogr_layer_algebra included GDAL Python bindings. cases, interfaces library functions OGR C++ API. ogrinfo() ogr2ogr(), provide R wrappers GDAL command-line utilities ogrinfo ogr2ogr. functions support command-line arguments described GDAL documentation, providing powerful set capabilities obtaining information OGR-supported data source, converting vector data file formats, potentially editing data SQL statements. ogr_reproject() convenience wrapper around ogr2ogr() reprojecting vector layers user friendly interface.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"spatial-reference-systems","dir":"Articles","previous_headings":"Vector API components > Supporting APIs","what":"Spatial Reference Systems","title":"Vector API Overview","text":"Bindings subset GDAL’s Spatial Reference System API provided set stand-alone srs_*() functions. support conversion spatial reference definitions various formats OGC Well Known Text (WKT) representation (e.g., EPSG codes, well known names NAD27, NAD83, WGS84, etc., PROJ.4 definitions, PROJJSON, others, well different versions OGC WKT, see ?srs_convert). Functions ?srs_query topic provide various information given SRS definition, support testing definitions equality.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"geometry","dir":"Articles","previous_headings":"Vector API components > Supporting APIs","what":"Geometry","title":"Vector API Overview","text":"Bindings significant subset GDAL’s Geometry API implemented set functions prefixed g_*(). Many functions built GEOS library (.e., use GEOS via GDAL headers). geometry functions offer flexibility allowing input geometries given either single WKT string, character vector WKT strings, single raw vector containing WKB, list WKB raw vectors. Output geometries WKB format default, WKT can also requested. convenience function g_wk2wk() convert input one accordingly. factory functions g_create() g_add_geom() support creating basic geometry types point data (vertices), building container geometry types sub-geometries. capabilities geometry bindings include: inspection (see ?g_query) binary predicates (see ?g_binary_pred) binary operations (see ?g_binary_op) unary operations (e.g., g_buffer(), g_simplify()) measurements (see ?g_measures) miscellaneous utilities (e.g., g_coords(), g_make_valid(), g_swap_xy(), g_transform()) Convenience functions working bounding boxes also provided (e.g., convert /WKT, intersection/union, bbox_transform()).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"virtual-systems-interface","dir":"Articles","previous_headings":"Vector API components > Supporting APIs","what":"Virtual Systems Interface","title":"Vector API Overview","text":"Bindings GDAL’s Virtual Systems Interface (VSI) implement standard file system operations abstracted URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files, well “regular” local file systems. provides single interface operating file system objects, works storage backend. vsi_*() functions general utility limited operating spatial data sources. Class VSIFile implements bindings GDAL VSIVirtualHandle API, providing analogs Standard C file /O functions operate VSI file systems (seek(), tell(), read(), write(), etc.)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"general-data-management","dir":"Articles","previous_headings":"Vector API components > Supporting APIs","what":"General data management","title":"Vector API Overview","text":"Existing data management functions operate raster vector data sources include addFilesInZip() (supporting create/append potentially Seek-Optimized ZIP file), deleteDataset(), identifyDriver() inspectDataset().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"workflow-considerations","dir":"Articles","previous_headings":"","what":"Workflow considerations","title":"Vector API Overview","text":"Creation new vector datasets, schema modification existing datasets, performed ogr_*() stand-alone functions. “one-” operations attempt open dataset update access, perform modifications, close dataset. Objects class GDALVector used obtaining layer information reading/writing feature data. GDALVector object provides persistent connection layer vector dataset contains . , instantiated, GDALVector object represents live connection dataset $close() method called. connection may read-(default), may update access allowing insert new features, modifying exiting features deleting features. Currently, class GDALVector provide methods modifying layer schema. recommended instantiate new GDALVector object layer already open update access (.e., read_only = FALSE). Likewise, potential modifications layer schema using ogr_*() management functions done prior instantiating GDALVector object layer. Relational database management systems (RDBMSs, e.g., GPKG / SQLite, PostgreSQL / PostGIS) generally support multiple connections including concurrent reads (e.g., multiple instances GDALVector reading different layers). also possible one GDALVector objects instantiated RDBMS-based layers read access, another GDALVector object performs write operations different layer database. Database locking mechanisms write operations specific driver underlying RDBMS (see, e.g., SQLite Configuration Options Performance Hints).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"data-retrieval","dir":"Articles","previous_headings":"Workflow considerations","what":"Data retrieval","title":"Vector API Overview","text":"GDALVector object supports traditional cursor-based traversal features (rows) layer, optionally, column-oriented retrieval via Apache Arrow C stream interface (GDAL >= 3.6). Data retrieval may performed vector layer full, layer attribute /spatial filters applied, layer defined result set SQL statement executed underlying data source. OGR methods retrieve single feature (.e., $getFeature(), $getNextFeature()) return data named list fields values. GDALVector also provides $fetch() method retrieve batch n features current cursor position return data frame. $fetch() method analog DBI::dbFetch() essentially identical calling semantics. Specifying n = -1 n = Inf retrieve features beginning (honoring spatial attribute filters may effect). Currently, gdalraster implements minimal S3 class interfaces R objects containing returned feature data. single feature returned $getFeature()/$getNextFeature() list object carrying \"OGRFeature\" class attribute. data frame returned $fetch() carries \"OGRFeatureSet\" class attribute. S3 methods provided print() plot() generics convenience examining output. Otherwise, currently S3 classes geometries geometry columns, concept “sticky” geometry implemented package sf, automatic propagation coordinate reference systems. S3 interfaces may expand future versions, gdalraster leans toward minimalism use simple, lightweight objects holding raw data.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"interoperability","dir":"Articles","previous_headings":"Workflow considerations","what":"Interoperability","title":"Vector API Overview","text":"$fetch() method GDALVector object returns geometries list column WKB raw vectors default. Geometry API functions (g_*()) also operate default lists WKB raw vectors. Representation geometries WKB compact performant, seamlessly integrates parsing, conversion, manipulation plotting functions package wk (gdalraster dependency vector plotting, currently used g_coords()). $getArrowStream() method GDALVector object allows retrieving data column-oriented memory format. exposes ArrowArrayStream layer nanoarrow_array_stream object. nanoarrow package provides functionality consume array stream import R data structures (generally column oriented). nanoarrow provides helpers facilitate zero-copy data transfer among R bindings libraries implementing Arrow C data interface. possible pass nanoarrow objects many functions arrow package. nanoarrow objects also integrate extension types implemented geoarrow package. data frame returned $fetch() method GDALVector object (.e., \"OGRFeatureSet\") can converted sf data frame sf::st_sf(). value crs argument can obtained method $getSpatialRef() GDALVector object data read (assuming subsequent transformation geometries performed).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"data-type-specifications","dir":"Articles","previous_headings":"","what":"Data type specifications","title":"Vector API Overview","text":"OGR field types returned following R data types. R currently lacks native 64-bit integer type. Support 64-bit integer values R provided bit64 package (represented numeric values carrying \"integer64\" class attribute). OGR NULL values returned type-specific NA (.e., NA, NA_integer_, NA_integer64_, NA_real_, NA_character_). retrieving batch features data frame (\"OGRFeatureSet\"), field types contained data frame list column indicated: OFTInteger: integer value OFTInteger subtype OFSTBoolean: logical value OFTIntegerList: vector integer (list column) OFTInteger64: numeric value carrying \"integer64\" class attribute OFTInteger64 subtype OFSTBoolean: logical value OFTInteger64List: vector bit64::integer64 (list column) OFTReal: numeric value OFTRealList: vector numeric (list column) OFTString: character string OFTStringList: vector character strings (list column) OFTDate: numeric value class \"Date\" OFTDateTime: numeric value class \"POSIXct\" (millisecond accuracy) OFTTime: character string (\"HH:MM:SS\") OFTBinary: raw vector (list column, NULL entries OGR NULL values) default, geometries returned WKB raw vectors data frame list column (NULL entries OGR NULL geometries). per-object setting $returnGeomAs can also set one \"WKB_ISO\", \"WKT\", \"WKT_ISO\", \"NONE\". Omitting geometries (e.g., setting lyr$returnGeomAs <- \"NONE\") may beneficial performance memory usage access feature attributes required. information 64-bit integer support using bit64 package, see ?bit64::integer64 web version https://bit64.r-lib.org/reference/bit64-package.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"code-examples","dir":"Articles","previous_headings":"","what":"Code examples","title":"Vector API Overview","text":"Parentheses around statements used throughout examples shortcut display assigned values. system.file() command used obtain path package sample files; needed typical usage.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"inspect-data-sources","dir":"Articles","previous_headings":"Code examples","what":"Inspect data sources","title":"Vector API Overview","text":"Data sources can files, relational database management systems, directories many files, even remote web services depending format driver used. However, data source name (DSN) always single string might file path, database connection string, URL, etc. following examples use GeoPackage file included gdalraster. file ynp_features.gpkg compressed using SOZip read directly .zip archive without decompressing first. prefix added file path (/vsizip/ case) specifies GDAL Virtual File System handler. file system handler provides access less standard file types -memory, compressed (.zip, .gz, .tar, .tar.gz), encrypted, standard input output (STDIN, STDOUT), files stored network (publicly accessible, private buckets commercial cloud services), etc. possible chain multiple file system handlers. /vsicurl/ prefix specifies file system handler allows --fly random reading files available web protocols, without prior download entire file. example, zip file residing web server instead local file system accessed path like: Support SOZip available GDAL >= 3.7. function vsi_get_file_metadata() can used validate SOZip file obtain compression information. Otherwise, SOZip fully backward compatible works regular .zip file. inspectDataset() returns information format content data source may contain raster /vector data. OGR functions can also used inspect vector data source. ogrinfo() requires GDAL >= 3.7. accepts optional character vector containing arguments supported ogrinfo command-line utility included GDAL.","code":"library(gdalraster)  # get path to the Yellowstone National Park sample dataset f <- system.file(\"extdata/ynp_features.zip\", package = \"gdalraster\")  # add the VSI prefix  (zf <- file.path(\"/vsizip\", f)) #> [1] \"/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip\"  # list files in the zip archive vsi_read_dir(zf) #> [1] \"readme_lf_forest_canopy_cover.txt\" \"readme_lf_operational_roads.txt\"   #> [3] \"readme_ynp_vector_features.txt\"    \"ynp_bnd_metadata.html\"             #> [5] \"ynp_features.gpkg\"  # VSI path to the GPKG file (zf_gpkg <- file.path(zf, \"ynp_features.gpkg\")) #> [1] \"/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg\" /vsizip//vsicurl/https://www.example.com/path/to/file.zip if (gdal_version_num() >= gdal_compute_version(3, 7, 0)) {   cat(\"SOZip metadata for ynp_features.gpkg:\\n\")   vsi_get_file_metadata(zf_gpkg, domain = \"ZIP\") |> print() } else {   cat(\"SOZip support requires GDAL >= 3.7\\n\") } #> SOZip metadata for ynp_features.gpkg: #> $START_DATA_OFFSET #> [1] \"5188\" #>  #> $COMPRESSION_METHOD #> [1] \"8 (DEFLATE)\" #>  #> $COMPRESSED_SIZE #> [1] \"532555\" #>  #> $UNCOMPRESSED_SIZE #> [1] \"1220608\" #>  #> $SOZIP_FOUND #> [1] \"YES\" #>  #> $SOZIP_VERSION #> [1] \"1\" #>  #> $SOZIP_OFFSET_SIZE #> [1] \"8\" #>  #> $SOZIP_CHUNK_SIZE #> [1] \"32768\" #>  #> $SOZIP_START_DATA_OFFSET #> [1] \"537801\" #>  #> $SOZIP_VALID #> [1] \"YES\" inspectDataset(zf_gpkg) #> $format #> [1] \"GPKG\" #>  #> $supports_raster #> [1] TRUE #>  #> $contains_raster #> [1] TRUE #>  #> $supports_subdatasets #> [1] TRUE #>  #> $contains_subdatasets #> [1] TRUE #>  #> $subdataset_names #> [1] \"GPKG:/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg:operational_roads\"   #> [2] \"GPKG:/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg:forest_canopy_cover\" #>  #> $supports_vector #> [1] TRUE #>  #> $contains_vector #> [1] TRUE #>  #> $layer_names #> [1] \"ynp_bnd\"            \"roads\"              \"points_of_interest\" # test for existence of a vector data source with at least read access ogr_ds_exists(zf_gpkg) #> [1] TRUE # note that update of an existing zipped .gpkg file is not supported ogr_ds_exists(zf_gpkg, with_update = TRUE) #> [1] FALSE  # list the vector layers ogr_ds_layer_names(zf_gpkg) #> [1] \"ynp_bnd\"            \"roads\"              \"points_of_interest\" # list the layers in a data source ogrinfo(zf_gpkg) #> INFO: Open of `/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg' #>       using driver `GPKG' successful. #> 1: ynp_bnd (Polygon) #> 2: roads (Line String) #> 3: points_of_interest (Point)  # detailed information about a specific layer ogrinfo(zf_gpkg, \"ynp_bnd\", cl_arg = c(\"-geom=SUMMARY\", \"-wkt_format\", \"WKT2\")) #> INFO: Open of `/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg' #>       using driver `GPKG' successful. #>  #> Layer name: ynp_bnd #> Metadata: #>   DBF_DATE_LAST_UPDATE=1998-01-25 #>   DESCRIPTION=Yellowstone National Park boundary, 1:2,000,000 #> Geometry: Polygon #> Feature Count: 1 #> Extent: (-111.154305, 44.132448) - (-109.833929, 45.107849) #> Layer SRS WKT: #> GEOGCRS[\"NAD83\", #>     DATUM[\"North American Datum 1983\", #>         ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>             LENGTHUNIT[\"metre\",1]]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Geodesy.\"], #>         AREA[\"North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\"], #>         BBOX[14.92,167.65,86.45,-40.73]], #>     ID[\"EPSG\",4269]] #> Data axis to CRS axis mapping: 2,1 #> FID Column = fid #> Geometry Column = geom #> admn_type: String (28.0) #> state_fips: Integer (0.0) #> state_name: String (20.0) #> sub_region: String (7.0) #> OGRFeature(ynp_bnd):1 #>   admn_type (String) = Park, monument, etc. #>   state_fips (Integer) = 56 #>   state_name (String) = Wyoming #>   sub_region (String) = Mtn #>   POLYGON : 296 points"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"manage-data-sources-and-schemas","dir":"Articles","previous_headings":"Code examples","what":"Manage data sources and schemas","title":"Vector API Overview","text":"copy .gpkg file zip archive -memory file writable, make several modifications. /vsimem/ file handler allows block memory treated files. useful temporary storage generally fast access. code also demonstrates testing certain defined capabilities dataset layer attempting perform modifications. needed cases might used code required handle input datasets general way. simple example illustration, populate new field flag geothermal features. read back modified data source need instantiate objects class GDALVector. detail working GDALVector objects given examples data retrieval. now, note function ogr_execute_sql() returns object class GDALVector SQL statements return result set.  clean , $close() method called layer object opened ogr_execute_sql(). also delete temporary -memory file.","code":"# copy ynp_features.gpkg from the zip file to an in-memory file mem_gpkg <- \"/vsimem/tmp/ynp_features.gpkg\" ogr2ogr(zf_gpkg, mem_gpkg)  vsi_read_dir(\"/vsimem/tmp\") #> [1] \"ynp_features.gpkg\"  # confirm it's writable ogr_ds_exists(mem_gpkg, with_update = TRUE) #> [1] TRUE  rd_layer <- \"roads\"  # rename a layer (requires GDAL >= 3.5) if (gdal_version_num() < gdal_compute_version(3, 5, 0)) {   message(\"ogr_layer_rename() requires GDAL >= 3.5\") } else if (ogr_layer_test_cap(mem_gpkg, rd_layer)$Rename) {   ogr_layer_rename(mem_gpkg, rd_layer, \"roads2\")   rd_layer <- \"roads2\" } else {   message(\"layer does not have 'Rename' capability\") }  ogr_ds_layer_names(mem_gpkg) #> [1] \"ynp_bnd\"            \"roads2\"             \"points_of_interest\"  # delete a layer if (ogr_ds_test_cap(mem_gpkg)$DeleteLayer) {   ogr_layer_delete(mem_gpkg, rd_layer) } else {   message(\"dataset does not have 'DeleteLayer' capability\") } #> [1] TRUE  ogr_ds_layer_names(mem_gpkg) #> [1] \"ynp_bnd\"            \"points_of_interest\"  # manage fields on a layer ogr_layer_field_names(mem_gpkg, \"points_of_interest\") #> [1] \"poiname\"    \"poitype\"    \"createdate\" \"editdate\"   \"geom\"  # delete a field if (ogr_layer_test_cap(mem_gpkg, \"points_of_interest\")$DeleteField) {   ogr_field_delete(mem_gpkg, \"points_of_interest\", \"createdate\") } else {   message(\"layer does not have 'DeleteField' capability\") } #> [1] TRUE  # rename fields if (ogr_layer_test_cap(mem_gpkg, \"points_of_interest\")$AlterFieldDefn) {   ogr_field_rename(mem_gpkg, \"points_of_interest\", \"poiname\", \"poi_name\")   ogr_field_rename(mem_gpkg, \"points_of_interest\", \"poitype\", \"poi_type\") } else {   message(\"layer does not have 'AlterFieldDefn' capability\") } #> [1] TRUE # create a new field if (ogr_layer_test_cap(mem_gpkg, \"points_of_interest\")$CreateField) {   ogr_field_create(mem_gpkg, \"points_of_interest\",                    fld_name = \"is_geothermal\",                    fld_type = \"OFTInteger\",                    fld_subtype = \"OFSTBoolean\") } else {   message(\"layer does not have 'CreateField' capability\") } #> [1] TRUE  # edit data with SQL sql <- \"UPDATE points_of_interest SET is_geothermal =            CASE             WHEN poi_type IN ('Basin', 'Geyser') THEN TRUE             ELSE FALSE           END\" ogr_execute_sql(mem_gpkg, sql) #> info: open dataset successful on DSN: #>   '/vsimem/tmp/ynp_features.gpkg'  ogr_layer_field_names(mem_gpkg, \"points_of_interest\") #> [1] \"poi_name\"      \"poi_type\"      \"editdate\"      \"is_geothermal\" #> [5] \"geom\" # read and display the geothermal features sql <- \"SELECT poi_name, geom           FROM points_of_interest             WHERE is_geothermal = TRUE\" (lyr <- ogr_execute_sql(mem_gpkg, sql)) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /vsimem/tmp/ynp_features.gpkg #>  Layer  : SELECT poi_name, geom #>           FROM points_of_interest #>             WHERE is_geothermal = TRUE #>  CRS    : NAD83 (EPSG:4269) #>  Geom   : POINT  lyr$getFeatureCount() #> [1] 187  # retrieve all features in the result set (cf. DBI::dbFetch()) feat_set <- lyr$fetch(-1) head(feat_set) #> OGR feature set #>   FID              poi_name                           geom #> 1   0              Big Cone WKB POINT: raw 01 01 00 00 ... #> 2   1         Surprise Pool WKB POINT: raw 01 01 00 00 ... #> 3   2        The Mudkettles WKB POINT: raw 01 01 00 00 ... #> 4   3      Churning Caldron WKB POINT: raw 01 01 00 00 ... #> 5   4         Mortar Geyser WKB POINT: raw 01 01 00 00 ... #> 6   5 Black Dragons Caldron WKB POINT: raw 01 01 00 00 ...  # plot the park boundary # the layer contains a single polygon feature which is piped directly to plot() GDALVector$new(mem_gpkg, \"ynp_bnd\")$getNextFeature() |>   plot(col = \"wheat\", xlab = \"longitude\", ylab = \"latitude\",        main = \"YNP Geothermal Features\")  plot(feat_set, pch = 19, col = \"steelblue1\", add = TRUE) lyr$close()  # delete a data source vsi_unlink(mem_gpkg)  # delete a single file #> [1] 0 # or, deleteDataset(mem_gpkg)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"traditional-row-based-data-retrieval","dir":"Articles","previous_headings":"Code examples","what":"Traditional row-based data retrieval","title":"Vector API Overview","text":"examples use original sample dataset YNP features. DSN formed /viszip/ prefix, full path file ynp_features.gpkg contained zip archive. object class GDALVector generated call new(). examples , know GeoPackage contains three vector layers, also pass layer name argument class constructor. Note layer argument omitted, constructor attempt open first layer index. abbreviated form constructor generally used convenience single-layer file formats (e.g., ESRI Shapefile, FlatGeoBuf), GeoPackage file known contain single layer. SQL SELECT statement returns result set can also used layer argument constructor. instantiate GDALVector object park boundary layer retrieve information . Traditional row-level access feature data OGR cursor-based, reading one feature time. starting new layer object, cursor positioned beginning can iterate features calls $getNextFeature(). method returns individual feature named list fields values, moves cursor forward one row. return NULL features left. park boundary layer contains single polygon feature. list object returned individual feature carries \"OGRFeature\" class attribute. cursor can reset beginning layer time call $resetReading().","code":"f <- system.file(\"extdata/ynp_features.zip\", package = \"gdalraster\") ynp_dsn <- file.path(\"/vsizip\", f, \"ynp_features.gpkg\")  # the park boundary layer containing a single feature (bnd <- new(GDALVector, ynp_dsn, \"ynp_bnd\")) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg #>  Layer  : ynp_bnd #>  CRS    : NAD83 (EPSG:4269) #>  Geom   : POLYGON  bnd$getFeatureCount() #> [1] 1  # spatial reference definition as WKT string bnd$getSpatialRef() #> [1] \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]]\"  # xmin, ymin, xmax, ymax bnd$bbox() #> [1] -111.15430   44.13245 -109.83393   45.10785  # structure of the layer definition (a.k.a. feature class definition) bnd$getLayerDefn() |> str() #> List of 5 #>  $ admn_type :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 28 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ state_fips:List of 9 #>   ..$ type       : chr \"OFTInteger\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ state_name:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 20 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ sub_region:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 7 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ geom      :List of 4 #>   ..$ type       : chr \"POLYGON\" #>   ..$ srs        : chr \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EP\"| __truncated__ #>   ..$ is_nullable: logi TRUE #>   ..$ is_geom    : logi TRUE bnd_feat <- bnd$getNextFeature() str(bnd_feat) #> List of 6 #>  $ FID       :integer64 1  #>  $ admn_type : chr \"Park, monument, etc.\" #>  $ state_fips: int 56 #>  $ state_name: chr \"Wyoming\" #>  $ sub_region: chr \"Mtn\" #>  $ geom      : raw [1:4749] 01 03 00 00 ... #>  - attr(*, \"gis\")=List of 5 #>   ..$ type         : chr \"vector\" #>   ..$ geom_column  : chr \"geom\" #>   ..$ geom_col_type: chr \"POLYGON\" #>   ..$ geom_col_srs : chr \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EP\"| __truncated__ #>   ..$ geom_format  : chr \"WKB\" #>  - attr(*, \"class\")= chr [1:2] \"OGRFeature\" \"list\"  # no more features bnd$getNextFeature() #> NULL  bnd$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"fetch-all-features-or-progressively-in-batches","dir":"Articles","previous_headings":"Code examples","what":"Fetch all features or progressively in batches","title":"Vector API Overview","text":"Class GDALVector also provides $fetch() method retrieve next n features layer return data frame (analog DBI::dbFetch()). $fetch() can used get entire feature set layer, one batch features time, remaining features current cursor position. Fetching zero features also possible retrieve structure layer 0-row data frame fully typed columns. $getNextFeature(), forward paging supported. Passing n = -1 n = Inf retrieve features beginning (automatic call $resetReading()). Passing n = NA supported retrieve remaining features current cursor position. Otherwise, features can fetched progressively passing whole number (integer numeric) n argument. features available requested, result returned full without warning. fewer features requested returned, fetches return data frame zero rows. Note possible set attribute filter /spatial filter prior retrieving data restrict returned feature set. also possible set specific fields ignored (specify list desired fields). includes potentially omitting geometry column access feature attributes needed. Limiting number fields returned may save processing time /bandwidth. layer argument constructor GDALVector can also given SQL SELECT statement. read roads layer selecting publicly accessible roads. call $fetch() n = -1 read beginning retrieve available features. data frame returned $fetch() carries \"OGRFeatureSet\" class attribute providing S3 methods print() plot().  Fetching batches may advantageous dealing large datasets, especially reading network. Also, note $getFeatureCount() called internally fetching full feature set batch n features. vector drivers actually scan entire layer count features. FastFeatureCount element list returned $testCapability() method can checked might concern.","code":"# SQL layer for public roads sql <- \"SELECT rdname, opentopubl, geom FROM roads WHERE opentopubl = 'Yes'\" (roads <- new(GDALVector, ynp_dsn, sql)) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg #>  Layer  : SELECT rdname, opentopubl, geom FROM roads WHERE opentopubl = 'Yes' #>  CRS    : NAD83 (EPSG:4269) #>  Geom   : LINESTRING  roads$getFeatureCount() #> [1] 1475  roads$getFieldNames() #> [1] \"rdname\"     \"opentopubl\" \"geom\"  roads_featset <- roads$fetch(-1) nrow(roads_featset) #> [1] 1475  head(roads_featset) #> OGR feature set #>   FID               rdname opentopubl                                geom #> 1   0          Park Street        Yes WKB LINESTRING: raw 01 02 00 00 ... #> 2   1   North Entrance Rd.        Yes WKB LINESTRING: raw 01 02 00 00 ... #> 3   2 Robert Reamer Avenue        Yes WKB LINESTRING: raw 01 02 00 00 ... #> 4   3          Park Street        Yes WKB LINESTRING: raw 01 02 00 00 ... #> 5   4                 <NA>        Yes WKB LINESTRING: raw 01 02 00 00 ... #> 6   5 Robert Reamer Avenue        Yes WKB LINESTRING: raw 01 02 00 00 ...  plot(bnd_feat, col = \"wheat\", xlab = \"longitude\", ylab = \"latitude\",      main = \"YNP Public Roads\")  plot(roads_featset, col = \"slategray\", lwd = 2, add = TRUE) roads$close() poi <- new(GDALVector, ynp_dsn, \"points_of_interest\")  poi$getFeatureCount() #> [1] 1399  # read progressively in batches batch_size <- 500 batch <- 0 while (TRUE) {     poi_featset <- poi$fetch(batch_size)     if (nrow(poi_featset) == 0) break     cat(\"batch\", batch <- batch + 1, \":\", nrow(poi_featset), \"features\\n\")     # process batch     # ... } #> batch 1 : 500 features #> batch 2 : 500 features #> batch 3 : 399 features  poi$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"read-using-arrowarraystream","dir":"Articles","previous_headings":"Code examples","what":"Read using ArrowArrayStream","title":"Vector API Overview","text":"also possible retrieve features column-oriented memory layout using Arrow C Stream interface OGR (requires GDAL >= 3.6). Performance advantages can substantial vector format drivers provide specialized implementations (e.g., Parquet, FlatGeoBuf, GeoPackage). Drivers specialized implementations advertise FastGetArrowStream layer capability. $getArrowStream() method class GDALVector exposes ArrowArrayStream layer nanoarrow_array_stream object. Note nanoarrow_array_stream object $get_next() method allows accessing features stream batch (returning nanoarrow_array object). default batch size OGR array stream 65,536 features, can configured per-object basis assigning value GDALVector writable field $arrowStreamOptions (character vector “NAME=VALUE” pairs). nanoarrow provides S3 methods .data.frame() import nanoarrow_array (one batch time), nanoarrow_array_stream (pulling batches stream).","code":"# Expose an ArrowArrayStream (requires GDAL >= 3.6)  # re-open the roads layer with the required argument for type of access roads$open(read_only = TRUE) roads$resetReading()  # does the layer have a specialized implementation roads$testCapability()$FastGetArrowStream #> [1] TRUE  # optionally set ArrowStream options as character vector of \"NAME=VALUE\", e.g., roads$arrowStreamOptions <- \"INCLUDE_FID=NO\" # the default batch size of 65,536 could also be configured with # MAX_FEATURES_IN_BATCH=num  (stream <- roads$getArrowStream()) #> <nanoarrow_array_stream struct<rdname: string, opentopubl: string, geom: ogc.wkb{binary}>> #>  $ get_schema:function ()   #>  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   #>  $ release   :function ()  # get the array schema if needed schema <- stream$get_schema()  # optionally read by batch, NULL is returned when no more features are available # batch <- stream$get_next() # if (!is.null(batch)) #   d_batch <- as.data.frame(batch)  # or, pull all the batches into a data frame d <- as.data.frame(stream) nrow(d) #> [1] 1475 head(d) #>                 rdname opentopubl #> 1          Park Street        Yes #> 2   North Entrance Rd.        Yes #> 3 Robert Reamer Avenue        Yes #> 4          Park Street        Yes #> 5                 <NA>        Yes #> 6 Robert Reamer Avenue        Yesgeom #> 1 01, 02, 00, 00, 00, 10, 00, 00, 00, 4c, 4c, 4c, 54, 45, ad, 5b, c0, 60, c7, eb, d3, c7, 83, 46, 40, 44, 6e, 01, 2c, 48, ad, 5b, c0, d8, f7, 4d, 73, c8, 83, 46, 40, 88, 98, a0, f3, 4b, ad, 5b, c0, 88, e3, 19, d1, c9, 83, 46, 40, 90, 37, 4e, 77, 4f, ad, 5b, c0, 60, 2b, 0d, 0e, cc, 83, 46, 40, 28, 7b, 10, d7, 51, ad, 5b, c0, 68, 5d, c5, aa, cd, 83, 46, 40, b8, 88, 48, 7d, 54, ad, 5b, c0, 28, 20, 48, a6, cf, 83, 46, 40, 74, 7c, 79, d6, 55, ad, 5b, c0, 90, 8d, 60, 80, d0, 83, 46, 40, c8, 5d, 93, 54, 57, ad, 5b, c0, d0, ec, 7f, c2, d1, 83, 46, 40, a8, df, ef, 91, 59, ad, 5b, c0, 40, 9d, 3a, e2, d2, 83, 46, 40, c4, 39, e4, 78, 5b, ad, 5b, c0, b8, a4, 79, 53, d3, 83, 46, 40, d4, ca, 49, fd, 5c, ad, 5b, c0, a0, d8, 74, eb, d2, 83, 46, 40, 00, d1, 91, 31, 5e, ad, 5b, c0, d0, fc, 20, ee, d1, 83, 46, 40, 30, 26, e6, 21, 5f, ad, 5b, c0, 90, 8d, 60, 80, d0, 83, 46, 40, 4c, 53, fe, c7, 5f, ad, 5b, c0, 90, 19, 03, b3, ce, 83, 46, 40, 44, 04, f2, 0b, 60, ad, 5b, c0, b8, b8, 8d, 73, cc, 83, 46, 40, 08, 03, 4a, ce, 5f, ad, 5b, c0, 88, 6d, 50, 3d, ca, 83, 46, 40 #> 2                                                                                                                                                                                                                                                                                                                                 01, 02, 00, 00, 00, 0b, 00, 00, 00, 08, 03, 4a, ce, 5f, ad, 5b, c0, 88, 6d, 50, 3d, ca, 83, 46, 40, c8, 47, 06, 44, 5e, ad, 5b, c0, 88, 3b, 72, 6c, c9, 83, 46, 40, 88, a3, cb, cb, 5c, ad, 5b, c0, 48, cc, b1, fe, c7, 83, 46, 40, 64, a8, aa, 00, 5a, ad, 5b, c0, e8, fd, fa, 19, c5, 83, 46, 40, 1c, 41, 13, 29, 59, ad, 5b, c0, f8, 21, 7e, 51, c4, 83, 46, 40, 28, 55, fb, a4, 55, ad, 5b, c0, 70, d0, 4d, be, c0, 83, 46, 40, 20, 8d, 3d, 8d, 51, ad, 5b, c0, 90, b8, d8, 6b, bc, 83, 46, 40, 24, e7, 89, bc, 4c, ad, 5b, c0, 88, da, 47, 25, b7, 83, 46, 40, b4, 96, d8, 9b, 49, ad, 5b, c0, 00, ee, 1c, b1, b3, 83, 46, 40, f8, b9, b0, 54, 48, ad, 5b, c0, 68, 62, 90, 47, b2, 83, 46, 40, 4c, 4c, 4c, 54, 45, ad, 5b, c0, 40, 37, 0a, 9c, aeae, f9, e4, ed, ac, 5b, c0, d0, f7, 53, 50, 82, 83, 46, 40, b4, 78, f7, 4e, ec, ac, 5b, c0, d0, f8, 37, 35, 7e, 83, 46, 40, a0, ad, c9, a1, e5, ac, 5b, c0, 40, 59, 8c, 82, 6cc, 4c, 4c, 54, 45, ad, 5b, c0, 60, c7, eb, d3, c7, 83, 46, 40, cc, 2a, 31, a4, 2a, ad, 5b, c0, e8, f1, 8a, 33, c8, 83, 46, 40, b0, 76, 7e, cb, 28, ad, 5b, c0, 48, b2, 0c, b3, c8, 83, 46, 40, 24, 7d, a0, 63, 27, ad, 5b, c0, d0, 33, bb, 30, ca, 83, 46, 40, 5c, af, 09, 99, 26, ad, 5b, c0, 20, b6, 14, 2d, cc, 83, 46, 40, 9c, 9c, 31, 64, 26, ad, 5b, c0, 50, 48, e6, 89, cec, 4c, 4c, 54, 45, ad, 5b, c0, 60, c7, eb, d3, c7, 83, 46, 40, 4c, 4c, 4c, 54, 45, ad, 5b, c0, 40, 37, 0a, 9c, aea0, ad, c9, a1, e5, ac, 5b, c0, 40, 59, 8c, 82, 6c, 83, 46, 40, 3c, a6, d9, 2f, e4, ac, 5b, c0, c0, be, f6, 69, 68, 83, 46, 40, 80, 42, 17, b6, e1, ac, 5b, c0, 78, b7, fc, 3e, 5e, 83, 46, 40  # release the stream when finished stream$release()  # 'geom' is a list column of WKB raw vectors which can be passed to the # Geometry API functions geom_utm <- g_transform(d$geom,                         srs_from = roads$getSpatialRef(),                         srs_to = \"EPSG:26912\")  # add a column with road lengths in meters d$rdlength <- g_length(geom_utm) head(d) #>                 rdname opentopubl #> 1          Park Street        Yes #> 2   North Entrance Rd.        Yes #> 3 Robert Reamer Avenue        Yes #> 4          Park Street        Yes #> 5                 <NA>        Yes #> 6 Robert Reamer Avenue        Yesgeom #> 1 01, 02, 00, 00, 00, 10, 00, 00, 00, 4c, 4c, 4c, 54, 45, ad, 5b, c0, 60, c7, eb, d3, c7, 83, 46, 40, 44, 6e, 01, 2c, 48, ad, 5b, c0, d8, f7, 4d, 73, c8, 83, 46, 40, 88, 98, a0, f3, 4b, ad, 5b, c0, 88, e3, 19, d1, c9, 83, 46, 40, 90, 37, 4e, 77, 4f, ad, 5b, c0, 60, 2b, 0d, 0e, cc, 83, 46, 40, 28, 7b, 10, d7, 51, ad, 5b, c0, 68, 5d, c5, aa, cd, 83, 46, 40, b8, 88, 48, 7d, 54, ad, 5b, c0, 28, 20, 48, a6, cf, 83, 46, 40, 74, 7c, 79, d6, 55, ad, 5b, c0, 90, 8d, 60, 80, d0, 83, 46, 40, c8, 5d, 93, 54, 57, ad, 5b, c0, d0, ec, 7f, c2, d1, 83, 46, 40, a8, df, ef, 91, 59, ad, 5b, c0, 40, 9d, 3a, e2, d2, 83, 46, 40, c4, 39, e4, 78, 5b, ad, 5b, c0, b8, a4, 79, 53, d3, 83, 46, 40, d4, ca, 49, fd, 5c, ad, 5b, c0, a0, d8, 74, eb, d2, 83, 46, 40, 00, d1, 91, 31, 5e, ad, 5b, c0, d0, fc, 20, ee, d1, 83, 46, 40, 30, 26, e6, 21, 5f, ad, 5b, c0, 90, 8d, 60, 80, d0, 83, 46, 40, 4c, 53, fe, c7, 5f, ad, 5b, c0, 90, 19, 03, b3, ce, 83, 46, 40, 44, 04, f2, 0b, 60, ad, 5b, c0, b8, b8, 8d, 73, cc, 83, 46, 40, 08, 03, 4a, ce, 5f, ad, 5b, c0, 88, 6d, 50, 3d, ca, 83, 46, 40 #> 2                                                                                                                                                                                                                                                                                                                                 01, 02, 00, 00, 00, 0b, 00, 00, 00, 08, 03, 4a, ce, 5f, ad, 5b, c0, 88, 6d, 50, 3d, ca, 83, 46, 40, c8, 47, 06, 44, 5e, ad, 5b, c0, 88, 3b, 72, 6c, c9, 83, 46, 40, 88, a3, cb, cb, 5c, ad, 5b, c0, 48, cc, b1, fe, c7, 83, 46, 40, 64, a8, aa, 00, 5a, ad, 5b, c0, e8, fd, fa, 19, c5, 83, 46, 40, 1c, 41, 13, 29, 59, ad, 5b, c0, f8, 21, 7e, 51, c4, 83, 46, 40, 28, 55, fb, a4, 55, ad, 5b, c0, 70, d0, 4d, be, c0, 83, 46, 40, 20, 8d, 3d, 8d, 51, ad, 5b, c0, 90, b8, d8, 6b, bc, 83, 46, 40, 24, e7, 89, bc, 4c, ad, 5b, c0, 88, da, 47, 25, b7, 83, 46, 40, b4, 96, d8, 9b, 49, ad, 5b, c0, 00, ee, 1c, b1, b3, 83, 46, 40, f8, b9, b0, 54, 48, ad, 5b, c0, 68, 62, 90, 47, b2, 83, 46, 40, 4c, 4c, 4c, 54, 45, ad, 5b, c0, 40, 37, 0a, 9c, aeae, f9, e4, ed, ac, 5b, c0, d0, f7, 53, 50, 82, 83, 46, 40, b4, 78, f7, 4e, ec, ac, 5b, c0, d0, f8, 37, 35, 7e, 83, 46, 40, a0, ad, c9, a1, e5, ac, 5b, c0, 40, 59, 8c, 82, 6cc, 4c, 4c, 54, 45, ad, 5b, c0, 60, c7, eb, d3, c7, 83, 46, 40, cc, 2a, 31, a4, 2a, ad, 5b, c0, e8, f1, 8a, 33, c8, 83, 46, 40, b0, 76, 7e, cb, 28, ad, 5b, c0, 48, b2, 0c, b3, c8, 83, 46, 40, 24, 7d, a0, 63, 27, ad, 5b, c0, d0, 33, bb, 30, ca, 83, 46, 40, 5c, af, 09, 99, 26, ad, 5b, c0, 20, b6, 14, 2d, cc, 83, 46, 40, 9c, 9c, 31, 64, 26, ad, 5b, c0, 50, 48, e6, 89, cec, 4c, 4c, 54, 45, ad, 5b, c0, 60, c7, eb, d3, c7, 83, 46, 40, 4c, 4c, 4c, 54, 45, ad, 5b, c0, 40, 37, 0a, 9c, aea0, ad, c9, a1, e5, ac, 5b, c0, 40, 59, 8c, 82, 6c, 83, 46, 40, 3c, a6, d9, 2f, e4, ac, 5b, c0, c0, be, f6, 69, 68, 83, 46, 40, 80, 42, 17, b6, e1, ac, 5b, c0, 78, b7, fc, 3e, 5e, 83, 46, 40 #>    rdlength #> 1 157.21119 #> 2 158.43944 #> 3  83.91872 #> 4 161.60393 #> 5  85.49391 #> 6  51.99568  roads$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"reproject-vector-layers","dir":"Articles","previous_headings":"Code examples","what":"Reproject vector layers","title":"Vector API Overview","text":"following example introduces another sample dataset contains fire perimeters Yellowstone National Park Monitoring Trends Burn Severity (MTBS) project. set temporary, writable copy dataset ynp_fires_1984_2022.gpkg (memory), use data source perform processing. MTBS layer uses projected coordinate system, layers “YNP features” dataset used examples geographic coordinates. ogr_reproject() function used project layers geographic coordinates ynp_features.gpkg match coordinate system MTBS layer.","code":"# MTBS fire perimeters in Yellowstone National Park 1984-2022 f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package = \"gdalraster\")  # copy to a temporary writable file mtbs_dsn <- \"/vsimem/tmp/ynp_fires_1984_2022.gpkg\" ogr2ogr(f, mtbs_dsn)  (fires <- new(GDALVector, mtbs_dsn, \"mtbs_perims\")) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /vsimem/tmp/ynp_fires_1984_2022.gpkg #>  Layer  : mtbs_perims #>  CRS    : NAD83 / Montana (EPSG:32100) #>  Geom   : MULTIPOLYGON  srs_mtsp <- fires$getSpatialRef()  # Montana state plane metric definition  # reproject the boundary in ynp_features.gpkg to match the MTBS layer, # returning a GDALVector object on the output layer by default (bnd <- ogr_reproject(src_dsn = ynp_dsn, src_layer = \"ynp_bnd\",                       out_dsn = mtbs_dsn, out_srs = srs_mtsp)) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /vsimem/tmp/ynp_fires_1984_2022.gpkg #>  Layer  : ynp_bnd #>  CRS    : NAD83 / Montana (EPSG:32100) #>  Geom   : POLYGON  (bnd_feat <- bnd$getNextFeature()) #> OGR feature #> $FID #> integer64 #> [1] 1 #>  #> $admn_type #> [1] Park, monument, etc. #>  #> $state_fips #> [1] 56 #>  #> $state_name #> [1] Wyoming #>  #> $sub_region #> [1] Mtn #>  #> $geom #> [1] WKB POLYGON: raw 01 03 00 00 ...  bnd$close()  # reproject points_of_interest poi <- ogr_reproject(ynp_dsn, \"points_of_interest\", mtbs_dsn, srs_mtsp)  # set an attribute filter to select the Maple Fire fires$setAttributeFilter(\"incid_name = 'MAPLE'\") fires$getFeatureCount() #> [1] 1  maple_fire <- fires$getNextFeature()  # use the fire polygon as a spatial filter for points_of_interest # setSpatialFilter() expects WKT input, so convert the WKB geometry g_wk2wk(maple_fire$geom) |> poi$setSpatialFilter() poi$getFeatureCount() #> [1] 3  poi$setSelectedFields(c(\"poiname\", \"poitype\", \"geom\")) (maple_pois <- poi$fetch(-1)) #> OGR feature set #>     FID                         poiname     poitype #> 1  6745                             WA1    Campsite #> 2  7777 Madison River Seismograph (YMR) Information #> 3 22669  Madison River Access Parking E Parking Lot #>                             geom #> 1 WKB POINT: raw 01 01 00 00 ... #> 2 WKB POINT: raw 01 01 00 00 ... #> 3 WKB POINT: raw 01 01 00 00 ...  plot(bnd_feat, col = \"wheat\") plot(maple_fire, col = \"orangered\", border = NA, add = TRUE) plot(maple_pois, pch = 15, col = \"royalblue\", add = TRUE) fires$close() poi$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"write-a-new-feature-in-an-existing-layer","dir":"Articles","previous_headings":"Code examples","what":"Write a new feature in an existing layer","title":"Vector API Overview","text":"$createFeature() method GDALVector object creates writes new feature within layer. feature argument named list fields values (one row data frame). passed feature written layer new feature, rather overwriting existing one. add centroid YNP boundary point interest.","code":"# create a feature object for the YNP centroid as a point of interest (bnd_centroid_xy <- g_centroid(bnd_feat$geom)) #>         x         y  #> 516788.22  39216.35  feat <- list() feat$poiname <- \"YNP centroid\" feat$poitype <- \"Information\" feat$createdate <- Sys.Date() feat$editdate <- Sys.Date() feat$geom <- g_create(\"POINT\", bnd_centroid_xy)  # re-open the \"points_of_interest\" layer with update access poi$open(read_only = FALSE) poi$testCapability()$SequentialWrite #> [1] TRUE  # create and write the new feature on the layer poi$createFeature(feat) #> [1] TRUE  # be sure pending writes are flushed poi$syncToDisk() #> [1] TRUE  # read back fid <- poi$getLastWriteFID() (ynp_centroid <- poi$getFeature(fid)) #> OGR feature #> $FID #> integer64 #> [1] 27770 #>  #> $poiname #> [1] YNP centroid #>  #> $poitype #> [1] Information #>  #> $createdate #> [1] 2025-06-01 #>  #> $editdate #> [1] 2025-06-01 #>  #> $geom #> [1] WKB POINT: raw 01 01 00 00 ...  plot(bnd_feat, col = \"wheat\") plot(ynp_centroid, pch = 10, cex = 1.5, add = TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"rewritereplace-an-existing-feature","dir":"Articles","previous_headings":"Code examples","what":"Rewrite/replace an existing feature","title":"Vector API Overview","text":"$setFeature() method GDALVector object writes feature based feature id (FID) specified input. $createFeature(), feature argument named list fields values, must include $FID element referencing existing feature rewrite. Note fields omitted passed feature write behavior driver-dependent: SQL-based drivers implement set feature SQL UPDATE skip unset fields, thus content existing feature preserved. shapefile driver write NULL value DBF file. GeoJSON driver take account unset fields remove corresponding JSON member.","code":"# rewrite a feature in the \"point_of_interest\" layer updating the feature name # verify the layer has random write capability poi$testCapability()$RandomWrite #> [1] TRUE  # FID 3809 is missing the trailhead name (feat <- poi$getFeature(3809)) #> OGR feature #> $FID #> integer64 #> [1] 3809 #>  #> $poiname #> [1] <NA> #>  #> $poitype #> [1] Trailhead #>  #> $createdate #> [1] 2016-02-03 #>  #> $editdate #> [1] 2018-06-13 #>  #> $geom #> [1] WKB POINT: raw 01 01 00 00 ...  # update the name field and the date of the edit feat$poiname <- \"Ice Lake Trailhead\" feat$editdate <- Sys.Date()  # rewrite the feature poi$setFeature(feat) #> [1] TRUE poi$syncToDisk() #> [1] TRUE  (feat <- poi$getFeature(3809)) #> OGR feature #> $FID #> integer64 #> [1] 3809 #>  #> $poiname #> [1] Ice Lake Trailhead #>  #> $poitype #> [1] Trailhead #>  #> $createdate #> [1] 2016-02-03 #>  #> $editdate #> [1] 2025-06-01 #>  #> $geom #> [1] WKB POINT: raw 01 01 00 00 ..."},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"delete-a-feature","dir":"Articles","previous_headings":"Code examples","what":"Delete a feature","title":"Vector API Overview","text":"$deleteFeature() method GDALVector object deletes feature indicated feature ID supported format driver. value fid must single numeric value, optionally carrying bit64::integer64 class attribute.","code":"# delete the \"YNP centroid\" feature that was created above # verify the layer has delete feature capability poi$testCapability()$DeleteFeature #> [1] TRUE  # the feature ID was obtained above as: fid <- poi$getLastWriteFID() poi$getFeature(fid) #> OGR feature #> $FID #> integer64 #> [1] 27770 #>  #> $poiname #> [1] YNP centroid #>  #> $poitype #> [1] Information #>  #> $createdate #> [1] 2025-06-01 #>  #> $editdate #> [1] 2025-06-01 #>  #> $geom #> [1] WKB POINT: raw 01 01 00 00 ...  poi$deleteFeature(fid) #> [1] TRUE poi$syncToDisk() #> [1] TRUE  poi$getFeature(fid) #> NULL  poi$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"batch-write-features-from-data-frame-input","dir":"Articles","previous_headings":"Code examples","what":"Batch write features from data frame input","title":"Vector API Overview","text":"$batchCreateFeature()method GDALVector object batch version $createFeature(). creates writes batch new features within layer input given data frame. Column names data frame must match field names layer compatible data types. Operations write batches features use transactions better performance writing RDBMS drivers native transaction support (e.g., PostgreSQL / PostGIS, GPKG, SQLite). Grouping many features per transaction (e.g., 100,000 ) can improve performance substantially. Using transactions also provides mechanism rollback group data modifications fails complete generates errors. example compares relative performance writing batch features GeoPackage layer without transaction. create new POINT layer existing GPKG (mtbs_dsn), write batches features random point locations within YNP bounding box. default, GeoPackage driver automatically creates column named fid use OGR feature ID (primary key SQLite database). can configured FID=value layer creation option. Note FID special property feature treated attribute feature, specified layer definition. Next create first batch features write without grouping transaction, measuring time elapsed. second batch features grouped transaction writing, layer checked expected output.","code":"# create a layer definition for random_points # the spatial ref was obtained above as: srs_mtsp <- fires$getSpatialRef() defn <- ogr_def_layer(\"POINT\", srs = srs_mtsp) defn$pt_desc <- ogr_def_field(\"OFTString\") defn$create_time <- ogr_def_field(\"OFTDateTime\")  ogr_layer_create(mtbs_dsn, \"random_points\", layer_defn = defn) #> [1] TRUE  lyr <- new(GDALVector, mtbs_dsn, \"random_points\", read_only = FALSE)  bb <- g_wk2wk(bnd_feat$geom) |> bbox_from_wkt() batch_size <- as.integer(1e5)  # create a batch of features rndX <- sample((bb[1] + 1):(bb[3] - 1), batch_size, replace = TRUE) rndY <- sample((bb[2] + 1):(bb[4] - 1), batch_size, replace = TRUE) pts <- cbind(rndX, rndY) pts_geom <- g_create(\"POINT\", pts) d <- data.frame(pt_desc = rep(\"random points batch 1\", batch_size),                 create_time = rep(Sys.time(), batch_size)) d$geom <- pts_geom  # write the batch (no transaction) system.time(res <- lyr$batchCreateFeature(d)) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>    user  system elapsed  #>   2.148   0.007   2.156  (all(res)) #> [1] TRUE  lyr$syncToDisk() #> [1] TRUE rndX <- sample((bb[1] + 1):(bb[3] - 1), batch_size, replace = TRUE) rndY <- sample((bb[2] + 1):(bb[4] - 1), batch_size, replace = TRUE) pts <- cbind(rndX, rndY) pts_geom <- g_create(\"POINT\", pts) d <- data.frame(pt_desc = rep(\"random points batch 2\", batch_size),                 create_time = rep(Sys.time(), batch_size)) d$geom <- pts_geom  # write the batch using a transaction system.time({   lyr$startTransaction()   res2 <- lyr$batchCreateFeature(d)   if (all(res2))     lyr$commitTransaction()   else     lyr$rollbackTransaction() }) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>    user  system elapsed  #>   1.039   0.008   1.047  (all(res2)) #> [1] TRUE  # check the output data d_out <- lyr$fetch(-1) (nrow(d_out) == batch_size * 2) #> [1] TRUE  head(d_out) #> OGR feature set #>   FID               pt_desc         create_time                           geom #> 1   1 random points batch 1 2025-06-01 04:41:25 WKB POINT: raw 01 01 00 00 ... #> 2   2 random points batch 1 2025-06-01 04:41:25 WKB POINT: raw 01 01 00 00 ... #> 3   3 random points batch 1 2025-06-01 04:41:25 WKB POINT: raw 01 01 00 00 ... #> 4   4 random points batch 1 2025-06-01 04:41:25 WKB POINT: raw 01 01 00 00 ... #> 5   5 random points batch 1 2025-06-01 04:41:25 WKB POINT: raw 01 01 00 00 ... #> 6   6 random points batch 1 2025-06-01 04:41:25 WKB POINT: raw 01 01 00 00 ...  tail(d_out) #> OGR feature set #>           FID               pt_desc         create_time #> 199995 199995 random points batch 2 2025-06-01 04:41:28 #> 199996 199996 random points batch 2 2025-06-01 04:41:28 #> 199997 199997 random points batch 2 2025-06-01 04:41:28 #> 199998 199998 random points batch 2 2025-06-01 04:41:28 #> 199999 199999 random points batch 2 2025-06-01 04:41:28 #> 200000 200000 random points batch 2 2025-06-01 04:41:28 #>                                  geom #> 199995 WKB POINT: raw 01 01 00 00 ... #> 199996 WKB POINT: raw 01 01 00 00 ... #> 199997 WKB POINT: raw 01 01 00 00 ... #> 199998 WKB POINT: raw 01 01 00 00 ... #> 199999 WKB POINT: raw 01 01 00 00 ... #> 200000 WKB POINT: raw 01 01 00 00 ...  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"write-to-geojson","dir":"Articles","previous_headings":"Code examples","what":"Write to GeoJSON","title":"Vector API Overview","text":"Single-layer vector file formats (e.g., ESRI shapefile, FlatGeoBuf, GeoJSON) can created scratch call ogr_ds_create(). function provides optional arguments add single attribute field layer created. attribute fields added layer creation calls ogr_field_create() (vector formats CreateField layer capability). Alternatively, layer definition (list object) can passed ogr_ds_create() specify multiple attribute fields properties (see ?ogr_def_layer). GeoJSON support schema definition prior creating features. Feature object member name properties. specification require Feature objects collection schema properties, require Feature objects collection geometry type (https://geojson.org/). Note set return_obj = TRUE call ogr_ds_create(). returns live dataset object open write access layer (.e., object class GDALVector). valid GeoJSON file generated one features written layer. generate GeoJSON string containing single polygon feature defines rectangular area interest around Maple Fire boundary. GeoJSON format supported input data distribution systems define download box (e.g., NLCD LANDFIRE). case need coordinates Web Mercator projection (EPSG 3857).","code":"# write the Maple Fire AOI bounding box as GeoJSON in EPSG 3857 json_file <- file.path(tempdir(), \"maple_fire_aoi.geojson\")  lyr <- ogr_ds_create(\"GeoJSON\", json_file, layer = \"maple_fire_aoi\",                      geom_type = \"POLYGON\", srs = \"EPSG:3857\",                      fld_name = \"id\", fld_type = \"OFTString\",                      overwrite = TRUE, return_obj = TRUE)  # The Maple Fire feature object and spatial reference were obtained above in # the section on \"Reproject vector layers\". # Here we extend the minimum bounding box by 500 m in each direction. feat <- list() feat$id <- \"dataDownloadBox\" feat$geom <- g_transform(maple_fire$geom, srs_from = srs_mtsp,                          srs_to = \"EPSG:3857\", as_wkb = FALSE) |>                bbox_from_wkt(extend_x = 500, extend_y = 500) |>                bbox_to_wkt()  lyr$createFeature(feat) #> [1] TRUE  lyr$close()  readLines(json_file) |> writeLines() #> { #> \"type\": \"FeatureCollection\", #> \"name\": \"maple_fire_aoi\", #> \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:EPSG::3857\" } }, #> \"features\": [ #> { \"type\": \"Feature\", \"properties\": { \"id\": \"dataDownloadBox\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -12367918.731928100809455, 5565677.54002314992249 ], [ -12341067.943306, 5565677.54002314992249 ], [ -12341067.943306, 5592957.016774149611592 ], [ -12367918.731928100809455, 5592957.016774149611592 ], [ -12367918.731928100809455, 5565677.54002314992249 ] ] ] } } #> ] #> }"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-api-overview.html","id":"ogr-facilities-for-vector-geoprocessing","dir":"Articles","previous_headings":"Code examples","what":"OGR facilities for vector geoprocessing","title":"Vector API Overview","text":"ogr_proc() performs GIS overlay operations vector layers. provides interface GDAL API methods following operations: Intersection, Union, SymDifference, Identity, Update, Clip Erase. Inputs given objects class GDALVector, may spatial /attribute filters applied. output layer created exist, output can also appended existing layer, written existing empty layer custom schema defined. generate layer areas within 1988 North Fork fire perimeter subsequently re-burned (2022). output layer contains features whose geometries represent areas common features input layer method layer. features output layer attributes input method layers.","code":"# layer filtered to fires after 1988 lyr1 <- new(GDALVector, mtbs_dsn, \"mtbs_perims\") lyr1$setAttributeFilter(\"ig_year > 1988\") lyr1$getFeatureCount() #> [1] 46  # second layer for the 1988 North Fork fire perimeter sql <- \"SELECT incid_name, ig_year, geom FROM mtbs_perims         WHERE incid_name = 'NORTH FORK'\" lyr2 <- new(GDALVector, mtbs_dsn, sql) lyr2$getFeatureCount() #> [1] 1  north_fork_feat <- lyr2$getNextFeature()  # set mode options for the intersection opt <- c(\"INPUT_PREFIX=layer1_\",          \"METHOD_PREFIX=layer2_\",          \"PROMOTE_TO_MULTI=YES\")  # intersect to obtain areas re-burned since 2000 lyr_out <- ogr_proc(mode = \"Intersection\",                     input_lyr = lyr1,                     method_lyr = lyr2,                     out_dsn = mtbs_dsn,                     out_lyr_name = \"north_fork_reburned\",                     out_geom_type = \"MULTIPOLYGON\",                     mode_opt = opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # the output layer has attributes of both the input and method layers (reburn_feat_set <- lyr_out$fetch(-1)) #> OGR feature set #>   FID       layer1_event_id layer1_incid_name layer1_incid_type layer1_map_id #> 1   1 WY4484611038620100914          ANTELOPE          Wildfire      10013735 #> 2   2 WY4466711063920120810            CYGNET          Wildfire          1961 #> 3   3 WY4474311097820160809             MAPLE          Wildfire      10005020 #> 4   4 WY4492611093820160805              FAWN          Wildfire      10005117 #> 5   5 WY4457911058620160826           CENTRAL          Wildfire      10014143 #>   layer1_burn_bnd_ac layer1_burn_bnd_lat layer1_burn_bnd_lon layer1_ig_date #> 1               4888              44.839            -110.368     2010-09-14 #> 2               3188              44.682            -110.622     2012-08-10 #> 3             103193              44.731            -110.982     2016-08-09 #> 4               3161              44.936            -110.913     2016-08-05 #> 5               2340              44.595            -110.574     2016-08-26 #>   layer1_ig_year layer2_incid_name layer2_ig_year #> 1           2010        NORTH FORK           1988 #> 2           2012        NORTH FORK           1988 #> 3           2016        NORTH FORK           1988 #> 4           2016        NORTH FORK           1988 #> 5           2016        NORTH FORK           1988 #>                                    geom #> 1 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 2 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 3 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 4 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 5 WKB MULTIPOLYGON: raw 01 06 00 00 ...  plot(north_fork_feat) plot(reburn_feat_set, col = \"orangered\", border = NA, add = TRUE,      main = \"1988 North Fork fire perimeter showing re-burned areas in red\") # clean up lyr1$close() lyr2$close() lyr_out$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"software-environment","dir":"Articles","previous_headings":"","what":"Software environment","title":"Vector Read Benchmarks","text":"Linux Ubuntu 24.04, R 4.5.0 (2025-04-11), GDAL 3.10.3 (2025-04-01), gdalraster 2.0.0.9002, sf 1.0.21","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"vector-data","dir":"Articles","previous_headings":"","what":"Vector data","title":"Vector Read Benchmarks","text":"NZ Building Outlines, https://data.linz.govt.nz/layer/101290-nz-building-outlines/, Land Information New Zealand: “dataset provides current outlines buildings within mainland New Zealand captured latest aerial imagery.” Tests used GeoPackage file nz-building-outlines.gpkg (1.5 GB). layer contains 3.3 million features, 13 attribute fields (2 fields type Integer, 8 type String, 3 type DateTime) polygon geometries.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"benchmark-programs","dir":"Articles","previous_headings":"","what":"Benchmark programs","title":"Vector Read Benchmarks","text":"program reads features layer populates R data frame. Code programs along output generated reprex::reprex() given separate section . bench_gdalraster_fetch.R Uses class method GDALVector$fetch() gdalraster traditional row-level reading done C++ iterating features OGRLayer::GetNextFeature() GDAL API. method analog function DBI::dbFetch() DBI R package. bench_gdalraster_arrow_stream.R (requires GDAL >= 3.6) Uses class method GDALVector$getArrowStream() gdalraster expose Arrow C stream layer nanoarrow_array_stream object (external pointer ArrowArrayStream). Provides direct access stream object retrieves features column-oriented memory layout. required package nanoarrow provides S3 methods .data.frame() import nanoarrow_array (one batch time), nanoarrow_array_stream (pulling batches stream). bench_gdalraster_fetch_conv_to_sf.R bench_gdalraster_fetch.R (traditional row-level access) conversion classed sf data frame via sf::st_sf() included timing. bench_sf_read_sf.R Traditional row-level read using package sf function sf::read_sf(). Populates classed data frame, geometries contained classed list column. bench_sf_read_sf_use_stream.R (requires GDAL >= 3.6) Uses sf::read_sf() argument use_stream = TRUE: “use experimental columnar interface introduced GDAL 3.6”.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"timings","dir":"Articles","previous_headings":"","what":"Timings","title":"Vector Read Benchmarks","text":"Read nz-building-outlines.gpkg (1.5 GB) populate data frame.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"bench_gdalraster_fetch-r","dir":"Articles","previous_headings":"Code","what":"bench_gdalraster_fetch.R","title":"Vector Read Benchmarks","text":"Created 2025-05-25 reprex v2.1.1","code":"library(gdalraster) #> GDAL 3.10.3 (released 2025-04-01), GEOS 3.12.2, PROJ 9.4.1  f <- '/home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg' (lyr <- new(GDALVector, f)) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg #>  Layer  : nz_building_outlines #>  CRS    : NZGD2000 / New Zealand Transverse Mercator 2000 (EPSG:2193) #>  Geom   : MULTIPOLYGON  lyr$getFeatureCount() #> [1] 3289574  system.time(d <- lyr$fetch(-1)) #>    user  system elapsed  #>  25.006   0.881  25.901  (nrow(d) == lyr$getFeatureCount()) #> [1] TRUE  head(d) #> OGR feature set #>   FID building_id name     use suburb_locality town_city territorial_authority #> 1   1     2292051      Unknown          Marton    Marton   Rangitikei District #> 2   2     2292353      Unknown      Durie Hill Whanganui    Whanganui District #> 3   3     2292407      Unknown      Durie Hill Whanganui    Whanganui District #> 4   4     2292675      Unknown        Feilding  Feilding     Manawatu District #> 5   5     2292771      Unknown        Feilding  Feilding     Manawatu District #> 6   6     2292825      Unknown        Feilding  Feilding     Manawatu District #>       capture_method capture_source_group capture_source_id #> 1 Feature Extraction    NZ Aerial Imagery              1042 #> 2 Feature Extraction    NZ Aerial Imagery              1042 #> 3 Feature Extraction    NZ Aerial Imagery              1042 #> 4 Feature Extraction    NZ Aerial Imagery              1042 #> 5 Feature Extraction    NZ Aerial Imagery              1042 #> 6 Feature Extraction    NZ Aerial Imagery              1042 #>                                       capture_source_name capture_source_from #> 1 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 2 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 3 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 4 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 5 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 6 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #>   capture_source_to last_modified                                  geom #> 1        2016-04-21    2019-01-04 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 2        2016-04-21    2019-01-04 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 3        2016-04-21    2019-01-04 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 4        2016-04-21    2019-01-04 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 5        2016-04-21    2019-01-04 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 6        2016-04-21    2019-01-04 WKB MULTIPOLYGON: raw 01 06 00 00 ...  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"bench_gdalraster_arrow_stream-r","dir":"Articles","previous_headings":"Code","what":"bench_gdalraster_arrow_stream.R","title":"Vector Read Benchmarks","text":"Created 2025-05-25 reprex v2.1.1","code":"library(gdalraster) #> GDAL 3.10.3 (released 2025-04-01), GEOS 3.12.2, PROJ 9.4.1  f <- '/home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg' (lyr <- new(GDALVector, f)) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg #>  Layer  : nz_building_outlines #>  CRS    : NZGD2000 / New Zealand Transverse Mercator 2000 (EPSG:2193) #>  Geom   : MULTIPOLYGON  lyr$getFeatureCount() #> [1] 3289574  lyr$testCapability()$FastGetArrowStream #> [1] TRUE  options(nanoarrow.warn_unregistered_extension = FALSE)  (stream <- lyr$getArrowStream()) #> <nanoarrow_array_stream struct<fid: int64, building_id: int32, name: string, use: string, suburb_locality: string, town_city: string, territorial_authority: string, capture_method: string, capture_source_group: string, capture_source_id: int32, capture_source_name: string, capture_source_from: date32, capture_source_to: date32, last_modified: date32, geom: ogc.wkb{binary}>> #>  $ get_schema:function ()   #>  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   #>  $ release   :function ()  system.time(d <- as.data.frame(stream)) #>    user  system elapsed  #>   7.388   1.390   5.895  stream$release()  (nrow(d) == lyr$getFeatureCount()) #> [1] TRUE  head(d) #>   fid building_id name     use suburb_locality town_city territorial_authority #> 1   1     2292051      Unknown          Marton    Marton   Rangitikei District #> 2   2     2292353      Unknown      Durie Hill Whanganui    Whanganui District #> 3   3     2292407      Unknown      Durie Hill Whanganui    Whanganui District #> 4   4     2292675      Unknown        Feilding  Feilding     Manawatu District #> 5   5     2292771      Unknown        Feilding  Feilding     Manawatu District #> 6   6     2292825      Unknown        Feilding  Feilding     Manawatu District #>       capture_method capture_source_group capture_source_id #> 1 Feature Extraction    NZ Aerial Imagery              1042 #> 2 Feature Extraction    NZ Aerial Imagery              1042 #> 3 Feature Extraction    NZ Aerial Imagery              1042 #> 4 Feature Extraction    NZ Aerial Imagery              1042 #> 5 Feature Extraction    NZ Aerial Imagery              1042 #> 6 Feature Extraction    NZ Aerial Imagery              1042 #>                                       capture_source_name capture_source_from #> 1 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 2 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 3 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 4 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 5 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 6 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #>   capture_source_to last_modified        geom #> 1        2016-04-21    2019-01-04 blob[102 B] #> 2        2016-04-21    2019-01-04 blob[102 B] #> 3        2016-04-21    2019-01-04 blob[230 B] #> 4        2016-04-21    2019-01-04 blob[102 B] #> 5        2016-04-21    2019-01-04 blob[118 B] #> 6        2016-04-21    2019-01-04 blob[102 B]  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"bench_gdalraster_fetch_conv_to_sf-r","dir":"Articles","previous_headings":"Code","what":"bench_gdalraster_fetch_conv_to_sf.R","title":"Vector Read Benchmarks","text":"Created 2025-05-25 reprex v2.1.1","code":"library(gdalraster) #> GDAL 3.10.3 (released 2025-04-01), GEOS 3.12.2, PROJ 9.4.1  f <- '/home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg' (lyr <- new(GDALVector, f)) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg #>  Layer  : nz_building_outlines #>  CRS    : NZGD2000 / New Zealand Transverse Mercator 2000 (EPSG:2193) #>  Geom   : MULTIPOLYGON  lyr$getFeatureCount() #> [1] 3289574  system.time({     d <- lyr$fetch(-1)     d <- sf::st_sf(d, crs = lyr$getSpatialRef()) }) #>    user  system elapsed  #>  54.795   1.938  56.979  (nrow(d) == lyr$getFeatureCount()) #> [1] TRUE  head(d) #> Simple feature collection with 6 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 1776318 ymin: 5544066 xmax: 1818438 ymax: 5576891 #> Projected CRS: NZGD2000 / New Zealand Transverse Mercator 2000 #>   FID building_id name     use suburb_locality town_city territorial_authority #> 1   1     2292051      Unknown          Marton    Marton   Rangitikei District #> 2   2     2292353      Unknown      Durie Hill Whanganui    Whanganui District #> 3   3     2292407      Unknown      Durie Hill Whanganui    Whanganui District #> 4   4     2292675      Unknown        Feilding  Feilding     Manawatu District #> 5   5     2292771      Unknown        Feilding  Feilding     Manawatu District #> 6   6     2292825      Unknown        Feilding  Feilding     Manawatu District #>       capture_method capture_source_group capture_source_id #> 1 Feature Extraction    NZ Aerial Imagery              1042 #> 2 Feature Extraction    NZ Aerial Imagery              1042 #> 3 Feature Extraction    NZ Aerial Imagery              1042 #> 4 Feature Extraction    NZ Aerial Imagery              1042 #> 5 Feature Extraction    NZ Aerial Imagery              1042 #> 6 Feature Extraction    NZ Aerial Imagery              1042 #>                                       capture_source_name capture_source_from #> 1 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 2 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 3 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 4 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 5 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #> 6 Manawatu Whanganui 0.3m Rural Aerial Photos (2015-2016)          2015-12-27 #>   capture_source_to last_modified                           geom #> 1        2016-04-21    2019-01-04 MULTIPOLYGON (((1796394 556... #> 2        2016-04-21    2019-01-04 MULTIPOLYGON (((1776394 557... #> 3        2016-04-21    2019-01-04 MULTIPOLYGON (((1776322 557... #> 4        2016-04-21    2019-01-04 MULTIPOLYGON (((1818268 554... #> 5        2016-04-21    2019-01-04 MULTIPOLYGON (((1818172 554... #> 6        2016-04-21    2019-01-04 MULTIPOLYGON (((1818436 554...  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"bench_sf_read_sf-r","dir":"Articles","previous_headings":"Code","what":"bench_sf_read_sf.R","title":"Vector Read Benchmarks","text":"Created 2025-05-25 reprex v2.1.1","code":"library(sf) #> Linking to GEOS 3.12.2, GDAL 3.10.3, PROJ 9.4.1; sf_use_s2() is TRUE  f <- '/home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg' system.time(d <- read_sf(f, \"nz_building_outlines\")) #>    user  system elapsed  #> 156.162   7.710 176.556  nrow(d) #> [1] 3289574  head(d) #> Simple feature collection with 6 features and 13 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 1776318 ymin: 5544066 xmax: 1818438 ymax: 5576891 #> Projected CRS: NZGD2000 / New Zealand Transverse Mercator 2000 #> # A tibble: 6 × 14 #>   building_id name  use     suburb_locality town_city territorial_authority #>         <int> <chr> <chr>   <chr>           <chr>     <chr>                 #> 1     2292051 \"\"    Unknown Marton          Marton    Rangitikei District   #> 2     2292353 \"\"    Unknown Durie Hill      Whanganui Whanganui District    #> 3     2292407 \"\"    Unknown Durie Hill      Whanganui Whanganui District    #> 4     2292675 \"\"    Unknown Feilding        Feilding  Manawatu District     #> 5     2292771 \"\"    Unknown Feilding        Feilding  Manawatu District     #> 6     2292825 \"\"    Unknown Feilding        Feilding  Manawatu District     #> # ℹ 8 more variables: capture_method <chr>, capture_source_group <chr>, #> #   capture_source_id <int>, capture_source_name <chr>, #> #   capture_source_from <date>, capture_source_to <date>, last_modified <date>, #> #   geom <MULTIPOLYGON [m]>"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/vector-read-benchmarks.html","id":"bench_sf_read_sf_use_stream-r","dir":"Articles","previous_headings":"Code","what":"bench_sf_read_sf_use_stream.R","title":"Vector Read Benchmarks","text":"Created 2025-05-25 reprex v2.1.1","code":"library(sf) #> Linking to GEOS 3.12.2, GDAL 3.10.3, PROJ 9.4.1; sf_use_s2() is TRUE  f <- '/home/ctoney/data/gis/nz-building-outlines/nz-building-outlines.gpkg' system.time(d <- read_sf(f, \"nz_building_outlines\", use_stream = TRUE)) #>    user  system elapsed  #>  25.749   2.556  25.295  nrow(d) #> [1] 3289574  head(d) #> Simple feature collection with 6 features and 13 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 1776318 ymin: 5544066 xmax: 1818438 ymax: 5576891 #> Projected CRS: NZGD2000 / New Zealand Transverse Mercator 2000 #> # A tibble: 6 × 14 #>   building_id name  use     suburb_locality town_city territorial_authority #>         <int> <chr> <chr>   <chr>           <chr>     <chr>                 #> 1     2292051 \"\"    Unknown Marton          Marton    Rangitikei District   #> 2     2292353 \"\"    Unknown Durie Hill      Whanganui Whanganui District    #> 3     2292407 \"\"    Unknown Durie Hill      Whanganui Whanganui District    #> 4     2292675 \"\"    Unknown Feilding        Feilding  Manawatu District     #> 5     2292771 \"\"    Unknown Feilding        Feilding  Manawatu District     #> 6     2292825 \"\"    Unknown Feilding        Feilding  Manawatu District     #> # ℹ 8 more variables: capture_method <chr>, capture_source_group <chr>, #> #   capture_source_id <int>, capture_source_name <chr>, #> #   capture_source_from <date>, capture_source_to <date>, last_modified <date>, #> #   geom <MULTIPOLYGON [m]>"},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"GDAL : Frank Warmerdam, Even Rouault others (GDAL contributors) Chris Toney. Author, maintainer.           R interface/additional functionality Michael D. Sumner. Contributor. Frank Warmerdam. Contributor, copyright holder.           GDAL API documentation; src/progress_r.cpp gdal/port/cpl_progress.cpp Even Rouault. Contributor, copyright holder.           GDAL API documentation Marius Appel. Contributor, copyright holder.           configure.ac based https://github.com/appelmar/gdalcubes Daniel James. Contributor, copyright holder.           Boost combine hashes method src/cmb_table.h Peter Dimov. Contributor, copyright holder.           Boost combine hashes method src/cmb_table.h","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Toney C (2025). gdalraster: R Bindings 'Geospatial Data Abstraction Library' Raster API. USDA Forest Service, Rocky Mountain Research Station, Missoula, MT, USA. https://usdaforestservice.github.io/gdalraster/.","code":"@Manual{,   title = {gdalraster: R Bindings to the 'Geospatial Data Abstraction Library' Raster API},   author = {Chris Toney},   year = {2025},   organization = {USDA Forest Service, Rocky Mountain Research Station},   address = {Missoula, MT, USA},   url = {https://usdaforestservice.github.io/gdalraster/}, }"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R Bindings to GDAL","text":"gdalraster R interface Raster Vector APIs Geospatial Data Abstraction Library (GDAL). API bindings implemented exposed C++ classes GDALRaster GDALVector, along several stand-alone functions. Bindings GDAL Virtual Systems Interface (VSI) also included support file system operations binary /O URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files, well regular file systems. Calling signatures resemble native C, C++ Python APIs provided GDAL project. package supports: manual creation uninitialized raster vector datasets vector layer creation schema management read/set parameters metadata raster bands vector layers low-level /O build/read/set color tables raster attribute tables virtual raster (VRT) virtual cropping, resampling, kernel filtering, mosaicing wrapper gdalwarp reproject/resample/crop/mosaic coordinate transformations spatial reference systems geometry API operating raw vectors WKB WKT strings GDAL algorithms (dem_proc(), polygonize(), rasterize(), …) OGR vector utilities (ogrinfo(), ogr2ogr(), ogr_reproject(), ogr_manage interface) GDAL facilities vector geoprocessing (ogr_proc()) raster vector dataset management (inspect/copy files/rename/delete) create/append Seek-Optimized ZIP (SOZip) abstraction file system operations URLs, cloud storage, -memory files, etc. Standard C binary file /O VSI (class VSIFile) Additional functionality includes: class RunningStats calculates mean variance one pass, tracks min, max, sum, count (.e., summary statistics data stream). input data values stored memory, class can used compute statistics large data streams. class CmbTable identifies counts unique combinations integer values using hash table. combine() overlays multiple rasters unique ID assigned unique combination input values. Pixel counts unique combination obtained, combination IDs optionally written output raster. calc() evaluates R expression pixel raster layer stack layers. Individual pixel coordinates available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude. plot_raster() displays raster data using base R graphics. gdalraster may useful applications need scalable, low-level /O, prefer direct GDAL API. Comprehensive documentation provided package online.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Bindings to GDAL","text":"Install released version CRAN : CRAN provides pre-compiled binary packages Windows macOS. require separate installation external libraries GDAL.","code":"install.packages(\"gdalraster\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"linux","dir":"","previous_headings":"Installation > From source code","what":"Linux","title":"R Bindings to GDAL","text":"GDAL >= 3.1.0 built GEOS required, recent version recommended. Ubuntu, recent versions geospatial libraries can installed ubuntugis-unstable PPA following commands. Note libxml2 required R package xml2 dependency, go ahead install well: versions ubuntugis-unstable generally work well --date, less recent versions ubuntugis-stable PPA used instead. Package sf provides helpful instructions installing geospatial libraries Linux distributions. dependent libraries available system, install CRAN: install development version GitHub using package remotes:","code":"sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable sudo apt update sudo apt install libgdal-dev libgeos-dev libxml2-dev install.packages(\"gdalraster\") remotes::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"windows","dir":"","previous_headings":"Installation > From source code","what":"Windows","title":"R Bindings to GDAL","text":"RTools needed install source Windows. RTools since version 4.2 includes GDAL dependent libraries needed compile gdalraster. Note CRAN releases periodic revisions RTools often include updates libraries new versions become available. Release 6536 RTools 4.5 contains GDAL 3.10.2, GEOS 3.13.1 PROJ 9.5.1. RTools installed:","code":"# Install the development version from GitHub remotes::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"macos","dir":"","previous_headings":"Installation > From source code","what":"macOS","title":"R Bindings to GDAL","text":"GDAL can installed Homebrew: recommended mix source installations installation macOS binaries CRAN. Consider installing development version R-universe instead.","code":"brew install gdal # Install the development version from GitHub remotes::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"from-r-universe","dir":"","previous_headings":"Installation","what":"From R-universe","title":"R Bindings to GDAL","text":"R-universe provides pre-compiled binary packages Windows macOS track development version gdalraster. New packages built usually within ~1 hour recent commit branch main.","code":"# Install the development version from r-universe install.packages(\"gdalraster\", repos = c(\"https://usdaforestservice.r-universe.dev\", \"https://cran.r-project.org\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R Bindings to GDAL","text":"Reference Manual Raster API Tutorial Vector API Overview Raster Attribute Tables Raster Display GDAL Block Caching GDAL Config Quick Ref Vector Read Benchmarks","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for counting unique combinations of integers — CmbTable-class","title":"Class for counting unique combinations of integers — CmbTable-class","text":"CmbTable implements hash table vector integers key, count occurrences unique integer combination value. unique ID assigned unique combination input values. CmbTable C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed using $ operator. Note arguments class methods required must given order documented. Naming arguments optional may preferred readability.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for counting unique combinations of integers — CmbTable-class","text":"keyLen number integer values comprising combination. varNames Optional character vector names variables combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for counting unique combinations of integers — CmbTable-class","text":"object class CmbTable. Contains hash table vector keyLen integers key, count occurrences unique integer combination value. Class methods operate hash table described Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"## Constructors cmb <- new(CmbTable, keyLen) # or, giving the variable names: cmb <- new(CmbTable, keyLen, varNames)  ## Methods cmb$update(int_cmb, incr) cmb$updateFromMatrix(int_cmbs, incr) cmb$updateFromMatrixByRow(int_cmbs, incr) cmb$asDataFrame() cmb$asMatrix()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class for counting unique combinations of integers — CmbTable-class","text":"new(CmbTable, keyLen) Default variable names assigned V1, V2, .... Returns object class CmbTable. new(CmbTable, keyLen, varNames) Alternate constructor specify variable names. Returns object class CmbTable.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for counting unique combinations of integers — CmbTable-class","text":"$update(int_cmb, incr) Updates hash table integer combination numeric vector int_cmb (coerced integer truncation). combination exists table, count incremented incr. combination found table, inserted count set incr. Returns unique ID assigned combination. Combination IDs sequential integers starting 1. $updateFromMatrix(int_cmbs, incr) method $update() numeric matrix integer combinations int_cmbs (coerced integer truncation). matrix arranged column vector forming integer combination. example, rows matrix one row set keyLen rasters read extent pixel resolution (.e., row--row raster overlay). method calls $update() combination (column int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length ncol(int_cmbs) containing IDs assigned combinations. $updateFromMatrixByRow(int_cmbs, incr) method $updateFromMatrix() except integer combinations rows matrix int_cmbs (columns variables). method calls $update() combination (row int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length nrow(int_cmbs) containing IDs assigned combinations. $asDataFrame() Returns CmbTable data frame column cmbid containing unique combination IDs, column count containing counts occurrences, keyLen columns (names varNames) containing integer values comprising unique combination. $asMatrix() Returns CmbTable matrix column 1 (cmbid) containing unique combination IDs, column 2 (count) containing counts occurrences, columns 3:keyLen+2 (names varNames) containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 3, 6, byrow=FALSE) rownames(m) <- c(\"layer1\", \"layer2\", \"layer3\") print(m) #>        [,1] [,2] [,3] [,4] [,5] [,6] #> layer1    1    1    4    1    4    1 #> layer2    2    2    5    3    5    1 #> layer3    3    3    6    2    6    1  cmb <- new(CmbTable, 3, rownames(m)) cmb #> C++ object of class CmbTable #>  Columns: cmbid count layer1 layer2 layer3  cmb$updateFromMatrix(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count layer1 layer2 layer3 #> 1     4     1      1      1      1 #> 2     3     1      1      3      2 #> 3     2     2      4      5      6 #> 4     1     2      1      2      3  cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count layer1 layer2 layer3 #> 1     5     1      1      3      5 #> 2     4     1      1      1      1 #> 3     3     1      1      3      2 #> 4     2     3      4      5      6 #> 5     1     2      1      2      3  # same as above but matrix arranged with integer combinations in the rows m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 6, 3, byrow=TRUE) colnames(m) <- c(\"V1\", \"V2\", \"V3\") print(m) #>      V1 V2 V3 #> [1,]  1  2  3 #> [2,]  1  2  3 #> [3,]  4  5  6 #> [4,]  1  3  2 #> [5,]  4  5  6 #> [6,]  1  1  1  cmb <- new(CmbTable, 3) cmb$updateFromMatrixByRow(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count V1 V1.1 V2 #> 1     4     1  1    1  1 #> 2     3     1  1    3  2 #> 3     2     2  4    5  6 #> 4     1     2  1    2  3  cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count V1 V1.1 V2 #> 1     5     1  1    3  5 #> 2     4     1  1    1  1 #> 3     3     1  1    3  2 #> 4     2     3  4    5  6 #> 5     1     2  1    2  3"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default DEM processing options — DEFAULT_DEM_PROC","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"values used dem_proc() default processing options:","code":"list(          \"hillshade\" =    c(\"-z\", \"1\", \"-s\", \"1\", \"-az\", \"315\",                             \"-alt\", \"45\", \"-alg\", \"Horn\",                             \"-combined\", \"-compute_edges\"),          \"slope\" =        c(\"-s\", \"1\", \"-alg\", \"Horn\", \"-compute_edges\"),          \"aspect\" =       c(\"-alg\", \"Horn\", \"-compute_edges\"),          \"color-relief\" = character(),          \"TRI\" =          c(\"-alg\", \"Riley\", \"-compute_edges\"),          \"TPI\" =          c(\"-compute_edges\"),          \"roughness\" =    c(\"-compute_edges\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"","code":"DEFAULT_DEM_PROC"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"object class list length 7.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default nodata values by raster data type — DEFAULT_NODATA","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"values currently used gdalraster nodata value needed specified:","code":"list(\"Byte\" = 255, \"Int8\" = -128,          \"UInt16\" = 65535, \"Int16\" = -32767,          \"UInt32\" = 4294967293, \"Int32\" = -2147483647,          \"Float32\" = -99999.0, \"Float64\" = -99999.0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"","code":"DEFAULT_NODATA"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"object class list length 8.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"GDALRaster provides interface accessing raster dataset via GDAL calling methods underlying GDALDataset, GDALDriver GDALRasterBand objects. See https://gdal.org/en/stable/api/index.html details GDAL Raster API. GDALRaster C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Fields methods class accessed using $ operator. Note arguments class methods required must given order documented. Naming arguments optional may preferred readability.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"filename Character string containing file name raster dataset open, full path relative current working directory. cases, filename may refer local file system, instead contain format-specific information access dataset database connection string, URL, /vsiPREFIX/, etc. (see GDAL raster format descriptions: https://gdal.org/en/stable/drivers/raster/index.html). read_only Logical. TRUE open dataset read-(default), FALSE open write access. open_options Optional character vector NAME=VALUE pairs specifying dataset open options. shared Logical. FALSE open dataset without using shared mode. Default TRUE (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"object class GDALRaster, contains pointer opened dataset. Class methods operate dataset described Details, along set writable fields per-object settings. Values may assigned class fields needed lifetime object (.e., regular <- = assignment).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"dataset object opened update access (read_only = FALSE), recommended open new dataset underlying filename. Datasets opened shared mode default. allows sharing GDALDataset handles dataset callers open shared filename, dataset opened thread. Functions gdalraster processing open input datasets shared mode. provides potential efficiency cases object class GDALRaster already open read-mode filename (avoids overhead associated initial dataset opening using existing handle, potentially makes use existing data GDAL block cache). Opening shared mode can disabled specifying optional shared parameter class constructor. $read() method perform automatic resampling specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, GDAL_RASTERIO_RESAMPLING configuration option also set override default resampling one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE (see set_config_option()).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"","code":"## Constructors # read-only by default: ds <- new(GDALRaster, filename) # for update access: ds <- new(GDALRaster, filename, read_only = FALSE) # to specify dataset open options: ds <- new(GDALRaster, filename, read_only = TRUE|FALSE, open_options) # to open without using shared mode: new(GDALRaster, filename, read_only, open_options, shared = FALSE)  ## Read/write fields (per-object settings) ds$infoOptions ds$quiet ds$readByteAsRaw  ## Methods ds$getFilename() ds$setFilename(filename) ds$open(read_only) ds$isOpen() ds$getFileList()  ds$info() ds$infoAsJSON()  ds$getDriverShortName() ds$getDriverLongName()  ds$getRasterXSize() ds$getRasterYSize() ds$getRasterCount()  ds$addBand(dataType, options)  ds$getGeoTransform() ds$setGeoTransform(transform)  ds$getProjection() ds$getProjectionRef() ds$setProjection(projection)  ds$bbox() ds$res() ds$dim() ds$apply_geotransform(col_row) ds$get_pixel_line(xy) ds$get_block_indexing(band)  ds$getDescription(band) ds$setDescription(band, desc) ds$getBlockSize(band) ds$getActualBlockSize(band, xblockoff, yblockoff) ds$getOverviewCount(band) ds$buildOverviews(resampling, levels, bands) ds$getDataTypeName(band) ds$getNoDataValue(band) ds$setNoDataValue(band, nodata_value) ds$deleteNoDataValue(band) ds$getMaskFlags(band) ds$getMaskBand(band) ds$getUnitType(band) ds$setUnitType(band, unit_type) ds$getScale(band) ds$setScale(band, scale) ds$getOffset(band) ds$setOffset(band, offset) ds$getRasterColorInterp(band) ds$setRasterColorInterp(band, col_interp)  ds$getMinMax(band, approx_ok) ds$getStatistics(band, approx_ok, force) ds$clearStatistics() ds$getHistogram(band, min, max, num_buckets, incl_out_of_range, approx_ok) ds$getDefaultHistogram(band, force)  ds$getMetadata(band, domain) ds$setMetadata(band, metadata, domain) ds$getMetadataItem(band, mdi_name, domain) ds$setMetadataItem(band, mdi_name, mdi_value, domain) ds$getMetadataDomainList(band)  ds$read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) ds$write(band, xoff, yoff, xsize, ysize, rasterData) ds$fillRaster(band, value, ivalue)  ds$getColorTable(band) ds$getPaletteInterp(band) ds$setColorTable(band, col_tbl, palette_interp) ds$clearColorTable(band)  ds$getDefaultRAT(band) ds$setDefaultRAT(band, df)  ds$flushCache()  ds$getChecksum(band, xoff, yoff, xsize, ysize)  ds$close()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"new(GDALRaster, filename, read_only) Returns object class GDALRaster. read_only argument defaults TRUE specified. new(GDALRaster, filename, read_only, open_options) Alternate constructor passing dataset open_options, character vector NAME=VALUE pairs. read_only required form constructor, TRUE read-access, FALSE open write access. Returns object class GDALRaster. new(GDALRaster, filename, read_only, open_options, shared) Alternate constructor specifying shared mode dataset opening. shared argument defaults TRUE can set FALSE constructor (see Note). arguments required form constructor, open_options can NULL. Returns object class GDALRaster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"read-write-fields","dir":"Reference","previous_headings":"","what":"Read/write fields","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"$infoOptions character vector command-line arguments control output $info() $infoAsJSON() (see ). Defaults character(0). Can set vector strings specifying arguments gdalinfo command-line utility, e.g., c(\"-nomd\", \"-norat\", \"-noct\"). Restore default setting empty string (\"\") character(0). $quiet logical value, FALSE default. field can set TRUE suppress various messages well progress reporting potentially long-running processes building overviews computation statistics histograms. $readByteAsRaw logical value, FALSE default. field can set TRUE affect data type returned $read() read_ds(). underlying band data type Byte readByteAsRaw TRUE output type raw rather integer. See also as_raw argument read_ds() control non-persistent setting. underlying band data type Byte setting effect.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"$getFilename() Returns character string containing filename associated GDALRaster object (filename originally used open dataset). May regular filename, database connection string, URL, etc. $setFilename(filename) Sets filename underlying dataset already associated filename. Explicitly setting filename advanced setting used user determined needed. Writing certain virtual datasets file one potential use case (e.g., dataset returned autoCreateWarpedVRT()). $open(read_only) (Re-)opens raster dataset existing filename. Use method open dataset closed using $close(). May used re-open dataset different read/write access (read_only set TRUE FALSE). method first close open dataset, required call $close() explicitly case. return value, called side effects. $isOpen() Returns logical indicating whether associated raster dataset open. $getFileList() Returns character vector files believed part dataset. returns empty string (\"\") means believed local file system files associated dataset (e.g., virtual file system). returned filenames normally relative absolute paths depending path used originally open dataset. $info() Prints various information raster dataset console (return value, called side effect ). Equivalent output gdalinfo command-line utility (gdalinfo filename, using default infoOptions). See field $infoOptions setting arguments gdalinfo. $infoAsJSON() Returns information raster dataset JSON-formatted string. Equivalent output gdalinfo command-line utility (gdalinfo -json filename, using default infoOptions). See field $infoOptions setting arguments gdalinfo. $getDriverShortName() Returns short name raster format driver. $getDriverLongName() Returns long name raster format driver. $getRasterXSize() Returns number pixels along x dimension. $getRasterYSize() Returns number pixels along y dimension. $getRasterCount() Returns number raster bands dataset. methods described operate individual bands, band argument integer band number (1-based). $addBand(dataType, options) Adds band dataset underlying format supports action. formats , \"MEM\" \"VRT\" notable exceptions support adding bands. added band always last band. dataType character string containing data type name (e.g., \"Byte\", \"Int16\", \"UInt16\", \"Int32\", \"Float32\", etc). options argument character vector NAME=VALUE option strings. Supported options format specific. Note options argument required may given NULL. Returns logical TRUE success FALSE band added. $getGeoTransform() Returns affine transformation coefficients transforming pixel/line raster space (column/row) projection coordinate space (geospatial x/y). return value numeric vector length six. See https://gdal.org/en/stable/tutorials/geotransforms_tut.html details affine transformation. 1-based indexing R, geotransform vector contains (map units raster spatial reference system): $setGeoTransform(transform) Sets affine transformation coefficients dataset. transform numeric vector length six. Returns logical TRUE success FALSE geotransform set. $getProjection() Returns coordinate reference system raster OGC WKT format string. Equivalent ds$getProjectionRef(). $getProjectionRef() Returns coordinate reference system raster OGC WKT format string. empty string returned projection definition available. $setProjection(projection) Sets projection reference dataset. projection string OGC WKT format. Returns logical TRUE success FALSE projection set. $bbox() Returns numeric vector length four containing bounding box (xmin, ymin, xmax, ymax). $res() Returns numeric vector length two containing resolution (pixel width, pixel height positive values) non-rotated raster. warning emitted NA values returned raster rotated geotransform (see $getGeoTransform() ). $dim() Returns integer vector length three containing raster dimensions (xsize, ysize, number bands). Equivalent :   $apply_geotransform(col_row) Applies geotransform coefficients raster coordinates pixel/line space (column/row), converting georeferenced (x/y) coordinates. col_row numeric matrix raster col/row coordinates (two-column data frame coerced numeric matrix). Returns numeric matrix geospatial x/y coordinates. See stand-alone function name (apply_geotransform()) info examples. $get_pixel_line(xy) Converts geospatial coordinates pixel/line (raster column/row numbers). xy numeric matrix geospatial x,y coordinates spatial reference system raster (two-column data frame coerced numeric matrix). Returns integer matrix raster pixel/line. See stand-alone function name (get_pixel_line()) info examples. $get_block_indexing(band) Helper method returning numeric matrix named columns: xblockoff, yblockoff, xoff, yoff, xsize, ysize, xmin, xmax, ymin, ymax. meanings names, refer following class methods : $getBlockSize(), $getActualBlockSize $read(). offsets zero-based. columns xmin, xmax, ymin ymax give extent block geospatial coordinates. method provides indexing values block layout given band number. returned matrix number rows equal number blocks comprising band, blocks ordered left right, top bottom. xoff/yoff values pixel offsets start block. xsize/ysize values give actual block sizes accounting potentially incomplete blocks along right bottom edges. $getDescription(band) Returns string containing description band. empty string returned description set band. Passing band = 0 return dataset-level description. $setDescription(band, desc) Sets description band. desc character string set. return value. (Passing band = 0 can used set dataset-level description. Note dataset description generally filename used open dataset. usually changed calling method existing dataset.) $getBlockSize(band) Returns integer vector length two (xsize, ysize) containing \"natural\" block size band. GDAL concept natural block size rasters applications can organize data access efficiently file formats. natural block size block size efficient accessing format. many formats simply whole row case block xsize $getRasterXSize() block ysize 1. However, tiled images block size typically tile size. Note X Y block sizes divide image size evenly, meaning right bottom edge blocks may incomplete. $getActualBlockSize(band, xblockoff, yblockoff) Returns integer vector length two (xvalid, yvalid) containing actual block size given block offset band. Handles partial blocks edges raster returns true number pixels. xblockoff integer value, horizontal block offset calculate number valid pixels, zero indicating left block, 1 next block, etc. yblockoff likewise vertical block offset, zero indicating top block, 1 next block, etc. $getOverviewCount(band) Returns number overview layers (.k.. pyramids) available band. $buildOverviews(resampling, levels, bands) Build one raster overview images using specified downsampling algorithm. resampling character string, one AVERAGE, AVERAGE_MAGPHASE, RMS, BILINEAR, CUBIC, CUBICSPLINE, GAUSS, LANCZOS, MODE, NEAREST NONE. levels integer vector giving list overview decimation factors build (e.g., c(2, 4, 8)), 0 delete overviews (least external overviews (.ovr) GTiff internal overviews). bands integer vector giving list band numbers build overviews , 0 build bands. Note GTiff, overviews created internally dataset open update mode, external overviews (.ovr) created dataset open read-. External overviews created GTiff format may compressed using COMPRESS_OVERVIEW configuration option. compression methods supported GTiff driver available (e.g., set_config_option(\"COMPRESS_OVERVIEW\", \"LZW\")). Since GDAL 3.6, COMPRESS_OVERVIEW honored creating internal overviews GTiff files. GDAL documentation gdaladdo command-line utility describes additional configuration overview building. See also set_config_option(). return value, called side effects. $getDataTypeName(band) Returns name pixel data type band. possible data types : raster formats including GeoTIFF (\"GTiff\") Erdas Imagine .img (\"HFA\") support sub-byte data types. Rasters can created data types specifying \"NBITS=n\" creation option n=1...7 GTiff n=1/2/4 HFA. cases, $getDataTypeName() reports apparent type \"Byte\". GTiff also supports n=9...15 (UInt16 type) n=17...31 (UInt32 type), n=16 accepted Float32 generate half-precision floating point values. $getNoDataValue(band) Returns nodata value band one exists. generally special value defined mark pixels valid data. NA returned nodata value defined band. raster formats support designated nodata value. $setNoDataValue(band, nodata_value) Sets nodata value band. nodata_value numeric value defined nodata marker. Depending format, changing nodata value may may effect pixel values raster just created (often ). thus advised call $fillRaster() explicitly intent initialize raster nodata value. case, changing existing nodata value, one already exists initialized dataset, effect pixels whose values matched previous nodata value. Returns logical TRUE success FALSE nodata value set. $deleteNoDataValue(band) Removes nodata value band. affects definition nodata value raster formats support one (modify pixel values). return value. error raised nodata value removed. $getMaskFlags(band) Returns status flags mask band associated band. Masks represented Byte bands value zero indicating nodata non-zero values indicating valid data. Normally value 255 used valid data pixels. GDAL supports external (.msk) mask bands, normal Byte alpha (transparency) band mask (value 0 treated valid data). masks may regular raster bands datasource, implied mask band nodata value ALL_VALID mask. See RFC 15: Band Masks details (https://gdal.org/en/stable/development/rfc/rfc15_nodatabitmask.html. Returns named list GDAL mask flags logical values, following definitions: ALL_VALID: invalid pixels, mask values 255. used normally flag set. PER_DATASET: mask band shared bands dataset. ALPHA: mask band actually alpha band may values 0 255. NODATA: Indicates mask actually generated nodata values (mutually exclusive ALPHA). $getMaskBand(band) Returns mask filename band number associated band. return value named list two elements. MaskFile element gives filename mask band located, e.g., file name main dataset suffixed .msk case GDAL external mask file. MaskFile empty string derived ALL_VALID NODATA masks, internally freestanding bands considered part dataset. MaskBand element gives band number mask regular alpha band main dataset external mask file. BandNumber 0 ALL_VALID NODATA masks. $getUnitType(band) Returns name unit type pixel values band (e.g., \"m\" \"ft\"). empty string (\"\") returned units available. $setUnitType(band, unit_type) Sets name unit type pixel values band. unit_type one empty string \"\" (default indicating unknown), \"m\" indicating meters, \"ft\" indicating feet, though nonstandard values allowed. Returns logical TRUE success FALSE unit type set. $getScale(band) Returns pixel value scale (units value = (raw value * scale) + offset) band. value (combination $getOffset() value) can used transform raw pixel values units returned $getUnitType(). Returns NA scale value defined band. $setScale(band, scale) Sets pixel value scale (units value = (raw value * scale) + offset) band. Many raster formats implement method. Returns logical TRUE success FALSE scale set. $getOffset(band) Returns pixel value offset (units value = (raw value * scale) + offset) band. value (combination $getScale() value) can used transform raw pixel values units returned $getUnitType(). Returns NA offset value defined band. $setOffset(band, offset) Sets pixel value offset (units value = (raw value * scale) + offset) band. Many raster formats implement method. Returns logical TRUE success FALSE offset set. $getRasterColorInterp(band) Returns string describing color interpretation band. color interpretation values meanings : $setRasterColorInterp(band, col_interp) Sets color interpretation band. See list valid values col_interp (passed string). $getMinMax(band, approx_ok) Returns numeric vector length two containing min/max values band. approx_ok TRUE raster format knows values intrinsically values returned. work, subsample blocks read get approximate min/max. band nodata value excluded minimum maximum. approx_ok FALSE, pixels read used compute exact range. $getStatistics(band, approx_ok, force) Returns numeric vector length four containing minimum, maximum, mean standard deviation pixel values band (excluding nodata pixels). raster formats cache statistics allowing fast retrieval first request. approx_ok: TRUE: Approximate statistics sufficient, case overviews subset raster tiles may used computing statistics. FALSE: pixels read used compute statistics (computation forced). force: TRUE: raster scanned compute statistics. computed, statistics generally “set” back raster band format supports caching statistics. (Note: ComputeStatistics() GDAL API called automatically . change behavior GetStatistics() API, definitive force.) FALSE: Results returned can done quickly (.e., without scanning raster, typically using pre-existing STATISTICS_xxx metadata items). NAs returned statistics obtained quickly. $clearStatistics() Clear statistics. implemented now PAM supported datasets (Persistable Auxiliary Metadata via .aux.xml file). GDAL >= 3.2. $getHistogram(band, min, max, num_buckets, incl_out_of_range, approx_ok) Computes raster histogram band. min lower bound histogram. max upper bound histogram. num_buckets number buckets use (bucket size (max - min) / num_buckets). incl_out_of_range logical scalar: TRUE values histogram range mapped first bucket values mapped last bucket, FALSE range values discarded. approx_ok logical scalar: TRUE approximate histogram OK (generally faster), FALSE exactly computed histogram. Returns histogram numeric vector length num_buckets. $getDefaultHistogram(band, force) Returns default raster histogram band. GDAL API, method overridden derived classes (GDALPamRasterBand, VRTDataset, HFADataset...) may able fetch efficiently already stored histogram. force logical scalar: TRUE force computation default histogram; FALSE default histogram available, warning emitted returned list 0-length histogram vector. Returns list length four containing named elements $min (lower bound), $max (upper bound), $num_buckets (number buckets), $histogram (numeric vector length num_buckets). $getMetadata(band, domain) Returns character vector metadata NAME=VALUE pairs exist specified domain, empty string (\"\") metadata items domain (metadata context GDAL Raster Data Model: https://gdal.org/en/stable/user/raster_data_model.html). Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve metadata default domain. $setMetadata(band, metadata, domain) Sets metadata specified domain. metadata argument given character vector NAME=VALUE pairs. Pass band = 0 set dataset-level metadata, pass integer band number set band-level metadata. Use domain = \"\" (empty string) set item default domain. Returns logical TRUE success FALSE metadata set. $getMetadataItem(band, mdi_name, domain) Returns value specific metadata item named mdi_name specified domain, empty string (\"\") matching item found. Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve item default domain. $setMetadataItem(band, mdi_name, mdi_value, domain) Sets value (mdi_value) specific metadata item named mdi_name specified domain. Pass band = 0 set dataset-level metadata, pass integer band number set band-level metadata. Use domain = \"\" (empty string) set item default domain. Returns logical TRUE success FALSE metadata set. $getMetadataDomainList(band) Returns character vector metadata domains empty string (\"\"). Set band = 0 retrieve dataset-level domains, integer band number retrieve band-level domains. $read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) Reads region raster data band. method takes care pixel decimation / replication output size (out_xsize * out_ysize) different size region accessed (xsize * ysize). xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region accessed. ysize height pixels region accessed. out_xsize width output array desired region read (typically value xsize). out_ysize height output array desired region read (typically value ysize). Returns numeric complex vector containing values read. organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64). rescaling data performed (see $getScale() $getOffset() ). error raised read operation fails. See also setting $readByteAsRaw . $write(band, xoff, yoff, xsize, ysize, rasterData) Writes region raster data band. xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region write. ysize height pixels region write. rasterData numeric complex vector containing values write. organized left right, top bottom pixel order. NA rasterData replaced suitable nodata value prior writing (see $getNoDataValue() $setNoDataValue() ). error raised operation fails (return value). $fillRaster(band, value, ivalue) Fills band constant value. GDAL makes guarantees values pixels newly created files set , method can used clear band specified \"default\" value. fill value passed numeric, converted underlying raster data type writing file. ivalue argument allows setting imaginary component complex value. Note ivalue required argument can set 0 real data types. return value. error raised operation fails. $getColorTable(band) Returns color table associated band, NULL associated color table. color table returned integer matrix five columns. associate color raster pixel, pixel value used subscript color table. means colors always applied starting zero ascending (see GDAL Color Table). Column 1 contains pixel values. Interpretation columns 2:5 depends value $getPaletteInterp() (see ). \"RGB\", columns 2:5 contain red, green, blue, alpha 0-255 integer values. $getPaletteInterp(band) band associated color table, method returns character string palette interpretation columns 2:5 table. empty string (\"\") returned band associated color table. palette interpretation values meanings : Gray: column 2 contains grayscale values (columns 3:5 unused) RGB: columns 2:5 contain red, green, blue, alpha CMYK: columns 2:5 contain cyan, magenta, yellow, black HLS: columns 2:4 contain hue, lightness, saturation (column 5 unused) $setColorTable(band, col_tbl, palette_interp) Sets raster color table band (see GDAL Color Table). col_tbl integer matrix data frame either four five columns (see $getColorTable() ). Column 1 contains pixel values. Valid values integers 0 larger (note GTiff format supports color tables Byte UInt16 bands). Negative values skipped warning emitted. Interpretation columns 2:5 depends value $getPaletteInterp() (see ). RGB, columns 2:4 contain red, green, blue 0-255 integer values, optional column 5 contains alpha transparency values (defaults 255 opaque). palette_interp string, one Gray, RGB, CMYK HLS (see $getPaletteInterp() ). Returns logical TRUE success FALSE color table set. $clearColorTable(band) Clears raster color table band. Returns logical TRUE success FALSE color table cleared, e.g., action supported driver. $getDefaultRAT(band) Returns Raster Attribute Table band data frame, NULL associated Raster Attribute Table. See stand-alone function buildRAT() details Raster Attribute Table format. $setDefaultRAT(band, df) Sets default Raster Attribute Table band data frame df. input data frame checked attribute \"GDALRATTableType\" can values \"thematic\" \"athematic\" (continuous data). Columns data frame checked attribute \"GFU\" (\"GDAL field usage\"). \"GFU\" attribute missing, value \"Generic\" used (corresponding GFU_Generic GDAL API, general purpose field). Columns , specific field usage values generally present df, fields containing set unique (discrete) pixel values (GFU \"MinMax\"), pixel counts (GFU \"PixelCount\"), class names (GFU \"Name\"), color values (GFUs \"Red\", \"Green\", \"Blue\"), etc. data frame also checked attributes \"Row0Min\" \"BinSize\" can numeric values describe linear binning. See stand-alone function buildRAT() details GDAL Raster Attribute Table format representation data frame. $flushCache() Flush write cached data disk. raster data written via GDAL calls, buffered internally written disk. Using method preclude calling $close() properly close dataset ensure important data addressed $flushCache() written file (see also $open() ). return value, called side effect. $getChecksum(band, xoff, yoff, xsize, ysize) Returns 16-bit integer (0-65535) checksum region raster data band. Floating point data converted 32-bit integer decimal portions raster data affect checksum. Real imaginary components complex bands influence result. xoff pixel (column) offset window read. yoff line (row) offset window read. Raster row/column offsets use 0-based indexing. xsize width pixels window read. ysize height pixels window read. $close() Closes GDAL dataset (return value, called side effects). Calling $close() results proper cleanup, flushing pending writes. Forgetting close dataset opened update mode formats GTiff result unable open afterwards. GDALRaster object still available calling $close(). dataset can re-opened existing filename $open(read_only=TRUE) $open(read_only=FALSE).","code":"c(ds$getRasterXSize(), ds$getRasterYSize(), ds$getRasterCount())"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file) ds #> C++ object of class GDALRaster #>  Driver : FARSITE v.4 Landscape File (.lcp) (LCP) #>  DSN    : /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>  Dim    : 143, 107, 8 #>  CRS    : NAD83 / UTM zone 12N (EPSG:26912) #>  Res    : 30.000000, 30.000000 #>  Bbox   : 323476.071971, 5101871.983031, 327766.071971, 5105081.983031  ## print information about the dataset to the console ds$info() #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>        /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6269]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]], #>         ID[\"EPSG\",16012]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   DESCRIPTION=LCP file created by GDAL. #>   LATITUDE=46 #>   LINEAR_UNIT=Meters #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #>   Metadata: #>     ELEVATION_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ELEVATION_MAX=3046 #>     ELEVATION_MIN=-9999 #>     ELEVATION_NUM_CLASSES=-1 #>     ELEVATION_UNIT=0 #>     ELEVATION_UNIT_NAME=Meters #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #>   Metadata: #>     SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     SLOPE_MAX=54 #>     SLOPE_MIN=-9999 #>     SLOPE_NUM_CLASSES=53 #>     SLOPE_UNIT=0 #>     SLOPE_UNIT_NAME=Degrees #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #>   Metadata: #>     ASPECT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ASPECT_MAX=359 #>     ASPECT_MIN=-9999 #>     ASPECT_NUM_CLASSES=-1 #>     ASPECT_UNIT=2 #>     ASPECT_UNIT_NAME=Azimuth degrees #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #>   Metadata: #>     FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     FUEL_MODEL_MAX=183 #>     FUEL_MODEL_MIN=-9999 #>     FUEL_MODEL_NUM_CLASSES=12 #>     FUEL_MODEL_OPTION=0 #>     FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed #>     FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183 #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #>   Metadata: #>     CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_COV_MAX=75 #>     CANOPY_COV_MIN=-9999 #>     CANOPY_COV_NUM_CLASSES=8 #>     CANOPY_COV_UNIT=1 #>     CANOPY_COV_UNIT_NAME=Percent #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #>   Metadata: #>     CANOPY_HT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_HT_MAX=390 #>     CANOPY_HT_MIN=-9999 #>     CANOPY_HT_NUM_CLASSES=8 #>     CANOPY_HT_UNIT=3 #>     CANOPY_HT_UNIT_NAME=Meters x 10 #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #>   Metadata: #>     CBH_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBH_MAX=100 #>     CBH_MIN=-9999 #>     CBH_NUM_CLASSES=22 #>     CBH_UNIT=3 #>     CBH_UNIT_NAME=Meters x 10 #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density #>   Metadata: #>     CBD_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBD_MAX=34 #>     CBD_MIN=-9999 #>     CBD_NUM_CLASSES=15 #>     CBD_UNIT=3 #>     CBD_UNIT_NAME=kg/m^3 x 100  ## retrieve the raster format name ds$getDriverShortName() #> [1] \"LCP\" ds$getDriverLongName() #> [1] \"FARSITE v.4 Landscape File (.lcp)\"  ## retrieve a list of files composing the dataset ds$getFileList() #> [1] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp\" #> [2] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj\"  ## retrieve dataset parameters ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getGeoTransform() #> [1]  323476.1      30.0       0.0 5105082.0       0.0     -30.0 ds$getProjection() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$getRasterCount() #> [1] 8 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res() #> [1] 30 30 ds$dim() #> [1] 143 107   8  ## retrieve some band-level parameters ds$getDescription(band = 1) #> [1] \"Elevation\" ds$getBlockSize(band = 1) #> [1] 143   1 ds$getOverviewCount(band = 1) #> [1] 0 ds$getDataTypeName(band = 1) #> [1] \"Int16\" # LCP format does not support an intrinsic nodata value so this returns NA: ds$getNoDataValue(band = 1) #> [1] NA  ## LCP driver reports several dataset- and band-level metadata ## see the format description at https://gdal.org/en/stable/drivers/raster/lcp.html ## set band = 0 to retrieve dataset-level metadata ## set domain = \"\" (empty string) for the default metadata domain ds$getMetadata(band = 0, domain = \"\") #> [1] \"DESCRIPTION=LCP file created by GDAL.\" #> [2] \"LATITUDE=46\"                           #> [3] \"LINEAR_UNIT=Meters\"                     ## retrieve metadata for a band as a vector of name=value pairs ds$getMetadata(band = 4, domain = \"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           ## retrieve the value of a specific metadata item ds$getMetadataItem(band = 2, mdi_name = \"SLOPE_UNIT_NAME\", domain = \"\") #> [1] \"Degrees\"  ## read one row of pixel values from band 1 (elevation) ## raster row/column index are 0-based ## the upper left corner is the origin ## read the tenth row: ncols <- ds$getRasterXSize() rowdata <- ds$read(band = 1, xoff = 0, yoff = 9,                    xsize = ncols, ysize = 1,                    out_xsize = ncols, out_ysize = 1) head(rowdata) #> [1] -9999 -9999 -9999  2456  2466  2479  ds$close()  ## create a new raster using lcp_file as a template new_file <- file.path(tempdir(), \"storml_newdata.tif\") rasterFromRaster(srcfile = lcp_file,                  dstfile = new_file,                  nbands = 1,                  dtName = \"Byte\",                  init = -9999) #> initializing destination raster... #> done  ds_new <- new(GDALRaster, new_file, read_only = FALSE)  ## write random values to all pixels set.seed(42) ncols <- ds_new$getRasterXSize() nrows <- ds_new$getRasterYSize() for (row in 0:(nrows - 1)) {     rowdata <- round(runif(ncols, 0, 100))     ds_new$write(band = 1,                  xoff = 0,                  yoff = row,                  xsize = ncols,                  ysize = 1,                  rowdata) }  ## re-open in read-only mode when done writing ## this will ensure flushing of any pending writes (implicit $close) ds_new$open(read_only = TRUE)  ## getStatistics returns min, max, mean, sd, and sets stats in the metadata ds_new$getStatistics(band = 1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 100.00000  49.90667  29.05491 ds_new$getMetadataItem(band = 1, \"STATISTICS_MEAN\", \"\") #> [1] \"49.906672766486\"  ## close the dataset for proper cleanup ds_new$close() # \\donttest{ ## using a GDAL Virtual File System handler '/vsicurl/' ## see: https://gdal.org/en/stable/user/virtual_file_systems.html url <- \"/vsicurl/https://raw.githubusercontent.com/\" url <- paste0(url, \"usdaforestservice/gdalraster/main/sample-data/\") url <- paste0(url, \"lf_elev_220_mt_hood_utm.tif\")  set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"20\") set_config_option(\"GDAL_HTTP_TIMEOUT\", \"20\") if (http_enabled() && vsi_stat(url)) {   ds <- new(GDALRaster, url)   plot_raster(ds, legend = TRUE, main = \"Mount Hood elevation (m)\")   ds$close() }  set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"\") set_config_option(\"GDAL_HTTP_TIMEOUT\", \"\") # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"GDALVector provides interface accessing vector layer GDAL dataset calling methods underlying OGRLayer object. object class GDALVector persists open connection dataset, exposes methods : retrieve layer information, set attribute spatial filters, traverse read feature data traditional row-based cursor (including analog DBI::dbFetch()), read via column-oriented Arrow Array stream, write new features layer, edit/overwrite existing features, upsert, delete features, perform data manipulation within transactions. GDALVector C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Fields methods class accessed using $ operator. Note arguments class methods required must given order documented. GDALVector methods take zero one argument, usually issue. Class constructors main exception. Naming arguments optional may preferred readability.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"dsn Character string containing data source name (DSN), usually filename database connection string. layer Character string containing name layer within data source. May also given SQL SELECT statement executed data source, defining layer result set. read_only Logical scalar. TRUE open layer read-(default), FALSE open write access. open_options Optional character vector NAME=VALUE pairs specifying dataset open options. spatial_filter Optional character string containing geometry Well Known Text (WKT) format represents spatial filter. dialect Optional character string control statement dialect SQL used define layer. default, OGR SQL engine used, except RDBMS drivers use dedicated SQL engine, unless \"OGRSQL\" explicitly passed dialect. \"SQLITE\" dialect can also used.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"object class GDALVector, contains pointers opened layer GDAL dataset owns . Class methods operate layer described Details, along set writable fields per-object settings. Values may assigned class fields needed lifetime object (.e., regular <- = assignment).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"","code":"## Constructors # for single-layer file formats such as shapefile lyr <- new(GDALVector, dsn) # specifying the layer name, or SQL statement defining the layer lyr <- new(GDALVector, dsn, layer) # for update access lyr <- new(GDALVector, dsn, layer, read_only = FALSE) # using dataset open options lyr <- new(GDALVector, dsn, layer, read_only, open_options) # setting a spatial filter and/or specifying the SQL dialect lyr <- new(GDALVector, dsn, layer, read_only, open_options, spatial_filter, dialect)  ## Read/write fields (per-object settings) lyr$defaultGeomColName lyr$returnGeomAs lyr$promoteToMulti lyr$convertToLinear lyr$wkbByteOrder lyr$arrowStreamOptions lyr$quiet lyr$transactionsForce  ## Methods lyr$open(read_only) lyr$isOpen() lyr$getDsn() lyr$getFileList() lyr$info() lyr$getDriverShortName() lyr$getDriverLongName()  lyr$getName() lyr$getFieldNames() lyr$testCapability() lyr$getFIDColumn() lyr$getGeomType() lyr$getGeometryColumn() lyr$getSpatialRef() lyr$bbox() lyr$getLayerDefn() lyr$getFieldDomain(domain_name)  lyr$setAttributeFilter(query) lyr$getAttributeFilter() lyr$setIgnoredFields(fields) lyr$setSelectedFields(fields) lyr$getIgnoredFields()  lyr$setSpatialFilter(wkt) lyr$setSpatialFilterRect(bbox) lyr$getSpatialFilter() lyr$clearSpatialFilter()  lyr$getFeatureCount() lyr$getNextFeature() lyr$setNextByIndex(i) lyr$getFeature(fid) lyr$resetReading() lyr$fetch(n)  lyr$getArrowStream() lyr$releaseArrowStream()  lyr$setFeature(feature) lyr$createFeature(feature) lyr$batchCreateFeature(feature_set) lyr$upsertFeature(feature) lyr$getLastWriteFID() lyr$deleteFeature(fid) lyr$syncToDisk()  lyr$startTransaction() lyr$commitTransaction() lyr$rollbackTransaction()  lyr$getMetadata() lyr$setMetadata(metadata) lyr$getMetadataItem(mdi_name)  lyr$close()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"new(GDALVector, dsn) first layer index assumed layer argument omitted, form constructor might used single-layer formats like shapefile. new(GDALVector, dsn, layer) Constructor specifying name layer open. layer argument may also given SQL SELECT statement define layer result set. new(GDALVector, dsn, layer, read_only) Constructor specifying read/write access (read_only = {TRUE|FALSE}). layer argument required form constructor, may given empty string (\"\"), case first layer index assumed. new(GDALVector, dsn, layer, read_only, open_options) Constructor specifying dataset open options character vector NAME=VALUE pairs. new(GDALVector, dsn, layer, read_only, open_options, spatial_filter, dialect)) Constructor specify spatial filter /SQL dialect. arguments required form constructor, open_options may NULL, spatial_filter dialect may empty string (\"\").","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"read-write-fields","dir":"Reference","previous_headings":"","what":"Read/write fields","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"$defaultGeomColName Character string specifying name use returned columns geometry column name source layer empty, like shapefiles etc. Defaults \"geom\". $returnGeomAs Character string specifying return format feature geometries. Must one WKB (default), WKB_ISO, WKT, WKT_ISO, BBOX, NONE. Using WKB/WKT exports 99-402 extended dimension (Z) types Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon GeometryCollection. geometry types, equivalent using WKB_ISO/WKT_ISO (see https://libgeos.org/specifications/wkb/). Using BBOX exports list numeric vectors, length 4 values xmin, ymin, xmax, ymax. empty geometry encountered values NA_real_ corresponding location. Using NONE result geometry value present feature returned. $promoteToMulti logical value specifying whether automatically promote geometries Polygon MultiPolygon, Point MultiPoint, LineString MultiLineString read operations (.e., methods $getFeature(), $getNextFeature(), $fetch()). Defaults FALSE. Setting TRUE may useful reading layers shapefiles mix, e.g., Polygons MultiPolygons. $convertToLinear logical value specifying whether convert non-linear geometry types linear geometry types approximating (.e., read operations methods $getFeature(), $getNextFeature(), $fetch()). Defaults FALSE. set TRUE, handled conversions : wkbCurvePolygon -> wkbPolygon wkbCircularString -> wkbLineString wkbCompoundCurve -> wkbLineString wkbMultiSurface -> wkbMultiPolygon wkbMultiCurve -> wkbMultiLineString $wkbByteOrder Character string specifying byte order WKB geometries. Must either LSB (Least Significant Byte first, default) MSB (Significant Byte first). $arrowStreamOptions Character vector \"NAME=VALUE\" pairs giving options used $getArrowStream() method (see ). available options may driver GDAL version specific. Options available GDAL 3.8 listed . information options Arrow stream, see GDAL API documentation OGR_L_GetArrowStream(). INCLUDE_FID=YES/. Defaults YES. MAX_FEATURES_IN_BATCH=integer. Maximum number features retrieve ArrowArray batch. Defaults 65536. TIMEZONE=unknown/UTC/(+|:)HH:MM value supported Arrow (GDAL >= 3.8). GEOMETRY_METADATA_ENCODING=OGC/GEOARROW (GDAL >= 3.8). GDAL default OGC specified. GEOMETRY_ENCODING=WKB (Arrow/Parquet drivers). force fallback generic implementation native geometry encoding WKB. Otherwise geometry returned native Arrow encoding (possibly using GeoArrow encoding). $quiet logical value, FALSE default. Set TRUE suppress various messages warnings. $transactionsForce logical value, FALSE default. Affects behavior attempted transactions layer (see $startTransaction() method ). default, \"efficient\" transactions attempted. drivers may offer emulation transactions, sometimes significant overhead, case user must explicitly allow emulation first setting $transactionsForce <- TRUE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"$open(read_only) (Re-)opens vector layer existing DSN. Use method open layer closed using $close(). May used re-open layer different read/write access (read_only set TRUE FALSE). method first close open dataset, required call $close() explicitly case. return value, called side effects. $isOpen() Returns logical value indicating whether vector dataset open. $getDsn() Returns character string containing dsn associated GDALVector object (dsn originally used open layer). $getFileList() Returns character vector files believed part data source. returns empty string (\"\") means believed local file system files associated dataset (e.g., virtual file system). returned filenames normally relative absolute paths depending path used originally open dataset. $info() Prints information vector layer console (return value, called side effect ). non-SQL DSN/layer, calls ogrinfo() passing command options cl_arg = c(\"-\", \"-nomd\"), layers open SQL statement, calls ogrinfo() passing command options cl_arg = c(\"-\", \"-nomd\", \"-sql\", <statement>). $getDriverShortName() Returns short name vector format driver. $getDriverLongName() Returns long name vector format driver. $getName() Returns layer name. $getFieldNames() Returns character vector layer's field names. $testCapability() Tests whether layer supports named capabilities based current read/write access. Returns list capabilities values TRUE FALSE. returned list contains following named elements: RandomRead, SequentialWrite, RandomWrite, UpsertFeature, FastSpatialFilter, FastFeatureCount, FastGetExtent, FastSetNextByIndex, FastGetArrowStream, FastWriteArrowBatch, CreateField, CreateGeomField, DeleteField, ReorderFields, AlterFieldDefn, AlterGeomFieldDefn, DeleteFeature, StringsAsUTF8, Transactions, CurveGeometries. Note layer capabilities GDAL version dependent may listed supported GDAL version currently use. (See GDAL documentation OGR_L_TestCapability().) $getFIDColumn() Returns name underlying database column used FID column, empty string (\"\") supported. $getGeomType() Returns well known name layer geometry type character string. layers multiple geometry fields, method returns geometry type first geometry column. columns, use $getLayerDefn(). layers without geometry field, method returns \"NONE\". $getGeometryColumn() Returns name underlying database column used geometry column, empty string (\"\") supported. layers multiple geometry fields, method returns name first geometry column. columns, use $getLayerDefn(). $getSpatialRef() Returns WKT string containing spatial reference system layer, empty string (\"\") spatial reference exists. $bbox() Returns numeric vector length four containing bounding box layer (xmin, ymin, xmax, ymax). Note bForce = true set underlying API call OGR_L_GetExtent(), entire layer may scanned compute minimum bounding rectangle (see FastGetExtent list returned $testCapability()). Depending format driver, spatial filter may may taken account, safer call $bbox() without setting spatial filter. $getLayerDefn() Returns list containing OGR feature class definition layer (.k.. layer definition). list contains zero attribute field definitions, along one geometry field definitions. See ogr_define details field feature class definitions. $getFieldDomain(domain_name) Returns list containing specifications OGR field domain passed domain_name, NULL domain_name found. formats support use field domains describe valid values can stored given attribute field, e.g., coded values present specified enumeration, values constrained specified range, values must match specified pattern. See https://gdal.org/en/stable/user/vector_data_model.html#field-domains. Requires GDAL >= 3.3. $setAttributeFilter(query) Sets attribute query string used fetching features via $getNextFeature() $fetch() methods. features query evaluates true returned. query string format SQL clause, described \"\" section OGR SQL dialect documentation (e.g., \"population > 1000000 population < 5000000\", population attribute layer). cases (RDBMS backed drivers, SQLite, GeoPackage) native capabilities database may used interpret clause, case capabilities broader OGR SQL. Note installing query string generally result resetting current reading position ($resetReading() described ). query parameter may set empty string (\"\") clear current attribute filter. $getAttributeFilter() Returns attribute query string currently use, empty string (\"\") attribute filter set. $setIgnoredFields(fields) Set fields can omitted retrieving features layer. fields argument character vector field names. Passing empty string (\"\") fields reset ignored fields. format driver supports functionality (testable using $testCapability()$IgnoreFields), fetch specified fields subsequent calls $getFeature() / $getNextFeature() / $fetch(), thus save processing time /bandwidth. Besides field names layer, following special fields can passed: \"OGR_GEOMETRY\" ignore geometry \"OGR_STYLE\" ignore layer style. default, fields ignored. Note fields used attribute filter generally set ignored fields, drivers (relying OGR SQL engine) unable correctly evaluate attribute filter. return value, called side effects. $setSelectedFields(fields) Set fields included retrieving features layer. fields argument character vector field names. Passing empty string (\"\") fields reset ignored fields. See $setIgnoredFields() method information. data source must provide IgnoreFields capability order set selected fields. Note geometry fields, desired, must specified setting selected fields, either including named geometry field(s) special field \"OGR_GEOMETRY\" fields argument. return value, called side effects. $getIgnoredFields() Returns character vector containing list currently ignored fields, empty vector (character(0)) fields currently set ignored (format driver support ignored fields). $setSpatialFilter(wkt) Sets new spatial filter geometry WKT format. method sets geometry used spatial filter fetching features via $getNextFeature() $fetch() methods. features geometrically intersect filter geometry returned. Currently test may inaccurately implemented (depending vector format driver), guaranteed features whose envelope overlaps envelope spatial filter returned. can result shapes returned strictly case. wkt character string containing WKT geometry coordinate system layer. empty string (\"\") may passed indicating current spatial filter cleared, new one instituted. $setSpatialFilterRect(bbox) Sets new rectangular spatial filter. method sets rectangle used spatial filter fetching features via $getNextFeature() $fetch() methods. features geometrically intersect given rectangle returned. bbox numeric vector length four containing xmin, ymin, xmax, ymax coordinate system layer whole (returned $getSpatialRef()). $getSpatialFilter() Returns current spatial filter geometry WKT string, empty string (\"\") spatial filter set. $clearSpatialFilter() Clears spatial filter set $setSpatialFilterRect(). return value, called side effect. $getFeatureCount() Returns number features layer. dynamic databases count may exact. method forces count underlying API call (.e., bForce = TRUE call OGR_L_GetFeatureCount()). Note vector drivers actually scan entire layer count features. FastFeatureCount element list returned $testCapability() method can checked might concern. number features returned takes account spatial /attribute filters. driver implementations method may alter read cursor layer. $getNextFeature() Fetch next available feature layer. features matching current spatial /attribute filter (defined) returned. method implements sequential access features layer. $resetReading() method can used start beginning . Returns list unique feature identifier (FID), attribute geometry field names, values. returned list carries OGRFeature class attribute S3 methods print() plot(). NULL returned features available. $setNextByIndex() Moves read cursor feature current result set (0-based indexing). method allows positioning layer call $getNextFeature() $fetch() read requested feature(s), absolute index current result set. , setting = 3 mean next feature read $getNextFeature() fourth feature read sequential reading took place beginning layer, including accounting spatial attribute filters. method implemented efficiently vector format drivers. default implementation simply resets reading beginning calls GetNextFeature() times. determine fast seeking available current layer, check FastSetNextByIndex element list returned $testCapability() method. return value, called side effect. $getFeature(fid) Returns feature identifier. value fid must numeric value, optionally carrying bit64::integer64 class attribute. Success failure operation unaffected spatial attribute filters may effect. RandomRead element list returned $testCapability() can checked establish layer supports efficient random access reading; however, call always work feature exists since fallback implementation just scans features layer looking desired feature. Returns list unique feature identifier (FID), attribute geometry field names, values, NULL failure. Note sequential reads ($getNextFeature()) generally considered interrupted call $getFeature(). $resetReading() Reset feature reading start first feature. return value, called side effect. $fetch(n) Fetches next n features layer returns data frame. allows retrieving entire set features, one page features time, remaining features (current cursor position). Returns data frame many rows features fetched, many columns attribute plus geometry fields result set, even result single value one zero rows. returned data frame carries OGRFeatureSet class attribute S3 methods print() plot(). method analog DBI::dbFetch(). n argument maximum number features retrieve per fetch given integer numeric assumed whole number (truncated). Use n = -1 n = Inf retrieve pending features (resets reading first feature). Otherwise, $fetch() can called multiple times perform forward paging current cursor position. Passing n = NA also supported returns remaining features. Fetching zero features possible retrieve structure feature set data frame (columns fully typed). OGR field types returned following R types (type-specific NA OGR NULL values): OFTInteger: integer value OFTInteger subtype OFSTBoolean: logical value OFTIntegerList: vector integer (list column) OFTInteger64: numeric value carrying \"integer64\" class attribute OFTInteger64 subtype OFSTBoolean: logical value OFTInteger64List: vector bit64::integer64 (list column) OFTReal: numeric value OFTRealList: vector numeric (list column) OFTString: character string OFTStringList: vector character strings (list column) OFTDate: numeric value class \"Date\" OFTDateTime: numeric value class \"POSIXct\" (millisecond accuracy) OFTTime: character string (\"HH:MM:SS\") OFTBinary: raw vector (list column, NULL entries OGR NULL values) Geometries returned field returnGeomAs set NONE. Omitting geometries may beneficial performance memory usage access feature attributes needed. Geometries returned raw vectors data frame list column returnGeomAs set WKB (default) WKB_ISO, character strings returnGeomAs set one WKT WKT_ISO. Note $getFeatureCount() called internally fetching full feature set remaining features (page features). $getArrowStream() Returns nanoarrow_array_stream object exposing Arrow C stream layer (requires GDAL >= 3.6). writable field $arrowStreamOptions can used set options calling method (see ). error raised array stream layer obtained. Generally, one ArrowArrayStream can active time given layer (.e., last active one must explicitly released next one asked). Changing attribute spatial filters, ignored columns, modifying schema using $resetReading()/$getNextFeature() using ArrowArrayStream strongly discouraged may lead unexpected results. rule thumb, OGRLayer methods affect state layer called layer ArrowArrayStream active. Methods available stream object : $get_schema(), $get_next() $release() (see Examples). stream released reading complete. Calling release method soon can consuming stream recommended nanoarrow documentation. See also $testCapability() method check whether format driver provides specialized implementation (FastGetArrowStream), opposed (slower) default implementation. Note however specialized implementations may fallback default attribute spatial filters use. (See GDAL documentation OGR_L_GetArrowStream().) $releaseArrowStream() Releases Arrow C stream returned $getArrowStream() clears nanoarrow_array_stream object (GDAL >= 3.6, otherwise nothing). equivalent calling $release() method nanoarrow_array_stream object. return value, called side effects. $setFeature(feature) Rewrites/replaces existing feature. method writes feature based feature id within input feature. feature argument named list fields values, must include $FID element referencing existing feature rewrite. RandomWrite element list returned $testCapability() can checked establish layer supports random access writing via $setFeature(). way omitted fields passed feature processed driver dependent: SQL-based drivers implement set feature SQL UPDATE skip unset fields, thus content existing feature preserved. shapefile driver write NULL value DBF file. GeoJSON driver take account unset fields remove corresponding JSON member. Returns logical TRUE upon successful completion, FALSE setting feature succeed. FID last feature written layer may obtained method $getLastWriteFID() (see ). set feature, create exist see $upsertFeature() method. $createFeature(feature) Creates writes new feature within layer. feature argument named list fields values (might one row data frame). passed feature written layer new feature, rather overwriting existing one. feature $FID element NA (.e., numeric value, optionally carrying bit64::integer64 class attribute assumed whole number), format driver may use feature id new feature, necessarily. FID last feature written layer may obtained method $getLastWriteFID() (see ). Returns logical TRUE upon successful completion, FALSE creating feature succeed. create feature, set already exists see $upsertFeature() method. $batchCreateFeature(feature_set) Batch version $createFeature(). Creates writes batch new features within layer input passed data frame feature_set argument. Column names data frame must match field names layer compatible data types. specifications listed $fetch() method generally apply input data types writing, integers may passed 'numeric', 'integer64' class attribute strictly required 'numeric' input needed data passed OFTInteger64 field. Returns logical vector length equal number input features (rows data frame), TRUE indicating success feature row index, FALSE writing feature failed. recommended use transactions batch writing features layer (see $startTransaction() ). generally give large performance benefit data sources provide efficient transaction support (e.g., RDBMS-based sources GeoPackage PostGIS). addition, return value $batchCreateFeature() can checked, transaction optionally committed rolled back based results operation across full set input features. $upsertFeature(feature) Rewrites/replaces existing feature creates new feature within layer. method write feature layer, based feature id within input feature. feature argument named list fields values (might one row data frame), potentially including $FID element referencing existing feature rewrite. feature id exist new feature written. Otherwise, existing feature rewritten. UpsertFeature element list returned $testCapability() can checked determine layer supports upsert writing. See $setFeature() description omitted fields passed feature processed. Returns logical TRUE upon successful completion, FALSE upsert succeed. Requires GDAL >= 3.6. $getLastWriteFID() Returns FID last feature written (either newly created updated existing). NULL returned features written layer. Note OGRNullFID (-1) may returned writing feature formats. case FID assigned yet, generally indicate error (e.g., formats store persistent FID assign FIDs upon sequential read operation). returned FID numeric value carrying bit64::integer64 class attribute. $deleteFeature(fid) Deletes feature layer. feature indicated feature ID deleted layer supported format driver. value fid must numeric value, optionally carrying bit64::integer64 class attribute (whole number, truncated). DeleteFeature element list returned $testCapability() can checked establish layer delete feature capability. Returns logical TRUE operation succeeds, FALSE failure. $syncToDisk() Flushes pending changes disk. call intended force layer flush pending writes disk, leave disk file consistent state. normally effect read-datasources. formats implement method, still return error. error returned error occurs attempting flush disk. event, always close opened datasource $close() ensure data correctly flushed. Returns logical TRUE error occurs (even nothing done) FALSE error. $startTransaction() Creates transaction supported vector data source. default, \"efficient\" transactions attempted. See writable field $transactionsForce , must set TRUE allow emulated transactions. supported drivers potentially significant overhead. function ogr_ds_test_cap() can used determine whether vector data source supports efficient emulated transactions. changes done start transaction definitely applied data source $commitTransaction() called. can canceled calling rollbackTransaction() instead. Nested transactions supported. Transactions implemented dataset level, multiple GDALVector objects using data source transactions active time. case $startTransaction() fails, neither $commitTransaction() $rollbackTransaction() called. error occurs successful $startTransaction(), whole transaction may may implicitly canceled, depending format driver (e.g., PostGIS driver cancel , SQLite/GPKG ). case, event error, explicit call rollbackTransaction() done keep things balanced. Returns logical TRUE transaction created, FALSE failure. $commitTransaction() Commits transaction supported vector data source. Returns logical value, TRUE transaction successfully committed. Returns FALSE transaction active, rollback fails, data source support transactions. Depending format driver, may may abort layer sequential reading may active. $rollbackTransaction() Rolls back data source state start current transaction, transactions supported data source. Returns logical value, TRUE transaction successfully rolled back. Returns FALSE transaction active, rollback fails, data source support transactions. $getMetadata() Returns character vector metadata NAME=VALUE pairs layer empty string (\"\") metadata items. $setMetadata(metadata) Sets metadata layer format supports . metadata argument given character vector NAME=VALUE pairs. Returns logical TRUE success FALSE metadata set. $getMetadataItem(mdi_name) Returns value specific metadata item named mdi_name, empty string (\"\") matching item found. $close() Closes vector dataset (return value, called side effects). Calling $close() results proper cleanup, flushing pending writes. GDALVector object still available calling $close(). layer can re-opened existing dsn $open(read_only = {TRUE|FALSE}).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"","code":"## MTBS fire perimeters in Yellowstone National Park 1984-2022 f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package = \"gdalraster\")  ## copy to a temporary file that is writeable dsn <- file.path(tempdir(), basename(f)) file.copy(f, dsn) #> [1] TRUE  (lyr <- new(GDALVector, dsn, \"mtbs_perims\")) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /tmp/RtmplY4zfC/ynp_fires_1984_2022.gpkg #>  Layer  : mtbs_perims #>  CRS    : NAD83 / Montana (EPSG:32100) #>  Geom   : MULTIPOLYGON  str(lyr) #> Reference class 'Rcpp_GDALVector' [package \"gdalraster\"] with 11 fields #>  $ arrowStreamOptions: chr \"\" #>  $ convertToLinear   : logi FALSE #>  $ defaultGeomColName: chr \"geom\" #>  $ m_dialect         : chr \"\" #>  $ m_is_sql          : logi FALSE #>  $ m_layer_name      : chr \"mtbs_perims\" #>  $ promoteToMulti    : logi FALSE #>  $ quiet             : logi FALSE #>  $ returnGeomAs      : chr \"WKB\" #>  $ transactionsForce : logi FALSE #>  $ wkbByteOrder      : chr \"LSB\" #>  and 73 methods, of which 59 are  possibly relevant: #>    OGRFeatureFromList_dumpReadble, batchCreateFeature, bbox, #>    clearSpatialFilter, close, commitTransaction, createFeature, deleteFeature, #>    fetch, finalize, getArrowStream, getAttributeFilter, getDriverLongName, #>    getDriverShortName, getDsn, getFIDColumn, getFeature, getFeatureCount, #>    getFieldDomain, getFieldNames, getFileList, getGeomType, getGeometryColumn, #>    getIgnoredFields, getLastWriteFID, getLayerDefn, getMetadata, #>    getMetadataItem, getName, getNextFeature, getSpatialFilter, getSpatialRef, #>    info, initialize, isOpen, layerClip, layerErase, layerIdentity, #>    layerIntersection, layerSymDifference, layerUnion, layerUpdate, open, #>    releaseArrowStream, resetReading, rollbackTransaction, setAttributeFilter, #>    setFeature, setIgnoredFields, setMetadata, setNextByIndex, #>    setSelectedFields, setSpatialFilter, setSpatialFilterRect, show#envRefClass, #>    startTransaction, syncToDisk, testCapability, upsertFeature  ## dataset info lyr$getDriverShortName() #> [1] \"GPKG\" lyr$getDriverLongName() #> [1] \"GeoPackage\" lyr$getFileList() #> [1] \"/tmp/RtmplY4zfC/ynp_fires_1984_2022.gpkg\"  ## layer info lyr$getName() #> [1] \"mtbs_perims\" lyr$getGeomType() #> [1] \"MULTIPOLYGON\" lyr$getGeometryColumn() #> [1] \"geom\" lyr$getFIDColumn() #> [1] \"fid\" lyr$getSpatialRef() #> [1] \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Lambert_Conformal_Conic_2SP\\\"],PARAMETER[\\\"latitude_of_origin\\\",44.25],PARAMETER[\\\"central_meridian\\\",-109.5],PARAMETER[\\\"standard_parallel_1\\\",49],PARAMETER[\\\"standard_parallel_2\\\",45],PARAMETER[\\\"false_easting\\\",600000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"32100\\\"]]\" lyr$bbox() #> [1] 469685.73 -12917.76 573531.72  96577.34  ## layer capabilities lyr$testCapability() #> $RandomRead #> [1] TRUE #>  #> $SequentialWrite #> [1] FALSE #>  #> $RandomWrite #> [1] FALSE #>  #> $UpsertFeature #> [1] FALSE #>  #> $FastSpatialFilter #> [1] TRUE #>  #> $FastFeatureCount #> [1] TRUE #>  #> $FastGetExtent #> [1] TRUE #>  #> $FastSetNextByIndex #> [1] TRUE #>  #> $FastGetArrowStream #> [1] TRUE #>  #> $FastWriteArrowBatch #> [1] FALSE #>  #> $CreateField #> [1] FALSE #>  #> $CreateGeomField #> [1] FALSE #>  #> $DeleteField #> [1] FALSE #>  #> $ReorderFields #> [1] FALSE #>  #> $AlterFieldDefn #> [1] FALSE #>  #> $AlterGeomFieldDefn #> [1] FALSE #>  #> $IgnoreFields #> [1] TRUE #>  #> $DeleteFeature #> [1] FALSE #>  #> $Rename #> [1] FALSE #>  #> $StringsAsUTF8 #> [1] TRUE #>  #> $CurveGeometries #> [1] TRUE #>   ## re-open with write access lyr$open(read_only = FALSE) lyr$testCapability()$SequentialWrite #> [1] TRUE lyr$testCapability()$RandomWrite #> [1] TRUE  ## feature class definition - a list of field names and their definitions defn <- lyr$getLayerDefn() names(defn) #>  [1] \"event_id\"     \"incid_name\"   \"incid_type\"   \"map_id\"       \"burn_bnd_ac\"  #>  [6] \"burn_bnd_lat\" \"burn_bnd_lon\" \"ig_date\"      \"ig_year\"      \"geom\"         str(defn) #> List of 10 #>  $ event_id    :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ incid_name  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ incid_type  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ map_id      :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_ac :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lat:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lon:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ ig_date     :List of 9 #>   ..$ type       : chr \"OFTDate\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ ig_year     :List of 9 #>   ..$ type       : chr \"OFTInteger\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ domain     : chr \"\" #>   ..$ is_geom    : logi FALSE #>  $ geom        :List of 4 #>   ..$ type       : chr \"MULTIPOLYGON\" #>   ..$ srs        : chr \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,2\"| __truncated__ #>   ..$ is_nullable: logi TRUE #>   ..$ is_geom    : logi TRUE  ## default value of the read/write field 'returnGeomAs' lyr$returnGeomAs #> [1] \"WKB\"  lyr$getFeatureCount() #> [1] 61  ## sequential read cursor # a single feature returned as a named list of fields and their values: (feat <- lyr$getNextFeature()) #> OGR feature #> $FID #> integer64 #> [1] 1 #>  #> $event_id #> [1] WY4413411069519870807 #>  #> $incid_name #> [1] POLECAT #>  #> $incid_type #> [1] Wildfire #>  #> $map_id #> integer64 #> [1] 10015934 #>  #> $burn_bnd_ac #> integer64 #> [1] 1093 #>  #> $burn_bnd_lat #> [1] 44.132 #>  #> $burn_bnd_lon #> [1] -110.696 #>  #> $ig_date #> [1] 1987-08-07 #>  #> $ig_year #> [1] 1987 #>  #> $geom #> [1] WKB MULTIPOLYGON: raw 01 06 00 00 ... #>   ## set an attribute filter lyr$setAttributeFilter(\"ig_year = 2020\") lyr$getFeatureCount() #> [1] 1  feat <- lyr$getNextFeature() plot(feat)   ## NULL when no more features are available lyr$getNextFeature() #> NULL  ## reset reading to the start lyr$resetReading() lyr$getNextFeature() #> OGR feature #> $FID #> integer64 #> [1] 61 #>  #> $event_id #> [1] WY4438911082120200822 #>  #> $incid_name #> [1] LONE STAR #>  #> $incid_type #> [1] Wildfire #>  #> $map_id #> integer64 #> [1] 10020495 #>  #> $burn_bnd_ac #> integer64 #> [1] 3348 #>  #> $burn_bnd_lat #> [1] 44.4 #>  #> $burn_bnd_lon #> [1] -110.782 #>  #> $ig_date #> [1] 2020-08-22 #>  #> $ig_year #> [1] 2020 #>  #> $geom #> [1] WKB MULTIPOLYGON: raw 01 06 00 00 ... #>   ## clear the attribute filter lyr$setAttributeFilter(\"\") lyr$getFeatureCount() #> [1] 61  ## set a spatial filter ## get the bounding box of the largest 1988 fire and use as spatial filter ## first set a temporary attribute filter to do the lookup lyr$setAttributeFilter(\"ig_year = 1988 ORDER BY burn_bnd_ac DESC\") (feat <- lyr$getNextFeature()) #> OGR feature #> $FID #> integer64 #> [1] 7 #>  #> $event_id #> [1] WY4470811082119880722 #>  #> $incid_name #> [1] NORTH FORK #>  #> $incid_type #> [1] Wildfire #>  #> $map_id #> integer64 #> [1] 10014217 #>  #> $burn_bnd_ac #> integer64 #> [1] 563527 #>  #> $burn_bnd_lat #> [1] 44.678 #>  #> $burn_bnd_lon #> [1] -110.716 #>  #> $ig_date #> [1] 1988-07-22 #>  #> $ig_year #> [1] 1988 #>  #> $geom #> [1] WKB MULTIPOLYGON: raw 01 06 00 00 ... #>   bbox <- g_wk2wk(feat$geom) |> bbox_from_wkt()  ## set spatial filter on the full layer lyr$setAttributeFilter(\"\")  # clears the attribute filter lyr$setSpatialFilterRect(bbox) lyr$getFeatureCount() #> [1] 40  ## fetch in chunks and return as data frame (class `OGRFeatureSet`) feat_set <- lyr$fetch(20) head(feat_set) #> OGR feature set #>   FID              event_id               incid_name        incid_type   map_id #> 1  38 MT4471311115120070627              MADISON ARM          Wildfire    16113 #> 2   7 WY4470811082119880722               NORTH FORK          Wildfire 10014217 #> 3  32 MT4491211108020030820                 RATHBONE          Wildfire    13014 #> 4  25 WY4433011103020000816 SPRUCE COMPLEX (PLATEAU)          Wildfire 10014141 #> 5   6 WY4499211096519880625                      FAN Wildland Fire Use 10014215 #> 6  40 MT4502711102920070720                      OWL          Wildfire    16428 #>   burn_bnd_ac burn_bnd_lat burn_bnd_lon    ig_date ig_year #> 1        3564       44.713     -111.151 2007-06-27    2007 #> 2      563527       44.678     -110.716 1988-07-22    1988 #> 3        2701       44.912     -111.080 2003-08-20    2003 #> 4        2808       44.329     -111.027 2000-08-16    2000 #> 5       20422       44.994     -110.976 1988-06-25    1988 #> 6        2175       45.027     -111.029 2007-07-20    2007 #>                                    geom #> 1 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 2 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 3 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 4 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 5 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 6 WKB MULTIPOLYGON: raw 01 06 00 00 ... plot(feat_set)   ## the next chunk feat_set <- lyr$fetch(20) nrow(feat_set) #> [1] 20  ## no features remaining feat_set <- lyr$fetch(20) nrow(feat_set) #> [1] 0 str(feat_set)  # 0-row data frame with columns fully typed #> Classes ‘OGRFeatureSet’ and 'data.frame':\t0 obs. of  11 variables: #>  $ FID         :integer64   #>  $ event_id    : chr  #>  $ incid_name  : chr  #>  $ incid_type  : chr  #>  $ map_id      :integer64   #>  $ burn_bnd_ac :integer64   #>  $ burn_bnd_lat: chr  #>  $ burn_bnd_lon: chr  #>  $ ig_date     : 'Date' num(0)  #>  $ ig_year     : int  #>  $ geom        : list() #>  - attr(*, \"gis\")=List of 5 #>   ..$ type         : chr \"vector\" #>   ..$ geom_column  : chr \"geom\" #>   ..$ geom_col_type: chr \"MULTIPOLYGON\" #>   ..$ geom_col_srs : chr \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,2\"| __truncated__ #>   ..$ geom_format  : chr \"WKB\"  ## or, fetch all pending features from the beginning feat_set <- lyr$fetch(-1)  # resets reading to the first feature nrow(feat_set) #> [1] 40 plot(feat_set)   lyr$clearSpatialFilter() lyr$getFeatureCount() #> [1] 61  lyr$close()  ## simple example of feature write methods showing use of various data types ## create and write to a new layer in a GeoPackage data source dsn2 <- tempfile(fileext = \".gpkg\")  ## define a feature class defn <- ogr_def_layer(\"POINT\", srs = epsg_to_wkt(4326))  ## add field definitions defn$unique_int <- ogr_def_field(\"OFTInteger\", is_nullable = FALSE,                                  is_unique = TRUE) defn$bool_data <- ogr_def_field(\"OFTInteger\", fld_subtype = \"OFSTBoolean\") defn$large_ints <- ogr_def_field(\"OFTInteger64\") defn$doubles <- ogr_def_field(\"OFTReal\") defn$strings <- ogr_def_field(\"OFTString\", fld_width = 50) defn$dates <- ogr_def_field(\"OFTDate\") defn$dt_modified <- ogr_def_field(\"OFTDateTime\",                                   default_value = \"CURRENT_TIMESTAMP\") defn$blobs <- ogr_def_field(\"OFTBinary\")  lyr <- ogr_ds_create(\"GPKG\", dsn2, \"test_layer\", layer_defn = defn,                      return_obj = TRUE)  # lyr$getLayerDefn() |> str()  ## define a feature to write feat1 <- list() # $FID is omitted since it is assigned when written (could also be NA) # $dt_modified is omitted since a default timestamp is defined on the field feat1$unique_int <- 1001 feat1$bool_data <- TRUE # pass a string to as.integer64() since the value is too large to be # represented exactly as an R numeric value (i.e., double) feat1$large_ints <- bit64::as.integer64(\"90071992547409910\") feat1$doubles <- 1.234 feat1$strings <- \"A test string\" feat1$dates <- as.Date(\"2025-01-01\") feat1$blobs <- charToRaw(\"A binary object\") feat1$geom <- \"POINT (1 1)\"  # can be a WKT string or raw vector of WKB  ## create as a new feature in the layer lyr$createFeature(feat1) #> [1] TRUE  ## get the assigned FID lyr$getLastWriteFID() #> integer64 #> [1] 1  ## attempt to re-write the same feature fails due to the unique constraint lyr$createFeature(feat1) #> [1] FALSE  feat2 <- list() feat2$unique_int <- 1002 feat2$bool_data <- FALSE feat2$large_ints <- bit64::as.integer64(\"90071992547409920\") feat2$doubles <- 2.345 feat2$strings <- \"A test string 2\" feat2$dates <- as.Date(\"2024-01-02\") feat2$blobs <- charToRaw(\"A binary object 2\") feat2$geom <- \"POINT (2 2)\"  lyr$createFeature(feat2) #> [1] TRUE lyr$getLastWriteFID() #> integer64 #> [1] 2  ## close and re-open as a read-only layer lyr$open(read_only = TRUE)  lyr$getFeatureCount() #> [1] 2 feat_set <- lyr$fetch(-1)  # -1 to fetch all features from the beginning str(feat_set) #> Classes ‘OGRFeatureSet’ and 'data.frame':\t2 obs. of  10 variables: #>  $ FID        :integer64 1 2  #>  $ unique_int : int  1001 1002 #>  $ bool_data  : logi  TRUE FALSE #>  $ large_ints :integer64 90071992547409910 90071992547409920  #>  $ doubles    : num  1.23 2.35 #>  $ strings    : chr  \"A test string\" \"A test string 2\" #>  $ dates      : Date, format: \"2025-01-01\" \"2024-01-02\" #>  $ dt_modified: POSIXct, format: \"2025-06-01 04:40:01\" \"2025-06-01 04:40:01\" #>  $ blobs      :List of 2 #>   ..$ : raw  41 20 62 69 ... #>   ..$ : raw  41 20 62 69 ... #>  $ geom       :List of 2 #>   ..$ : raw  01 01 00 00 ... #>   ..$ : raw  01 01 00 00 ... #>  - attr(*, \"gis\")=List of 5 #>   ..$ type         : chr \"vector\" #>   ..$ geom_column  : chr \"geom\" #>   ..$ geom_col_type: chr \"POINT\" #>   ..$ geom_col_srs : chr \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AU\"| __truncated__ #>   ..$ geom_format  : chr \"WKB\"  ## edit an existing feature, e.g., feat <- lyr$getFeature(2) ## here we copy a row of the data frame returned by lyr$fetch() above feat <- feat_set[2,] str(feat) #> Classes ‘OGRFeatureSet’ and 'data.frame':\t1 obs. of  10 variables: #>  $ FID        :integer64 2  #>  $ unique_int : int 1002 #>  $ bool_data  : logi FALSE #>  $ large_ints :integer64 90071992547409920  #>  $ doubles    : num 2.35 #>  $ strings    : chr \"A test string 2\" #>  $ dates      : Date, format: \"2024-01-02\" #>  $ dt_modified: POSIXct, format: \"2025-06-01 04:40:01\" #>  $ blobs      :List of 1 #>   ..$ : raw  41 20 62 69 ... #>  $ geom       :List of 1 #>   ..$ : raw  01 01 00 00 ... #>  - attr(*, \"gis\")=List of 5 #>   ..$ type         : chr \"vector\" #>   ..$ geom_column  : chr \"geom\" #>   ..$ geom_col_type: chr \"POINT\" #>   ..$ geom_col_srs : chr \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AU\"| __truncated__ #>   ..$ geom_format  : chr \"WKB\"  Sys.sleep(1)  # to ensure a timestamp difference  feat$bool_data <- TRUE feat$strings <- paste(feat$strings, \"- edited\") feat$dt_modified <- Sys.time() feat$geom <- \"POINT (2.001 2.001)\"  lyr$open(read_only = FALSE)  ## lyr$setFeature() re-writes the feature identified by the $FID element lyr$setFeature(feat) #> [1] TRUE  lyr$open(read_only = TRUE) lyr$getFeatureCount() #> [1] 2  lyr$returnGeomAs <- \"WKT\" feat_set <- lyr$fetch(-1) str(feat_set) #> Classes ‘OGRFeatureSet’ and 'data.frame':\t2 obs. of  10 variables: #>  $ FID        :integer64 1 2  #>  $ unique_int : int  1001 1002 #>  $ bool_data  : logi  TRUE TRUE #>  $ large_ints :integer64 90071992547409910 90071992547409920  #>  $ doubles    : num  1.23 2.35 #>  $ strings    : chr  \"A test string\" \"A test string 2 - edited\" #>  $ dates      : Date, format: \"2025-01-01\" \"2024-01-02\" #>  $ dt_modified: POSIXct, format: \"2025-06-01 04:40:01\" \"2025-06-01 04:40:02\" #>  $ blobs      :List of 2 #>   ..$ : raw  41 20 62 69 ... #>   ..$ : raw  41 20 62 69 ... #>  $ geom       : chr  \"POINT (1 1)\" \"POINT (2.001 2.001)\" #>  - attr(*, \"gis\")=List of 5 #>   ..$ type         : chr \"vector\" #>   ..$ geom_column  : chr \"geom\" #>   ..$ geom_col_type: chr \"POINT\" #>   ..$ geom_col_srs : chr \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AU\"| __truncated__ #>   ..$ geom_format  : chr \"WKT\"  lyr$close()  ## Arrow array stream exposed as a nanoarrow_array_stream object ## requires GDAL >= 3.6 if (gdal_version_num() >= gdal_compute_version(3, 6, 0)) {    sql <- \"SELECT incid_name, geom from mtbs_perims LIMIT 5\"   lyr <- new(GDALVector, dsn, sql)    stream <- lyr$getArrowStream()   batch <- stream$get_next()    # disable a warning for the example that can be safely ignored here   options(nanoarrow.warn_unregistered_extension = FALSE)    d <- as.data.frame(batch)   head(d) |> print()    # the geometry column is a list column of WKB raw vectors   g_centroid(d$geom) |> print()    # the last batch is NULL   stream$get_next() |> print()    # release the stream when finished   stream$release()    lyr$close() } #>   OGC_FID  incid_name #> 1       1     POLECAT #> 2       2 HELLROARING #> 3       3 STORM CREEK #> 4       4      CLOVER #> 5       5        MIST #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             geomb, 21, c2, ed, b4, 1e, 41, 6c, f4, 27, d0, fb, 2e, c9, c0, 94, da, da, 06, 07, b6, 1e, 41, 77, 82, c8, a1, 2f, ea, c8, c0, fc, 8e, 35, 62, 87, ae, 1e, 41, 72, 0d, ee, 14, c4, b1, c7, c0, 42, 41, 2e, 76, e9, b4, 1e, 41, 9a, 30, 0a, 26, f9, 17, c6, c0, e7, 4f, fb, 3c, d3, bf, 1e, 41, 5c, 9a, 8b, 7f, 06, f9, c5, c0, 15, 56, 6c, a8, 38, c2, 1e, 41, 75, de, 3e, 37, ff, b7, c6, c0, e0, 04, d7, 3e, 4d, bd, 1e, 41, 07, f6, d5, 40, 56, ed, c6, c0, 6f, c8, 60, a9, e8, bd, 1e, 41, df, c6, 78, fd, 14, 67, c7, c0, 91, 81, a6, 74, 5b, c3, 1e, 41, 7d, 29, ec, df, 74, da, c6, c0, 46, a3, 05, a5, 59, c6, 1e, 41, 2c, 1a, 50, 5d, 74, 05, c7, c0, 66, 2d, 94, 51, f1, c6, 1e, 41, fe, ee, 90, 0d, 19, 42, c6, c0, b8, b5, 17, ff, ea, ca, 1e, 41, fe, da, f1, 60, 1b, 8a, c5, c0, 50, 12, 67, ba, ef, cd, 1e, 41, 22, cd, 64, 02, 76, ac, c5, c0, 2d, b3, 74, db, 1a, cd, 1e, 41, 6e, d9, 5c, 03, 77, 31, c6, c0, c6, e7, bf, 97, 89, d1, 1e, 41, 8d, 90, 27, b3, 55, 47, c6, c0, c6, 1e, 6b, 5b, a4, d3, 1e, 41, 3a, ac, 62, 6e, 39, c3, c5, c0, ea, a5, f3, 50, d1, cf, 1e, 41, a4, 53, 78, 6d, a0, b1, c5, c0, 30, ce, 78, 9c, 87, ce, 1e, 41, 30, 8e, 6e, e6, 0f, f3, c4, c0, 49, dc, 9c, 7e, a6, d3, 1e, 41, 34, 18, b8, 00, 87, 41, c5, c0, 41, 7f, 90, 96, 9e, d7, 1e, 41, 02, eb, a8, 39, a1, 23, c5, c0, 77, 1d, a8, 87, c3, dd, 1e, 41, a8, 39, 73, 5e, 8f, f7, c6, c0, 90, 92, 4b, 91, fe, d6, 1e, 41, 06, 6f, 13, 97, 21, 9c, c7, c0, 16, e1, e6, 67, b7, d4, 1e, 41, 4b, 22, c5, 08, 30, d1, c6, c0, 78, ac, df, 7f, 37, d2, 1e, 41, be, 4c, 92, 4d, 8c, 76, c7, c0, c4, 4f, 83, 59, 0f, d3, 1e, 41, a5, af, f5, ba, 96, f7, c7, c0, 58, 5b, 22, 28, 37, d6, 1e, 41, 7e, 79, 56, 97, 08, 1e, c8, c0, 6f, 6b, 4d, 4e, 4f, da, 1e, 41, 8d, de, b6, 5c, 17, d6, c7, c0, a4, b2, 15, 2f, 32, db, 1e, 41, 30, 97, a3, b3, 4f, 6d, c8, c0, 32, a7, 0e, 51, 55, d4, 1e, 41, 3c, f9, b1, 06, 22, 66, c8, c0, da, d4, 70, dd, 76, d3, 1e, 41, f2, 2f, d4, 09, 77, 21, c8, c0, 6b, a1, 0e, 51, 60, d0, 1e, 41, 03, d8, e9, f0, 86, 3a, c8, c0, 19, 1a, 9a, 24, 4f, d0, 1e, 41, 60, 57, 84, 0d, e3, fa, c8, c0, 76, 0d, eb, c2, 5b, c9, 1e, 41, 00, 4e, 81, bf, 40, b9, c8, c0, 84, 72, 9f, 32, 3e, bf, 1e, 41, 52, 76, f6, 15, 49, f5, c8, c0, 94, 2d, 50, 3e, 01, c2, 1e, 41, c6, 43, ae, e0, 30, 30, c9, c0, 23, 2b, 21, c2, ed, b4, 1e, 41, 6c, f4, 27, d0, fb, 2e, c9, c0 #> 2 01, 06, 00, 00, 00, 03, 00, 00, 00, 01, 03, 00, 00, 00, 01, 00, 00, 00, 9a, 01, 00, 00, 30, bb, 31, b1, bb, 7f, 20, 41, ab, a0, 87, d9, 52, 8d, f7, 40, 61, 9c, 36, 22, 39, 7d, 20, 41, 4d, 01, ba, bc, 96, 88, f7, 40, 53, 61, e9, 91, 95, 7b, 20, 41, 32, 38, 7e, f1, d8, 72, f7, 40, 7a, 55, fc, 85, e6, 7b, 20, 41, 8d, e8, 0d, 18, 33, 62, f7, 40, 97, 60, 30, 68, 2c, 7d, 20, 41, 15, 51, 36, 94, a1, 56, f7, 40, ff, bf, ed, 28, 03, 7f, 20, 41, 09, b5, fc, d2, 03, 58, f7, 40, ab, 29, b5, e1, 4e, 82, 20, 41, 1f, 4d, fb, b1, a7, 71, f7, 40, f6, 6b, 9c, a1, db, 85, 20, 41, 07, 33, 98, f1, 01, 5f, f7, 40, d4, 55, 63, bf, b8, 84, 20, 41, 6f, 67, 2d, 36, 80, 31, f7, 40, 91, 36, ab, c8, 3f, 83, 20, 41, f3, 59, 27, cc, 4a, 34, f7, 40, 9f, 15, 6f, 8a, d6, 83, 20, 41, 82, 88, 9c, c8, ec, 25, f7, 40, 12, 5c, 9b, dd, 40, 82, 20, 41, 18, 86, aa, 85, 0f, 24, f7, 40, a0, 02, df, 90, ac, 84, 20, 41, 81, f4, 3d, 7b, 74, 19, f7, 40, fc, 02, 29, c6, bd, 80, 20, 41, 59, d0, ca, db, 7a, 08, f7, 40, e3, 91, 61, c0, ae, 7c, 20, 41, 9e, 39, 0d, 81, 9f, 0e, f7, 40, d8, c5, d7, 86, bb, 7b, 20, 41, 0a, 13, 86, 5d, 86, 02, f7, 40, 9e, de, ad, 1a, 31, 79, 20, 41, 9b, 85, 78, 51, bb, 10, f7, 40, 42, 52, 1f, 02, 68, 76, 20, 41, 4f, 77, b1, b7, 2b, c5, f6, 40, dd, 37, c2, fd, 05, 74, 20, 41, be, 44, 4c, ca, 34, b6, f6, 40, 0e, 1a, 9c, 7d, 3e, 72, 20, 41, d8, d7, 99, 66, 66, 5d, f6, 40, 0b, 41, a5, 98, 41, 6d, 20, 41, 37, 3f, 4d, ca, 8b, 32, f6, 40, bb, cd, 0b, cf, d1, 6b, 20, 41, cb, a7, b2, 27, 42, 0e, f6, 40, c2, 8a, 4b, a5, 98, 6f, 20, 41, f2, 8c, f7, fd, 5e, 17, f6, 40, 90, 2d, fc, 16, 22, 76, 20, 41, d3, 5c, 58, de, b2, 54, f6, 40, 9b, d4, d2, a4, 14, 79, 20, 41, 64, d8, 94, 60, a2, 4d, f6, 40, a5, 68, 93, 80, 26, 7d, 20, 41, f9, a2, 9f, 08, df, 61, f6, 40, 20, ef, df, f2, d1, 80, 20, 41, c1, a5, db, 86, f8, 5c, f6, 40, 21, c7, c2, 00, 38, 81, 20, 41, 3e, 62, 1a, 54, 97, 4e, f6, 40, ec, 3b, 4b, b5, d8, 84, 20, 41, 4c, 88, 33, d0, be, 47, f6, 40, c1, 4e, 48, 7a, 01, 88, 20, 41, 34, 5e, 38, 7b, 44, 53, f6, 40, 98, 32, de, 69, 55, 8c, 20, 41, 33, 47, 2d, 49, 9d, 35, f6, 40, 74, d8, 5e, 2f, ad, 8c, 20, 41, 61, ea, 6f, f9, 06, 27, f6, 40, d1, fa, a0, 68, 89, 8a, 20, 41, e4, 2f, de, 61, ed, 0b, f6, 40, 33, f6, 87, 6a, a8, 86, 20, 41, 0a, ca, fa, 7a, 5d, f4, f5, 40, 95, 76, 41, af, ac, 84, 20, 41, 73, 24, 9e, d0, 4d, d7, f5, 40, f2, c7, 95, 3f, ae, 85, 20, 41, 23, 04, 17, a1, 31, d1, f5, 40, b1, 96, ed, 7b, 40, 89, 20, 41, 5f, 26, a1, 88, 8e, d8, f5, 40, 04, e8, 37, 7d, 97, 8a, 20, 41, de, 16, 7d, 0e, 8d, e4, f5, 40, cc, c1, bd, 61, 8a, 8b, 20, 41, ca, 5c, c5, c0, 51, cd, f5, 40, ef, 7b, 90, 96, 36, 8d, 20, 41, d5, 6d, 4f, ab, a2, d0, f5, 40, e6, 68, 3c, 7d, bd, 89, 20, 41, ff, 94, 97, 28, 13, a7, f5, 40, e1, df, c5, d6, fa, 89, 20, 41, 2e, 01, 59, e4, db, 97, f5, 40, 94, 89, c0, 7d, 2b, 8c, 20, 41, 1c, 68, 71, 5b, 90, 95, f5, 40, 7e, e2, 55, 63, 7f, 8a, 20, 41, c5, 71, b1, 57, ff, 7d, f5, 40, 92, 3a, dd, f5, 74, 8b, 20, 41, 60, 81, f0, c8, f9, 71, f5, 40, eb, c9, d1, cf, fb, 85, 20, 41, 1e, f0, c5, bc, cd, 6b, f5, 40, fb, 58, 64, 24, a7, 82, 20, 41, 3e, a1, d9, bf, 64, 2e, f5, 40, 33, 58, 19, a9, ea, 83, 20, 41, 61, 09, db, 44, aa, 1e, f5, 40, 3e, ef, 09, 09, 3e, 88, 20, 41, 4d, d0, e0, 67, 9c, 45, f5, 40, 89, 07, a7, 62, 23, 8a, 20, 41, 38, cb, f5, 43, a5, 3a, f5, 40, a0, 28, 43, 8b, c3, 89, 20, 41, bf, 3f, 80, b5, 12, 2e, f5, 40, 9e, 3a, 77, d4, ed, 8b, 20, 41, 31, 08, c7, f3, 97, 15, f5, 40, 58, 1a, 38, 38, 09, 85, 20, 41, 73, 57, ce, b2, dc, 02, f5, 40, de, 5f, 7f, 82, 07, 86, 20, 41, 51, 29, 5c, e1, f9, f9, f4, 40, 6b, 24, 00, e7, b3, 82, 20, 41, db, 90, 11, 57, d6, e9, f4, 40, 84, 46, ca, 04, e5, 84, 20, 41, 7d, 56, c1, db, f6, d9, f4, 40, 74, f2, db, fe, 44, 80, 20, 41, d5, 04, 79, 1d, 15, d3, f4, 40, 70, db, 6e, 61, 3c, 7e, 20, 41, d0, 03, 3e, cc, 3f, b3, f4, 40, 82, 34, dc, 77, 3c, 7f, 20, 41, 29, e1, 4b, 64, 39, a3, f4, 40, 7d, 24, 32, f1, f3, 83, 20, 41, 15, 7f, 94, f8, a9, b1, f4, 40, 08, 41, db, cb, 9d, 87, 20, 41, 66, b1, f0, de, dc, ad, f4, 40, 9c, 97, aa, e8, 2e, 86, 20, 41, ef, 6c, 67, bb, d5, c8, f4, 40, 53, cb, f5, 62, 62, 89, 20, 41, 76, ac, 66, 3f, b9, c1, f4, 40, dd, cf, 3c, 6d, 49, 8a, 20, 41, 4f, 1a, 21, d1, 8f, d5, f4, 40, 2a, 30, d8, 27, 45, 8d, 20, 41, 3e, cc, 62, 09, 64, d7, f4, 40, 00, 1f, b1, 3b, 92, 8d, 20, 41, 43, 67, 8d, 5c, 9e, fa, f4, 40, fb, dc, 2c, ec, 33, 91, 20, 41, f2, e2, c3, 52, 63, 0a, f5, 40, 24, 1b, 05, 9a, 6b, 95, 20, 41, 8e, bd, 08, a0, 6a, cb, f4, 40, 46, 76, 08, 3f, 73, 92, 20, 41, a1, f0, c7, db, c5, 91, f4, 40, 88, ac, 98, 0d, eb, 89, 20, 41, 89, d9, 9a, e8, ca, 27, f4, 40, 9d, 16, 4c, b3, f4, 88, 20, 41, a8, 27, cb, e8, 89, 09, f4, 40, 99, 7a, 72, 97, 0c, 80, 20, 41, ad, 1c, dc, b1, 8d, e5, f3, 40, 6f, c5, fd, 80, 29, 80, 20, 41, f1, f6, df, a6, 5a, ce, f3, 40, bd, 00, 56, 0a, 7c, 81, 20, 41, 2d, a0, 26, 73, 41, d2, f3, 40, 3e, 72, b3, 7e, 43, 81, 20, 41, 63, 13, 98, 93, ba, bd, f3, 40, 33, 56, a3, d0, 98, 83, 20, 41, 94, c4, 1c, 86, b0, ba, f3, 40, c6, 31, 44, c5, 7a, 82, 20, 41, 92, 44, 3c, 37, 91, a8, f3, 40, b8, 5d, 31, 78, 8f, 83, 20, 41, b4, 20, aa, 7a, 6a, 9c, f3, 40, f5, ee, 19, 2c, b7, 86, 20, 41, 19, 30, 85, c9, 5a, a7, f3, 40, f5, b0, 23, 20, 7f, 8c, 20, 41, ab, 31, ba, 52, 61, a4, f3, 40, 70, 2b, 3e, 29, bc, 8c, 20, 41, b6, 42, 23, 24, 14, 76, f3, 40, fd, 29, c4, 24, 86, 8a, 20, 41, 76, 5e, 5e, 1f, 34, 62, f3, 40, 4e, c4, fb, 7f, 99, 87, 20, 41, 64, 0a, 03, f6, fe, 6d, f3, 40, 00, 15, 08, d2, f9, 7e, 20, 41, 20, 1f, 34, 8f, ac, 48, f3, 40, ba, 4d, 20, ab, 11, 77, 20, 41, 3f, aa, 61, 97, 6a, 36, f3, 40, 91, de, 1b, 03, b6, 75, 20, 41, 36, d0, 48, fe, 3b, 39, f3, 40, 22, ae, 2f, 24, ae, 75, 20, 41, 1d, a9, fe, dd, 34, 50, f3, 40, 29, bc, 0e, d0, 1c, 73, 20, 41, d2, ba, ea, e6, 1c, 48, f3, 40, 2d, 19, 3e, 11, e5, 72, 20, 41, f7, 89, f6, 44, 54, 26, f3, 40, b9, 4c, 34, 77, 53, 71, 20, 41, 22, ae, a9, 93, 13, 25, f3, 40, d1, e1, 5d, 78, a4, 71, 20, 41, b1, 70, d3, ba, 9b, 4a, f3, 40, 51, 6d, 18, 63, 10, 70, 20, 41, a2, 89, c7, c7, 88, 46, f3, 40, 68, 38, 37, 37, f9, 6f, 20, 41, 68, a8, 52, ee, 71, 59, f3, 40, 5b, 99, 69, 26, e7, 6e, 20, 41, de, 70, 92, 46, a7, 5a, f3, 40, 1e, 36, 87, 24, 1d, 6d, 20, 41, 88, fd, 45, 64, 62, 58, f3, 40, 39, 98, 11, 91, 4b, 6f, 20, 41, b6, cd, bd, 16, 63, 3b, f3, 40, 01, fa, 96, e6, 62, 6e, 20, 41, 74, 2d, 75, a4, 18, 2e, f3, 40, 87, ee, 3b, 23, 53, 6c, 20, 41, 1f, 2c, 41, d1, ef, 2b, f3, 40, 3c, a0, a9, 13, 2b, 68, 20, 41, 49, 72, e0, d2, ae, 3f, f3, 40, cd, 46, d4, 92, 9d, 61, 20, 41, 6f, 11, ad, 67, 3f, 30, f3, 40, ee, 70, 62, 19, 9a, 5e, 20, 41, fe, 4d, b0, eb, 72, 10, f3, 40, 07, 03, 0f, fc, 54, 5c, 20, 41, 86, 9a, eb, c2, 26, 13, f3, 40, 7e, e6, 4e, 37, 92, 5a, 20, 41, f2, a2, 42, f3, 5e, fb, f2, 40, 07, db, f2, ae, 8a, 5a, 20, 41, 0d, 6d, 78, 73, 0e, c8, f2, 40, 84, 9e, 49, ed, 94, 58, 20, 41, 88, 23, 25, 7b, 2a, c0, f2, 40, 3f, bc, 00, e3, b9, 58, 20, 41, 6f, b9, 5e, 04, f5, d5, f2, 40, 45, 74, 72, ca, a2, 57, 20, 41, 18, 4e, 0b, 36, a8, d7, f2, 40, ad, 51, 0b, 56, 1e, 56, 20, 41, b2, 22, e1, fa, ee, b5, f2, 40, 67, a9, 76, d1, 8a, 57, 20, 41, 7a, 10, bf, b4, 26, ae, f2, 40, 8f, 1e, 28, ee, 6f, 59, 20, 41, 12, 8f, 47, f0, 93, b8, f2, 40, 95, 34, 2e, 35, 1b, 58, 20, 41, 20, be, ed, 44, 4a, 9f, f2, 40, 1e, 0d, 02, 97, 22, 54, 20, 41, 07, 52, e1, cc, c3, 97, f2, 40, a9, 2c, c1, a3, cb, 53, 20, 41, 84, 8e, 0a, 75, 7b, 79, f2, 40, 7e, 75, a8, bc, 1c, 52, 20, 41, a4, 51, 16, ac, a5, 86, f2, 40, c2, 78, d3, 82, 6c, 56, 20, 41, 15, 1f, 59, 9e, ef, dd, f2, 40, 65, 9a, da, 41, 4c, 5a, 20, 41, 92, 6c, 55, 00, 60, 07, f3, 40, 08, 92, 12, b2, 7e, 56, 20, 41, 0c, ba, 70, 45, 6b, 32, f3, 40, 24, fd, 03, 72, 2d, 58, 20, 41, 73, c3, 2c, 6d, a3, 43, f3, 40, 09, 97, 16, f8, 61, 55, 20, 41, e8, 73, 05, e2, e2, 47, f3, 40, b3, d2, 71, 6f, 9b, 55, 20, 41, 9f, c8, 8b, 1d, 93, 7b, f3, 40, 06, 30, 06, e3, dc, 52, 20, 41, db, 8b, f3, f3, 78, 65, f3, 40, 14, cf, 24, bc, a0, 50, 20, 41, 8c, eb, 2b, 1d, a7, 6b, f3, 40, 8b, a7, 6f, b4, 04, 50, 20, 41, a7, b6, 9c, dd, a0, 7d, f3, 40, fa, b7, 30, ef, 2b, 4e, 20, 41, be, b7, 45, dc, 04, 72, f3, 40, c7, 33, 4b, b1, eb, 4d, 20, 41, 5a, b9, 67, c4, 7d, 60, f3, 40, 5c, 39, d9, e2, e0, 4b, 20, 41, 32, 27, 01, 29, 25, 5d, f3, 40, d5, 12, c1, 21, 67, 4c, 20, 41, 9c, b7, 6f, 9d, 1d, 7b, f3, 40, 0b, 2b, cc, 95, 1e, 4b, 20, 41, 99, af, e2, bd, 95, 87, f3, 40, c2, 81, 4c, 92, 48, 48, 20, 41, 7d, e7, ad, 5c, 9c, 84, f3, 40, 56, 6c, 3a, 15, 94, 43, 20, 41, 71, ce, f8, 61, 2f, 62, f3, 40, 99, e2, 77, 5d, 59, 41, 20, 41, 93, 59, 35, a4, ce, 5e, f3, 40, 5b, e1, 9a, 29, 97, 3f, 20, 41, dc, f3, 8f, 3d, 38, 50, f3, 40, a8, 2b, a4, 7c, 96, 3e, 20, 41, d4, 32, 73, 5f, 2c, 5f, f3, 40, 5e, 57, c3, 9d, 4b, 39, 20, 41, e6, 10, a7, bf, e0, 68, f3, 40, 58, 5d, ba, 61, d5, 38, 20, 41, 60, 8d, b9, 0a, c0, 79, f3, 40, 40, 34, df, 22, bf, 39, 20, 41, 1f, a9, 2b, af, 44, 7f, f3, 40, f9, df, 2f, c1, 2a, 37, 20, 41, 85, 0e, 62, 8f, 13, 81, f3, 40, ee, 5f, da, 5f, f4, 36, 20, 41, a5, 10, 4f, 62, 27, 93, f3, 40, 92, f9, 3d, 1f, cf, 38, 20, 41, 18, 0d, cd, 0c, 55, 95, f3, 40, 1b, 9b, 6a, 72, 54, 3a, 20, 41, d3, 1f, 57, 9a, d3, af, f3, 40, 0f, 2e, d6, 8f, 3e, 3d, 20, 41, 73, ef, c5, 46, 28, ba, f3, 40, 90, 0f, 2e, 90, 26, 3d, 20, 41, 96, d0, f5, 03, 9c, c4, f3, 40, f7, cd, ce, 4e, dd, 3f, 20, 41, ca, 1b, ed, 69, fa, ca, f3, 40, 88, bc, 44, cb, c5, 41, 20, 41, 30, b0, 0b, 8a, b9, eb, f3, 40, 83, 9b, 74, a2, 16, 44, 20, 41, 8b, ba, 85, 0d, ea, ec, f3, 40, a7, 86, 4c, 6d, 45, 45, 20, 41, 0e, c0, c3, 2a, 88, fa, f3, 40, 83, c8, 7d, e7, c9, 46, 20, 41, 23, d9, da, 74, 09, f4, f3, 40, bb, fa, 4d, 8b, 65, 4e, 20, 41, 3c, 98, fb, 38, 48, 17, f4, 40, 9e, c6, 5b, 9d, 06, 4d, 20, 41, 47, dc, 8a, 2e, 2d, 34, f4, 40, fe, 6f, 04, 0f, e1, 50, 20, 41, 99, 0d, 6f, 0d, 6e, 55, f4, 40, 26, 5a, 6d, 0f, ba, 53, 20, 41, fe, 20, 3f, 58, cf, 5a, f4, 40, e7, 13, 02, 59, 9e, 54, 20, 41, fb, 51, 97, db, 08, 7a, f4, 40, fc, 4b, f7, 36, 87, 52, 20, 41, 1e, 06, 1c, 78, c3, 82, f4, 40, fa, 70, 89, 81, 6a, 4e, 20, 41, 66, 25, e4, 8c, ea, 71, f4, 40, dc, e9, c3, f6, 38, 4e, 20, 41, 0b, dc, 72, 2f, 37, 55, f4, 40, 66, 61, f8, 64, 1f, 42, 20, 41, 61, 6d, 90, 0b, bb, 1b, f4, 40, 83, ea, 72, 39, 6c, 41, 20, 41, a6, c7, 7c, ea, 07, 26, f4, 40, 41, 29, ff, 93, 68, 42, 20, 41, aa, 13, 14, 54, ec, 2b, f4, 40, a1, 7f, ec, eb, 00, 3e, 20, 41, 82, 91, b0, 36, 3a, 25, f4, 40, ee, e2, d6, 1b, cc, 3f, 20, 41, 35, ba, 59, 72, fc, 37, f4, 40, 50, b2, 7a, a0, 58, 3d, 20, 41, d1, 11, 6a, e8, bf, 31, f4, 40, ea, 1e, 96, 1e, 90, 3c, 20, 41, 54, 0b, 73, a2, c7, 1b, f4, 40, 17, 2a, 06, a6, a9, 37, 20, 41, 62, 6f, f3, e2, 70, 18, f4, 40, 2c, a1, 57, 3d, 08, 36, 20, 41, c8, 79, 8f, 53, 85, 24, f4, 40, bd, ad, 69, 70, d2, 38, 20, 41, 28, d5, 2b, 01, f7, 37, f4, 40, fc, f8, 86, 5c, d2, 3c, 20, 41, 37, 67, f3, b4, 60, 3b, f4, 40, f2, 2c, 88, 62, 96, 3b, 20, 41, f6, 45, 35, f1, 08, 56, f4, 40, 99, 40, ff, 03, de, 40, 20, 41, 41, cf, 42, 39, e3, 64, f4, 40, 06, 13, 27, 73, 23, 31, 20, 41, f3, fb, 86, 35, 82, 4a, f4, 40, a8, b8, 60, ae, 0a, 30, 20, 41, 9c, 65, 28, ca, e6, 2e, f4, 40, 5b, fb, 83, 51, 48, 31, 20, 41, 9f, cd, 2b, 73, 54, 1b, f4, 40, 32, be, c8, 28, f4, 34, 20, 41, 32, 18, e4, 4f, 81, 1a, f4, 40, 6e, 76, bb, b3, 93, 33, 20, 41, 64, 0f, 4c, f3, a3, 12, f4, 40, f3, 10, 39, 09, 96, 33, 20, 41, 47, 06, 8d, c1, 65, 02, f4, 40, 46, 0c, 5d, 18, e8, 38, 20, 41, 49, f9, cd, 98, 8e, 11, f4, 40, 1e, 3e, e1, 6a, f7, 3c, 20, 41, 5b, af, 6a, 62, aa, 0b, f4, 40, b9, bb, 35, 58, 13, 31, 20, 41, 32, 21, 83, d0, 2d, de, f3, 40, 96, 8f, 27, 24, 45, 2e, 20, 41, 46, 05, b5, ce, db, dc, f3, 40, 25, aa, 8e, 06, 98, 2b, 20, 41, 7b, e2, 5b, af, a5, eb, f3, 40, 62, 95, 71, ba, d9, 26, 20, 41, f6, 5d, 33, 1d, 28, f3, f3, 40, 0c, 87, 44, 97, 5e, 24, 20, 41, 97, 0e, 6b, e3, de, e0, f3, 40, 4a, f5, d0, 1c, 87, 25, 20, 41, 89, d0, 5f, a9, 83, d6, f3, 40, 7a, d0, b3, 56, 5b, 2b, 20, 41, 48, 95, db, 0c, e0, cd, f3, 40, d8, c5, 9a, b8, 44, 2b, 20, 41, 95, 83, e0, 63, 3d, c3, f3, 40, 7d, 70, a0, 23, ea, 2c, 20, 41, e8, 72, a8, 09, 25, be, f3, 40, 54, f7, be, 2d, 4f, 28, 20, 41, 77, 18, 08, 3b, 19, b0, f3, 40, 64, ad, c4, 08, b8, 28, 20, 41, 4f, 57, dc, d5, 67, a3, f3, 40, a0, 41, ac, eb, 93, 2d, 20, 41, 14, fc, d1, fe, 1a, a3, f3, 40, ec, f7, 74, 24, 23, 2b, 20, 41, c8, 59, 37, 0a, 73, 9a, f3, 40, 82, fd, 76, 35, 23, 2c, 20, 41, 53, b7, 92, 07, 15, 78, f3, 40, f4, 7a, 3a, a7, dc, 2a, 20, 41, 24, 43, da, 5e, 9d, 5f, f3, 40, 81, b7, ed, 09, 9d, 28, 20, 41, b2, c5, 27, 4f, 9e, 57, f3, 40, 80, 12, d6, 99, 66, 2c, 20, 41, 8f, d8, 30, ca, 17, 44, f3, 40, 63, 26, 9c, fa, f4, 2b, 20, 41, 37, 0c, c0, f8, 13, 6c, f3, 40, 28, a7, d3, 43, 8f, 2d, 20, 41, 97, db, af, 3c, eb, 5d, f3, 40, da, 59, 19, 2f, 85, 2f, 20, 41, 82, fd, 71, 99, 01, 72, f3, 40, 46, ac, 1a, 79, 9a, 2e, 20, 41, 45, 03, 7c, 9e, b2, 4a, f3, 40, d2, 76, e3, 08, c5, 33, 20, 41, 29, 17, e3, ab, 8e, 5a, f3, 40, 10, 4d, ee, e3, c5, 32, 20, 41, bf, 7a, 61, e6, ab, 35, f3, 40, 2f, 83, 9e, ba, 02, 34, 20, 41, d1, 09, 25, 7c, 4c, 13, f3, 40, 7c, 34, 02, 06, c8, 35, 20, 41, 34, 60, 89, 1b, 75, 0d, f3, 40, 7c, 81, c2, 50, 55, 37, 20, 41, d4, 86, 46, 4a, 52, 1b, f3, 40, a8, fe, 71, 14, 12, 37, 20, 41, e8, 50, 48, a6, d6, 0c, f3, 40, 46, 4f, 39, 1b, 4a, 39, 20, 41, 07, 02, 64, b0, 21, f8, f2, 40, df, f9, f4, 47, fe, 37, 20, 41, da, 29, d5, 28, 3c, e5, f2, 40, 90, de, 7c, 09, 96, 38, 20, 41, da, fb, 15, b9, e1, d7, f2, 40, 52, 0e, ef, c4, 9f, 35, 20, 41, f7, 1e, b2, 90, 7c, d7, f2, 40, f8, e9, bb, e8, d3, 35, 20, 41, 22, da, 62, 8e, 6f, cd, f2, 40, 95, 73, 7a, 15, e5, 37, 20, 41, 04, 01, 13, 85, e3, c7, f2, 40, a1, 69, 69, f0, e8, 37, 20, 41, 75, 32, 06, 97, 0e, b8, f2, 40, 85, 49, 6e, 3b, 8c, 3b, 20, 41, ae, 63, 6b, 46, 3f, b6, f2, 40, 11, ab, f2, be, 72, 3e, 20, 41, 69, 87, 8a, e3, 24, c3, f2, 40, c4, 42, ba, 37, fc, 3e, 20, 41, 9b, 1c, d3, 1e, be, b1, f2, 40, f9, f2, 4f, 9c, 63, 42, 20, 41, de, f1, 2b, 85, 74, c0, f2, 40, 06, 92, 2d, 79, 2c, 42, 20, 41, 90, 52, d7, 06, 6c, 20, f3, 40, 16, 6d, 6d, 4b, 73, 43, 20, 41, f4, 46, f8, bc, b9, 39, f3, 40, 0c, 55, 79, 3f, 66, 41, 20, 41, 7d, 4e, d4, db, ed, 41, f3, 40, 2e, c1, 4b, eb, 03, 41, 20, 41, 69, e9, 31, 3f, a5, 57, f3, 40, d1, d3, 88, a7, 47, 46, 20, 41, dd, 34, c0, 43, 43, 65, f3, 40, c9, 7d, b0, 1e, ed, 48, 20, 41, eb, f7, a8, fa, 01, 57, f3, 40, 7a, 31, 88, b7, 35, 4a, 20, 41, 0b, 11, bb, 62, 2c, 34, f3, 40, fa, a4, 10, 19, 32, 4b, 20, 41, 27, 32, 91, 61, 89, 31, f3, 40, ac, 44, c0, ee, 66, 4c, 20, 41, 15, fb, ff, db, f2, 4a, f3, 40, 59, 5c, b9, 6c, fe, 50, 20, 41, 42, 5a, 66, aa, aa, 45, f3, 40, d0, e4, 60, 65, 8c, 52, 20, 41, 16, 41, 9b, ba, 14, 27, f3, 40, 42, b7, 52, c9, e1, 50, 20, 41, 15, 50, 2e, 54, 4a, 1f, f3, 40, ec, 3d, 72, 14, 17, 51, 20, 41, 26, c3, 91, 66, 41, 32, f3, 40, 34, a4, 38, 61, 23, 50, 20, 41, 1d, ab, 99, 10, 94, 31, f3, 40, f5, 37, b7, 5f, 9c, 4e, 20, 41, cb, e0, 74, 05, 57, 1c, f3, 40, c5, a0, 1f, 60, ff, 4f, 20, 41, 22, cd, 50, 01, 9b, 16, f3, 40, dd, 8a, 61, 92, fd, 4e, 20, 41, e0, fd, 7e, c4, e1, 06, f3, 40, f8, b9, ee, ff, 0f, 50, 20, 41, d9, c7, da, 65, 2c, 02, f3, 40, 06, 8d, 79, bf, d2, 4f, 20, 41, 6d, ff, af, 62, 91, ef, f2, 40, 2b, 8f, df, 95, 41, 51, 20, 41, 78, ba, ab, 73, 9a, ef, f2, 40, c8, 42, 90, 7b, c9, 51, 20, 41, 0a, 76, a5, de, 28, e5, f2, 40, fe, 97, c7, 1b, 1d, 50, 20, 41, 73, e8, 39, 7e, c1, dd, f2, 40, 00, a4, 55, 3a, f8, 4f, 20, 41, 11, 06, 18, 14, fa, c2, f2, 40, 57, 87, 33, 38, 18, 4e, 20, 41, b4, f7, fd, cd, 3d, b6, f2, 40, ce, 6e, 4c, 6e, 6a, 4b, 20, 41, 81, 8a, 21, 83, 37, c4, f2, 40, 1c, 8d, 05, 14, cf, 4a, 20, 41, 2a, 74, 53, c5, c6, ea, f2, 40, f1, 90, b1, 94, be, 48, 20, 41, be, 05, 81, 89, 34, e9, f2, 40, 69, 17, 98, 40, e7, 48, 20, 41, 42, 1e, 72, ed, 28, df, f2, 40, 42, 2f, e5, ed, 2e, 47, 20, 41, 8a, c4, e4, 95, b0, e3, f2, 40, e9, 05, cb, 80, 7d, 45, 20, 41, cb, 15, c8, 46, 29, ad, f2, 40, a7, 87, bb, f7, bd, 3a, 20, 41, 9f, d9, 2e, a7, 37, 8a, f2, 40, 09, 82, cc, f0, 52, 37, 20, 41, c2, e9, b8, dd, 5c, 97, f2, 40, 65, ac, 75, 3e, 1d, 36, 20, 41, f8, 5f, da, cc, 87, b7, f2, 40, 4c, 27, 40, 59, af, 34, 20, 41, a2, 9f, c3, cb, bd, bd, f2, 40, d5, 7b, 60, b5, be, 31, 20, 41, d4, 74, 44, dc, 1e, b4, f2, 40, 4a, 03, 8b, e5, f5, 32, 20, 41, 40, 3a, 5c, 14, 8b, a2, f2, 40, 23, 61, 3d, ac, 0e, 32, 20, 41, c7, 96, 4a, f8, 98, 94, f2, 40, e8, e1, 9d, 55, 15, 2f, 20, 41, d7, 74, ce, 45, 13, b0, f2, 40, 86, 87, b0, 12, 71, 2d, 20, 41, 7e, d6, 87, 8d, da, b0, f2, 40, 90, 68, 43, 57, 07, 2b, 20, 41, 5d, b5, ed, 9d, ab, 97, f2, 40, 7d, bc, 0b, c2, 5d, 25, 20, 41, b6, e4, 2e, 10, 3d, 8a, f2, 40, 92, 4b, 49, 97, 22, 24, 20, 41, ae, 87, da, 5f, b3, 9c, f2, 40, 6e, 53, 7c, e7, 65, 1f, 20, 41, 60, ff, 70, a3, 4c, a1, f2, 40, c2, 2b, cd, 96, 8c, 1e, 20, 41, 3f, e2, 68, d3, 76, d3, f2, 40, 43, de, 92, 56, 25, 20, 20, 41, f6, 5e, 24, e8, e5, 04, f3, 40, 64, 21, 9b, 81, bb, 24, 20, 41, e1, 0d, 06, 6c, 22, 16, f3, 40, 30, 57, c9, 5f, a3, 28, 20, 41, 19, fc, 4c, f4, 42, 07, f3, 40, b7, ee, d3, 3c, af, 28, 20, 41, 6e, 7d, 9a, a2, 01, 16, f3, 40, 09, ad, 27, fa, ce, 23, 20, 41, 5a, 6a, b4, db, b9, 36, f3, 40, 2f, d7, 7c, 5e, d7, 20, 20, 41, 31, 0e, f8, 8e, e0, 63, f3, 40, 83, e9, 60, 31, 23, 1b, 20, 41, 75, 91, 03, 1e, 23, 85, f3, 40, ad, 4f, 94, 9f, 05, 11, 20, 41, 67, 53, 03, 70, 22, a0, f3, 40, 92, da, a4, 1e, 89, 10, 20, 41, a2, a1, 3d, 19, ab, bb, f3, 40, 68, 6a, 64, b4, fb, 0d, 20, 41, e7, 07, 0d, 37, 93, cb, f3, 40, 23, 4a, 4a, 02, 48, 13, 20, 41, f8, 91, 16, 64, 48, ed, f3, 40, 7f, 5c, 8e, c2, ff, 17, 20, 41, a0, fc, 6c, 60, ee, 21, f4, 40, 93, 15, 47, 7f, 0b, 1a, 20, 41, f3, dc, 9e, fe, dc, 45, f4, 40, 82, ce, c0, 65, 9e, 18, 20, 41, 0a, 9c, 04, c4, ba, 55, f4, 40, 38, a4, 03, fb, 7a, 19, 20, 41, bc, 12, 66, 0f, 74, 6a, f4, 40, 79, 61, bc, da, 39, 20, 20, 41, b0, 70, a5, 6a, 57, b4, f4, 40, 61, 7b, 66, 8c, 8b, 21, 20, 41, 8c, 0f, e1, 57, 07, 20, f5, 40, 48, 2d, 05, 17, 3e, 25, 20, 41, b3, ec, 9b, 45, f0, 78, f5, 40, 74, d6, 64, 14, 20, 22, 20, 41, 73, a2, bb, 08, 04, b8, f5, 40, 5b, 71, ab, 2b, 9a, 22, 20, 41, 07, 2a, f0, a9, 2b, d2, f5, 40, 13, 85, 70, 9b, 87, 24, 20, 41, d1, c9, f7, b0, 2b, f9, f5, 40, 9b, 6f, 17, f3, c1, 2b, 20, 41, 9c, e7, d7, 1f, 15, 4d, f6, 40, 29, d3, ad, 82, 4e, 2e, 20, 41, db, f7, c8, 33, 62, b7, f6, 40, f5, 7d, 38, a0, 84, 29, 20, 41, 31, 48, c7, 42, 08, c4, f6, 40, 5d, 3e, c1, c4, c2, 28, 20, 41, a7, f0, d1, c2, b6, d8, f6, 40, f9, 9c, 9f, c0, c3, 21, 20, 41, bf, 9a, d7, 0e, ba, d5, f6, 40, cc, 87, 93, 7d, 1c, 20, 20, 41, 6c, fa, 6f, d0, da, cb, f6, 40, 00, 1e, bd, d5, 2d, 1e, 20, 41, d8, 96, 46, 94, 6f, d3, f6, 40, 50, 67, ac, cc, 03, 1f, 20, 41, a9, 21, c5, f1, 38, ed, f6, 40, e5, 85, 61, 69, 14, 1e, 20, 41, c9, d5, b4, 62, 3b, 00, f7, 40, 1f, d1, ab, f6, 08, 1f, 20, 41, 57, de, e1, 34, 8c, 09, f7, 40, 6b, 7d, 90, cb, 8a, 1d, 20, 41, 8b, 3b, 70, 61, 2c, 07, f7, 40, e5, c1, 6f, 29, 3b, 1c, 20, 41, 81, 32, 98, 6d, 7a, 2f, f7, 40, 11, ca, 5e, e6, 37, 1a, 20, 41, c6, 76, ef, 8d, fb, 34, f7, 40, 3c, be, df, 74, 46, 1c, 20, 41, df, 97, c0, 85, 27, 54, f7, 40, ec, 84, d0, d8, 26, 1f, 20, 41, 6d, f1, 69, 5a, 83, 61, f7, 40, 58, 9f, 5a, 8f, 92, 1f, 20, 41, 0b, 47, 26, 7e, 30, 72, f7, 40, 05, bb, 5a, 6f, 6f, 1e, 20, 41, 30, 02, fb, 0f, 57, 7e, f7, 40, 60, b3, 06, ed, 8c, 20, 20, 41, 42, d7, b5, cc, b9, 8b, f7, 40, 1a, 13, 21, d2, b7, 5f, 20, 41, 92, 0b, 22, 40, 9e, 8c, f7, 40, 99, 08, 96, 83, d9, 5f, 20, 41, 84, 65, c3, bb, 99, 7e, f7, 40, b3, 70, c0, ab, 2a, 5d, 20, 41, b6, 44, 5b, a0, aa, 7c, f7, 40, 70, de, 1d, 5c, da, 5d, 20, 41, 86, 83, 42, a9, d2, 6f, f7, 40, c7, 7f, 5f, 7a, c8, 55, 20, 41, 20, d0, 42, b4, 68, 5c, f7, 40, 3a, 50, 83, 4e, 62, 58, 20, 41, d5, a3, 10, 68, fc, 4b, f7, 40, cd, ce, fc, 36, 6b, 58, 20, 41, 51, c6, af, 87, 87, 3d, f7, 40, ca, bc, 9e, b5, ed, 51, 20, 41, 89, ad, 07, b5, de, 57, f7, 40, 62, ee, 98, 0e, 27, 54, 20, 41, d7, 28, 6c, 55, a1, 33, f7, 40, 9a, 32, ba, 1e, 32, 57, 20, 41, 8a, f2, 2b, 33, 0c, 2e, f7, 40, 8f, 87, 74, d0, 1d, 58, 20, 41, 88, 07, d7, 5c, b1, 11, f7, 40, 27, ca, 17, b2, 74, 59, 20, 41, 93, b2, d7, df, bc, 29, f7, 40, 01, 67, de, 5c, e0, 5a, 20, 41, 2d, db, f9, 37, 2c, 20, f7, 40, 1f, 4d, 5d, 20, 03, 5d, 20, 41, 80, bf, d9, 38, 7a, 3a, f7, 40, f7, d0, 71, 9d, ca, 5d, 20, 41, 34, 7b, 9c, 71, 5a, 15, f7, 40, 6f, 5d, 9a, b5, 39, 5c, 20, 41, c3, 0e, b8, 00, 0f, fb, f6, 40, 6d, 00, e1, 86, a0, 5a, 20, 41, c2, 12, 87, 77, 62, f5, f6, 40, 8d, 40, 09, 2e, ba, 59, 20, 41, 7c, d0, 55, b6, 40, 1b, f7, 40, 95, 38, 3c, 52, a7, 57, 20, 41, e0, 2c, 36, 84, 09, 06, f7, 40, 6c, 66, be, 09, e8, 56, 20, 41, df, 2e, 59, d9, 60, e8, f6, 40, 2b, 62, 9e, 72, 2d, 54, 20, 41, ea, 2e, da, 5a, e4, e5, f6, 40, 55, a7, f0, a6, 6e, 56, 20, 41, 65, 92, 5f, 0b, 86, c7, f6, 40, 8d, 7d, f2, bf, c7, 54, 20, 41, f2, 16, 00, c3, d3, aa, f6, 40, 35, 0e, 6a, 7a, 82, 55, 20, 41, 48, 5e, 89, 83, b8, 9e, f6, 40, 79, ad, f1, 1a, bf, 53, 20, 41, 4a, 00, 83, 81, ac, 9f, f6, 40, cc, 68, a7, 1d, ca, 53, 20, 41, 5b, 4e, c8, da, 24, 95, f6, 40, 22, 76, 6e, fc, 02, 52, 20, 41, 32, 2e, 02, 5d, 7b, 9f, f6, 40, 76, cd, ce, 87, e4, 50, 20, 41, 50, 03, 49, 13, 36, 95, f6, 40, 7c, 88, 30, 59, b6, 4d, 20, 41, 24, 48, c2, 89, fd, 9c, f6, 40, 69, 02, d3, 64, 8d, 4d, 20, 41, f1, 99, 78, e7, fe, 93, f6, 40, 4a, 46, fb, f5, 72, 50, 20, 41, 24, 98, 39, 4c, 47, 83, f6, 40, a0, d1, c6, 5d, 01, 4d, 20, 41, 2f, 2f, ff, a1, f7, 80, f6, 40, 31, 1a, fe, 0d, c5, 4d, 20, 41, aa, 9d, 8d, d2, c6, 67, f6, 40, db, 73, d1, 52, e2, 4b, 20, 41, 32, 07, dc, 3f, cc, 4b, f6, 40, ab, a3, bd, b6, 95, 4f, 20, 41, cf, 22, 52, 04, 07, 3a, f6, 40, a4, f8, e3, de, 7d, 4b, 20, 41, c0, 5f, 88, 22, 9b, 42, f6, 40, b7, cc, e5, 2d, 16, 4d, 20, 41, 20, c5, ad, 88, 7b, 2a, f6, 40, 33, 9b, a5, 48, b1, 4a, 20, 41, 08, 7e, db, b1, 7f, 0f, f6, 40, e9, 46, 02, e3, 50, 4b, 20, 41, e2, 69, 43, 4d, f4, f5, f5, 40, a6, a2, ad, ff, 8c, 49, 20, 41, 65, bf, 15, c0, 7b, db, f5, 40, b1, 87, 5e, 03, 1a, 46, 20, 41, 7f, eb, b8, fe, 22, d1, f5, 40, d2, 4a, 82, 22, b4, 43, 20, 41, d6, 5d, 91, 9d, e6, d4, f5, 40, 48, 7b, 91, 92, 78, 43, 20, 41, f0, 64, 24, b1, df, e0, f5, 40, a6, 4e, 20, 8f, ad, 41, 20, 41, e0, c9, b7, 08, e9, de, f5, 40, 10, 6e, 73, bd, 03, 41, 20, 41, 4d, e8, 67, 73, 2a, 9e, f5, 40, 46, e0, c7, c2, b6, 42, 20, 41, 56, 18, 92, 7f, 80, 95, f5, 40, c9, 6b, 54, 54, 28, 42, 20, 41, 9c, c6, 6b, 47, 17, a7, f5, 40, ce, 78, 9c, 73, 5e, 43, 20, 41, ce, 55, c1, 03, eb, ae, f5, 40, 9d, 55, 46, 09, 2a, 45, 20, 41, d0, 66, 5e, bf, fd, a4, f5, 40, f5, 8c, 8d, b2, 20, 44, 20, 41, 46, 14, 94, 24, 99, 9b, f5, 40, d2, fe, 1d, 7f, ec, 45, 20, 41, 51, b6, 28, d3, 05, 94, f5, 40, 76, f3, ab, df, 5e, 47, 20, 41, 0c, ab, 9c, e7, 1f, a5, f5, 40, 6a, 48, a0, 60, 7f, 48, 20, 41, cb, 8d, ef, db, d8, a3, f5, 40, e5, b2, 3c, 91, 49, 48, 20, 41, ec, eb, 64, 07, 33, 91, f5, 40, c1, c9, cb, c2, 5e, 46, 20, 41, 89, d2, 6e, 35, 7c, 83, f5, 40, 14, 53, f9, 21, 7f, 45, 20, 41, 2e, bf, 74, 6a, de, 8b, f5, 40, 7f, 90, 8c, 52, 3a, 45, 20, 41, 55, 8d, 1b, 81, 4d, 7d, f5, 40, e0, c1, 3e, ff, 71, 43, 20, 41, 20, ec, b3, 46, 2d, 81, f5, 40, 09, b2, ce, 54, f3, 42, 20, 41, c5, f0, 82, f1, 4b, 73, f5, 40, 26, cd, 4d, a3, f9, 3e, 20, 41, f4, ba, ef, 92, 5d, 97, f5, 40, c3, 58, ba, f3, 5f, 3f, 20, 41, db, 1e, b5, 48, 25, 85, f5, 40, 81, 98, d8, 1f, 37, 3d, 20, 41, 1d, 7b, 10, c6, 06, 77, f5, 40, 4d, 6b, dc, a7, 59, 3d, 20, 41, 2b, 97, 08, 17, 3b, 6b, f5, 40, a8, b0, 3d, a1, 29, 42, 20, 41, f2, 29, 9e, ab, 46, 6f, f5, 40, 3b, 20, b9, dd, f7, 46, 20, 41, f4, 4e, 3b, e8, c7, 53, f5, 40, 67, 0f, e1, 27, d7, 48, 20, 41, 31, bf, 71, 97, e0, 5f, f5, 40, 88, c6, 1b, ec, 17, 49, 20, 41, 32, f1, ef, e3, d1, 79, f5, 40, 16, fd, bd, 9f, 40, 4b, 20, 41, f7, 27, f1, 8c, f5, 8c, f5, 40, e1, 0e, 92, e5, 96, 4d, 20, 41, ec, c1, b6, 7d, e8, 8f, f5, 40, b8, e3, 15, 3b, 96, 49, 20, 41, 75, 9d, 3c, 86, 18, a6, f5, 40, 12, 05, 67, 3a, b5, 49, 20, 41, 9e, 6b, 38, 0e, c5, b8, f5, 40, 8b, ee, c8, 50, 48, 4b, 20, 41, 4a, ec, e4, 15, ce, c2, f5, 40, 1d, 6a, a8, fc, 0b, 4b, 20, 41, 2a, 59, c9, 10, 45, d4, f5, 40, bc, d6, be, 3d, c6, 4e, 20, 41, cb, 27, 1d, ec, 62, db, f5, 40, 9e, 7b, 63, ab, f3, 4d, 20, 41, 64, b2, ed, 1b, 7f, e7, f5, 40, b6, c1, 4f, 49, f4, 50, 20, 41, a3, 57, ea, 57, 5d, 0e, f6, 40, 8d, 8e, 95, ee, fc, 53, 20, 41, db, 62, 44, 23, f0, 19, f6, 40, fd, 05, 4b, ce, 89, 54, 20, 41, f0, 59, 5d, e5, 5b, 35, f6, 40, c3, b9, a7, a6, e3, 52, 20, 41, a3, 4f, 7d, e7, cc, 58, f6, 40, 56, 79, 86, 53, 07, 54, 20, 41, b8, 5e, a9, 3a, b0, 5f, f6, 40, 57, bc, 55, 4b, 09, 52, 20, 41, a5, 23, be, 6c, c6, 5f, f6, 40, 45, 31, 0e, 64, fd, 52, 20, 41, 12, b7, f4, 91, e7, 71, f6, 40, 7b, 4c, 8e, 2c, e2, 54, 20, 41, 67, 80, 76, 70, 62, 68, f6, 40, cb, 41, b3, 6b, 2f, 53, 20, 41, fc, fe, fe, 42, e1, 8d, f6, 40, a2, 62, d5, bf, 36, 55, 20, 41, fd, aa, 61, 7b, db, 88, f6, 40, db, d3, 8f, f8, 72, 55, 20, 41, d9, 8a, d2, 8a, f3, 97, f6, 40, 45, c4, e0, 12, 82, 57, 20, 41, 3a, de, 89, 7f, 16, 8e, f6, 40, 1c, 45, 15, 29, 2b, 57, 20, 41, c8, 9a, 64, a6, ca, ab, f6, 40, 17, 00, fe, b4, 8f, 58, 20, 41, 8e, 52, e0, 9b, 94, a6, f6, 40, a8, ea, d6, 3b, 99, 58, 20, 41, 74, 73, 77, df, bc, b8, f6, 40, 2a, 00, c0, 93, ef, 5a, 20, 41, 57, 70, 20, e2, a8, c7, f6, 40, 58, 98, 4a, 8f, 57, 5a, 20, 41, f0, 9c, 2e, 58, 75, ee, f6, 40, ba, a3, 8b, 38, 54, 5e, 20, 41, 33, b5, 13, 3c, 6d, fc, f6, 40, 4d, b4, 02, b8, 77, 5e, 20, 41, 6b, 50, 7e, c8, 18, 0b, f7, 40, b0, b6, b7, 6b, de, 60, 20, 41, c2, 20, 81, 3f, e5, 0b, f7, 40, f0, 1d, c5, 03, e1, 60, 20, 41, 02, b8, 4d, 2c, ae, 15, f7, 40, 05, a5, 78, 63, 9f, 64, 20, 41, dc, 00, 29, 96, 40, 0b, f7, 40, d5, ff, a9, 0a, a9, 63, 20, 41, 7d, 10, 76, a4, 23, 16, f7, 40, d6, 59, cb, 80, 4e, 64, 20, 41, bd, 72, cc, b1, de, 2f, f7, 40, f7, 5e, 15, 4d, 66, 68, 20, 41, 0d, da, d7, cb, 0d, 2b, f7, 40, bc, c1, 5d, 0d, 51, 68, 20, 41, 14, c1, e3, 68, 00, 4a, f7, 40, 9c, 08, af, 4e, 16, 6d, 20, 41, 11, a9, 71, 35, a5, 70, f7, 40, 76, 77, a7, 0a, 68, 6d, 20, 41, de, 65, b2, 21, e6, 8c, f7, 40, ad, c9, 12, 87, e7, 74, 20, 41, 19, b3, 60, e2, 10, 8d, f7, 40, b7, b0, c5, 84, b7, 74, 20, 41, 3a, 15, 71, 0b, 30, 78, f7, 40, e5, c1, 93, b3, 6b, 76, 20, 41, 0b, 1f, 2a, 71, 24, 77, f7, 40, 0b, 46, b4, 50, 51, 75, 20, 41, 07, 1c, 76, 98, 9c, 6d, f7, 40, 1e, 00, 71, 83, 40, 78, 20, 41, 4a, 7f, d7, 31, 93, 39, f7, 40, 60, 15, b1, 28, f1, 78, 20, 41, 78, 99, b5, 6c, e0, 50, f7, 40, 74, 17, 28, ab, eb, 77, 20, 41, df, 14, 58, ff, 2a, 61, f7, 40, 33, 50, 37, a4, 1c, 7a, 20, 41, 7d, 03, 4b, 4f, 34, 71, f7, 40, a6, c2, 67, c6, 58, 7a, 20, 41, da, 3b, fb, 69, 31, 8d, f7, 40, 30, bb, 31, b1, bb, 7f, 20, 41, ab, a0, 87, d9, 52, 8d, f7, 40, 01, 03, 00, 00, 00, 01, 00, 00, 00, 04, 00, 00, 00, c4, f8, 08, cc, 9a, 65, 20, 41, 28, 0a, 96, 2f, bc, 8c, f7, 40, c3, 66, 73, 38, 9a, 61, 20, 41, 40, 4e, 15, 71, f5, 82, f7, 40, 12, 53, ce, 11, c9, 60, 20, 41, fe, 51, ae, 91, a3, 8c, f7, 40, c4, f8, 08, cc, 9a, 65, 20, 41, 28, 0a, 96, 2f, bc, 8c, f7, 40, 01, 03, 00, 00, 00, 01, 00, 00, 00, 08, 00, 00, 00, 7d, 7d, 8b, 82, 34, 8e, 20, 41, 57, 32, 1e, 5b, 46, 89, f6, 40, b8, f1, f0, 7d, e9, 8f, 20, 41, 06, 40, 5f, 5a, 8a, 86, f6, 40, 66, 50, 05, 9b, 7c, 8f, 20, 41, 59, 7b, d2, 53, 2e, 66, f6, 40, ce, 40, 62, 05, 4a, 8c, 20, 41, f4, 40, 42, 77, a2, 60, f6, 40, 92, e7, 57, d0, 5b, 88, 20, 41, 00, ae, 4a, 9d, d6, 71, f6, 40, 93, 2f, e2, 5e, ce, 8c, 20, 41, 6f, 17, 19, f6, d4, 9d, f6, 40, 7e, 26, d4, 18, 98, 8e, 20, 41, 6c, ce, 96, 28, 45, 97, f6, 40, 7d, 7d, 8b, 82, 34, 8e, 20, 41, 57, 32, 1e, 5b, 46, 89, fe, 01, 00, 00, bf, 2c, 60, 6f, b6, 80, 21, 41, 9c, 53, 65, 40, 41, 36, f5, 40, f3, 91, 7b, a4, 5c, 7a, 21, 41, d8, 85, 0a, ab, 7f, 2d, f5, 40, 10, 8c, 94, ed, 3a, 7b, 21, 41, 2c, 12, b5, ed, 96, 16, f5, 40, 7b, 77, 10, 41, a4, 75, 21, 41, 13, f0, 56, 88, 91, 17, f5, 40, 00, a5, 2d, 4b, cb, 73, 21, 41, dc, 97, e6, 9b, 67, 0d, f5, 40, 21, 7d, 9f, 04, 5e, 72, 21, 41, bf, b4, 8d, 73, 4d, 15, f5, 40, a8, 2f, d6, 85, b7, 68, 21, 41, ca, 26, 3c, 78, 48, 15, f5, 40, 01, 87, d8, 02, b2, 66, 21, 41, c5, eb, 17, 68, ae, 13, f5, 40, 43, 4f, 51, 9d, c3, 65, 21, 41, 43, 5a, 06, 1a, 83, 05, f5, 40, 06, 9f, 90, 90, 94, 64, 21, 41, ce, 7a, fd, 51, 15, 16, f5, 40, 2f, 94, 84, f4, ea, 5f, 21, 41, 24, 38, 13, 48, a9, 12, f5, 40, ed, b5, af, 12, 99, 5f, 21, 41, ac, 72, 8a, f3, 0d, 1e, f5, 40, 5c, c8, da, ea, 5d, 5e, 21, 41, 84, 98, 4b, 65, 97, 1d, f5, 40, 14, 69, 6b, 3f, 7f, 5e, 21, 41, 51, 3f, 46, fd, f7, 14, f5, 40, c2, 59, 03, 65, e0, 5a, 21, 41, c3, 1b, ec, 13, 50, 1b, f5, 40, 98, 6a, c7, 9b, 34, 57, 21, 41, b3, 9d, 91, ad, 1c, 12, f5, 40, 6f, b1, b1, 55, d5, 56, 21, 41, b6, 94, eb, b5, d1, 1d, f5, 40, a7, 58, f1, 14, 43, 55, 21, 41, ef, 8b, da, 2c, d8, 0e, f5, 40, fa, 2c, 4b, ee, ca, 45, 21, 41, 38, 50, 93, 39, 85, f9, f4, 40, d9, 72, 5a, 9f, 92, 3e, 21, 41, 66, 1c, e0, 07, 1f, de, f4, 40, 22, 5b, 35, 11, 12, 33, 21, 41, d7, 32, b2, e6, a8, dc, f4, 40, 1d, 12, 04, 21, 97, 2e, 21, 41, 77, d4, 18, 46, 9d, d1, f4, 40, 8a, 83, 7a, 6d, 72, 2b, 21, 41, 9d, 1c, c1, 13, a0, b2, f4, 40, b0, f5, 6c, d7, 2e, 26, 21, 41, bb, 62, 2b, c2, bc, 9d, f4, 40, bf, 02, b2, 1b, e1, 1c, 21, 41, 1c, 11, 47, e2, 67, 90, f4, 40, 0f, c1, 62, 52, 19, 1e, 21, 41, 7f, d8, 60, bf, 4e, 4a, f4, 40, 95, 4f, f8, 66, de, 1a, 21, 41, 1b, 01, d4, 47, c2, 2c, f4, 40, a7, b1, 69, 62, ce, 17, 21, 41, cc, ad, 6f, b2, e4, 32, f4, 40, 5d, 5f, ed, 42, 8d, 14, 21, 41, c5, 39, 5f, 82, f4, 20, f4, 40, 5d, b3, 24, a8, c1, 12, 21, 41, 93, fb, 4f, 13, cc, 2f, f4, 40, 5b, b8, f5, e5, f3, 12, 21, 41, 46, 9b, bb, 51, 74, 18, f4, 40, 46, 25, d5, af, 7d, 10, 21, 41, b4, c6, 20, 14, 4e, 11, f4, 40, cb, 0f, 18, 6a, 43, 10, 21, 41, 43, e6, 08, 1f, 31, f9, f3, 40, b9, 51, a9, 34, f2, 0e, 21, 41, 78, c8, 32, 72, 72, f9, f3, 40, 7f, 36, 05, 08, ac, 0d, 21, 41, 93, 65, e9, c3, c9, 0b, f4, 40, 07, 75, c4, 0e, 61, 10, 21, 41, cd, e3, 02, 0a, 90, 3e, f4, 40, cf, b8, bc, 4c, 36, 0c, 21, 41, a3, d4, 3d, 4a, f0, 36, f4, 40, 02, f4, d9, 6e, 1e, 08, 21, 41, 20, e5, 8b, 15, ba, 41, f4, 40, 0a, 6e, 9c, 2e, 20, 06, 21, 41, 86, 6e, 2c, cc, a7, 59, f4, 40, 12, f5, 47, 8a, e0, 0d, 21, 41, 7a, 35, 22, 9e, c0, 64, f4, 40, 1c, 47, 79, c6, 6c, 0d, 21, 41, 80, ba, 02, 6c, 0f, 97, f4, 40, 6a, c6, 5a, b6, 3a, 0b, 21, 41, 64, 29, ab, 16, ab, 9f, f4, 40, b2, e9, 65, e3, 34, 0a, 21, 41, 8c, 96, 6f, f7, 25, 8f, f4, 40, 3a, 06, 8a, ce, c7, 08, 21, 41, 4f, 50, 80, 88, df, 98, f4, 40, 07, d8, 89, 88, 3b, 08, 21, 41, 0b, dc, 4e, 64, 5b, a6, f4, 40, 33, bb, 6d, 41, b3, 09, 21, 41, 45, bb, f2, 7d, 9c, a3, f4, 40, 0c, a9, a7, ab, 5d, 0a, 21, 41, ab, 0d, 3a, cd, 86, ad, f4, 40, 89, f2, eb, a8, be, 07, 21, 41, 21, 35, 77, ea, 9c, b1, f4, 40, 0a, 36, e1, 30, d4, 07, 21, 41, 3e, ea, 17, 84, 42, cd, f4, 40, f9, 60, 3e, 66, a2, 08, 21, 41, 8f, 8b, 07, 37, 2e, d4, f4, 40, 22, ae, 9c, 70, 24, 0a, 21, 41, 1f, 98, e2, 07, 73, cb, f4, 40, 36, fd, 02, d7, e3, 0b, 21, 41, e3, 0e, 38, c4, 58, d2, f4, 40, 92, 5d, f3, 72, de, 11, 21, 41, 75, 94, 9e, 3b, 5a, ca, f4, 40, db, 55, 3c, 33, e6, 14, 21, 41, ee, 50, bb, 33, 1e, e2, f4, 40, b0, ec, a5, 98, 06, 13, 21, 41, 28, 92, 2b, d0, 8a, 10, f5, 40, d1, fa, c5, be, 0d, 11, 21, 41, b5, 5f, a5, c0, ad, 20, f5, 40, 49, 93, ef, a8, 1d, 0c, 21, 41, a2, 23, 2c, ed, 22, 10, f5, 40, b1, e8, 34, 83, f2, 08, 21, 41, 2d, 67, e6, c3, 15, 16, f5, 40, 9c, 91, dd, 89, 6e, 04, 21, 41, 08, 84, 8d, c4, f3, fc, f4, 40, 65, 8b, 98, 63, 0d, 00, 21, 41, ca, cd, a7, 8f, 5f, f2, f4, 40, 75, 3a, 40, de, 51, fb, 20, 41, 84, e7, aa, 9d, 5d, f0, f4, 40, 9f, 6c, dd, 50, c4, f8, 20, 41, 47, 41, b0, a6, e1, 02, f5, 40, ea, b0, 50, 21, aa, f4, 20, 41, 07, ec, d4, c8, ea, fe, f4, 40, 36, 76, 0c, f7, b2, f7, 20, 41, 19, 78, a0, fb, ab, ee, f4, 40, a1, 99, bd, d5, e1, f3, 20, 41, 13, c1, 02, be, 86, d3, f4, 40, 12, 09, c8, 0e, 64, eb, 20, 41, b5, 72, c1, 5e, 6a, bd, f4, 40, f8, 8f, e3, 3d, 77, e7, 20, 41, 7c, 1a, db, e2, 21, a9, f4, 40, c0, 0b, 8d, 97, 26, e5, 20, 41, 6f, 24, 0c, b7, 09, a7, f4, 40, 88, ba, a7, b6, 1c, e4, 20, 41, 45, d7, 8d, 20, 42, b1, f4, 40, 7e, 9b, 55, 08, 00, e1, 20, 41, 53, 16, 85, 97, ea, a9, f4, 40, d5, f3, 93, 94, 2f, dc, 20, 41, 80, 11, 4a, 7e, 67, 83, f4, 40, 02, cf, 4f, 66, b5, d8, 20, 41, 04, a0, 18, b2, 09, 90, f4, 40, 3c, 88, 6d, 80, fc, d6, 20, 41, fc, 46, 7c, 46, 30, a7, f4, 40, b8, 4f, 2c, 30, f2, d3, 20, 41, fc, 15, ca, 55, 32, 67, f4, 40, b0, a0, 75, d4, 33, d0, 20, 41, 8f, ab, c0, 3e, 91, 70, f4, 40, cb, c4, 39, e8, 4e, cd, 20, 41, 49, 3b, 9b, 61, ec, 5f, f4, 40, 32, c6, 99, ff, 18, ce, 20, 41, 52, 1e, ea, 2f, eb, 44, f4, 40, 58, c3, 5a, 80, 8b, d3, 20, 41, 24, 68, 37, bb, 5f, 5d, f4, 40, 3f, e7, 8b, 3c, 5d, d4, 20, 41, b6, 85, e6, 01, 1c, 29, f4, 40, e1, c0, 75, 9a, eb, ce, 20, 41, 27, c3, 8a, b8, 7d, cd, f3, 40, a8, 29, 47, c0, e8, ce, 20, 41, 72, f7, ef, 30, 76, 9e, f3, 40, 15, 1c, dd, 39, 67, cd, 20, 41, f0, de, 94, cb, fc, 93, f3, 40, 86, 79, ac, 2c, f3, cb, 20, 41, 4d, 96, a8, c2, d4, 5e, f3, 40, 14, 35, e5, ad, 0d, ca, 20, 41, e3, d2, 3e, 66, 4a, 57, f3, 40, f2, 58, 7b, 74, 37, c7, 20, 41, 5d, f5, a0, 6a, 5c, 74, f3, 40, e7, 2f, 75, 48, 38, c8, 20, 41, db, 87, fa, f8, a2, 80, f3, 40, 94, 23, a0, a9, 41, c7, 20, 41, d6, 12, 5f, 9a, 51, 9a, f3, 40, 5a, 6a, f8, c7, e1, bc, 20, 41, a8, 09, f2, 81, 36, b4, f3, 40, c1, fb, 08, 4e, 99, bb, 20, 41, e9, 56, ba, 42, 8c, bf, f3, 40, 84, 56, f6, 04, 27, b9, 20, 41, 72, d6, bf, 10, dd, b0, f3, 40, 28, 1a, 5f, 28, 1e, b8, 20, 41, 74, eb, c1, 58, 37, c8, f3, 40, 00, 21, 28, 9a, 11, b2, 20, 41, c5, be, a5, eb, 87, c8, f3, 40, b9, a6, e5, 50, 1e, b1, 20, 41, 46, cb, 9d, f9, a7, ce, f3, 40, 89, be, fd, 2c, c5, b1, 20, 41, 64, 7a, 3e, e4, 31, e8, f3, 40, b5, 68, 99, bb, c8, af, 20, 41, f3, be, 42, 08, 52, f8, f3, 40, 68, e5, 21, 0c, 87, ad, 20, 41, 08, ed, fd, af, 7a, f2, f3, 40, 84, 20, 5d, ad, a2, ac, 20, 41, c5, a3, c2, d7, 57, 0b, f4, 40, d1, 74, 60, d8, de, aa, 20, 41, 64, 25, 20, 85, b3, 0a, f4, 40, 34, c6, 8d, 6c, 0d, ab, 20, 41, be, 31, d1, 6e, 4f, f5, f3, 40, a9, 2a, df, f8, 9a, a4, 20, 41, a2, c9, 31, 2d, ef, f7, f3, 40, 62, a5, 6a, 1c, 3b, a0, 20, 41, ad, b1, 48, 0a, ae, 0f, f4, 40, 98, de, e3, 01, 9e, 9e, 20, 41, 03, 0c, 19, be, 04, 2d, f4, 40, d8, 8c, 2b, 75, ba, 96, 20, 41, 5a, b8, 96, f9, 47, e8, f3, 40, bb, b8, 0a, 14, a7, 93, 20, 41, 74, cb, f4, 72, 69, e8, f3, 40, 53, 2b, c1, 84, 94, 91, 20, 41, 9e, 6f, c2, 3d, 87, d4, f3, 40, 49, 1b, 2b, 5c, a6, 8f, 20, 41, 96, fd, 02, 11, 19, e4, f3, 40, 59, 39, ff, c0, 12, 90, 20, 41, a9, 5f, 74, 83, df, f1, f3, 40, 93, 47, 85, 4b, 4b, 8d, 20, 41, b6, 6f, d8, 09, 5d, f4, f3, 40, a6, 9b, 0f, 57, 47, 8c, 20, 41, f8, 3c, 72, d6, e3, 05, f4, 40, 9d, 16, 4c, b3, f4, 88, 20, 41, a8, 27, cb, e8, 89, 09, f4, 40, 03, 8d, 98, 0d, eb, 89, 20, 41, 52, 0e, 32, e8, ca, 27, f4, 40, 46, 76, 08, 3f, 73, 92, 20, 41, a1, f0, c7, db, c5, 91, f4, 40, be, 65, 0e, 9a, 6b, 95, 20, 41, 0f, 0f, 08, a0, 6a, cb, f4, 40, a6, 3e, 93, 7c, a6, 8f, 20, 41, e3, c1, 01, 9e, 48, 20, f5, 40, 42, b0, 60, 57, 18, 8e, 20, 41, 30, 0d, df, ea, b1, 16, f5, 40, 0e, c6, 05, fe, bc, 8a, 20, 41, a6, 57, 4d, 38, f7, 29, f5, 40, 01, 09, de, 02, 7e, 8b, 20, 41, c3, 6a, b4, 70, a8, 33, f5, 40, ab, 7f, 72, 5c, 59, 8d, 20, 41, 5d, d2, 1a, 2d, ce, 2d, f5, 40, 2c, c6, 9d, d5, 52, 8d, 20, 41, e1, d3, 5a, c6, be, 38, f5, 40, b2, 92, e7, e4, 7a, 89, 20, 41, 16, 94, 7a, ab, 12, 43, f5, 40, fc, e6, 8e, 15, 26, 8d, 20, 41, 73, 11, 5a, 9f, 67, 43, f5, 40, c7, d9, c2, af, 59, 8d, 20, 41, 64, 88, aa, 55, 3c, 4a, f5, 40, fc, 43, ad, ae, ee, 8d, 20, 41, 22, 04, 30, b7, 42, 6e, f5, 40, 09, cd, 16, c4, 4d, 8c, 20, 41, 2b, 22, a4, c2, a6, 8b, f5, 40, b9, 5a, 04, 09, 16, 8e, 20, 41, f6, 12, 4e, 4e, 36, 9c, f5, 40, 8e, 19, bc, 5e, dc, 8c, 20, 41, b8, 1e, 6b, e9, 4a, 9d, f5, 40, 63, 70, 91, 22, db, 8b, 20, 41, eb, ce, 15, bb, 59, b6, f5, 40, 2a, 18, 2a, 29, ad, 8f, 20, 41, 47, 3c, d1, 3e, 3b, 8f, f5, 40, f3, 8a, 19, f6, 89, 90, 20, 41, 2a, f3, 7c, 2c, 36, 91, f5, 40, 00, 7c, f4, 7f, 36, 8e, 20, 41, 1f, 6a, 18, b6, e3, b7, f5, 40, bc, 3f, 99, b3, 80, 8f, 20, 41, 34, d8, 99, c4, 2c, ba, f5, 40, c9, 86, 3c, bc, 26, 90, 20, 41, 3e, 47, b5, 0d, 85, ab, f5, 40, 63, 3d, af, e3, 5e, 91, 20, 41, a7, a7, 08, 12, 8a, b2, f5, 40, e8, fc, b5, 85, 8c, 92, 20, 41, ab, a0, 1e, de, bc, d8, f5, 40, 7f, 37, 24, fa, 71, 99, 20, 41, 11, ee, fe, 8d, 9c, f8, f5, 40, 8c, 4f, a2, 37, aa, 98, 20, 41, 38, 44, 28, e3, 7b, 11, f6, 40, 6e, a9, 3b, c8, d2, 92, 20, 41, 22, 58, df, b7, ee, 15, f6, 40, 12, 83, 9b, 1d, a9, 90, 20, 41, a0, 6f, 56, 81, d7, 25, f6, 40, 4b, 58, 02, 63, ff, 8c, 20, 41, 65, 37, 39, 83, 42, 5b, f6, 40, 5f, 22, 89, 8a, 7a, 88, 20, 41, ee, cf, 5b, 1a, 83, 68, f6, 40, b2, b3, ad, cc, 3b, 88, 20, 41, 80, 4b, 80, d8, 40, 7c, f6, 40, 28, 84, 91, 02, 03, 8c, 20, 41, d4, 98, f1, a7, 06, 8d, f6, 40, 06, aa, c6, a0, b2, 8c, 20, 41, d5, 5e, 21, 7b, ca, 83, f6, 40, 2b, c0, ec, f4, 90, 8f, 20, 41, c2, 66, ab, dc, 06, 87, f6, 40, 2e, 2d, 7d, 53, fb, 90, 20, 41, 38, de, 46, 8d, 1a, 72, f6, 40, 49, d3, b0, 8c, 5b, 91, 20, 41, f2, c0, ac, ae, 93, a9, f6, 40, 48, 1c, 66, fe, 73, 93, 20, 41, 99, 13, 35, 65, f4, ba, f6, 40, e7, 78, 9b, 97, 3d, 99, 20, 41, 93, db, ab, c5, 17, b3, f6, 40, 41, cd, 91, 30, 1d, 9c, 20, 41, e4, aa, 66, 50, 5f, e1, f6, 40, 80, 52, 73, c5, b6, 9c, 20, 41, 22, 4f, b2, bb, 1c, bd, f6, 40, 0b, ff, 74, 51, 8b, 99, 20, 41, 9b, 73, 9e, 0d, 39, a7, f6, 40, 86, 7f, ef, f7, 7f, 9a, 20, 41, 2f, 6c, f1, b2, de, 9a, f6, 40, 5e, d8, 4f, 25, 23, 9a, 20, 41, 1b, e7, 4d, dd, e8, 6a, f6, 40, 37, 65, 54, 46, 5c, 9c, 20, 41, ec, f8, c3, 9b, 07, 6a, f6, 40, 6f, b7, 77, 98, 71, 9f, 20, 41, 33, b2, bb, 59, 7c, 80, f6, 40, 1e, 78, 48, 10, 17, a2, 20, 41, 44, b3, a7, b5, 68, 85, f6, 40, 33, 7b, c9, ab, 4e, a4, 20, 41, 9f, 00, 88, ac, dc, a7, f6, 40, f3, f3, 57, 0d, 0e, a7, 20, 41, b0, 98, 80, 84, dd, 9f, f6, 40, 36, c1, ca, 75, 2c, a8, 20, 41, 22, b4, c1, 39, a8, c4, f6, 40, 7a, 07, 69, 16, 5d, b0, 20, 41, 94, 49, 12, 31, 0c, b1, f6, 40, d9, bf, 3c, 20, 13, b0, 20, 41, 92, 89, fd, fd, 3d, c7, f6, 40, 8e, ed, bc, e6, 46, b1, 20, 41, 12, 94, 73, 07, f2, d5, f6, 40, b4, 78, 63, 6f, 6e, b0, 20, 41, 24, fd, 96, d6, 2c, e8, f6, 40, 4e, d5, 3b, e1, 37, b2, 20, 41, 2c, 8c, 99, 43, 5e, f3, f6, 40, d6, ea, aa, 56, 3c, b2, 20, 41, 4d, cf, 30, fc, 11, 04, f7, 40, cb, 6b, 72, 7a, 73, b6, 20, 41, 4b, 73, 22, ea, d5, 0d, f7, 40, 14, ba, b6, 1b, 5d, b4, 20, 41, d1, b1, ea, ca, 2c, 2b, f7, 40, f7, 27, 5b, a1, d1, b4, 20, 41, ee, f9, 77, 4e, dd, 34, f7, 40, b6, 34, 7d, 4e, b7, b7, 20, 41, a6, d5, 13, e8, 77, 36, f7, 40, 57, 30, b4, 68, 99, b8, 20, 41, 33, 65, 21, cb, 29, 57, f7, 40, 14, fe, c1, bb, 9a, ba, 20, 41, 8e, 1b, 75, 40, ee, 5b, f7, 40, 67, 68, 0b, d9, f5, b5, 20, 41, 4f, 4d, 6d, 38, e8, 8e, f7, 40, 75, df, ca, e0, bf, 2c, 21, 41, 15, b2, b8, 61, 15, 94, f7, 40, 59, d4, b9, 0f, 0f, 2e, 21, 41, 98, 6f, fe, 4e, 4b, 85, f7, 40, 05, 10, 77, 0a, 52, 2b, 21, 41, b5, 05, a0, 39, 01, 6f, f7, 40, 06, b7, 54, 6f, 26, 2c, 21, 41, 5e, 9a, 82, 53, 0f, 5b, f7, 40, 43, 02, 1a, ef, 59, 2b, 21, 41, 69, a1, 05, 67, fe, 46, f7, 40, 6f, 31, 32, 77, c1, 2e, 21, 41, a9, c5, e4, df, 81, 36, f7, 40, 78, ac, a2, 08, 33, 36, 21, 41, fe, 2d, aa, c0, f7, 36, f7, 40, 55, 71, 6b, 9c, c0, 36, 21, 41, c5, 93, 62, a1, d8, 1e, f7, 40, 78, 92, fc, 6e, e5, 38, 21, 41, 8a, 04, 4a, 67, cf, 16, f7, 40, 51, 1c, 24, 53, 51, 39, 21, 41, 3c, 87, 47, 1c, ca, 03, f7, 40, 13, ef, 3c, 13, f3, 32, 21, 41, f2, 28, ff, 2d, 2f, ea, f6, 40, 3b, 9e, 11, 2a, 84, 30, 21, 41, 1e, 1a, d2, be, d6, d1, f6, 40, 42, 34, 71, 57, cd, 2d, 21, 41, 5a, 04, f0, 65, 29, cc, f6, 40, af, 5e, 50, 24, 38, 30, 21, 41, 3a, 5e, b0, 8f, 36, bc, f6, 40, 2e, 97, b8, 1d, 6d, 2b, 21, 41, 6b, 75, 3c, 88, 20, b5, f6, 40, 44, 05, 3e, ec, 61, 2c, 21, 41, 8a, b6, c3, de, 42, 9f, f6, 40, a7, 55, b5, e9, 39, 2b, 21, 41, 2e, 15, a7, fd, 4d, 96, f6, 40, d0, 84, 56, 1d, 64, 27, 21, 41, 91, 86, d0, 6f, 36, 97, f6, 40, b3, c4, a0, 92, 07, 26, 21, 41, d0, 8c, 0b, 52, 94, a3, f6, 40, 06, fc, 19, 55, a0, 25, 21, 41, a1, 73, f8, e1, ee, 95, f6, 40, 48, 05, d7, ff, c4, 29, 21, 41, 7b, cb, 0c, 57, 42, 8f, f6, 40, c8, 9e, 4a, f8, 5a, 2b, 21, 41, 13, 9e, 6c, 0b, 53, 81, f6, 40, 7f, 32, 1a, 01, f4, 29, 21, 41, c4, b0, 99, 8a, 78, 5c, f6, 40, 94, d3, 83, 24, c4, 26, 21, 41, dc, 80, 9e, 6c, dc, 58, f6, 40, a3, ac, 01, f7, 3e, 22, 21, 41, 0b, 09, a4, ce, 92, 8e, f6, 40, 68, b1, f7, 59, e3, 22, 21, 41, bd, 50, 64, fa, da, 9a, f6, 40, c3, 99, 02, 17, 44, 21, 21, 41, af, 1f, 7e, 88, 95, ae, f6, 40, 07, 56, df, e9, 59, 20, 21, 41, b6, 55, 4d, 09, 4c, 99, f6, 40, ca, a2, 46, 0a, 70, 1d, 21, 41, 30, 3e, f9, 5e, 71, a6, f6, 40, e7, 95, c3, 7a, 9c, 1c, 21, 41, f1, 4f, 8a, 37, 04, 7e, f6, 40, 5a, 17, 1e, b6, 69, 1d, 21, 41, 0f, 3c, f8, 00, 55, 41, f6, 40, bf, a8, 12, a0, 77, 1b, 21, 41, 97, c2, c2, f9, 34, 40, f6, 40, 4c, 71, ed, a3, a9, 19, 21, 41, d8, 89, 3f, b4, 84, 2e, f6, 40, d0, 37, de, bb, cc, 19, 21, 41, a1, 90, 64, 69, 19, 15, f6, 40, 60, be, 44, 40, 9f, 14, 21, 41, 53, 14, 47, 07, 5a, fd, f5, 40, 63, 3e, e1, ce, 98, 0f, 21, 41, a4, fa, 1b, 5b, 66, f4, f5, 40, fd, 67, e7, 4b, fb, 0d, 21, 41, 0e, 98, d1, b8, 76, e5, f5, 40, 0c, a7, b7, a6, ea, 0d, 21, 41, 97, c2, 9b, d1, be, d5, f5, 40, 51, f1, a4, ea, 12, 10, 21, 41, 6b, 70, 77, 0c, a8, ca, f5, 40, b2, 06, 38, d5, 3a, 11, 21, 41, 9a, f1, fc, 12, d9, ac, f5, 40, e3, c6, 4c, 13, 1b, 14, 21, 41, 98, f0, fa, db, 2b, a5, f5, 40, 2b, c0, 69, 26, 7a, 18, 21, 41, 37, 11, 76, 8e, 64, be, f5, 40, cf, ce, e2, 79, 4d, 1b, 21, 41, 81, 3e, 50, 93, 71, b7, f5, 40, 53, a5, 33, 44, 91, 16, 21, 41, ac, 88, 77, f5, b4, a3, f5, 40, c9, 20, 94, eb, 4b, 15, 21, 41, 3f, 88, ba, 54, 4c, 90, f5, 40, f4, 20, 1f, 76, 4c, 12, 21, 41, 6e, b3, 2b, 76, 19, 89, f5, 40, ed, 1f, 25, 11, 3a, 13, 21, 41, e3, 86, 25, 4d, 5f, 63, f5, 40, e6, 75, 19, 94, 68, 16, 21, 41, b1, 89, db, d7, 56, 60, f5, 40, 6e, 56, 22, 97, 59, 18, 21, 41, 9e, 32, 6a, f6, 2d, 4c, f5, 40, 74, 33, de, f8, 7f, 18, 21, 41, ad, bb, 30, 10, bf, 43, f5, 40, 2c, 38, a1, 22, 4d, 16, 21, 41, 1c, 61, f7, 59, 6f, 46, f5, 40, 42, c1, e2, d7, e0, 16, 21, 41, b3, de, e6, a3, c9, 3a, f5, 40, 37, 8a, 09, ca, be, 13, 21, 41, 33, 23, fe, 1f, cf, 28, f5, 40, ec, 01, 75, 9b, 9c, 15, 21, 41, 10, 97, f3, f3, c4, 1f, f5, 40, fc, 0b, e4, 34, af, 17, 21, 41, 1f, bf, 71, 96, 53, f6, f4, 40, 66, 2f, de, 08, 20, 1b, 21, 41, 08, 41, 91, 7f, 32, e5, f4, 40, e5, ff, f8, 8d, 9e, 1c, 21, 41, 99, 65, 84, 6b, 2f, f5, f4, 40, ce, cb, 7e, 33, 8f, 1b, 21, 41, 8b, 66, 8e, ba, c9, 0e, f5, 40, e1, f7, 26, 73, 48, 1c, 21, 41, 5b, 60, f7, 78, 9d, 14, f5, 40, 7c, 52, e6, d3, c5, 1e, 21, 41, 43, b3, 49, 16, 37, 00, f5, 40, d7, 59, 2e, 4c, b1, 1d, 21, 41, 37, cd, 20, f6, 31, da, f4, 40, dc, fb, 1e, 0b, 55, 21, 21, 41, eb, 61, b9, bd, 4f, d4, f4, 40, a2, f7, 00, 7d, 45, 24, 21, 41, ca, cc, f0, dd, 6c, db, f4, 40, bc, 5e, be, fb, a5, 24, 21, 41, a5, 87, f7, 83, 17, ea, f4, 40, 47, 41, 73, 8b, f9, 2b, 21, 41, 99, 6b, 94, d7, dc, f4, f4, 40, 76, cc, 1b, 2f, 47, 2f, 21, 41, f8, 8d, a0, cb, 48, 0c, f5, 40, 08, 34, 96, bb, 5c, 33, 21, 41, a5, f2, b2, d5, 88, 13, f5, 40, b9, 30, f2, 01, a6, 31, 21, 41, 69, 1e, 18, a7, 88, 1f, f5, 40, dd, 5f, dd, 9a, ac, 2d, 21, 41, 87, 0a, cd, a0, 92, 15, f5, 40, 0b, a4, 79, df, 69, 2a, 21, 41, 19, 64, a1, 61, 5e, 34, f5, 40, 8f, e8, 66, 2f, 72, 29, 21, 41, b6, e1, 8d, 12, 1a, 48, f5, 40, c4, e5, 80, 5b, 81, 2a, 21, 41, f0, 7f, 70, 09, f1, 4a, f5, 40, 54, 28, 20, 4a, 37, 2a, 21, 41, 92, 6a, 34, 22, 96, 56, f5, 40, 1b, 24, 94, 1d, f2, 28, 21, 41, 34, cb, 2e, 80, 62, 65, f5, 40, 3c, 87, cd, f8, 7e, 2c, 21, 41, 08, 32, 31, 9e, cc, 89, f5, 40, a3, a7, 19, 19, 76, 2d, 21, 41, e8, 10, 5e, 3f, 76, 78, f5, 40, a7, 93, 5f, 9b, b7, 32, 21, 41, ca, 06, cb, a3, 15, 5c, f5, 40, bc, 01, 1d, ad, 61, 36, 21, 41, f1, 0d, fc, e5, 4e, 64, f5, 40, d6, 7e, d8, fa, a0, 37, 21, 41, d9, 17, 94, 08, 56, 54, f5, 40, 1a, 83, c9, 97, 82, 35, 21, 41, dd, d2, de, 88, 84, 52, f5, 40, a1, ea, 47, f9, 4d, 37, 21, 41, 84, a1, 9f, 54, 87, 3b, f5, 40, 80, 95, 24, 95, a9, 38, 21, 41, ba, ea, bb, c1, 07, 3b, f5, 40, c7, d6, 8c, 50, 22, 39, 21, 41, d3, 33, 99, 8d, 9a, 4d, f5, 40, c3, 92, a6, c2, 0d, 3b, 21, 41, 9b, 14, 10, 54, 5c, 50, f5, 40, a0, 7a, 58, 34, 2e, 3d, 21, 41, 03, 62, 44, 60, 3d, 3d, f5, 40, b0, 4b, a9, b2, d6, 40, 21, 41, db, 6f, 60, 1e, 0f, 48, f5, 40, c1, a5, 81, 97, 07, 41, 21, 41, 5a, 83, 82, 24, 1c, 3e, f5, 40, c9, 9c, e5, bb, 81, 43, 21, 41, 62, 3e, dc, c2, 84, 4a, f5, 40, 1c, f5, f2, 50, 7c, 42, 21, 41, 89, b4, 5f, 5a, 89, 5e, f5, 40, 43, 14, 64, fd, 37, 44, 21, 41, d0, e8, 84, 21, 05, 62, f5, 40, db, 7f, 60, d2, 78, 44, 21, 41, f2, 07, 87, 02, 6a, 79, f5, 40, 53, b7, ea, 8f, 96, 46, 21, 41, b6, af, b7, 0b, 76, 7e, f5, 40, 01, d3, 90, 1c, 5a, 46, 21, 41, b9, f8, 05, f0, 14, 90, f5, 40, 74, 40, da, ea, 89, 4a, 21, 41, 4a, 64, 68, 3e, 60, 9f, f5, 40, dc, ea, f2, aa, 58, 4a, 21, 41, 90, 0b, dd, 06, 8f, a9, f5, 40, 5e, 23, 85, 62, 59, 4f, 21, 41, 6f, 68, d3, c0, 59, b5, f5, 40, 79, a0, 69, 69, 51, 51, 21, 41, 14, 10, cc, f4, 0c, d2, f5, 40, 69, 16, 73, 51, 3d, 55, 21, 41, ac, 85, 53, e7, 39, df, f5, 40, 9e, a3, 88, 89, a5, 56, 21, 41, fd, d0, c8, 14, 9b, dd, f5, 40, f5, 64, 46, a7, 9f, 56, 21, 41, de, 31, e3, bc, a2, cb, f5, 40, 01, 98, 18, 5f, 8b, 53, 21, 41, c8, 77, 26, 32, a5, bc, f5, 40, 23, 45, 9c, 63, 93, 54, 21, 41, 86, 01, 83, 5d, 04, aa, f5, 40, 1a, 0b, c4, f0, b1, 56, 21, 41, 52, b6, 26, f2, 48, b0, f5, 40, f3, 30, b4, 86, 5d, 5c, 21, 41, de, 07, 55, d3, 81, 93, f5, 40, b1, 3d, 4c, 81, fe, 5e, 21, 41, e3, d2, b4, 3a, bf, a4, f5, 40, b0, 1f, ec, 76, 9c, 60, 21, 41, 61, 8d, 86, e1, bd, 97, f5, 40, 9e, d1, b1, 19, 51, 5f, 21, 41, 77, e1, 8b, de, 4f, 92, f5, 40, 52, 93, 31, bc, a4, 5f, 21, 41, b7, 92, ce, e3, 1f, 85, f5, 40, 1b, d7, 6a, 05, f9, 60, 21, 41, 2c, 51, fb, 51, ad, 8d, f5, 40, 14, 7b, 83, 7c, 97, 64, 21, 41, 1f, f7, c1, fa, 16, 8b, f5, 40, 46, 0e, d9, 34, c1, 66, 21, 41, 62, a8, 53, 73, 8a, 68, f5, 40, d0, 30, cb, 78, 36, 6e, 21, 41, 16, 61, 60, d6, f1, 7a, f5, 40, 89, b3, 69, 16, ba, 71, 21, 41, 12, 50, 84, 2c, c1, 94, f5, 40, 34, fd, 80, a8, b7, 70, 21, 41, cb, b4, 74, 30, 76, 98, f5, 40, 5b, 8d, 13, af, b0, 76, 21, 41, 0b, 44, 50, db, 7f, da, f5, 40, 37, 0b, 58, bb, da, 7b, 21, 41, 5e, cd, c8, c9, ca, e4, f5, 40, 3d, e7, 2f, 85, af, 7a, 21, 41, 9f, c8, f6, cf, b1, 06, f6, 40, 1c, 2a, 0d, 8a, 4e, 78, 21, 41, d4, 3b, 0b, d8, 94, 12, f6, 40, 5b, a2, d1, 72, b8, 76, 21, 41, f5, aa, cc, 4a, 0b, 44, f6, 40, c3, 31, 70, f7, 4c, 73, 21, 41, e4, 34, 4f, 4a, 8b, 58, f6, 40, 33, 7c, 2e, ea, 82, 71, 21, 41, b1, 15, d9, 33, 71, 73, f6, 40, aa, 8b, ed, 1f, 88, 74, 21, 41, cc, 97, 7c, 6f, f3, 7c, f6, 40, 7b, 88, b8, 45, 25, 76, 21, 41, 30, d7, 7c, f5, a9, 94, f6, 40, 39, bd, 90, c7, 12, 79, 21, 41, 28, e1, 20, 60, fc, 92, f6, 40, 19, 88, 3d, aa, 49, 7a, 21, 41, 8f, 5b, 63, 55, f3, 9d, f6, 40, 3b, 71, 6d, a7, e5, 7b, 21, 41, 46, 84, 89, b1, b4, 91, f6, 40, bc, f9, ea, 76, 65, 7c, 21, 41, fc, 22, f2, 66, e3, 5b, f6, 40, 11, 44, 81, fa, 4d, 7e, 21, 41, ce, e5, cb, 6e, 05, 5c, f6, 40, 57, 2d, 78, 12, b7, 80, 21, 41, 02, f0, 13, 2b, 43, 6d, f6, 40, bf, 2c, 60, 6f, b6, 80, 21, 41, 9c, 53, 65, 40, 41, 36, ff9, 34, d3, 76, 18, 21, 41, 3f, 14, f1, bf, c8, 3e, ec, 40, b2, 10, 62, b8, 52, 14, 21, 41, 36, c8, 3e, f7, b4, 05, ec, 40, dd, 74, d7, 84, e4, 13, 21, 41, 06, 80, f2, 7b, 47, e5, eb, 40, c8, 21, 92, 64, d6, 1c, 21, 41, d6, 76, d4, d1, 3a, 09, ec, 40, ab, 54, e9, 94, 9d, 1f, 21, 41, 02, 79, 59, 11, 97, f0, eb, 40, 2f, 24, db, 49, 3f, 1f, 21, 41, ac, f4, 80, 33, 0b, bc, eb, 40, e2, 4d, 5f, 5e, 5c, 20, 21, 41, fe, e7, 4e, 5b, 09, aa, eb, 40, 2c, b3, 8c, 26, af, 1d, 21, 41, dc, 78, 13, c3, 3f, a8, eb, 40, 43, 6a, 8a, 39, 4c, 1d, 21, 41, c1, 25, 1f, df, 1f, 7f, eb, 40, c3, 2c, a7, dc, 82, 1e, 21, 41, 4d, f0, 09, 6d, df, ca, ea, 40, d9, 7a, 94, 49, 01, 1b, 21, 41, ea, 4d, d7, 5f, ca, bd, ea, 40, d7, 0a, f6, c8, ca, 19, 21, 41, 04, 4f, 6f, 94, e5, 8a, ea, 40, 8c, 1b, f5, 20, a6, 08, 21, 41, 62, 40, 82, 58, fc, 61, ea, 40, 80, 3e, 97, ad, bc, 07, 21, 41, 2f, fd, 64, b0, 38, 80, ea, 40, 31, 49, fd, c7, d2, 06, 21, 41, 9d, c5, ff, ab, e7, 59, ea, 40, d9, 36, 63, 2b, f7, 04, 21, 41, 26, 80, 0c, 22, 24, 49, ea, 40, 96, da, ed, 9b, 5b, 03, 21, 41, 77, 39, 74, a5, e0, 54, ea, 40, c2, bc, fd, 6c, 43, 03, 21, 41, 83, fe, 61, f5, c7, c6, ea, 40, b8, 2b, 22, 94, 5d, 00, 21, 41, d1, 8d, 92, ee, ea, b2, ea, 40, 0f, 61, e5, 81, 81, fc, 20, 41, 47, 96, fe, 36, 91, b9, ea, 40, 74, cb, 5c, 1a, 3c, fd, 20, 41, c6, cd, 18, 44, 67, da, ea, 40, c8, 41, bd, 85, 2c, f9, 20, 41, 7f, 94, a8, f7, 7c, f4, ea, 40, bd, 7f, 8f, bc, 46, f8, 20, 41, ab, 21, 6a, c8, 55, 24, eb, 40, 2e, bf, 2f, 88, 45, f5, 20, 41, 05, ff, e2, f6, 81, 09, eb, 40, 29, c3, fa, 97, 9b, ef, 20, 41, a8, ca, b4, 9c, 5f, 4d, eb, 40, be, 2e, 54, d5, 41, ed, 20, 41, 9d, 19, a4, 43, 36, 3b, eb, 40, 0f, f6, 90, 4b, 09, ee, 20, 41, cf, 4d, 07, 8a, 0e, 0d, eb, 40, 11, 11, d5, c3, f9, ec, 20, 41, a2, f4, c6, 15, f3, 07, eb, 40, c6, 57, 51, d9, 9e, ea, 20, 41, d0, 45, 26, 49, e4, 04, eb, 40, c1, 9b, a4, 71, b1, e8, 20, 41, 3d, bc, 59, 5c, d5, 1c, eb, 40, a1, e5, c2, 89, 44, e7, 20, 41, 2b, 06, f7, 2b, a3, f5, ea, 40, b8, 9b, 7d, 84, 7c, e4, 20, 41, 0a, 30, f7, ad, f1, 18, eb, 40, 15, 8f, 28, dd, 4c, e5, 20, 41, b5, 14, f9, 80, 4e, dd, ea, 40, b9, 29, e4, 88, 55, e4, 20, 41, ae, a7, 0d, a6, 90, cd, ea, 40, 1b, 73, 79, cc, 35, e2, 20, 41, 42, fb, e8, 66, c8, d6, ea, 40, 98, 17, 7b, f6, 02, e2, 20, 41, 06, bc, b3, b6, ad, 8e, ea, 40, 9f, d1, 12, b8, 25, e4, 20, 41, 56, 4b, 79, 9e, 8a, b3, e9, 40, e1, 8d, 9e, c7, 9e, e1, 20, 41, 91, 3a, 3c, d9, 5a, 9d, e9, 40, e5, 62, be, 5f, 24, e3, 20, 41, af, be, ad, 0b, 28, 75, e9, 40, 3f, ff, 08, 96, 8f, e0, 20, 41, 0e, f0, e1, 80, 21, 42, e9, 40, 3c, 96, 99, 37, f8, e0, 20, 41, 08, fc, 0d, d2, fc, cd, e8, 40, 92, 5f, f5, 37, 0f, dc, 20, 41, f6, 00, 2e, a4, ac, 88, e8, 40, 41, df, 04, b3, a1, de, 20, 41, 28, 42, 83, 86, d5, 72, e8, 40, 49, 30, 41, 98, 83, dd, 20, 41, b4, 63, a9, e3, c7, 5d, e8, 40, 88, 91, 0f, 36, 23, df, 20, 41, d5, 5f, 27, eb, 44, 50, e8, 40, 63, 0f, 03, 72, c9, e2, 20, 41, 3a, a7, ad, 1e, 02, 6f, e8, 40, b2, 19, 15, df, 94, e4, 20, 41, 83, 66, fe, 42, 02, ad, e8, 40, 46, e7, a0, 0a, 3d, e6, 20, 41, 08, 98, 6b, 7f, 33, ac, e8, 40, 19, 03, 53, e8, b1, e8, 20, 41, b5, 1d, dc, 96, 38, d3, e8, 40, 39, ce, 13, 3e, d7, e7, 20, 41, e9, 87, 6a, 87, fc, 96, e8, 40, 4a, 61, 01, 2a, 0a, ea, 20, 41, 0b, 21, 41, d8, 2f, 82, e8, 40, b0, 24, 8b, 76, bc, ea, 20, 41, eb, 98, a3, 24, 57, 5d, e8, 40, 27, c1, f6, de, 44, ee, 20, 41, 5a, 68, ad, dd, 83, 68, e8, 40, cd, 5e, 93, 3a, 14, f2, 20, 41, 75, c2, 91, a9, d3, 4d, e8, 40, b1, 92, 02, 0b, dd, f4, 20, 41, ea, 6c, f0, 78, 7f, 50, e8, 40, 79, ec, ae, 14, be, f5, 20, 41, be, 2a, ce, 89, a8, 63, e8, 40, f5, 07, 07, 1f, 67, f9, 20, 41, 59, e5, ef, 63, 06, 4a, e8, 40, 5e, 5d, 20, 18, 03, fb, 20, 41, ea, 3c, 95, 78, df, 17, e8, 40, 18, 90, 08, c0, 70, fd, 20, 41, 30, 6b, 23, 36, 44, 2e, e8, 40, a7, e8, 5f, 8f, 80, ff, 20, 41, 70, b2, 80, 78, d2, 70, e8, 40, 3e, e2, d3, d0, 45, 03, 21, 41, 7b, b1, 78, 73, bc, 86, e8, 40, ec, 3b, d6, a1, d8, 02, 21, 41, 8b, 3b, d9, 9a, 18, ad, e8, 40, bc, b6, 5c, 75, 82, 07, 21, 41, 9b, 3f, 83, 47, 1a, f5, e8, 40, 56, f3, ee, 54, e6, 0b, 21, 41, be, c9, 26, 35, 21, 0c, e9, 40, 72, f7, bd, 68, 7d, 0f, 21, 41, db, a6, 21, ef, 66, c7, e8, 40, 54, 1d, a7, fe, 3e, 0e, 21, 41, 93, 39, 89, 3a, c9, 9c, e8, 40, d3, 86, 8a, b2, ed, 12, 21, 41, b9, bb, 83, 82, 08, 77, e8, 40, e1, 8b, ce, 5b, 2a, 14, 21, 41, dc, 0c, 0d, cd, b2, 57, e8, 40, 1e, 5c, f0, d3, a5, 12, 21, 41, 27, d8, 1f, 7c, 1a, 4a, e8, 40, a5, b5, 39, 31, 18, 13, 21, 41, 0a, 20, 08, ff, 93, 23, e8, 40, 79, 2f, 52, b6, 6e, 16, 21, 41, 4f, ae, 6a, 61, 0b, 33, e8, 40, 12, 57, 0c, b9, e1, 15, 21, 41, 85, b9, ac, 8e, b2, 13, e8, 40, d0, 14, 5e, f3, 75, 19, 21, 41, ea, 67, 08, 9d, 18, e3, e7, 40, ac, c4, 92, 73, aa, 1c, 21, 41, 35, 64, a3, 2a, f6, 10, e8, 40, a3, 55, 3a, 6f, 81, 1e, 21, 41, 15, 9d, 38, f9, 64, ca, e7, 40, c1, 26, c6, fe, 74, 22, 21, 41, 4e, 7b, bb, 6c, b7, ad, e7, 40, b7, bd, d4, 4a, b3, 1e, 21, 41, 54, 61, 9a, 08, ca, 6e, e7, 40, 84, f0, d9, 3a, 37, 1e, 21, 41, 7f, d8, 59, c2, 05, 4e, e7, 40, bd, 6a, d2, f8, 3f, 1a, 21, 41, 4b, e6, 14, a5, e7, 53, e7, 40, 66, bf, 6c, d3, 56, 18, 21, 41, c9, bc, f8, 6a, 0d, 83, e7, 40, d7, 33, 46, 99, 88, 16, 21, 41, 8d, 2b, d2, cc, 91, 75, e7, 40, 2e, 27, 26, 78, 1e, 14, 21, 41, 2b, 9b, 2e, 03, af, 83, e7, 40, 4c, 89, df, 19, d1, 12, 21, 41, f7, cf, 9e, 22, 04, 5c, e7, 40, b9, 83, 7d, 52, 2c, 11, 21, 41, d8, 29, 13, 55, 5a, 90, e7, 40, b9, 7c, 5b, a4, ff, 0c, 21, 41, 18, 51, 19, fc, 53, 72, e7, 40, 82, a8, 4e, a0, 8b, 0c, 21, 41, 2f, 5d, 92, 20, 23, 55, e7, 40, 1a, 5f, 3a, 70, 17, 0e, 21, 41, e7, 64, c6, 6d, 05, 5f, e7, 40, 97, 26, 17, ab, 30, 0f, 21, 41, ca, 42, 27, 63, 13, 41, e7, 40, fb, 4b, ee, b1, d8, 11, 21, 41, 2a, 4a, a3, 9c, 65, 41, e7, 40, ac, cb, 4b, 09, 8c, 12, 21, 41, 1c, e5, a6, 7d, 6d, 17, e7, 40, 5d, 35, d0, 2b, 80, 17, 21, 41, fe, fa, 5c, dc, c0, 47, e7, 40, cc, 6e, 9e, 69, a2, 1b, 21, 41, 1d, e3, 57, e4, 8e, 24, e7, 40, ab, 6f, a6, 66, 3b, 1f, 21, 41, 02, 82, 61, 37, 96, 36, e7, 40, 2d, ab, 3f, fe, 13, 23, 21, 41, a9, b2, 6e, 40, 13, 53, e7, 40, 00, 18, 45, 0a, 17, 25, 21, 41, 7c, 7c, bf, b0, dd, 7c, e7, 40, a8, b6, 74, 3e, 98, 27, 21, 41, 14, 88, 0f, b1, 58, 35, e7, 40, f6, 03, 32, 4a, fe, 29, 21, 41, 25, a9, d3, 15, fe, 2c, e7, 40, 00, e1, 65, c7, 72, 30, 21, 41, 22, b6, 7a, 81, 06, 52, e7, 40, 51, 3c, 5f, e5, 51, 38, 21, 41, 69, 51, 3f, 78, 9e, 52, e7, 40, 24, d0, 1f, 64, 51, 36, 21, 41, 42, 7e, d9, 9d, 6f, 1b, e7, 40, d8, 3f, be, 31, c1, 36, 21, 41, 87, 5c, 51, 13, ae, fe, e6, 40, b3, f5, fa, 93, 04, 3d, 21, 41, 68, 34, 42, 59, 01, e3, e6, 40, 3b, c0, 3f, 9f, 74, 3a, 21, 41, f9, c1, f5, 3d, ae, 7f, e6, 40, d5, 5b, 0d, 91, 39, 2f, 21, 41, 18, 21, e0, 2a, 25, 97, e6, 40, 9d, 5e, 10, b1, ee, 2d, 21, 41, c8, 5f, ce, 6b, 01, 84, e6, 40, d2, 88, 78, 8b, 38, 32, 21, 41, ca, e3, 6a, d0, 38, 5d, e6, 40, 35, ba, ec, a2, 72, 32, 21, 41, 62, 64, 54, bb, f0, 19, e6, 40, 5d, 3d, 2b, fa, a5, 36, 21, 41, 68, 63, 09, 1a, 31, 0b, e6, 40, 32, ad, 66, a7, cc, 38, 21, 41, 40, cb, f4, d4, e2, e8, e5, 40, 20, b3, 93, 48, 77, 3d, 21, 41, 4e, c5, 65, 2f, 48, 3a, e6, 40, 5c, b9, e6, 79, 1c, 3e, 21, 41, 79, d8, cb, aa, f1, d1, e5, 40, 05, 4c, f3, c2, f7, 3a, 21, 41, 2b, ee, a2, 86, d7, 72, e5, 40, b4, 6f, 00, b8, b4, 44, 21, 41, 3c, e0, 5d, 5f, d5, 77, e5, 40, 9b, 49, 1a, f0, 2e, 44, 21, 41, f1, ab, b3, d7, af, 87, e5, 40, 36, db, 41, 8a, d9, 41, 21, 41, 76, b0, b6, 4c, 37, 84, e5, 40, bc, 48, ee, fb, 45, 41, 21, 41, 21, 44, a5, bd, 4e, 98, e5, 40, 1d, fc, 6c, 7f, ff, 46, 21, 41, 69, 25, d1, 6b, 4c, ae, e5, 40, 48, 23, 68, 53, 8e, 48, 21, 41, 28, 13, 39, 60, 1d, 83, e5, 40, 10, 81, 0f, db, 4f, 47, 21, 41, cf, 9a, e0, 55, 1b, 62, e5, 40, 7f, 50, 1f, 8e, c9, 48, 21, 41, a1, 68, 3c, ed, 77, 03, e5, 40, 2b, 27, 62, e4, 31, 47, 21, 41, 2f, a5, ea, c9, 0c, e6, e4, 40, 00, be, 34, 38, d2, 42, 21, 41, 5a, 67, 6b, e4, ab, 0c, e5, 40, 8f, cb, 79, 7e, 41, 40, 21, 41, 88, 88, 8b, b4, 44, f0, e4, 40, c4, d4, bf, 1f, e3, 3f, 21, 41, f2, ec, 66, 3a, bb, 1b, e5, 40, cd, f0, 68, fd, 56, 3d, 21, 41, 9e, df, 7a, a8, bf, 27, e5, 40, 15, 72, 5d, 63, 5b, 3e, 21, 41, 5f, 76, 76, a4, 50, f5, e4, 40, f2, 45, d8, a2, 50, 3d, 21, 41, ed, e3, 1e, 7f, 46, e0, e4, 40, 70, c3, aa, 8e, be, 39, 21, 41, 4d, 74, 9d, 01, 32, f3, e4, 40, f9, 07, 3a, c8, 83, 37, 21, 41, 2a, 26, ec, 71, 9c, b5, e4, 40, 46, d6, 88, 27, c6, 35, 21, 41, 87, 7b, 69, c6, 4b, d6, e4, 40, 7c, 97, 81, 96, 29, 31, 21, 41, 1c, 07, 2b, ff, 1a, a9, e4, 40, d5, a0, 81, a8, b2, 2e, 21, 41, 89, 21, 65, c9, 2c, e6, e4, 40, 33, 28, 3d, af, 39, 2b, 21, 41, a4, e2, 54, 03, bc, c7, e4, 40, f8, 35, c6, ee, e1, 2a, 21, 41, d0, c6, 85, 11, b2, 74, e4, 40, d6, 7f, b9, ee, b9, 28, 21, 41, 2d, 6f, e3, 5a, 55, 58, e4, 40, 0b, 0a, 27, d8, ca, 26, 21, 41, 17, 9a, 62, de, 19, 61, e4, 40, 04, ca, 15, 5b, 45, 26, 21, 41, aa, 41, e1, a2, 63, 91, e4, 40, 69, 97, 34, f6, 30, 23, 21, 41, c4, 65, f6, 5f, 68, 8f, e4, 40, b3, b0, 33, a0, 91, 22, 21, 41, 02, 40, e3, 17, 97, cf, e4, 40, 11, f2, 6c, fc, 88, 20, 21, 41, d0, 49, 22, 71, a6, c4, e4, 40, 9c, 29, f9, c9, c0, 20, 21, 41, 14, 9f, f6, ac, d6, 74, e4, 40, 07, 9d, 37, 68, e5, 1a, 21, 41, 8d, 19, ff, 96, 6a, ae, e4, 40, 1c, ae, df, 0d, 63, 17, 21, 41, eb, 8b, 23, 3f, ec, e3, e4, 40, 05, e7, ba, c4, 4f, 0f, 21, 41, 47, 63, 25, f6, 48, ae, e5, 40, bd, e8, dc, dd, e6, 10, 21, 41, ba, fa, 76, 8b, e0, eb, e5, 40, e8, db, fd, e5, 66, 0f, 21, 41, 69, 2d, d0, ce, 6c, fb, e5, 40, 34, 08, 15, 68, da, 0d, 21, 41, c3, 37, 5d, 8e, 3d, e5, e5, 40, 0f, 76, f6, 7c, 5d, 0a, 21, 41, e6, 0c, de, d2, de, 21, e6, 40, 37, 8b, 79, b6, c3, 03, 21, 41, f5, fa, 28, 43, d2, 45, e6, 40, b9, 4b, bd, f7, c3, fe, 20, 41, 9c, bf, ac, 21, 2f, 4e, e6, 40, bf, 35, 29, 3b, 4a, f1, 20, 41, 6b, 3c, 6b, 46, 28, bd, e5, 40, 73, 47, c3, ec, 29, e8, 20, 41, 36, eb, ae, 24, ca, 91, e5, 40, 38, 95, e1, 49, e1, e3, 20, 41, 84, 7a, 8c, 41, c5, 8a, e5, 40, 98, b4, 44, df, 35, e2, 20, 41, b8, 92, ce, 5a, d3, 9a, e5, 40, 99, f8, 9e, f0, 96, e1, 20, 41, 03, 8a, b8, 88, 9b, c8, e5, 40, bf, 39, 72, 8c, a0, e3, 20, 41, c5, a6, 5a, f6, f4, e4, e5, 40, 12, ff, 69, 75, 18, ed, 20, 41, fd, dc, 35, 81, 8c, 24, e6, 40, d6, d7, 10, bc, 4f, ee, 20, 41, 87, a9, 4a, 1e, 79, 79, e6, 40, e2, e7, fb, e1, 32, ea, 20, 41, 7f, ef, f3, e6, 83, a6, e6, 40, e4, 72, d6, 11, 3b, ea, 20, 41, be, 44, 11, 21, b3, ba, e6, 40, 30, 92, b3, 2d, e1, e8, 20, 41, b7, 83, 43, 93, 14, b6, e6, 40, 24, cd, 26, fc, a4, e4, 20, 41, e6, e8, 5f, f5, 47, ea, e6, 40, db, 95, 64, b4, d4, e4, 20, 41, 1a, 49, 29, 7f, ef, 51, e7, 40, 82, 7a, 6b, f9, 8b, e1, 20, 41, 9b, c5, a5, c2, cd, 3a, e7, 40, cd, fa, 36, a6, b7, da, 20, 41, aa, 1b, 84, 45, 0c, 48, e7, 40, d7, 7b, 86, 5c, 6a, d8, 20, 41, ed, 19, c7, 97, 27, 64, e7, 40, 95, 74, 60, eb, 41, d6, 20, 41, 98, 24, 0d, 55, c1, 4f, e7, 40, f7, ee, 6c, 9d, c9, d2, 20, 41, a3, 52, 92, b4, f8, 73, e7, 40, f6, a0, b7, ec, b6, ce, 20, 41, f9, 89, cb, 6c, f9, d5, e7, 40, d5, 0d, 79, 9d, 3c, cf, 20, 41, 62, 0f, 4e, 49, 9d, f7, e7, 40, ae, 6b, 78, 7a, 94, ce, 20, 41, 1b, cc, 1a, d6, 15, 15, e8, 40, 5f, f5, e6, 42, 98, cd, 20, 41, eb, 6b, 60, 20, 7e, 0b, e8, 40, 54, 67, f1, e4, db, c9, 20, 41, a4, 10, f3, 72, 41, bf, e8, 40, 88, 52, f0, 17, 7b, ca, 20, 41, a2, 39, 00, 44, 2d, 24, e9, 40, ea, e2, e1, b9, 3a, c9, 20, 41, 4c, 3e, c1, f9, fd, 23, e9, 40, 49, d7, 63, cb, 5e, c8, 20, 41, af, 50, 19, e5, 3b, 46, e9, 40, 5a, 49, 13, a9, 9e, c6, 20, 41, 29, 39, 3e, 6d, e2, 0b, ea, 40, 58, da, 1f, d0, 07, c7, 20, 41, 27, 83, 48, 47, ec, 39, ea, 40, 34, dc, 81, 33, 61, ca, 20, 41, aa, c3, 9e, dd, 48, 6e, ea, 40, 8e, 95, b4, 5c, b7, c8, 20, 41, ab, 97, 7c, 20, 65, 7d, ea, 40, b6, 30, a0, 52, 24, c9, 20, 41, e3, 06, 1c, 48, 6b, 90, ea, 40, 5f, f5, fa, 77, 2b, cd, 20, 41, 48, 3b, 0c, d1, 03, dd, ea, 40, cd, 7b, 15, f6, d3, cc, 20, 41, 1d, 8b, 09, 2b, 53, 34, eb, 40, 3b, 56, e0, e9, bb, ce, 20, 41, 46, 04, 26, 51, 13, 3d, eb, 40, c6, 9d, 62, f6, ef, d0, 20, 41, 33, 4a, 51, 99, 3f, 89, eb, 40, de, a6, 8e, fe, 3e, cf, 20, 41, ff, f4, c7, 9e, a9, 98, eb, 40, 48, c9, f6, 13, bb, cd, 20, 41, 6a, 75, 27, 3e, 2d, eb, eb, 40, 3d, 58, e5, 43, a2, ca, 20, 41, 65, c3, 8e, e2, 41, a4, eb, 40, 5c, 17, 64, c0, 4c, c8, 20, 41, 7f, d8, 23, aa, 4a, b5, eb, 40, f3, 51, 3d, 7e, 95, c9, 20, 41, fb, d0, 5f, 29, 7b, f9, eb, 40, b8, ab, 49, e2, 15, cb, 20, 41, 17, 59, 75, 91, 8b, 09, ec, 40, 76, b5, ce, 03, 74, c8, 20, 41, d9, ad, 14, 92, 05, 22, ec, 40, 37, c2, 37, c0, 41, cb, 20, 41, ce, b2, df, b0, 5a, 4d, ec, 40, bf, e2, 56, 7d, 8b, c9, 20, 41, ba, 37, 74, ea, 00, 67, ec, 40, e7, 5d, 7a, 6d, a4, ca, 20, 41, 02, 0a, a5, ed, b8, 6c, ec, 40, 96, a8, 26, c9, 03, ca, 20, 41, b9, 6f, 08, 6b, db, 9b, ec, 40, 2b, dd, 20, 2d, 4e, cd, 20, 41, eb, d7, 04, 14, 5e, ca, ec, 40, be, 71, 60, ec, 7d, c9, 20, 41, 6c, ec, f0, 67, 98, c5, ec, 40, 46, 77, 25, 4f, 0c, c9, 20, 41, a0, fe, 16, 06, 23, fd, ec, 40, 2a, fe, fe, f0, 79, cb, 20, 41, 8f, e6, b2, 4e, ab, 36, ed, 40, a4, 43, 96, d1, 94, c9, 20, 41, 61, 92, 88, cb, 22, 67, ed, 40, 67, 79, 81, 10, 13, c7, 20, 41, 5f, 9e, 25, 94, 08, 3c, ed, 40, 2d, 77, 6d, b8, a3, c1, 20, 41, 2b, a3, 23, 96, e1, 45, ed, 40, 13, 5a, 2f, 96, 45, c3, 20, 41, 82, a5, c6, b8, ca, 65, ed, 40, a6, ec, a3, 67, c1, c2, 20, 41, 41, bb, ce, 9a, da, 9d, ed, 40, e9, 11, 4c, de, 91, c8, 20, 41, 0d, ba, 9a, 1e, 65, d2, ed, 40, f5, c3, 47, 07, 4d, cc, 20, 41, 1e, 72, f1, d2, ff, a7, ed, 40, 13, 6b, 1f, f5, e7, d0, 20, 41, 3a, 24, 34, 5a, a5, bd, ed, 40, 53, ff, 44, 85, 03, d4, 20, 41, fd, b8, 7f, 64, 1d, 85, ed, 40, 75, 30, 87, 36, cd, d5, 20, 41, a3, 6c, bb, 65, 38, ae, ed, 40, 02, 3d, c3, fb, fb, d7, 20, 41, 34, 30, b8, 0a, 77, a1, ed, 40, 2e, 85, 4c, db, 65, da, 20, 41, f8, 68, 17, b0, 7e, c4, ed, 40, 9a, c0, c4, 68, b6, d9, 20, 41, d6, 30, 25, 28, 0b, 76, ed, 40, 53, 9c, 30, 89, 85, d8, 20, 41, 42, 3f, aa, 72, ba, 64, ed, 40, 90, 90, f6, 2c, 1d, dd, 20, 41, a2, 5d, a3, 1f, 6e, 89, ed, 40, ca, 13, 64, 00, e2, dc, 20, 41, 03, 63, 54, c9, eb, bf, ed, 40, 6a, 6a, 03, f4, 50, de, 20, 41, 0c, a3, f9, 9a, 0f, cb, ed, 40, c5, c3, 71, 0c, 54, df, 20, 41, 79, 6f, c6, 95, 15, b1, ed, 40, 2b, 31, 58, 3e, a9, de, 20, 41, b1, 28, 8f, f6, 65, 85, ed, 40, 6f, 3f, 24, df, 4a, e1, 20, 41, 3e, b4, 32, f0, 7a, 52, ed, 40, a5, 67, f4, 60, 36, e1, 20, 41, dd, 67, 3d, 87, e1, 6f, ed, 40, bc, a2, 43, 0c, 99, e2, 20, 41, d4, ff, 46, 47, a0, 62, ed, 40, 47, 67, 44, 55, 4b, e6, 20, 41, 53, 78, a3, e6, 02, bf, ed, 40, 08, 44, ca, 88, 22, ee, 20, 41, e6, cd, da, 78, 27, ff, ed, 40, e2, 27, d8, c8, ad, ea, 20, 41, a3, 57, 9f, f4, e9, 34, ee, 40, 6d, cf, f6, 0c, 4b, ed, 20, 41, 16, 60, 1b, ae, 78, 56, ee, 40, c1, c8, 52, 33, fb, f2, 20, 41, 34, 18, bc, df, 94, 69, ee, 40, 47, ed, 96, 42, 62, f7, 20, 41, 2c, 6b, e3, 36, eb, 58, ee, 40, f4, 90, dc, 04, f1, ff, 20, 41, 70, 1f, 15, a7, e8, 7b, ee, 40, 0f, 53, 28, 98, a0, 03, 21, 41, bb, f7, 65, 62, 74, 4d, ee, 40, 86, 91, ef, 27, a7, 0a, 21, 41, 7b, 11, 29, c0, ae, 59, ee, 40, ea, 82, 7a, db, 41, 0d, 21, 41, 42, bb, e9, fa, bd, 27, ee, 40, 03, 82, 63, 53, 7c, 08, 21, 41, a8, 6e, 87, 8a, 0a, cb, ed, 40, ed, c0, a6, 5e, 55, 0b, 21, 41, aa, 40, 20, 70, 85, a2, ed, 40, 4f, 65, 67, c2, 53, 0d, 21, 41, 5d, da, e6, c7, f0, 5c, ed, 40, 07, f5, 48, 34, 99, 09, 21, 41, cf, 00, 42, 2f, dc, 2c, ed, 40, 29, 13, 44, d2, 4d, 01, 21, 41, 1f, 2b, 77, f4, 06, 78, ed, 40, 6b, 52, f1, 01, 4c, ff, 20, 41, 5c, 86, 2c, 72, 51, 33, ed, 40, 95, a3, e7, 85, 47, fa, 20, 41, 2c, 0a, a8, 99, ce, 3b, ed, 40, 12, fd, b7, db, bc, f4, 20, 41, fa, 24, b0, 8a, 97, 2a, ed, 40, 8e, cd, e1, ee, 69, f4, 20, 41, fb, 16, ac, cb, fe, f2, ec, 40, 2a, b7, b3, 6c, ad, f5, 20, 41, c0, 5a, 1a, 7c, 9c, f5, ec, 40, dd, fa, af, c1, 4f, f6, 20, 41, 61, 8e, 47, 05, ea, ca, ec, 40, 02, a3, f7, ba, 03, f2, 20, 41, b0, 61, 15, 7b, 9c, b3, ec, 40, c9, 7c, 4c, 15, bc, ee, 20, 41, 7e, 9b, 1c, ab, 1c, c8, ec, 40, d3, 37, e5, 62, a7, ee, 20, 41, 95, ed, b5, 17, 47, b6, ec, 40, 52, e0, cc, 57, f2, f4, 20, 41, 5d, 84, 79, 72, f6, 78, ec, 40, dc, 52, 8c, 6c, de, f0, 20, 41, 6f, ed, 5d, f2, c3, 3e, ec, 40, dd, 79, f6, b7, 02, f1, 20, 41, d9, a4, 91, be, 94, 15, ec, 40, 91, 2b, b2, ec, 1a, f5, 20, 41, e3, 40, 0e, a8, 78, 1c, ec, 40, f3, 3b, ed, fd, 4e, f4, 20, 41, 50, 0a, 0d, 71, 49, f3, eb, 40, 75, c6, 64, 89, 54, f8, 20, 41, 74, b7, a3, 60, 2b, dc, eb, 40, 8d, 67, 6b, fc, 47, f9, 20, 41, 6a, b9, c4, 52, 22, 16, ec, 40, fb, a7, c1, 79, 41, fa, 20, 41, 80, d7, a6, 31, 4a, 19, ec, 40, 8f, e1, b1, 9d, 6b, fe, 20, 41, 1e, b0, 11, 52, eb, f4, eb, 40, cf, 84, c2, 3c, 08, 04, 21, 41, f3, 5b, 11, fc, 22, 07, ec, 40, 3b, 0b, 89, 9c, 78, 05, 21, 41, 3a, b9, 6a, 22, c3, ee, eb, 40, e9, 9d, 1c, 85, 07, 08, 21, 41, 0d, 34, 56, 57, 12, 01, ec, 40, 29, 35, b5, b7, af, 07, 21, 41, a4, e3, 83, a0, ca, 14, ec, 40, 11, 13, 05, 80, e2, 0e, 21, 41, 87, 48, 28, ca, 34, 1c, ec, 40, 95, 70, 38, 02, be, 1b, 21, 41, f9, 16, 22, b2, 01, 68, ec, 40, e9, 44, 59, 2d, ed, 26, 21, 41, dd, 6f, 3a, 1d, 06, 89, ec, 40, 67, 0c, b1, 47, 95, 31, 21, 41, 21, 1f, f3, f8, e0, 4b, ec, 40, 3e, b4, 01, 29, b3, 2f, 21, 41, 4b, 15, ba, 0a, b4, 14, ec, 40, 50, a2, 20, bc, 95, 2d, 21, 41, dc, 21, bb, d1, 2f, 0c, ec, 40, 46, 81, c0, d5, 0b, 2e, 21, 41, c5, e4, 94, aa, c7, e1, eb, 40, 44, 06, c9, 33, 6b, 2a, 21, 41, 66, 44, 21, 18, f1, f0, eb, 40, bc, b2, 02, 6e, a0, 27, 21, 41, 8a, 92, 67, 94, 5b, e4, eb, 40, 2d, ed, f9, 9c, 3f, 25, 21, 41, 96, 77, da, c0, d2, b4, eb, 40, 0c, 98, 95, bc, b5, 23, 21, 41, 68, b3, 67, 6b, f1, b2, eb, 40, c7, 19, b7, 9f, 8b, 20, 21, 41, 3f, d7, 53, 3e, c6, cb, eb, 40, 27, 9c, 9f, d0, e2, 21, 21, 41, 46, 11, 72, f7, 21, e0, eb, 40, 5f, 9e, b3, ed, f3, 20, 21, 41, 26, 43, a5, f5, 69, f4, eb, 40, 13, a5, 8c, ae, a3, 23, 21, 41, fb, f9, 57, fa, ab, 29, ec, 40, ab, 99, 6c, d8, bf, 1e, 21, 41, 54, 21, 85, cc, 47, 1d, ec, 40, 30, b7, 82, b1, bb, 1b, 21, 41, a2, 40, 21, 05, 8a, 59, ec, 40, 06, f9, 34, d3, 76, 18, 21, 41, 3f, 14, f1, bf, c8, 3e, ecaa, a2, 91, 7d, a2, 10, 21, 41, 95, f2, c9, ba, 2d, c1, e5, 40, 05, e7, ba, c4, 4f, 0f, 21, 41, 47, 63, 25, f6, 48, ae, e5, 40, 1c, ae, df, 0d, 63, 17, 21, 41, eb, 8b, 23, 3f, ec, e3, e4, 40, 46, 40, d0, 8c, 7e, 20, 21, 41, 2b, dc, 3a, dc, 6b, 78, e4, 40, dc, 3b, 91, 57, c8, 20, 21, 41, d0, 32, fd, 46, a4, 5f, e4, 40, 96, d2, 57, f6, e1, 19, 21, 41, cf, 0a, bd, 89, 13, 3e, e4, 40, 80, 1b, 97, c4, 15, 16, 21, 41, 27, 8d, 6a, f8, 32, 07, e4, 40, 1a, 95, fa, 77, 98, 14, 21, 41, 6d, 6a, 33, 65, 69, 13, e4, 40, 3d, 06, 9c, 40, 75, 14, 21, 41, 55, f4, ad, da, a5, f5, e3, 40, 29, ee, 3e, f2, d6, 10, 21, 41, 76, c1, 10, 4f, 3b, da, e3, 40, 20, 63, 4a, e9, 51, 11, 21, 41, 27, 3e, be, 47, 64, aa, e3, 40, 86, 79, 8c, ed, a5, 0e, 21, 41, 69, 50, 53, 03, 89, b1, e3, 40, e1, b1, a4, 51, 2e, 0c, 21, 41, f1, d7, c5, c9, b7, f6, e3, 40, 24, e7, be, 2a, 74, 0a, 21, 41, f9, 14, 6c, 94, e0, d2, e3, 40, 39, c5, 8d, de, ac, 0c, 21, 41, f5, ef, 53, 4a, e8, b6, e3, 40, 97, b9, cd, de, e0, 07, 21, 41, 23, 0b, 8f, e8, 43, a6, e3, 40, cc, fe, 72, d2, 9f, 06, 21, 41, ac, 2f, 0e, b6, 39, b3, e3, 40, 27, f1, 92, ab, 36, 04, 21, 41, 78, 6f, a7, b6, b3, 76, e3, 40, 85, fe, db, 24, 08, ff, 20, 41, 12, 83, 39, 8b, 3b, 68, e3, 40, 25, 77, a5, 43, e9, fd, 20, 41, d0, 74, 9c, 87, ee, 96, e3, 40, e2, 1f, 9d, af, dd, fe, 20, 41, e4, 67, 95, 3a, 38, b9, e3, 40, 0a, 75, b8, ab, 47, fa, 20, 41, cd, a3, 98, 16, 04, 19, e4, 40, 1f, 9e, e7, d1, 6e, fb, 20, 41, cc, cf, de, e7, 9c, 34, e4, 40, 46, 36, 34, 56, e0, f9, 20, 41, ff, 58, 11, ef, c7, 3c, e4, 40, e2, b3, 2c, 17, 7a, fa, 20, 41, a6, 47, a6, a5, e1, 5f, e4, 40, 93, 2a, fc, 78, 5e, f7, 20, 41, 93, f5, 33, 7e, e9, 5f, e4, 40, d2, 3b, 65, 6a, 7d, f6, 20, 41, d9, 11, 71, cc, f7, 78, e4, 40, e6, c2, 47, 36, 77, f4, 20, 41, 68, 54, d7, 2e, 41, 67, e4, 40, 9b, 49, de, ec, 16, f0, 20, 41, f2, 33, 8c, 0a, f0, 9a, e4, 40, 10, 21, ac, 76, 07, ef, 20, 41, 55, 54, c9, ad, 04, be, e4, 40, a0, ce, 96, b1, 9a, f1, 20, 41, 7e, ed, 77, 86, 1d, 5d, e5, 40, ab, 16, a8, 13, 35, f3, 20, 41, b3, 6f, 92, cf, d2, 75, e5, 40, 2d, 97, ba, 4a, ee, f6, 20, 41, 34, 4a, 25, 9e, 6b, 76, e5, 40, 19, 27, 85, b9, 22, fa, 20, 41, f7, ec, 52, c4, 6a, a8, e5, 40, 8f, 6e, 0f, f9, 85, fd, 20, 41, 3f, 9d, 79, c3, af, b6, e5, 40, cd, 2f, 80, 9d, 70, 04, 21, 41, 83, fb, 47, f1, 6b, a5, e5, 40, 18, 79, 43, f7, 1c, 05, 21, 41, a5, a2, ff, 62, b8, c9, e5, 40, d8, 53, 48, fc, 9d, 07, 21, 41, 3a, 9c, 9a, 18, 3a, cb, e5, 40, 42, e2, a3, c4, 22, 0a, 21, 41, 6f, 86, d9, 0d, 57, 73, e5, 40, 61, 4f, e1, 78, 70, 07, 21, 41, 1c, e1, d4, 95, d2, 51, e5, 40, ec, a3, 0d, 1d, 07, 07, 21, 41, 2b, a3, 7c, 8e, 2c, ec, e4, 40, e3, fb, d7, 14, 10, 08, 21, 41, be, 12, 07, ce, c4, c8, e4, 40, 8b, 20, a0, e7, 0a, 0a, 21, 41, 8f, 7a, 94, 54, f3, cf, e4, 40, d0, 47, e4, 29, db, 0b, 21, 41, 3c, 7f, 37, 46, 84, b6, e4, 40, e6, be, 3d, 54, 78, 0c, 21, 41, f9, d0, b2, 29, b6, 73, e4, 40, 06, 69, d0, 1c, b6, 0c, 21, 41, ca, 70, da, 81, 96, da, e4, 40, d5, ac, b1, 74, 3c, 09, 21, 41, cf, 3f, 91, 07, 64, 2f, e5, 40, 96, ce, 7c, ca, 44, 0d, 21, 41, 9f, 0a, a8, 6c, c8, 56, e5, 40, a7, 85, dd, e2, a7, 0b, 21, 41, 66, 1e, 6f, 9e, 7f, 5c, e5, 40, 8c, 6d, 33, e9, 59, 0b, 21, 41, 35, b5, 2d, c9, b4, 71, e5, 40, 06, f8, 18, d4, 60, 0d, 21, 41, b7, 4b, a0, e9, ec, c0, e5, 40, dc, 93, 49, 31, a5, 0e, 21, 41, 2a, 34, 25, 94, d7, b4, e5, 40, a1, b9, ee, 4e, 77, 10, 21, 41, ec, a5, fa, d1, 89, d5, e5, 40, aa, a2, 91, 7d, a2, 10, 21, 41, 95, f2, c9, ba, 2d, c1, e5, 40, 01, 03, 00, 00, 00, 01, 00, 00, 00, 07, 00, 00, 00, 2b, 9e, ce, 6a, a2, 03, 21, 41, e9, ee, eb, 0b, a3, 12, e6, 40, 08, f7, 78, aa, 7f, 02, 21, 41, 96, de, 5d, 92, 3c, 02, e6, 40, 1d, a5, 52, b0, 16, f8, 20, 41, 9e, 73, 3d, cd, bf, fd, e5, 40, b9, 4b, bd, f7, c3, fe, 20, 41, 9c, bf, ac, 21, 2f, 4e, e6, 40, 37, 8b, 79, b6, c3, 03, 21, 41, f5, fa, 28, 43, d2, 45, e6, 40, d9, 8d, b0, 8f, ed, 07, 21, 41, 93, 71, 11, 15, 0c, 23, e6, 40, 2b, 9e, ce, 6a, a2, 03, 21, 41, e9, ee, eb, 0b, a3, 12, e6, 40 #>             x         y #> [1,] 504185.6 -11945.72 #> [2,] 534834.7  86727.91 #> [3,] 553856.8  89236.52 #> [4,] 556496.3  51930.36 #> [5,] 557768.3  42471.93 #> NULL"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to calculate mean and variance in one pass — RunningStats-class","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"RunningStats computes summary statistics data stream efficiently. Mean variance calculated Welford's online algorithm (https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance). min, max, sum count also tracked. input data values stored memory, class can used compute statistics large data streams. RunningStats C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"na_rm Logical scalar. TRUE remove NA input data (default) FALSE retain NA.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"object class RunningStats. RunningStats object maintains current minimum, maximum, mean, variance, sum count values read stream. can updated repeatedly new values (.e., chunks data read input stream), memory footprint negligible. Class methods updating new values, retrieving current values statistics, described Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"intended use computing summary statistics specific subsets zones raster defined various ways generally contiguous. algorithm implemented incurs cost floating point division new value updated (.e., per pixel), reasonably efficient use case. Note GDAL internally uses optimized version Welford's algorithm compute raster statistics described detail Rouault, 2016 (https://github.com/OSGeo/gdal/blob/master/gcore/statistics.txt). class method GDALRaster$getStatistics() GDAL API wrapper computes statistics whole raster band.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"## Constructor rs <- new(RunningStats, na_rm)  ## Methods rs$update(newvalues) rs$get_count() rs$get_mean() rs$get_min() rs$get_max() rs$get_sum() rs$get_var() rs$get_sd() rs$reset()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"new(RunningStats, na_rm) Returns object class RunningStats. na_rm argument defaults TRUE omitted.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"$update(newvalues) Updates RunningStats object numeric vector newvalues (.e., chunk values data stream). return value, called side effects. $get_count() Returns count values received data stream. $get_mean() Returns mean values received data stream. $get_min() Returns minimum value received data stream. $get_max() Returns maximum value received data stream. $get_sum() Returns sum values received data stream. $get_var() Returns variance values data stream (denominator n - 1). $get_sd() Returns standard deviation values data stream (denominator n - 1). $reset() Clears RunningStats object initialized state (count = 0). return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"set.seed(42) rs <- new(RunningStats, na_rm=TRUE) rs #> C++ object of class RunningStats #>  Number of values: 0  chunk <- runif(1000) rs$update(chunk) object.size(rs) #> 704 bytes  rs$get_count() #> [1] 1000 length(chunk) #> [1] 1000  rs$get_mean() #> [1] 0.4882555 mean(chunk) #> [1] 0.4882555  rs$get_min() #> [1] 0.0002388966 min(chunk) #> [1] 0.0002388966  rs$get_max() #> [1] 0.9984908 max(chunk) #> [1] 0.9984908  rs$get_var() #> [1] 0.08493159 var(chunk) #> [1] 0.08493159  rs$get_sd() #> [1] 0.2914302 sd(chunk) #> [1] 0.2914302  # \\donttest{ ## 10^9 values read in 10,000 chunks ## should take under 1 minute on most PC hardware for (i in 1:1e4) {   chunk <- runif(1e5)   rs$update(chunk) } rs$get_count() #> [1] 1000001000 rs$get_mean() #> [1] 0.5000044 rs$get_var() #> [1] 0.08333479  object.size(rs) #> 704 bytes # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"VSIFile provides bindings GDAL VSIVirtualHandle API. Encapsulates VSIVirtualHandle (https://gdal.org/en/stable/api/cpl_cpp.html#_CPPv416VSIVirtualHandle). API abstracts binary file /O across \"regular\" file systems, URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files. provides analogs several Standard C file /O functions, allowing virtualization disk /O non-file data sources can made appear files. VSIFile C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"filename Character string containing filename open. may file regular local filesystem, filename GDAL /vsiPREFIX/ (see https://gdal.org/en/stable/user/virtual_file_systems.html). access Character string containing access requested (.e., \"r\", \"r+\", \"w\", \"w+). Defaults \"r\". Binary access always implied \"b\" need included access. options Optional character vector NAME=VALUE pairs specifying filesystem-dependent options (GDAL >= 3.3, see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"object class VSIFile contains pointer VSIVirtualHandle, methods operate file described Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"File offsets given R numeric (.e., double type), optionally carrying bit64::integer64 class attribute. returned numeric integer64 class attribute attached. integer64 type signed, maximum file offset supported interface 9223372036854775807 (value bit64::lim.integer64()[2]). virtual file systems allow sequential write, seeks read operations allowed (e.g., AWS S3 files /vsis3/). Starting GDAL 3.2, configuration option can set :   case random-write access possible (involves creation temporary local file, whose location controlled CPL_TMPDIR configuration option). case, setting access \"w+\" may needed writing seek read operations (creating new file, otherwise, \"r+\" open existing file), \"w\" access allow sequential write .","code":"set_config_option(\"CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE\", \"YES\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"","code":"## Constructors vf <- new(VSIFile, filename) # specifying access: vf <- new(VSIFile, filename, access) # specifying access and options (both required): vf <- new(VSIFile, filename, access, options)  ## Methods vf$seek(offset, origin) vf$tell() vf$rewind() vf$read(nbytes) vf$write(object) vf$eof() vf$truncate(new_size) vf$flush() vf$ingest(max_size)  vf$close() vf$open() vf$get_filename() vf$get_access() vf$set_access(access)"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"new(VSIFile, filename) Returns object class VSIFile, error raised file handle obtained. new(VSIFile, filename, access) Alternate constructor passing access character string (e.g., \"r\", \"r+\", \"w\", \"w+\"). Returns object class VSIFile open file handle, error raised file handle obtained. new(VSIFile, filename, access, options) Alternate constructor passing access character string, options character vector \"NAME=VALUE\" pairs (arguments required, GDAL >= 3.3 required options support). options argument highly file system dependent. Supported options GDAL 3.9 include: MIME headers Content-Type Content-Encoding supported /vsis3/, /vsigs/, /vsiaz/, /vsiadls/ file systems. DISABLE_READDIR_ON_OPEN=YES/(GDAL >= 3.6) /vsicurl/ network-based file systems. default, directory file listing done, unless YES specified. WRITE_THROUGH=YES (GDAL >= 3.8) Windows regular files set FILE_FLAG_WRITE_THROUGH flag CreateFile() function. mode, data written system cache flushed disk without delay.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"$seek(offset, origin) Seek requested offset file. offset given positive numeric scalar, optionally bit64::integer64 type. origin given character string, one SEEK_SET, SEEK_CUR SEEK_END. Package global constants defined convenience, can passed unquoted. Note offset unsigned type, SEEK_CUR can used positive seek. negative seek needed, use:   Returns 0 success -1 failure. $tell() Returns current file read/write offset bytes beginning file. return value numeric scalar carrying integer64 class attribute. $rewind() Rewind file pointer beginning file. equivalent vf$seek(0, SEEK_SET). return value, called side effect. $read(nbytes) Read nbytes bytes file current offset. Returns vector R raw type, NULL operation fails. $write(object) Write bytes file current offset. object raw vector. Returns number bytes successfully written, numeric scalar carrying integer64 class attribute. See also base R charToRaw() / rawToChar(), convert raw vectors, readBin() / writeBin() read binary data write binary data raw vector. $eof() Test end file. Returns TRUE end--file condition occurred previous read operation. end--file flag cleared successful call $seek(). $truncate(new_size) Truncate/expand file specified new_size, given positive numeric scalar, optionally bit64::integer64 type. Returns 0 success. $flush() Flush pending writes disk. files write update mode file system types applicable, pending output file flushed physical disk. Windows regular files, method nothing, unless VSI_FLUSH=YES configuration option set (file opened WRITE_THROUGH option). Returns 0 success -1 error. $ingest(max_size) Ingest file memory. Read whole content file raw vector. max_size maximum size file allowed, given numeric scalar, optionally bit64::integer64 type. limit, set negative value. Returns raw vector, NULL operation fails. $close() Closes file. file always closed /O completed. Returns 0 success -1 error. $open() method can used re-open file closed, using filename, options set. file opened using access currently set. $set_access() method can called change requested access file closed. return value. error raised file handle obtained. $get_filename() Returns character string containing filename associated VSIFile object (filename originally used create object). $get_access() Returns character string containing access currently set VSIFile object. $set_access(access) Sets requested read/write access VSIFile object, given character string (.e., \"r\", \"r+\", \"w\", \"w+\"). access can changed VSIFile object closed, apply re-opened call $open(). Returns 0 success -1 error.","code":"vf$seek(vf$tell() + negative_offset, SEEK_SET)"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"","code":"# The examples make use of the FARSITE LCP format specification at: # https://gdal.org/en/stable/drivers/raster/lcp.html # An LCP file is a raw format with a 7,316-byte header. The format # specification gives byte offets and data types for fields in the header.  lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\")  # identify a FARSITE v.4 LCP file # function to check if the first three fields have valid data # input is the first twelve raw bytes in the file is_lcp <- function(bytes) {   values <- readBin(bytes, \"integer\", n = 3)   if ((values[1] == 20 || values[1] == 21) &&       (values[2] == 20 || values[2] == 21) &&       (values[3] >= -90 && values[3] <= 90)) {      return(TRUE)   } else {     return(FALSE)   } }  vf <- new(VSIFile, lcp_file) vf #> C++ object of class VSIFile #>  Filename : /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>  Access   : r  vf$read(12) |> is_lcp() #> [1] TRUE  vf$tell() #> integer64 #> [1] 12  # read the whole file into memory bytes <- vf$ingest(-1) vf$close() #> [1] 0  # write to a VSI in-memory file mem_file <- \"/vsimem/storml_copy.lcp\" vf <- new(VSIFile, mem_file, \"w+\") vf$write(bytes) #> integer64 #> [1] 252132  vf$tell() #> integer64 #> [1] 252132 vf$rewind() vf$tell() #> integer64 #> [1] 0  vf$seek(0, SEEK_END) #> [1] 0 (vf$tell() == vsi_stat(lcp_file, \"size\"))  # TRUE #> [1] TRUE  vf$rewind() vf$read(12) |> is_lcp() #> [1] TRUE  # read/write an integer field # write invalid data for the Latitude field and then set back # save the original first vf$seek(8, SEEK_SET) #> [1] 0 lat_orig <- vf$read(4) readBin(lat_orig, \"integer\")  # 46 #> [1] 46 # latitude -99 out of range vf$seek(8, SEEK_SET) #> [1] 0 writeBin(-99L, raw()) |> vf$write() #> integer64 #> [1] 4 vf$rewind() vf$read(12) |> is_lcp()  # FALSE #> [1] FALSE vf$seek(8, SEEK_SET) #> [1] 0 vf$read(4) |> readBin(\"integer\")  # -99 #> [1] -99 # set back to original vf$seek(8, SEEK_SET) #> [1] 0 vf$write(lat_orig) #> integer64 #> [1] 4 vf$rewind() vf$read(12) |> is_lcp()  # TRUE #> [1] TRUE  # read a vector of doubles - xmax, xmin, ymax, ymin # 327766.1, 323476.1, 5105082.0, 5101872.0 vf$seek(4172, SEEK_SET) #> [1] 0 vf$read(32) |> readBin(\"double\", n = 4) #> [1]  327766.1  323476.1 5105082.0 5101872.0  # read a short int, the canopy cover units vf$seek(4232, SEEK_SET) #> [1] 0 vf$read(2) |> readBin(\"integer\", size = 2)  # 1 = \"percent\" #> [1] 1  # read the Description field vf$seek(6804, SEEK_SET) #> [1] 0 bytes <- vf$read(512) rawToChar(bytes) #> [1] \"LCP file created by GDAL.\"  # edit the Description desc <- paste(rawToChar(bytes),               \"Storm Lake AOI,\",               \"Beaverhead-Deerlodge National Forest, Montana.\")  vf$seek(6804, SEEK_SET) #> [1] 0 charToRaw(desc) |> vf$write() #> integer64 #> [1] 88 vf$close() #> [1] 0  # verify the file as a raster dataset ds <- new(GDALRaster, mem_file) ds$info() #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /vsimem/storml_copy.lcp #> Size is 143, 107 #> Coordinate System is: #>  #> Data axis to CRS axis mapping: 1,2,3 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   DESCRIPTION=LCP file created by GDAL. Storm Lake AOI, Beaverhead-Deerlodge National Forest, Montana. #>   LATITUDE=46 #>   LINEAR_UNIT=Meters #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983)  #> Lower Left  (  323476.072, 5101871.983)  #> Upper Right (  327766.072, 5105081.983)  #> Lower Right (  327766.072, 5101871.983)  #> Center      (  325621.072, 5103476.983)  #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #>   Metadata: #>     ELEVATION_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ELEVATION_MAX=3046 #>     ELEVATION_MIN=-9999 #>     ELEVATION_NUM_CLASSES=-1 #>     ELEVATION_UNIT=0 #>     ELEVATION_UNIT_NAME=Meters #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #>   Metadata: #>     SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     SLOPE_MAX=54 #>     SLOPE_MIN=-9999 #>     SLOPE_NUM_CLASSES=53 #>     SLOPE_UNIT=0 #>     SLOPE_UNIT_NAME=Degrees #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #>   Metadata: #>     ASPECT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ASPECT_MAX=359 #>     ASPECT_MIN=-9999 #>     ASPECT_NUM_CLASSES=-1 #>     ASPECT_UNIT=2 #>     ASPECT_UNIT_NAME=Azimuth degrees #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #>   Metadata: #>     FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     FUEL_MODEL_MAX=183 #>     FUEL_MODEL_MIN=-9999 #>     FUEL_MODEL_NUM_CLASSES=12 #>     FUEL_MODEL_OPTION=0 #>     FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed #>     FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183 #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #>   Metadata: #>     CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_COV_MAX=75 #>     CANOPY_COV_MIN=-9999 #>     CANOPY_COV_NUM_CLASSES=8 #>     CANOPY_COV_UNIT=1 #>     CANOPY_COV_UNIT_NAME=Percent #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #>   Metadata: #>     CANOPY_HT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_HT_MAX=390 #>     CANOPY_HT_MIN=-9999 #>     CANOPY_HT_NUM_CLASSES=8 #>     CANOPY_HT_UNIT=3 #>     CANOPY_HT_UNIT_NAME=Meters x 10 #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #>   Metadata: #>     CBH_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBH_MAX=100 #>     CBH_MIN=-9999 #>     CBH_NUM_CLASSES=22 #>     CBH_UNIT=3 #>     CBH_UNIT_NAME=Meters x 10 #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density #>   Metadata: #>     CBD_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBD_MAX=34 #>     CBD_MIN=-9999 #>     CBD_NUM_CLASSES=15 #>     CBD_UNIT=3 #>     CBD_UNIT_NAME=kg/m^3 x 100  # retrieve Description from the metadata # band = 0 for dataset-level metadata, domain = \"\" for default domain ds$getMetadata(band = 0, domain = \"\") #> [1] \"DESCRIPTION=LCP file created by GDAL. Storm Lake AOI, Beaverhead-Deerlodge National Forest, Montana.\" #> [2] \"LATITUDE=46\"                                                                                          #> [3] \"LINEAR_UNIT=Meters\"                                                                                   ds$getMetadataItem(band = 0, mdi_name = \"DESCRIPTION\", domain = \"\") #> [1] \"LCP file created by GDAL. Storm Lake AOI, Beaverhead-Deerlodge National Forest, Montana.\"  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":null,"dir":"Reference","previous_headings":"","what":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"addFilesInZip() create new open existing ZIP file, add one compressed files potentially using seek optimization extension. function basically wrapper CPLAddFileInZip() GDAL Common Portability Library, optionally creates new ZIP file first (CPLCreateZip()). provides subset functionality GDAL sozip command-line utility (https://gdal.org/en/stable/programs/sozip.html). Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"","code":"addFilesInZip(   zip_file,   add_files,   overwrite = FALSE,   full_paths = TRUE,   sozip_enabled = NULL,   sozip_chunk_size = NULL,   sozip_min_file_size = NULL,   num_threads = NULL,   content_type = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"zip_file Filename ZIP file. created exist overwrite = TRUE. Otherwise append existing file. add_files Character vector one input filenames add. overwrite Logical scalar. Overwrite target zip file already exists. full_paths Logical scalar. default, full path stored (relative current directory). FALSE store just name saved file (drop path). sozip_enabled String. Whether generate SOZip index file. One \"AUTO\" (default), \"YES\" \"\" (see Details). sozip_chunk_size chunk size seek-optimized file. Defaults 32768 bytes. value specified bytes, K M suffix can used respectively specify value kilo-bytes mega-bytes. coerced string. sozip_min_file_size minimum file size decide file seek-optimized, sozip_enabled=\"AUTO\" mode. Defaults 1 MB byte. value specified bytes, K, M G suffix can used respectively specify value kilo-bytes, mega-bytes giga-bytes. coerced string. num_threads Number threads used SOZip generation. Defaults \"ALL_CPUS\" specify integer value (coerced string). content_type String Content-Type value file. stored key-value pair extra field extension 'KV' (0x564b) dedicated storing key-value pair metadata. quiet Logical scalar. TRUE quiet mode, progress messages emitted. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"Seek-Optimized ZIP file (SOZip) contains one compressed files organized annotated SOZip-aware reader can perform fast random access within .zip file (see https://github.com/sozip/sozip-spec). Large compressed files can accessed directly SOZip without prior decompression. .zip file otherwise fully backward compatible. sozip_enabled=\"AUTO\" (default), file seek-optimized size values sozip_min_file_size (default 1 MB) sozip_chunk_size (default 32768). \"YES\" mode, input files seek-optimized. \"\" mode, input files seek-optimized. default can changed CPL_SOZIP_ENABLED configuration option.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"GDAL_NUM_THREADS configuration option can set ALL_CPUS integer value specify number threads use SOZip-compressed files (see set_config_option()). SOZip can validated :   zip_file uses /vsizip/ prefix.","code":"vsi_get_file_metadata(zip_file, domain=\"ZIP\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") zip_file <- file.path(tempdir(), \"storml_lcp.zip\")  # Requires GDAL >= 3.7 if (gdal_version_num() >= gdal_compute_version(3, 7, 0)) {   addFilesInZip(zip_file, lcp_file, full_paths=FALSE, sozip_enabled=\"YES\",                 num_threads=1)    print(\"Files in zip archive:\")   print(unzip(zip_file, list=TRUE))    # Open with GDAL using Virtual File System handler '/vsizip/'   # see: https://gdal.org/en/stable/user/virtual_file_systems.html#vsizip-zip-archives   lcp_in_zip <- file.path(\"/vsizip\", zip_file, \"storm_lake.lcp\")   print(\"SOZip metadata:\")   print(vsi_get_file_metadata(lcp_in_zip, domain=\"ZIP\"))    ds <- new(GDALRaster, lcp_in_zip)   ds$info()   ds$close()   DONTSHOW({vsi_unlink(zip_file)}) } #> adding /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp ... #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] \"Files in zip archive:\" #>             Name Length                Date #> 1 storm_lake.lcp 252132 2025-06-01 04:39:00 #> [1] \"SOZip metadata:\" #> $START_DATA_OFFSET #> [1] \"44\" #>  #> $COMPRESSION_METHOD #> [1] \"8 (DEFLATE)\" #>  #> $COMPRESSED_SIZE #> [1] \"78479\" #>  #> $UNCOMPRESSED_SIZE #> [1] \"252132\" #>  #> $SOZIP_FOUND #> [1] \"YES\" #>  #> $SOZIP_VERSION #> [1] \"1\" #>  #> $SOZIP_OFFSET_SIZE #> [1] \"8\" #>  #> $SOZIP_CHUNK_SIZE #> [1] \"32768\" #>  #> $SOZIP_START_DATA_OFFSET #> [1] \"78578\" #>  #> $SOZIP_VALID #> [1] \"YES\" #>  #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /vsizip//tmp/RtmplY4zfC/storml_lcp.zip/storm_lake.lcp #> Size is 143, 107 #> Coordinate System is: #>  #> Data axis to CRS axis mapping: 1,2,3 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   DESCRIPTION=LCP file created by GDAL. #>   LATITUDE=46 #>   LINEAR_UNIT=Meters #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983)  #> Lower Left  (  323476.072, 5101871.983)  #> Upper Right (  327766.072, 5105081.983)  #> Lower Right (  327766.072, 5101871.983)  #> Center      (  325621.072, 5103476.983)  #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #>   Metadata: #>     ELEVATION_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ELEVATION_MAX=3046 #>     ELEVATION_MIN=-9999 #>     ELEVATION_NUM_CLASSES=-1 #>     ELEVATION_UNIT=0 #>     ELEVATION_UNIT_NAME=Meters #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #>   Metadata: #>     SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     SLOPE_MAX=54 #>     SLOPE_MIN=-9999 #>     SLOPE_NUM_CLASSES=53 #>     SLOPE_UNIT=0 #>     SLOPE_UNIT_NAME=Degrees #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #>   Metadata: #>     ASPECT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ASPECT_MAX=359 #>     ASPECT_MIN=-9999 #>     ASPECT_NUM_CLASSES=-1 #>     ASPECT_UNIT=2 #>     ASPECT_UNIT_NAME=Azimuth degrees #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #>   Metadata: #>     FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     FUEL_MODEL_MAX=183 #>     FUEL_MODEL_MIN=-9999 #>     FUEL_MODEL_NUM_CLASSES=12 #>     FUEL_MODEL_OPTION=0 #>     FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed #>     FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183 #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #>   Metadata: #>     CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_COV_MAX=75 #>     CANOPY_COV_MIN=-9999 #>     CANOPY_COV_NUM_CLASSES=8 #>     CANOPY_COV_UNIT=1 #>     CANOPY_COV_UNIT_NAME=Percent #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #>   Metadata: #>     CANOPY_HT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_HT_MAX=390 #>     CANOPY_HT_MIN=-9999 #>     CANOPY_HT_NUM_CLASSES=8 #>     CANOPY_HT_UNIT=3 #>     CANOPY_HT_UNIT_NAME=Meters x 10 #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #>   Metadata: #>     CBH_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBH_MAX=100 #>     CBH_MIN=-9999 #>     CBH_NUM_CLASSES=22 #>     CBH_UNIT=3 #>     CBH_UNIT_NAME=Meters x 10 #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density #>   Metadata: #>     CBD_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBD_MAX=34 #>     CBD_MIN=-9999 #>     CBD_NUM_CLASSES=15 #>     CBD_UNIT=3 #>     CBD_UNIT_NAME=kg/m^3 x 100"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"apply_geotransform() applies geotransform coefficients raster coordinates pixel/line space (column/row), converting georeferenced (x/y) coordinates. Wrapper GDALApplyGeoTransform() GDAL API, operating matrix input.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"","code":"apply_geotransform(col_row, gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"col_row Numeric matrix raster column, row (pixel/line) coordinates (two-column data frame coerced numeric matrix, vector column, row one coordinate). gt Either numeric vector length six containing affine geotransform raster, object class GDALRaster geotransform obtained.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"Numeric matrix geospatial x/y coordinates.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"Bounds checking input coordinates done gt obtained object class GDALRaster. See Note get_pixel_line().","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"","code":"raster_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, raster_file)  # compute some raster coordinates in column/row space set.seed(42) col_coords <- runif(10, min = 0, max = ds$getRasterXSize() - 0.00001) row_coords <- runif(10, min = 0, max = ds$getRasterYSize() - 0.00001) col_row <- cbind(col_coords, row_coords)  # convert to geospatial x/y coordinates gt <- ds$getGeoTransform() apply_geotransform(col_row, gt) #>           [,1]    [,2] #>  [1,] 327400.6 5103613 #>  [2,] 327496.1 5102774 #>  [3,] 324703.6 5102082 #>  [4,] 327038.7 5104262 #>  [5,] 326229.2 5103598 #>  [6,] 325703.0 5102065 #>  [7,] 326636.0 5101942 #>  [8,] 324053.8 5104705 #>  [9,] 326294.6 5103557 #> [10,] 326500.8 5103283  # or, using the class method ds$apply_geotransform(col_row) #>           [,1]    [,2] #>  [1,] 327400.6 5103613 #>  [2,] 327496.1 5102774 #>  [3,] 324703.6 5102082 #>  [4,] 327038.7 5104262 #>  [5,] 326229.2 5103598 #>  [6,] 325703.0 5102065 #>  [7,] 326636.0 5101942 #>  [8,] 324053.8 5104705 #>  [9,] 326294.6 5103557 #> [10,] 326500.8 5103283  # bounds checking col_row <- rbind(col_row, c(ds$getRasterXSize(), ds$getRasterYSize())) ds$apply_geotransform(col_row) #>           [,1]    [,2] #>  [1,] 327400.6 5103613 #>  [2,] 327496.1 5102774 #>  [3,] 324703.6 5102082 #>  [4,] 327038.7 5104262 #>  [5,] 326229.2 5103598 #>  [6,] 325703.0 5102065 #>  [7,] 326636.0 5101942 #>  [8,] 324053.8 5104705 #>  [9,] 326294.6 5103557 #> [10,] 326500.8 5103283 #> [11,] 327766.1 5101872  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"autoCreateWarpedVRT() creates warped virtual dataset representing input raster warped target coordinate system. output virtual dataset \"north-\" target coordinate system. GDAL automatically determines bounds resolution output virtual raster large enough include input raster. Wrapper GDALAutoCreateWarpedVRT() GDAL Warper API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"","code":"autoCreateWarpedVRT(   src_ds,   dst_wkt,   resample_alg,   src_wkt = \"\",   max_err = 0,   alpha_band = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"src_ds object class GDALRaster source dataset. dst_wkt WKT string specifying coordinate system convert . empty string (\"\") change coordinate system take place. resample_alg Character string specifying sampling method use. One NearestNeighbour, Bilinear, Cubic, CubicSpline, Lanczos, Average, RMS Mode. src_wkt WKT string specifying coordinate system source raster. empty string read source raster (default). max_err Numeric scalar specifying maximum error measured input pixels allowed approximating transformation (0.0 exact calculations, default). alpha_band Logical scalar, TRUE create alpha band source dataset none. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"object class GDALRaster new virtual dataset. error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"returned dataset associated filename . want write virtual dataset VRT file, use $setFilename() method returned GDALRaster object assign filename closed.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file)  ds2 <- autoCreateWarpedVRT(ds, epsg_to_wkt(5070), \"Bilinear\") ds2$info() #> Driver: VRT/Virtual Raster #> Files: /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> Size is 158, 127 #> Coordinate System is: #> PROJCRS[\"NAD83 / Conus Albers\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Albers Equal Area\", #>             ID[\"EPSG\",9822]], #>         PARAMETER[\"Latitude of false origin\",23, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-96, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",29.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     ID[\"EPSG\",5070]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (-1332272.514894900377840,2686786.510187030304223) #> Pixel Size = (30.017093608771937,-30.017093608771937) #> Corner Coordinates: #> Upper Left  (-1332272.515, 2686786.510) (113d17'20.73\"W, 46d 4'32.57\"N) #> Lower Left  (-1332272.515, 2682974.339) (113d16'48.70\"W, 46d 2'30.94\"N) #> Upper Right (-1327529.814, 2686786.510) (113d13'44.00\"W, 46d 5' 0.36\"N) #> Lower Right (-1327529.814, 2682974.339) (113d13'12.07\"W, 46d 2'58.72\"N) #> Center      (-1329901.164, 2684880.425) (113d15'16.38\"W, 46d 3'45.66\"N) #> Band 1 Block=158x127 Type=Int32, ColorInterp=Gray #>   NoData Value=32767 #>   Metadata: #>     RepresentationType=ATHEMATIC  ## set filename before close if a VRT file is needed for the virtual dataset # ds2$setFilename(\"/path/to/file.vrt\")  ds2$close() ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a whole raster band efficiently — bandCopyWholeRaster","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"bandCopyWholeRaster() copies complete raster contents one band another similarly configured band. source destination bands must xsize ysize. bands data type. implements efficient copying, particular \"chunking\" copy substantial blocks. wrapper GDALRasterBandCopyWholeRaster() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"","code":"bandCopyWholeRaster(   src_filename,   src_band,   dst_filename,   dst_band,   options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"src_filename Filename source raster. src_band Band number source raster copied. dst_filename Filename destination raster. dst_band Band number destination raster copy . options Optional list transfer hints vector \"NAME=VALUE\" pairs. currently supported options : \"COMPRESSED=YES\" force alignment target dataset block sizes achieve best compression. \"SKIP_HOLES=YES\" skip chunks contain empty blocks. Empty blocks blocks generally physically present file, read GDAL, contain pixels whose value nodata value set, whose value 0 nodata value set. query done efficient way without reading actual pixel values (implemented raster format driver, otherwise skipped). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"","code":"## copy Landsat data from a single-band file to a new multi-band image b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") dst_file <- file.path(tempdir(), \"sr_multi.tif\") rasterFromRaster(b5_file, dst_file, nbands=7, init=0) #> initializing destination raster... #> done opt <- c(\"COMPRESSED=YES\", \"SKIP_HOLES=YES\") bandCopyWholeRaster(b5_file, 1, dst_file, 5, options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds <- new(GDALRaster, dst_file) ds$getStatistics(band=5, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  7357.000 22458.000 13527.736  2238.489 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"bbox_from_wkt() returns bounding box WKT 2D geometry (e.g., LINE, POLYGON, MULTIPOLYGON).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"","code":"bbox_from_wkt(wkt, extend_x = 0, extend_y = 0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"wkt Character. OGC WKT string simple feature 2D geometry. extend_x Numeric scalar. Distance extend output bounding box directions along x-axis (results xmin = bbox[1] - extend_x, xmax = bbox[3] + extend_x). extend_y Numeric scalar. Distance extend output bounding box directions along y-axis (results ymin = bbox[2] - extend_y, ymax = bbox[4] + extend_y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"Numeric vector length four containing xmin, ymin, xmax, ymax geometry specified wkt (possibly extended values extend_x, extend_y).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"","code":"bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2 5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5, 325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_from_wkt(bnd, 100, 100) #> [1]  323694.2 5102785.8  326520.0 5105029.4"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounding box intersection / union — bbox_intersect","title":"Bounding box intersection / union — bbox_intersect","text":"bbox_intersect() returns bounding box intersection, bbox_union() returns bounding box union, input either raster file names list bounding boxes. inputs must projected coordinate system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_intersect(x, as_wkt = FALSE)  bbox_union(x, as_wkt = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounding box intersection / union — bbox_intersect","text":"x Either character vector raster file names, list element bounding box numeric vector (xmin, ymin, xmax, ymax). as_wkt Logical. TRUE return bounding box polygon OGC WKT format, FALSE return numeric vector.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounding box intersection / union — bbox_intersect","text":"intersection (bbox_intersect()) union (bbox_union()) inputs. as_wkt = FALSE, numeric vector length four containing xmin, ymin, xmax, ymax. as_wkt = TRUE, character string containing OGC WKT bbox POLYGON.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_list <-list()  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) bbox_list[[1]] <- ds$bbox() ds$close()  b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds <- new(GDALRaster, b5_file) bbox_list[[2]] <- ds$bbox() ds$close()  bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2 5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5, 325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_list[[3]] <- bbox_from_wkt(bnd)  print(bbox_list) #> [[1]] #> [1]  323476.1 5101872.0  327766.1 5105082.0 #>  #> [[2]] #> [1]  323400.9 5101815.8  327870.9 5105175.8 #>  #> [[3]] #> [1]  323794.2 5102885.8  326420.0 5104929.4 #>  bbox_intersect(bbox_list) #> [1]  323794.2 5102885.8  326420.0 5104929.4 bbox_union(bbox_list) #> [1]  323400.9 5101815.8  327870.9 5105175.8"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"bbox_to_wkt() returns WKT POLYGON string given bounding box.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"","code":"bbox_to_wkt(bbox, extend_x = 0, extend_y = 0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"bbox Numeric vector length four containing xmin, ymin, xmax, ymax. extend_x Numeric scalar. Distance units bbox extend rectangle directions along x-axis (results xmin = bbox[1] - extend_x, xmax = bbox[3] + extend_x). extend_y Numeric scalar. Distance units bbox extend rectangle directions along y-axis (results ymin = bbox[2] - extend_y, ymax = bbox[4] + extend_y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"Character string OGC WKT polygon. NA returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) bbox_to_wkt(ds$bbox()) #> [1] \"POLYGON ((323476.071970863 5101871.98303138,327766.071970863 5101871.98303138,327766.071970863 5105081.98303138,323476.071970863 5105081.98303138,323476.071970863 5101871.98303138))\" ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a bounding box to a different projection — bbox_transform","title":"Transform a bounding box to a different projection — bbox_transform","text":"bbox_transform() convenience function transform coordinates boundary current spatial reference system new target spatial reference system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a bounding box to a different projection — bbox_transform","text":"","code":"bbox_transform(bbox, srs_from, srs_to, use_transform_bounds = TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a bounding box to a different projection — bbox_transform","text":"bbox Numeric vector length four containing bounding box (xmin, ymin, xmax, ymax) transform. srs_from Character string specifying spatial reference system pts. May WKT format formats supported srs_to_wkt(). srs_to Character string specifying output spatial reference system. May WKT format formats supported srs_to_wkt(). use_transform_bounds Logical value, TRUE use transform_bounds() (default, requires GDAL >= 3.4). FALSE, transformation done g_transform().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a bounding box to a different projection — bbox_transform","text":"Numeric vector length four containing transformed bounding box (xmin, ymin, xmax, ymax).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform a bounding box to a different projection — bbox_transform","text":"use_transform_bounds = TRUE (default) function returns:   See Details transform_bounds() cases bounds crossed antimeridian. use_transform_bounds = FALSE, function returns:   See Note g_transform() cases bounds crossed antimeridian.","code":"# requires GDAL >= 3.4 transform_bounds(bbox, srs_from, srs_to) bbox_to_wkt(bbox) |>   g_transform(srs_from, srs_to) |>   bbox_from_wkt()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a bounding box to a different projection — bbox_transform","text":"","code":"bb <- c(-1405880.72, -1371213.76, 5405880.72, 5371213.76)  # the default assumes GDAL >= 3.4 if (gdal_version_num() >= gdal_compute_version(3, 4, 0)) {   bb_wgs84 <- bbox_transform(bb, \"EPSG:32661\", \"EPSG:4326\") } else {   bb_wgs84 <- bbox_transform(bb, \"EPSG:32661\", \"EPSG:4326\",                              use_transform_bounds = FALSE) }  print(bb_wgs84) #> [1] -180.00000   48.65641  180.00000   90.00000"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"buildRAT() reads pixels input raster obtain set unique values counts. result returned data frame suitable use class method GDALRaster$setDefaultRAT(). returned data frame might modified setting Raster Attribute Table dataset, example, adding columns containing class names, color values, information (see Details). optional input data frame containing attributes may given, case buildRAT() attempt join additional columns automatically assign appropriate metadata output data frame (.e., assign R attributes data frame columns define usage GDAL Raster Attribute Table).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"","code":"buildRAT(   raster,   band = 1L,   col_names = c(\"VALUE\", \"COUNT\"),   table_type = \"athematic\",   na_value = NULL,   join_df = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"raster Either GDALRaster object, character string containing file name raster dataset open. band Integer scalar, band number read (default 1L). col_names Character vector length two containing names use column 1 (pixel values) column 2 (pixel counts) output data frame (defaults c(\"VALUE\", \"COUNT\")). table_type Character string describing type attribute table. One either \"thematic\", \"athematic\" continuous data (default). na_value Numeric scalar. set unique pixel values NA, recoded na_value returned data frame. NULL (default), NA recoded. join_df Optional data frame joining additional attributes. Must column unique values name col_names[1] (\"VALUE\" default). quiet Logical scalar. TRUE``, progress bar displayed. Defaults FALSE“.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"data frame least two columns containing set unique pixel values counts. columns attribute \"GFU\" set \"MinMax\" values, \"PixelCount\" counts. join_df given, returned data frame additional columns result merge(). \"GFU\" attribute additional columns assigned automatically based column names (case-insensitive matching, see Details). returned data frame attribute \"GDALRATTableType\" set table_type.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"GDAL Raster Attribute Table (RAT) provides attribute information pixel values. Raster attribute tables can used represent histograms, color tables, classification information. row table applies either single pixel value range values, might attributes histogram count value (range), color pixels value (range) displayed, names classes, various information. column raster attribute table name, type (integer, double, string), GDALRATFieldUsage. usage distinguishes columns particular understood purposes (color, histogram count, class name), columns purposes understood library (long labels, ancillary attributes, etc). general case, row field indicating minimum pixel value falling category, field indicating maximum pixel value. GDAL API, indicated usage values GFU_Min GFU_Max. common case row discrete pixel value, single column usage GFU_MinMax used instead. R, table represented data frame column attribute \"GFU\" containing field usage string, e.g., \"Max\", \"Min\" \"MinMax\" (case-sensitive). full set possible field usage descriptors : buildRAT() assigns GFU \"MinMax\" column pixel values (named \"VALUE\" default) GFU \"PixelCount\" column counts (named \"COUNT\" default). join_df given, additional columns result joining GFU assigned automatically based column names (ignoring case). First, additional column names checked containing string \"name\" (e.g., \"classname\", \"TypeName\", \"EVT_NAME\", etc). first matching column () assigned GFU \"Name\" (=GFU_Name, field usage descriptor class names). Next, columns named \"R\" \"Red\" assigned GFU \"Red\", columns named \"G\" \"Green\" assigned GFU \"Green\", columns named \"B\" \"Blue\" assigned GFU \"Blue\", columns named \"\" \"Alpha\" assigned GFU \"Alpha\". Finally, remaining columns assigned GFU assigned \"Generic\". variation RAT, categories equal size regularly spaced, categorization can determined knowing value categories start size category. called \"Linear Binning\" information kept specially raster attribute table whole. R, RAT uses linear binning following attributes set data frame: attribute \"Row0Min\" = numeric lower bound (pixel value) first category, attribute \"BinSize\" = numeric width category (pixel value units). buildRAT() create tables linear binning, one created manually based specifications , applied raster class method GDALRaster$setDefaultRAT(). raster attribute table thematic athematic (continuous). R, defined attribute data frame named \"GDALRATTableType\" value either \"thematic\" \"athematic\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"full raster scanned. na_value specified, NA pixel value (present) recoded output data frame. may implications joining data (NA match), using returned data frame set default RAT dataset (NA interpreted value R uses internally represent type, e.g., -2147483648 NA_integer_). cases, removing row output data frame value NA, rather recoding, may desirable (.e., removing manually side effect joining via merge(), example). Users consider appropriate particular case.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") # make a copy to modify f <- file.path(tempdir(), \"storml_evt_tmp.tif\") file.copy(evt_file,  f) #> [1] TRUE  ds <- new(GDALRaster, f, read_only=FALSE) ds$getDefaultRAT(band=1) # NULL #> NULL  # get the full attribute table for LANDFIRE EVT from the CSV file evt_csv <- system.file(\"extdata/LF20_EVT_220.csv\", package=\"gdalraster\") evt_df <- read.csv(evt_csv) nrow(evt_df) #> [1] 860 head(evt_df) #>   VALUE                                            EVT_NAME EVT_LF EVT_PHYS   R #> 1 -9999                                         Fill-NoData   <NA>     <NA> 255 #> 2  7008                          North Pacific Oak Woodland   Tree Hardwood 203 #> 3  7009 Northwestern Great Plains Aspen Forest and Parkland   Tree Hardwood 192 #> 4  7010       Northern Rocky Mountain Western Larch Savanna   Tree  Conifer 180 #> 5  7011            Rocky Mountain Aspen Forest and Woodland   Tree Hardwood 192 #> 6  7012       Rocky Mountain Bigtooth Maple Ravine Woodland   Tree Hardwood 171 #>     G   B      RED GREEN     BLUE #> 1 255 255 1.000000     1 1.000000 #> 2 255 171 0.796078     1 0.670588 #> 3 255 138 0.752941     1 0.541176 #> 4 255 148 0.705882     1 0.580392 #> 5 255 138 0.752941     1 0.541176 #> 6 255 138 0.670588     1 0.541176 evt_df <- evt_df[,1:7]  tbl <- buildRAT(ds,                 table_type = \"thematic\",                 na_value = -9999,                 join_df = evt_df) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done.  nrow(tbl) #> [1] 24 head(tbl) #>   VALUE COUNT                                                          EVT_NAME #> 1 -9999   876                                                       Fill-NoData #> 2  7011    28                          Rocky Mountain Aspen Forest and Woodland #> 3  7046  4564           Northern Rocky Mountain Subalpine Woodland and Parkland #> 4  7050   570                              Rocky Mountain Lodgepole Pine Forest #> 5  7055   889 Rocky Mountain Subalpine Dry-Mesic Spruce-Fir Forest and Woodland #> 6  7056   304 Rocky Mountain Subalpine Mesic-Wet Spruce-Fir Forest and Woodland #>   EVT_LF EVT_PHYS   R   G   B #> 1   <NA>     <NA> 255 255 255 #> 2   Tree Hardwood 192 255 138 #> 3   Tree  Conifer 191 255 233 #> 4   Tree  Conifer 163 240 219 #> 5   Tree  Conifer 236 252 204 #> 6   Tree  Conifer 236 252 204  # attributes on the data frame and its columns define usage in a GDAL RAT attributes(tbl) #> $names #> [1] \"VALUE\"    \"COUNT\"    \"EVT_NAME\" \"EVT_LF\"   \"EVT_PHYS\" \"R\"        \"G\"        #> [8] \"B\"        #>  #> $row.names #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>  #> $class #> [1] \"data.frame\" #>  #> $GDALRATTableType #> [1] \"thematic\" #>  attributes(tbl$VALUE) #> $GFU #> [1] \"MinMax\" #>  attributes(tbl$COUNT) #> $GFU #> [1] \"PixelCount\" #>  attributes(tbl$EVT_NAME) #> $GFU #> [1] \"Name\" #>  attributes(tbl$EVT_LF) #> $GFU #> [1] \"Generic\" #>  attributes(tbl$EVT_PHYS) #> $GFU #> [1] \"Generic\" #>  attributes(tbl$R) #> $GFU #> [1] \"Red\" #>  attributes(tbl$G) #> $GFU #> [1] \"Green\" #>  attributes(tbl$B) #> $GFU #> [1] \"Blue\" #>   ds$setDefaultRAT(band=1, tbl) #> [1] TRUE ds$flushCache()  tbl2 <- ds$getDefaultRAT(band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl2) #> [1] 24 head(tbl2) #>   VALUE COUNT                                                          EVT_NAME #> 1 -9999   876                                                       Fill-NoData #> 2  7011    28                          Rocky Mountain Aspen Forest and Woodland #> 3  7046  4564           Northern Rocky Mountain Subalpine Woodland and Parkland #> 4  7050   570                              Rocky Mountain Lodgepole Pine Forest #> 5  7055   889 Rocky Mountain Subalpine Dry-Mesic Spruce-Fir Forest and Woodland #> 6  7056   304 Rocky Mountain Subalpine Mesic-Wet Spruce-Fir Forest and Woodland #>   EVT_LF EVT_PHYS   R   G   B #> 1     NA       NA 255 255 255 #> 2   Tree Hardwood 192 255 138 #> 3   Tree  Conifer 191 255 233 #> 4   Tree  Conifer 163 240 219 #> 5   Tree  Conifer 236 252 204 #> 6   Tree  Conifer 236 252 204  ds$close()  # Display evt_gt <- displayRAT(tbl2, title = \"Storm Lake EVT Raster Attribute Table\") class(evt_gt)  # an object of class \"gt_tbl\" from package gt #> [1] \"gt_tbl\" \"list\"   # To show the table: # evt_gt # or simply call `displayRAT()` as above but without assignment # `vignette(\"raster-attribute-tables\")` has example output"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a GDAL virtual raster from a list of datasets — buildVRT","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"buildVRT() wrapper gdalbuildvrt command-line utility building VRT (Virtual Dataset) mosaic list input GDAL datasets (see https://gdal.org/en/stable/programs/gdalbuildvrt.html).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"","code":"buildVRT(vrt_filename, input_rasters, cl_arg = NULL, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"vrt_filename Character string. Filename output VRT. input_rasters Character vector input raster filenames. cl_arg Optional character vector command-line arguments gdalbuildvrt. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"Several command-line options described GDAL documentation URL . default, input files considered tiles larger mosaic VRT file many bands one input files. Alternatively, -separate argument can used put input raster separate band VRT dataset. amount checks done assure files put resulting VRT similar characteristics: number bands, projection, color interpretation.... , files match common characteristics skipped. (true default mode virtual mosaicing, using -separate option). virtual mosaic, spatial overlap input rasters order files appearing list sources matter: files listed end ones data fetched. Note nodata taken account potentially fetch data less priority datasets.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"","code":"# build a virtual 3-band RGB raster from individual Landsat band files b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b6_file <- system.file(\"extdata/sr_b6_20200829.tif\", package=\"gdalraster\") band_files <- c(b6_file, b5_file, b4_file) vrt_file <- file.path(tempdir(), \"storml_b6_b5_b4.vrt\") buildVRT(vrt_file, band_files, cl_arg = \"-separate\") #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds <- new(GDALRaster, vrt_file) ds$getRasterCount() #> [1] 3 plot_raster(ds, nbands=3, main=\"Landsat 6-5-4 (vegetative analysis)\")  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster calculation — calc","title":"Raster calculation — calc","text":"calc() evaluates R expression pixel raster layer stack layers. layer defined raster filename, band number, variable name use R expression. specified, band defaults 1 input raster. Variable names default LETTERS specified ((layer 1), B (layer 2), ...). input layers must extent cell size. projection read first raster list inputs. Individual pixel coordinates also available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude. Multiband output supported gdalraster 1.11.0.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster calculation — calc","text":"","code":"calc(   expr,   rasterfiles,   bands = NULL,   var.names = NULL,   dstfile = tempfile(\"rastcalc\", fileext = \".tif\"),   fmt = NULL,   dtName = \"Int16\",   out_band = NULL,   options = NULL,   nodata_value = NULL,   setRasterNodataValue = FALSE,   usePixelLonLat = NULL,   write_mode = \"safe\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster calculation — calc","text":"expr R expression character string (e.g., \"+ B\"). rasterfiles Character vector source raster filenames. bands Integer vector band numbers use raster layer. var.names Character vector variable names use raster layer. dstfile Character filename output raster. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename specified. dtName Character name output data type (e.g., Byte, Int16, UInt16, Int32, UInt32, Float32). out_band Integer band number(s) dstfile writing output. Defaults 1. Multiband output supported gdalraster 1.11.0, case out_band vector band numbers. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). nodata_value Numeric value assign expr returns NA. setRasterNodataValue Logical. TRUE attempt set raster format nodata value nodata_value, FALSE set raster nodata value. usePixelLonLat argument deprecated removed future version. Variable names pixelLon pixelLat can used expr, pixel x/y coordinates inverse projected longitude/latitude (adds computation time). write_mode Character. Name file write mode output. One : safe - execution stops dstfile already exists (output written) overwrite - dstfile exists overwritten new file update - dstfile exists, attempt open update mode write output out_band quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster calculation — calc","text":"Returns output filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster calculation — calc","text":"variables expr vectors length raster xsize (row vectors input raster layer(s)). expression return vector also length raster xsize (output row). Four special variable names available expr: pixelX pixelY provide pixel center coordinates projection units. pixelLon pixelLat can also used, case pixel x/y coordinates inverse projected longitude/latitude (geographic coordinate system used input projection, read first input raster). Note inverse projection adds computation time. refer specific bands multi-band input file, repeat filename rasterfiles specify corresponding band numbers bands, along optional variable names var.names, example, Output written dstfile. update file already exists, set write_mode = \"update\" set out_band existing band number(s) dstfile (new bands created dstfile). write multiband output, expr must return vector values interleaved band. equivalent , can also returned , matrix m nrow(m) equal length() input vector, ncol(m) equal number output bands. matrix form, column contains vector output values band. length(m) must equal length() input vector multiplied length(out_band). dimensions described assumed read return value expr.","code":"rasterfiles = c(\"multiband.tif\", \"multiband.tif\") bands = c(4, 5) var.names = c(\"B4\", \"B5\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster calculation — calc","text":"","code":"## Using pixel longitude/latitude  # Hopkins bioclimatic index (HI) as described in: # Bechtold, 2004, West. J. Appl. For. 19(4):245-251. # Integrates elevation, latitude and longitude into an index of the # phenological occurrence of springtime. Here it is relativized to # mean values for an eight-state region in the western US. # Positive HI means spring is delayed by that number of days relative # to the reference position, while negative values indicate spring is # advanced. The original equation had elevation units as feet, so # converting m to ft in `expr`.  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  # expression to calculate HI expr <- \"round( ((ELEV_M * 3.281 - 5449) / 100) +                 ((pixelLat - 42.16) * 4) +                 ((-116.39 - pixelLon) * 1.25) )\"  # calc() writes to a tempfile by default hi_file <- calc(expr = expr,                 rasterfiles = elev_file,                 var.names = \"ELEV_M\",                 dtName = \"Int16\",                 nodata_value = -32767,                 setRasterNodataValue = TRUE) #> calculating from 1 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmplY4zfC/rastcalc23d055499452.tif  ds <- new(GDALRaster, hi_file) # min, max, mean, sd ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 37.000000 57.000000 44.992721  4.370487 ds$close()   ## Calculate normalized difference vegetation index (NDVI)  # Landast band 4 (red) and band 5 (near infrared): b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\")  expr <- \"((B5 * 0.0000275 - 0.2) - (B4 * 0.0000275 - 0.2)) /          ((B5 * 0.0000275 - 0.2) + (B4 * 0.0000275 - 0.2))\" ndvi_file <- calc(expr = expr,                   rasterfiles = c(b4_file, b5_file),                   var.names = c(\"B4\", \"B5\"),                   dtName = \"Float32\",                   nodata_value = -32767,                   setRasterNodataValue = TRUE) #> calculating from 2 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmplY4zfC/rastcalc23d04fd34058.tif  ds <- new(GDALRaster, ndvi_file) ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] -0.8182735  0.8522529  0.4707456  0.2269492 ds$close()   ## Reclassify a variable by rule set  # Combine two raster layers and look for specific combinations. Then # recode to a new value by rule set. # # Based on example in: #   Stratton, R.D. 2009. Guidebook on LANDFIRE fuels data acquisition, #   critique, modification, maintenance, and model calibration. #   Gen. Tech. Rep. RMRS-GTR-220. U.S. Department of Agriculture, #   Forest Service, Rocky Mountain Research Station. 54 p. # Context: Refine national-scale fuels data to improve fire simulation #   results in localized applications. # Issue: Areas with steep slopes (40+ degrees) were mapped as #   GR1 (101; short, sparse dry climate grass) and #   GR2 (102; low load, dry climate grass) but were not carrying fire. # Resolution: After viewing these areas in Google Earth, #   NB9 (99; bare ground) was selected as the replacement fuel model.  # look for combinations of slope >= 40 and FBFM 101 or 102 lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) var.names <- c(\"SLP\", \"FBFM\") bands <- c(2, 4) tbl <- combine(rasterfiles, var.names, bands) #> combining 2 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl) #> [1] 449 tbl_subset <- subset(tbl, SLP >= 40 & FBFM %in% c(101,102)) print(tbl_subset)       # twelve combinations meet the criteria #>     cmbid count SLP FBFM #> 8     423     2  44  102 #> 10    421     1  49  102 #> 13    409    15  41  102 #> 37    365     1  44  101 #> 45    420     3  43  102 #> 93    283    17  40  101 #> 160   417     4  42  101 #> 225   397    11  42  102 #> 338   328    16  40  102 #> 346   338    10  41  101 #> 364   418     3  47  102 #> 408   341     2  43  101 sum(tbl_subset$count)   # 85 total pixels #> [1] 85  # recode these pixels to 99 (bare ground) # the LCP driver does not support in-place write so make a copy as GTiff tif_file <- file.path(tempdir(), \"storml_lndscp.tif\") createCopy(\"GTiff\", tif_file, lcp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] TRUE  expr <- \"ifelse( SLP >= 40 & FBFM %in% c(101,102), 99, FBFM)\" calc(expr = expr,      rasterfiles = c(lcp_file, lcp_file),      bands = c(2, 4),      var.names = c(\"SLP\", \"FBFM\"),      dstfile = tif_file,      out_band = 4,      write_mode = \"update\") #> calculating from 2 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmplY4zfC/storml_lndscp.tif  # verify the ouput rasterfiles <- c(tif_file, tif_file) tbl <- combine(rasterfiles, var.names, bands) #> combining 2 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. tbl_subset <- subset(tbl, SLP >= 40 & FBFM %in% c(101,102)) print(tbl_subset) #> [1] cmbid count SLP   FBFM  #> <0 rows> (or 0-length row.names) sum(tbl_subset$count) #> [1] 0  # if LCP file format is needed: # createCopy(\"LCP\", \"storml_edited.lcp\", tif_file)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster overlay for unique combinations — combine","title":"Raster overlay for unique combinations — combine","text":"combine() overlays multiple rasters unique ID assigned unique combination input values. input raster layers typically integer data types (floating point coerced integer truncation), must projection, extent cell size. Pixel counts unique combination obtained, combination IDs optionally written output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster overlay for unique combinations — combine","text":"","code":"combine(   rasterfiles,   var.names = NULL,   bands = NULL,   dstfile = NULL,   fmt = NULL,   dtName = \"UInt32\",   options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster overlay for unique combinations — combine","text":"rasterfiles Character vector raster filenames combine. var.names Character vector length(rasterfiles) containing variable names raster layer. Defaults assigned var.names omitted. bands Numeric vector length(rasterfiles) containing band number use raster rasterfiles. Band 1 used input raster bands specified. dstfile Character. Optional output raster filename writing per-pixel combination IDs. output raster created (overwritten already exists). fmt Character. Output raster format name (e.g., \"GTiff\" \"HFA\"). dtName Character. Output raster data type name. Combination IDs sequential integers starting 1. data type output raster large enough accommodate potential number unique combinations input values (e.g., \"UInt16\" default \"UInt32\"). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). quiet Logical scalar. TRUE, progress bar messages suppressed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster overlay for unique combinations — combine","text":"data frame column cmbid containing combination IDs, column count containing pixel counts combination, length(rasterfiles) columns named var.names containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster overlay for unique combinations — combine","text":"specify input raster layers bands multi-band raster file, repeat filename rasterfiles provide corresponding band numbers bands. example: rasterToVRT() provides options virtual clipping, resampling pixel alignment, may helpful input rasters already aligned common extent cell size. output raster combination IDs written, user verify number combinations obtained exceed range output data type. Combination IDs sequential integers starting 1. Typical output data types unsigned types: Byte (0 255), UInt16 (0 65,535) UInt32 (default, 0 4,294,967,295).","code":"rasterfiles <- c(\"multi-band.tif\", \"multi-band.tif\", \"other.tif\") bands <- c(4, 5, 1) var.names <- c(\"multi_b4\", \"multi_b5\", \"other\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster overlay for unique combinations — combine","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\") evh_file <- system.file(\"extdata/storml_evh.tif\", package=\"gdalraster\") rasterfiles <- c(evt_file, evc_file, evh_file) var.names <- c(\"veg_type\", \"veg_cov\", \"veg_ht\") tbl <- combine(rasterfiles, var.names) #> combining 3 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl) #> [1] 2083 tbl <- tbl[order(-tbl$count),] head(tbl, n = 20) #>      cmbid count veg_type veg_cov veg_ht #> 1345   115  2277     9016     100    100 #> 1131    19  1213     9018     100    100 #> 1410     1   876       NA      NA     NA #> 873    429   397     7292      11     11 #> 1745   116   209     9016      31     31 #> 1181     7   142     7046     159    115 #> 1108     8   112     7046     159    116 #> 1538    26    99     7046     159    114 #> 1724    75    78     7126     243    210 #> 1132   844    67     9018      31     31 #> 779    186    54     7046     110    108 #> 823    344    53     7126     243    209 #> 1213   146    47     7046     159    117 #> 808     42    44     7050     162    116 #> 645     15    39     7046     149    114 #> 923    821    37     7046     110    107 #> 1594   603    37     7126     243    211 #> 1273     2    36     7046     110    106 #> 1305   108    36     7126     243    208 #> 1447    68    36     7046     159    113  # combine two bands from a multi-band file and write the combination IDs # to an output raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) bands <- c(4, 5) var.names <- c(\"fbfm\", \"tree_cov\") cmb_file <- file.path(tempdir(), \"fbfm_cov_cmbid.tif\") opt <- c(\"COMPRESS=LZW\") tbl <- combine(rasterfiles, var.names, bands, cmb_file, options = opt) #> combining 2 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(tbl) #>   cmbid count fbfm tree_cov #> 1    26    98  122       25 #> 2    24   397   98        0 #> 3    23    59  162       55 #> 4    25    14  183        0 #> 5    22    65  183       35 #> 6    19    34  162       75 ds <- new(GDALRaster, cmb_file) ds$info() #> Driver: GTiff/GeoTIFF #> Files: /tmp/RtmplY4zfC/fbfm_cov_cmbid.tif #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"North America - between 114°W and 108°W - onshore and offshore. Canada - Alberta; Northwest Territories; Nunavut; Saskatchewan. United States (USA) - Arizona; Colorado; Idaho; Montana; New Mexico; Utah; Wyoming.\"], #>         BBOX[31.33,-114,84,-108]], #>     ID[\"EPSG\",26912]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   AREA_OR_POINT=Area #> Image Structure Metadata: #>   COMPRESSION=LZW #>   INTERLEAVE=BAND #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x14 Type=UInt32, ColorInterp=Gray ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy the files of a dataset — copyDatasetFiles","title":"Copy the files of a dataset — copyDatasetFiles","text":"copyDatasetFiles() copies files associated dataset. Wrapper GDALCopyDatasetFiles() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy the files of a dataset — copyDatasetFiles","text":"","code":"copyDatasetFiles(new_filename, old_filename, format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy the files of a dataset — copyDatasetFiles","text":"new_filename New name dataset (copied ). old_filename Old name dataset (copied ). format Raster format short name (e.g., \"GTiff\"). set empty string \"\" (default), attempt guess raster format old_filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy the files of a dataset — copyDatasetFiles","text":"Logical TRUE error FALSE failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Copy the files of a dataset — copyDatasetFiles","text":"format set empty string \"\" (default) function try identify driver old_filename. done internally GDAL invoking Identify method registered GDALDriver turn. first driver successful identifies file name returned. error raised format determined passed file name.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy the files of a dataset — copyDatasetFiles","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file) ds$getFileList() #> [1] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp\" #> [2] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj\" ds$close()  lcp_tmp <- file.path(tempdir(), \"storm_lake_copy.lcp\") copyDatasetFiles(lcp_tmp, lcp_file) #> [1] TRUE ds_copy <- new(GDALRaster, lcp_tmp) ds_copy$getFileList() #> [1] \"/tmp/RtmplY4zfC/storm_lake_copy.lcp\" \"/tmp/RtmplY4zfC/storm_lake_copy.prj\" ds_copy$close()  deleteDataset(lcp_tmp) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new uninitialized raster — create","title":"Create a new uninitialized raster — create","text":"create() makes empty raster specified format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new uninitialized raster — create","text":"","code":"create(   format,   dst_filename,   xsize,   ysize,   nbands,   dataType,   options = NULL,   return_obj = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new uninitialized raster — create","text":"format Character string giving raster format short name (e.g., \"GTiff\"). dst_filename Character string giving filename create. xsize Integer width raster pixels. ysize Integer height raster pixels. nbands Integer number bands. dataType Character string containing data type name. (e.g., common data types include Byte, Int16, UInt16, Int32, Float32). options Optional list format-specific creation options character vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset. return_obj Logical scalar. TRUE, object class GDALRaster opened newly created dataset returned, otherwise returns logical value. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new uninitialized raster — create","text":"default, returns logical value indicating success (invisible TRUE, output written dst_filename). error raised operation fails. object class GDALRaster open output dataset returned return_obj = TRUE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a new uninitialized raster — create","text":"dst_filename may empty string (\"\") format = \"MEM\" return_obj = TRUE create -memory Raster (https://gdal.org/en/stable/drivers/raster/mem.html).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new uninitialized raster — create","text":"","code":"new_file <- file.path(tempdir(), \"newdata.tif\") ds <- create(format=\"GTiff\",              dst_filename = new_file,              xsize = 143,              ysize = 107,              nbands = 1,              dataType = \"Int16\",              return_obj=TRUE)  # EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE  gt <- c(323476, 30, 0, 5105082, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE  ds$setNoDataValue(band = 1, -9999) #> [1] TRUE ds$fillRaster(band = 1, -9999, 0)  # ...  # close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a color ramp — createColorRamp","title":"Create a color ramp — createColorRamp","text":"createColorRamp() wrapper GDALCreateColorRamp() GDAL API. automatically creates color ramp one color entry another. Output integer matrix color table format use GDALRaster$setColorTable().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a color ramp — createColorRamp","text":"","code":"createColorRamp(   start_index,   start_color,   end_index,   end_color,   palette_interp = \"RGB\" )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a color ramp — createColorRamp","text":"start_index Integer start index (raster value). start_color Integer vector length three four. color entry value start ramp (e.g., RGB values). end_index Integer end index (raster value). end_color Integer vector length three four. color entry value end ramp (e.g., RGB values). palette_interp One \"Gray\", \"RGB\" (default), \"CMYK\" \"HLS\" describing interpretation start_color end_color values (see GDAL Color Table).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a color ramp — createColorRamp","text":"Integer matrix five columns containing color ramp start_index end_index, raster index values column 1 color entries columns 2:5).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a color ramp — createColorRamp","text":"createColorRamp() called several times, using rbind() combine multiple ramps color table. Possible duplicate rows resulting table problem used GDALRaster$setColorTable() (.e., end_color one ramp start_color next ramp).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a color ramp — createColorRamp","text":"","code":"# create a color ramp for tree canopy cover percent # band 5 of an LCP file contains canopy cover lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file) ds$getDescription(band=5) #> [1] \"Canopy cover\" ds$getMetadata(band=5, domain=\"\") #> [1] \"CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"CANOPY_COV_MAX=75\"                                                                                                                          #> [3] \"CANOPY_COV_MIN=-9999\"                                                                                                                       #> [4] \"CANOPY_COV_NUM_CLASSES=8\"                                                                                                                   #> [5] \"CANOPY_COV_UNIT=1\"                                                                                                                          #> [6] \"CANOPY_COV_UNIT_NAME=Percent\"                                                                                                               ds$close()  # create a GTiff file with Byte data type for the canopy cover band # recode nodata -9999 to 255 tcc_file <- calc(expr = \"ifelse(CANCOV == -9999, 255, CANCOV)\",                  rasterfiles = lcp_file,                  bands = 5,                  var.names = \"CANCOV\",                  fmt = \"GTiff\",                  dtName = \"Byte\",                  nodata_value = 255,                  setRasterNodataValue = TRUE) #> calculating from 1 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmplY4zfC/rastcalc23d041ee940f.tif  ds_tcc <- new(GDALRaster, tcc_file, read_only=FALSE)  # create a color ramp from 0 to 100 and set as the color table colors <- createColorRamp(start_index = 0,                           start_color = c(211, 211, 211),                           end_index = 100,                           end_color = c(0, 100, 0))  print(colors) #>        value red green blue alpha #>   [1,]     0 211   211  211   255 #>   [2,]     1 208   209  208   255 #>   [3,]     2 206   208  206   255 #>   [4,]     3 204   207  204   255 #>   [5,]     4 202   206  202   255 #>   [6,]     5 200   205  200   255 #>   [7,]     6 198   204  198   255 #>   [8,]     7 196   203  196   255 #>   [9,]     8 194   202  194   255 #>  [10,]     9 192   201  192   255 #>  [11,]    10 189   199  189   255 #>  [12,]    11 187   198  187   255 #>  [13,]    12 185   197  185   255 #>  [14,]    13 183   196  183   255 #>  [15,]    14 181   195  181   255 #>  [16,]    15 179   194  179   255 #>  [17,]    16 177   193  177   255 #>  [18,]    17 175   192  175   255 #>  [19,]    18 173   191  173   255 #>  [20,]    19 170   189  170   255 #>  [21,]    20 168   188  168   255 #>  [22,]    21 166   187  166   255 #>  [23,]    22 164   186  164   255 #>  [24,]    23 162   185  162   255 #>  [25,]    24 160   184  160   255 #>  [26,]    25 158   183  158   255 #>  [27,]    26 156   182  156   255 #>  [28,]    27 154   181  154   255 #>  [29,]    28 151   179  151   255 #>  [30,]    29 149   178  149   255 #>  [31,]    30 147   177  147   255 #>  [32,]    31 145   176  145   255 #>  [33,]    32 143   175  143   255 #>  [34,]    33 141   174  141   255 #>  [35,]    34 139   173  139   255 #>  [36,]    35 137   172  137   255 #>  [37,]    36 135   171  135   255 #>  [38,]    37 132   169  132   255 #>  [39,]    38 130   168  130   255 #>  [40,]    39 128   167  128   255 #>  [41,]    40 126   166  126   255 #>  [42,]    41 124   165  124   255 #>  [43,]    42 122   164  122   255 #>  [44,]    43 120   163  120   255 #>  [45,]    44 118   162  118   255 #>  [46,]    45 116   161  116   255 #>  [47,]    46 113   159  113   255 #>  [48,]    47 111   158  111   255 #>  [49,]    48 109   157  109   255 #>  [50,]    49 107   156  107   255 #>  [51,]    50 105   155  105   255 #>  [52,]    51 103   154  103   255 #>  [53,]    52 101   153  101   255 #>  [54,]    53  99   152   99   255 #>  [55,]    54  97   151   97   255 #>  [56,]    55  94   149   94   255 #>  [57,]    56  92   148   92   255 #>  [58,]    57  90   147   90   255 #>  [59,]    58  88   146   88   255 #>  [60,]    59  86   145   86   255 #>  [61,]    60  84   144   84   255 #>  [62,]    61  82   143   82   255 #>  [63,]    62  80   142   80   255 #>  [64,]    63  78   141   78   255 #>  [65,]    64  75   139   75   255 #>  [66,]    65  73   138   73   255 #>  [67,]    66  71   137   71   255 #>  [68,]    67  69   136   69   255 #>  [69,]    68  67   135   67   255 #>  [70,]    69  65   134   65   255 #>  [71,]    70  63   133   63   255 #>  [72,]    71  61   132   61   255 #>  [73,]    72  59   131   59   255 #>  [74,]    73  56   129   56   255 #>  [75,]    74  54   128   54   255 #>  [76,]    75  52   127   52   255 #>  [77,]    76  50   126   50   255 #>  [78,]    77  48   125   48   255 #>  [79,]    78  46   124   46   255 #>  [80,]    79  44   123   44   255 #>  [81,]    80  42   122   42   255 #>  [82,]    81  40   121   40   255 #>  [83,]    82  37   119   37   255 #>  [84,]    83  35   118   35   255 #>  [85,]    84  33   117   33   255 #>  [86,]    85  31   116   31   255 #>  [87,]    86  29   115   29   255 #>  [88,]    87  27   114   27   255 #>  [89,]    88  25   113   25   255 #>  [90,]    89  23   112   23   255 #>  [91,]    90  21   111   21   255 #>  [92,]    91  18   109   18   255 #>  [93,]    92  16   108   16   255 #>  [94,]    93  14   107   14   255 #>  [95,]    94  12   106   12   255 #>  [96,]    95  10   105   10   255 #>  [97,]    96   8   104    8   255 #>  [98,]    97   6   103    6   255 #>  [99,]    98   4   102    4   255 #> [100,]    99   2   101    2   255 #> [101,]   100   0   100    0   255 ds_tcc$setColorTable(band=1, col_tbl=colors, palette_interp=\"RGB\") #> [1] TRUE ds_tcc$setRasterColorInterp(band=1, col_interp=\"Palette\")  # close and re-open the dataset in read_only mode ds_tcc$open(read_only=TRUE)  plot_raster(ds_tcc, interpolate=FALSE, legend=TRUE,             main=\"Storm Lake Tree Canopy Cover (%)\")  ds_tcc$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy of a raster — createCopy","title":"Create a copy of a raster — createCopy","text":"createCopy() copies raster dataset, optionally changing format. extent, cell size, number bands, data type, projection, geotransform copied source raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy of a raster — createCopy","text":"","code":"createCopy(   format,   dst_filename,   src_filename,   strict = FALSE,   options = NULL,   quiet = FALSE,   return_obj = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy of a raster — createCopy","text":"format Character string giving format short name output raster (e.g., \"GTiff\"). dst_filename Character string giving filename create. src_filename Either character string giving filename source raster, object class GDALRaster source. strict Logical. TRUE copy must strictly equivalent, normally FALSE (default) indicating copy may adapt needed output format. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE. return_obj Logical scalar. TRUE, object class GDALRaster opened newly created dataset returned. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy of a raster — createCopy","text":"default, returns logical value indicating success (invisible TRUE, output written dst_filename). error raised operation fails. object class GDALRaster open output dataset returned return_obj = TRUE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a copy of a raster — createCopy","text":"dst_filename may empty string (\"\") format = \"MEM\" return_obj = TRUE create -memory Raster (https://gdal.org/en/stable/drivers/raster/mem.html).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a copy of a raster — createCopy","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- file.path(tempdir(), \"storml_lndscp.tif\") ds <- createCopy(format = \"GTiff\",                  dst_filename = tif_file,                  src_filename = lcp_file,                  options = \"COMPRESS=LZW\",                  return_obj = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds$getMetadata(band = 0, domain = \"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\"  for (band in 1:ds$getRasterCount())     ds$setNoDataValue(band, -9999) ds$getStatistics(band = 1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3046.0000 2675.9713  133.0185  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/data_type_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for GDAL raster data types — data_type_helpers","title":"Helper functions for GDAL raster data types — data_type_helpers","text":"convenience functions return information raster data type, return smallest data type can fully express two input data types, find smallest data type able support specified requirements.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/data_type_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for GDAL raster data types — data_type_helpers","text":"","code":"dt_size(dt, as_bytes = TRUE)  dt_is_complex(dt)  dt_is_integer(dt)  dt_is_floating(dt)  dt_is_signed(dt)  dt_union(dt, dt_other)  dt_union_with_value(dt, value, is_complex = FALSE)  dt_find(bits, is_signed, is_floating, is_complex = FALSE)  dt_find_for_value(value, is_complex = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/data_type_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for GDAL raster data types — data_type_helpers","text":"dt Character string containing GDAL data type name (e.g., \"Byte\", \"Int16\", \"UInt16\", \"Int32\", \"UInt32\", \"Float32\", \"Float64\", etc.) as_bytes Logical value, TRUE return data type size bytes (default), FALSE return size bits. dt_other Character string containing GDAL data type name. value Numeric value find data type (passing real part is_complex = TRUE). is_complex Logical value, TRUE value complex (default FALSE), complex values necessary dt_find(). bits Integer value specifying number bits necessary. is_signed Logical value, TRUE negative values necessary. is_floating Logical value, TRUE non-integer values necessary.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/data_type_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper functions for GDAL raster data types — data_type_helpers","text":"dt_size() returns data type size bytes default, optionally bits (returns zero dt recognized). dt_is_complex() returns TRUE passed type complex (one CInt16, CInt32, CFloat32 CFloat64), .e., consists real imaginary component. dt_is_integer() returns TRUE passed type integer (one Byte, Int16, UInt16, Int32, UInt32, CInt16, CInt32). dt_is_floating() returns TRUE passed type floating (one Float32, Float16, Float64, CFloat16, CFloat32, CFloat64). dt_is_signed() returns TRUE passed type signed. dt_union() returns smallest data type can fully express input data types (returns data type name character string). dt_union_with_value() unions data type data type found given value, returns resulting data type name character string. dt_find() finds smallest data type able support given requirements (returns data type name character string). dt_find_for_value() finds smallest data type able support given value (returns data type name character string).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/data_type_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for GDAL raster data types — data_type_helpers","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file)  ds$getDataTypeName(band = 1) |> dt_size() #> [1] 2 ds$getDataTypeName(band = 1) |> dt_size(as_bytes = FALSE) #> [1] 16 ds$getDataTypeName(band = 1) |> dt_is_complex() #> [1] FALSE ds$getDataTypeName(band = 1) |> dt_is_integer() #> [1] TRUE ds$getDataTypeName(band = 1) |> dt_is_floating() #> [1] FALSE ds$getDataTypeName(band = 1) |> dt_is_signed() #> [1] TRUE  ds$close()  f <- system.file(\"extdata/complex.tif\", package=\"gdalraster\") ds <- new(GDALRaster, f)  ds$getDataTypeName(band = 1) |> dt_size() #> [1] 8 ds$getDataTypeName(band = 1) |> dt_size(as_bytes = FALSE) #> [1] 64 ds$getDataTypeName(band = 1) |> dt_is_complex() #> [1] TRUE ds$getDataTypeName(band = 1) |> dt_is_integer() #> [1] FALSE ds$getDataTypeName(band = 1) |> dt_is_floating() #> [1] TRUE ds$getDataTypeName(band = 1) |> dt_is_signed() #> [1] TRUE  ds$close()  dt_union(\"Byte\", \"Int16\") #> [1] \"Int16\" dt_union_with_value(\"Byte\", -1) #> [1] \"Int16\" dt_union_with_value(\"Byte\", 256) #> [1] \"UInt16\"  dt_find(bits = 32, is_signed = FALSE, is_floating = FALSE) #> [1] \"UInt32\" dt_find_for_value(0) #> [1] \"Byte\" dt_find_for_value(-1) #> [1] \"Int8\" dt_find_for_value(NaN) #> [1] \"Float64\" dt_find_for_value(.Machine$integer.max) #> [1] \"UInt32\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete named dataset — deleteDataset","title":"Delete named dataset — deleteDataset","text":"deleteDataset() attempt delete named dataset format specific fashion. Full featured drivers delete associated files, database objects, whatever appropriate. default behavior format specific behavior provided attempt delete files returned GDALRaster$getFileList() dataset. named dataset open existing GDALRaster objects deleteDataset() called. Wrapper GDALDeleteDataset() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete named dataset — deleteDataset","text":"","code":"deleteDataset(filename, format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete named dataset — deleteDataset","text":"filename Filename delete (open GDALRaster object). format Raster format short name (e.g., \"GTiff\"). set empty string \"\" (default), attempt guess raster format filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete named dataset — deleteDataset","text":"Logical TRUE error FALSE failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete named dataset — deleteDataset","text":"format set empty string \"\" (default) function try identify driver filename. done internally GDAL invoking Identify method registered GDALDriver turn. first driver successful identifies file name returned. error raised format determined passed file name.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete named dataset — deleteDataset","text":"","code":"b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b5_tmp <- file.path(tempdir(), \"b5_tmp.tif\") file.copy(b5_file,  b5_tmp) #> [1] TRUE  ds <- new(GDALRaster, b5_tmp) ds$buildOverviews(\"BILINEAR\", levels = c(2, 4, 8), bands = c(1)) #> 0...10...20...30...40...50...60...70...80...90...100 - done. files <- ds$getFileList() print(files) #> [1] \"/tmp/RtmplY4zfC/b5_tmp.tif\"     \"/tmp/RtmplY4zfC/b5_tmp.tif.ovr\" ds$close() file.exists(files) #> [1] TRUE TRUE deleteDataset(b5_tmp) #> [1] TRUE file.exists(files) #> [1] FALSE FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":null,"dir":"Reference","previous_headings":"","what":"GDAL DEM processing — dem_proc","title":"GDAL DEM processing — dem_proc","text":"dem_proc() generates DEM derivatives input elevation raster. function wrapper gdaldem command-line utility. See https://gdal.org/en/stable/programs/gdaldem.html details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GDAL DEM processing — dem_proc","text":"","code":"dem_proc(   mode,   srcfile,   dstfile,   mode_options = DEFAULT_DEM_PROC[[mode]],   color_file = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GDAL DEM processing — dem_proc","text":"mode Character. Name DEM processing mode. One hillshade, slope, aspect, color-relief, TRI, TPI roughness. srcfile Filename source elevation raster. dstfile Filename output raster. mode_options optional character vector command-line options (see DEFAULT_DEM_PROC default values). color_file Filename text file containing lines formatted : \"elevation_value red green blue\". used mode = \"color-relief\". quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GDAL DEM processing — dem_proc","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GDAL DEM processing — dem_proc","text":"Band 1 source elevation raster read default, can changed including -b command-line argument mode_options. See documentation gdaldem description available options processing mode.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GDAL DEM processing — dem_proc","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") slp_file <- file.path(tempdir(), \"storml_slp.tif\") dem_proc(\"slope\", elev_file, slp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a GDAL Raster Attribute Table — displayRAT","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"displayRAT() generates presentation table. Colors shown Raster Attribute Table contains RGB columns. function requires package gt.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"","code":"displayRAT(tbl, title = \"Raster Attribute Table\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"tbl data frame formatted GDAL RAT (e.g., returned buildRAT() GDALRaster$getDefaultRAT()). title Character string used table title.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"object class \"gt_tbl\" (.e., table created gt::gt()).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"","code":"# see examples for `buildRAT()`"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Report open datasets — dump_open_datasets","title":"Report open datasets — dump_open_datasets","text":"dump_open_datasets() dumps list open datasets (shared ) console. function primarily intended assist debugging \"dataset leaks\" reference counting issues. information reported includes dataset name, referenced count, shared status, driver name, size, band count. wrapper GDALDumpOpenDatasets() output console.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report open datasets — dump_open_datasets","text":"","code":"dump_open_datasets()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report open datasets — dump_open_datasets","text":"Number open datasets.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report open datasets — dump_open_datasets","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) dump_open_datasets() #> Open GDAL Datasets: #>   1 S GTiff  886482944 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 1 ds2 <- new(GDALRaster, elev_file) dump_open_datasets() #> Open GDAL Datasets: #>   2 S GTiff  886482944 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 1 # open without using shared mode ds3 <- new(GDALRaster, elev_file, read_only = TRUE,            open_options = NULL, shared = FALSE) dump_open_datasets() #> Open GDAL Datasets: #>   1 N GTiff       -1 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #>   2 S GTiff  886482944 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 2 ds$close() dump_open_datasets() #> Open GDAL Datasets: #>   1 N GTiff       -1 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #>   1 S GTiff  886482944 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 2 ds2$close() dump_open_datasets() #> Open GDAL Datasets: #>   1 N GTiff       -1 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 1 ds3$close() dump_open_datasets() #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill selected pixels by interpolation from surrounding areas — fillNodata","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"fillNodata() wrapper GDALFillNodata() GDAL Algorithms API. algorithm interpolate values designated nodata pixels (pixels intrinsic nodata value, marked zero-valued pixels optional raster specified mask_file). nodata pixel, four direction conic search done find values interpolate (using inverse distance weighting). values interpolated, zero smoothing iterations (3x3 average filters interpolated pixels) applied smooth artifacts.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"","code":"fillNodata(   filename,   band,   mask_file = \"\",   max_dist = 100,   smooth_iterations = 0L,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"filename Filename input raster fill nodata pixels. band Integer band number modify place. mask_file Optional filename raster use validity mask (band 1 used, zero marks nodata pixels, non-zero marks valid pixels). max_dist Maximum distance (pixels) algorithm search values interpolate (100 pixels default). smooth_iterations number 3x3 average filter smoothing iterations run interpolation dampen artifacts (0 default). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"input raster modified place. open GDALRaster object processing fillNodata().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"","code":"## fill nodata edge pixels in the elevation raster elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## get count of nodata tbl <- buildRAT(elev_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(tbl) #>   VALUE COUNT #> 1  2438     9 #> 2  2439     6 #> 3  2440     5 #> 4  2441     5 #> 5  2442     5 #> 6  2443     2 tbl[is.na(tbl$VALUE),] #>     VALUE COUNT #> 601    NA   876  ## make a copy that will be modified mod_file <- file.path(tempdir(), \"storml_elev_fill.tif\") file.copy(elev_file,  mod_file) #> [1] TRUE  fillNodata(mod_file, band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  mod_tbl = buildRAT(mod_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(mod_tbl) #>   VALUE COUNT #> 1  2438     9 #> 2  2439     7 #> 3  2440     8 #> 4  2441     5 #> 5  2442     7 #> 6  2443     2 mod_tbl[is.na(mod_tbl$VALUE),] #> [1] VALUE COUNT #> <0 rows> (or 0-length row.names)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute footprint of a raster — footprint","title":"Compute footprint of a raster — footprint","text":"footprint() wrapper gdal_footprint command-line utility (see https://gdal.org/en/stable/programs/gdal_footprint.html). function can used compute footprint raster file, taking account nodata values (generally mask band attached raster bands), generating polygons/multipolygons corresponding areas pixels valid, write output vector file. Refer GDAL documentation URL list command-line arguments can passed cl_arg. Requires GDAL >= 3.8.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute footprint of a raster — footprint","text":"","code":"footprint(src_filename, dst_filename, cl_arg = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute footprint of a raster — footprint","text":"src_filename Character string. Filename source raster. dst_filename Character string. Filename destination vector. file output layer exist, new footprint appended , unless -overwrite command-line argument used. cl_arg Optional character vector command-line arguments gdal_footprint.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute footprint of a raster — footprint","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute footprint of a raster — footprint","text":"Post-vectorization geometric operations applied following order: optional splitting (-split_polys) optional densification (-densify) optional reprojection (-t_srs) optional filtering minimum ring area (-min_ring_area) optional application convex hull (-convex_hull) optional simplification (-simplify) limitation number points (-max_points)","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute footprint of a raster — footprint","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") out_file <- file.path(tempdir(), \"storml.geojson\")  # Requires GDAL >= 3.8 if (gdal_version_num() >= gdal_compute_version(3, 8, 0)) {   # command-line arguments for gdal_footprint   args <- c(\"-t_srs\", \"EPSG:4326\")   footprint(evt_file, out_file, args)   DONTSHOW({deleteDataset(out_file)}) } #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary operations on WKB or WKT geometries — g_binary_op","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"functions implement operations pairs geometries OGC WKB WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"","code":"g_intersection(   this_geom,   other_geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_union(   this_geom,   other_geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_difference(   this_geom,   other_geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_sym_difference(   this_geom,   other_geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"this_geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. other_geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. Must contain number geometries this_geom. as_wkb Logical value, TRUE return output geometry WKB format (default), FALSE return WKT. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\". byte_order Character string specifying byte order output WKB. One \"LSB\" (default) \"MSB\" (uncommon). quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"geometry WKB raw vector WKT string, list/character vector geometries WKB/WKT length equal number input geometry pairs. NA returned warning WKB input converted OGR geometry object, error occurs call underlying OGR API function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"functions use GEOS library via GDAL headers. g_intersection() returns new geometry region intersection two geometries operated . g_intersects() can used test two geometries intersect. g_union() returns new geometry region union two geometries operated . g_difference() returns new geometry region geometry region geometry removed. g_sym_difference() returns new geometry symmetric difference geometry geometry (union minus intersection).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"this_geom other_geom assumed coordinate reference system. Geometry validity checked. case unsure validity input geometries, call g_is_valid() , otherwise result might wrong.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary operations on WKB or WKT geometries — g_binary_op","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) g1 <- ds$bbox() |> bbox_to_wkt() ds$close()  g2 <- \"POLYGON ((327381.9 5104541.2, 326824.0 5104092.5, 326708.8 5103182.9,   327885.2 5102612.9, 329334.5 5103322.4, 329304.2 5104474.5,328212.7   5104656.4, 328212.7 5104656.4, 327381.9 5104541.2))\"  # see spatial predicate defintions at https://en.wikipedia.org/wiki/DE-9IM g_intersects(g1, g2)  # TRUE #> [1] TRUE g_overlaps(g1, g2)  # TRUE #> [1] TRUE # therefore, g_contains(g1, g2)  # FALSE #> [1] FALSE  g_sym_difference(g1, g2) |> g_area() #> [1] 14834452  g3 <- g_intersection(g1, g2) g4 <- g_union(g1, g2) g_difference(g4, g3) |> g_area() #> [1] 14834452"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","title":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","text":"functions implement tests pairs geometries OGC WKB WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","text":"","code":"g_intersects(this_geom, other_geom, quiet = FALSE)  g_disjoint(this_geom, other_geom, quiet = FALSE)  g_touches(this_geom, other_geom, quiet = FALSE)  g_contains(this_geom, other_geom, quiet = FALSE)  g_within(this_geom, other_geom, quiet = FALSE)  g_crosses(this_geom, other_geom, quiet = FALSE)  g_overlaps(this_geom, other_geom, quiet = FALSE)  g_equals(this_geom, other_geom, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","text":"this_geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. other_geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. Must contain number geometries this_geom, unless this_geom contains single geometry case pairwise tests performed one--many other_geom contains multiple geometries (.e., \"--others\"). quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","text":"Logical vector length equal number input geometry pairs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","text":"functions use GEOS library via GDAL headers. g_intersects() tests whether two geometries intersect. g_disjoint() tests geometry geometry disjoint. g_touches() tests geometry geometry touching. g_contains() tests geometry contains geometry. g_within() tests geometry within geometry. g_crosses() tests geometry geometry crossing. g_overlaps() tests geometry geometry overlap, , intersection non-zero area (points common). g_equals() tests whether two geometries equivalent. GDAL documentation says: \"operation implements SQL/MM ST_OrderingEquals() operation. comparison done structural way, say geometry types must identical, well number ordering sub-geometries vertices. equivalently, two geometries considered equal method WKT/WKB representation equal. Note: must distinguished equality spatial way.\"","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Geometry binary predicates operating on WKB or WKT — g_binary_pred","text":"this_geom other_geom assumed coordinate reference system. this_geomis single geometry other_geom list vector multiple geometries, this_geom tested geometry other_geom (otherwise recycling done). Geometry validity checked. case unsure validity input geometries, call g_is_valid() , otherwise result might wrong.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract coordinate values from geometries — g_coords","title":"Extract coordinate values from geometries — g_coords","text":"g_coords() extracts coordinate values (vertices) input geometries returns data frame coordinates columns.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract coordinate values from geometries — g_coords","text":"","code":"g_coords(geom)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract coordinate values from geometries — g_coords","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract coordinate values from geometries — g_coords","text":"data frame returned wk::wk_coords(): columns feature_id (index feature input), part_id (arbitrary integer identifying point, line, polygon whence came), ring_id (arbitrary integer identifying individual rings within polygons), one column per coordinate (x, y, /z /m).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract coordinate values from geometries — g_coords","text":"","code":"dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") lyr <- new(GDALVector, dsn) d <- lyr$fetch(10)  vertices <- g_coords(d$geom) head(vertices) #>   feature_id part_id ring_id        x         y #> 1          1       2       1 503099.4 -12893.97 #> 2          1       2       1 503169.8 -12756.37 #> 3          1       2       1 502689.8 -12131.53 #> 4          1       2       1 503098.4 -11311.95 #> 5          1       2       1 503796.8 -11250.05 #> 6          1       2       1 503950.2 -11631.99  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the 2D or 3D bounding envelope for input geometries — g_envelope","title":"Obtain the 2D or 3D bounding envelope for input geometries — g_envelope","text":"g_envelope() computes returns bounding envelope(s) input geometries. Wrapper OGR_G_GetEnvelope() / OGR_G_GetEnvelope3D() GDAL Geometry API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the 2D or 3D bounding envelope for input geometries — g_envelope","text":"","code":"g_envelope(geom, as_3d = FALSE, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the 2D or 3D bounding envelope for input geometries — g_envelope","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. as_3d Logical value. TRUE return 3D bounding envelope. 2D envelope returned default (as_3d = FALSE). quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_envelope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the 2D or 3D bounding envelope for input geometries — g_envelope","text":"Either numeric vector length 4 containing 2D envelope (xmin, xmax, ymin, ymax) length 6 containing 3D envelope (xmin, xmax, ymin, ymax, zmin, zmax), four-column six-column numeric matrix number rows equal number input geometries column names (\"xmin\", \"xmax\", \"ymin\", \"ymax\"), (\"xmin\", \"xmax\", \"ymin\", \"ymax\", \"zmin\", \"zmax\") 3D case.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"functions create WKB/WKT geometries input vertices, build container geometry types sub-geometries.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"","code":"g_create(   geom_type,   pts = NULL,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\" )  g_add_geom(   sub_geom,   container,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\" )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"geom_type Character string (case-insensitive), one \"POINT\", \"MULTIPOINT\", \"LINESTRING\", \"POLYGON\" (see Note) \"GEOMETRYCOLLECTION\". pts Numeric matrix points (x, y, z, m), NULL create empty geometry. points can given (x, y), (x, y, z) (x, y, z, m), input must two, three four columns. Data frame input coerced numeric matrix. Rings polygon geometries closed. as_wkb Logical value, TRUE return output geometry WKB format (default), FALSE return WKT string. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\". byte_order Character string specifying byte order output WKB. One \"LSB\" (default) \"MSB\" (uncommon). sub_geom Either raw vector WKB character string WKT. container Either raw vector WKB character string WKT container geometry type.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"geometry WKB raw vector default, WKT string as_wkb = FALSE. case multiple input points creating Point geometry type, list WKB raw vectors character vector WKT strings returned.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"functions use GEOS library via GDAL headers. g_create() creates geometry object given point(s) returns raw vector WKB (default) character string WKT. Currently supports creating Point, MultiPoint, LineString, Polygon, GeometryCollection. multiple input points given creating Point type, multiple geometries returned list WKB raw vectors, character vector WKT strings (as_wkb = FALSE). Otherwise, single geometry created input points. empty GeometryCollection can created function, subsequent use g_add_geom(). g_add_geom() adds geometry geometry container, e.g., Polygon Polygon (add interior ring), Point MultiPoint, LineString MultiLineString, Polygon MultiPolygon, mixed geometry types GeometryCollection. Returns new geometry, .e, container geometry modified.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"POLYGON can created single ring exterior ring. Additional POLYGONs can created added existing POLYGON g_add_geom(). become interior rings. Alternatively, empty polygon can created g_create(\"POLYGON\"), followed creation addition POLYGONs subgeometries. case, first added POLYGON exterior ring. next ones interior rings. empty GeometryCollection can created g_create(), can used container g_add_geom(). given, input points ignored g_create() geom_type = \"GEOMETRYCOLLECTION\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create WKB/WKT geometries from vertices, and add sub-geometries — g_factory","text":"","code":"# raw vector of WKB by default g_create(\"POINT\", c(1, 2)) #>  [1] 01 01 00 00 00 00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 00 40  # as WKT g_create(\"POINT\", c(1, 2), as_wkb = FALSE) #> [1] \"POINT (1 2)\"  # or convert in either direction g_create(\"POINT\", c(1, 2)) |> g_wk2wk() #> [1] \"POINT (1 2)\" g_create(\"POINT\", c(1, 2), as_wkb = FALSE) |> g_wk2wk() #>  [1] 01 01 00 00 00 00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 00 40  # create multipoint from a matrix of xyz points x <- c(9, 1) y <- c(1, 9) z <- c(0, 10) pts <- cbind(x, y, z) mp <- g_create(\"MULTIPOINT\", pts) g_wk2wk(mp) #> [1] \"MULTIPOINT (9 1 0,1 9 10)\" g_wk2wk(mp, as_iso = TRUE) #> [1] \"MULTIPOINT Z ((9 1 0),(1 9 10))\"  # create an empty container and add subgeometries mp2 <- g_create(\"MULTIPOINT\") mp2 <- g_create(\"POINT\", c(11, 2)) |> g_add_geom(mp2) mp2 <- g_create(\"POINT\", c(12, 3)) |> g_add_geom(mp2) g_wk2wk(mp2) #> [1] \"MULTIPOINT (11 2,12 3)\"  # plot WKT strings or a list of WKB raw vectors with wk::wk_plot() pts <- c(0, 0, 3, 0, 3, 4, 0, 0) m <- matrix(pts, ncol = 2, byrow = TRUE) g <- g_create(\"POLYGON\", m, as_wkb = FALSE) wk::wkt(g) |> wk::wk_plot()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to make invalid geometries valid — g_make_valid","title":"Attempt to make invalid geometries valid — g_make_valid","text":"g_make_valid() attempts make invalid geometry valid without losing vertices. Already-valid geometries cloned without intervention. Wrapper OGR_G_MakeValid()/OGR_G_MakeValidEx() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to make invalid geometries valid — g_make_valid","text":"","code":"g_make_valid(   geom,   method = \"LINEWORK\",   keep_collapsed = FALSE,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to make invalid geometries valid — g_make_valid","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. method Character string. One \"LINEWORK\" (default) \"STRUCTURE\" (requires GEOS >= 3.10 GDAL >= 3.4). See Details. keep_collapsed Logical value, applies STRUCTURE method. Defaults FALSE. See Details. as_wkb Logical value, TRUE return output geometry WKB format (default), FALSE return WKT. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\". byte_order Character string specifying byte order output WKB. One \"LSB\" (default) \"MSB\" (uncommon). quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to make invalid geometries valid — g_make_valid","text":"geometry WKB raw vector WKT string, list/character vector geometries WKB/WKT length equal length(geom). NA returned warning WKB input converted OGR geometry object, error occurs call MakeValid() underlying OGR API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attempt to make invalid geometries valid — g_make_valid","text":"LINEWORK default method, combines rings set noded lines extracts valid polygons linework. STRUCTURE method (requires GEOS >= 3.10 GDAL >= 3.4) first makes rings valid, merges shells subtracts holes shells generate valid result. Assumes holes shells correctly categorized. KEEP_COLLAPSED applies STRUCTURE method: FALSE (default): collapses converted empty geometries TRUE: collapses converted valid geometry lower dimension","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Attempt to make invalid geometries valid — g_make_valid","text":"function built GEOS >= 3.8 library, check definition geometry operation. OGR built without GEOS >= 3.8, function return clone input geometry valid, NA invalid.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_make_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attempt to make invalid geometries valid — g_make_valid","text":"","code":"# requires GEOS >= 3.8, otherwise is only a validity test (see Note) geos_version() #> $name #> [1] \"3.12.1\" #>  #> $major #> [1] 3 #>  #> $minor #> [1] 12 #>  #> $patch #> [1] 1 #>   # valid wkt <- \"POINT (0 0)\" g_make_valid(wkt, as_wkb = FALSE) #> [1] \"POINT (0 0)\"  # invalid to valid wkt <- \"POLYGON ((0 0,10 10,0 10,10 0,0 0))\" g_make_valid(wkt, as_wkb = FALSE) #> [1] \"MULTIPOLYGON (((10 0,0 0,5 5,10 0)),((10 10,5 5,0 10,10 10)))\"  # invalid - error wkt <- \"LINESTRING (0 0)\" g_make_valid(wkt)  # NA #> Warning: OGR MakeValid() gave NULL geometry, NA returned #> [1] NA"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute measurements for WKB/WKT geometries — g_measures","title":"Compute measurements for WKB/WKT geometries — g_measures","text":"functions compute measurements geometries. input geometries may given single raw vector WKB, list WKB raw vectors, character vector containing one WKT strings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute measurements for WKB/WKT geometries — g_measures","text":"","code":"g_area(geom, quiet = FALSE)  g_centroid(geom, quiet = FALSE)  g_distance(geom, other_geom, quiet = FALSE)  g_length(geom, quiet = FALSE)  g_geodesic_area(geom, srs, traditional_gis_order = TRUE, quiet = FALSE)  g_geodesic_length(geom, srs, traditional_gis_order = TRUE, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute measurements for WKB/WKT geometries — g_measures","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. quiet Logical value, TRUE suppress warnings. Defaults FALSE. other_geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. Must contain number geometries geom, unless geom contains single geometry case pairwise distances computed one--many other_geom contains multiple geometries (.e., \"--others\"). srs Character string specifying spatial reference system geom. May WKT format formats supported srs_to_wkt(). traditional_gis_order Logical value, TRUE use traditional GIS order axis mapping (default) FALSE use authority compliant axis order. default, input geom vertices assumed longitude/latitude order srs geographic coordinate system. can overridden setting traditional_gis_order = FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute measurements for WKB/WKT geometries — g_measures","text":"functions use GEOS library via GDAL headers. g_area() computes area Polygon MultiPolygon. Undefined geometry types (returns zero). Returns numeric vector, length equal number input geometries, containing computed area '0' undefined. g_centroid() returns numeric vector length 2 containing centroid (X, Y), two-column numeric matrix (X, Y) number rows equal number input geometries. GDAL documentation states \"method relates SFCOM ISurface::get_Centroid() method however current implementation based GEOS can operate geometry types multipoint, linestring, geometrycollection multipolygons. OGC SF SQL 1.1 defines operation surfaces (polygons). SQL/MM-Part 3 defines operation surfaces multisurfaces (multipolygons).\" g_distance() returns distance two geometries -1 error occurs. Returns shortest distance two geometries. distance expressed unit coordinates geometries. Returns numeric vector, length equal number input geometry pairs, containing computed distance '-1' error occurs. g_length() computes length LineString MultiCurve objects. Undefined geometry types (returns zero). Returns numeric vector, length equal number input geometries, containing computed length '0' undefined. g_geodesic_area() computes geometry area, considered surface underlying ellipsoid SRS attached geometry. returned area always square meters, assumes polygon edges describe geodesic lines ellipsoid. geometry SRS geographic one, geometries reprojected underlying geographic SRS. default, input geometry vertices assumed longitude/latitude order using geographic coordinate system. can overridden traditional_gis_order argument. Returns area square meters, NA case error (unsupported geometry type, SRS attached, etc.) Requires GDAL >= 3.9. g_geodesic_length() computes length curve, considered geodesic line underlying ellipsoid SRS attached geometry. returned length always meters. geometry SRS geographic one, geometries reprojected underlying geographic SRS. default, input geometry vertices assumed longitude/latitude order using geographic coordinate system. can overridden traditional_gis_order argument. Returns length meters, NA case error (unsupported geometry type, SRS attached, etc.) Requires GDAL >= 3.10.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_measures.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute measurements for WKB/WKT geometries — g_measures","text":"g_distance(), geom other_geom must coordinate reference system. geom single geometry other_geom list vector multiple geometries, distances calculated geom geometry other_geom. Otherwise, recycling done length(geom) must equal length(other_geom) calculate distance corresponding pair input geometries. Geometry validity checked. case unsure validity input geometries, call g_is_valid() , otherwise result might wrong.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute measurements for WKB/WKT geometries — g_measures","text":"","code":"g_area(\"POLYGON ((0 0, 10 10, 10 0, 0 0))\") #> [1] 50  g_centroid(\"POLYGON ((0 0, 10 10, 10 0, 0 0))\") #>        x        y  #> 6.666667 3.333333   g_distance(\"POINT (0 0)\", \"POINT (5 12)\") #> [1] 13  g_length(\"LINESTRING (0 0, 3 4)\") #> [1] 5  f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package = \"gdalraster\") lyr <- new(GDALVector, f, \"mtbs_perims\")  # read all features into a data frame feat_set <- lyr$fetch(-1) head(feat_set) #> OGR feature set #>   FID              event_id  incid_name        incid_type   map_id burn_bnd_ac #> 1   1 WY4413411069519870807     POLECAT          Wildfire 10015934        1093 #> 2   2 WY4509511033019880815 HELLROARING          Wildfire 10014146       77598 #> 3   3 MT4507511010219880619 STORM CREEK          Wildfire 10014147      116027 #> 4   4 WY4491210990219880711      CLOVER Wildland Fire Use 10014202       34035 #> 5   5 WY4463411003119880709        MIST          Wildfire 10014203        4376 #> 6   6 WY4499211096519880625         FAN Wildland Fire Use 10014215       20422 #>   burn_bnd_lat burn_bnd_lon    ig_date ig_year #> 1       44.132     -110.696 1987-08-07    1987 #> 2       45.089     -110.328 1988-08-15    1988 #> 3       45.146     -110.013 1988-06-19    1988 #> 4       44.717     -110.034 1988-07-11    1988 #> 5       44.633     -110.028 1988-07-09    1988 #> 6       44.994     -110.976 1988-06-25    1988 #>                                    geom #> 1 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 2 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 3 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 4 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 5 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 6 WKB MULTIPOLYGON: raw 01 06 00 00 ...  g_area(feat_set$geom) |> head() #> [1]   3626011 219210971 261779718 137157336  17666635  82653959  g_centroid(feat_set$geom) |> head() #>             x         y #> [1,] 504185.6 -11945.72 #> [2,] 534834.7  86727.91 #> [3,] 553856.8  89236.52 #> [4,] 556496.3  51930.36 #> [5,] 557768.3  42471.93 #> [6,] 483922.9  82676.71  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain information about WKB/WKT geometries — g_query","title":"Obtain information about WKB/WKT geometries — g_query","text":"functions return information WKB/WKT geometries. input geometries may given single raw vector WKB, list WKB raw vectors, character vector containing one WKT strings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain information about WKB/WKT geometries — g_query","text":"","code":"g_is_empty(geom, quiet = FALSE)  g_is_valid(geom, quiet = FALSE)  g_is_3D(geom, quiet = FALSE)  g_is_measured(geom, quiet = FALSE)  g_name(geom, quiet = FALSE)  g_summary(geom, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain information about WKB/WKT geometries — g_query","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain information about WKB/WKT geometries — g_query","text":"g_is_empty() tests whether geometry points. Returns logical vector length number input geometries containing TRUE corresponding geometries empty FALSE non-empty geometries. g_is_valid() tests whether geometry valid. Returns logical vector analogous g_is_empty(). g_is_3D() checks whether geometry Z coordinates. Returns logical vector analogous g_is_empty(). g_is_measured() checks whether geometry measured (M values). Returns logical vector analogous g_is_empty(). g_name() returns WKT type names input geometries character vector length number input geometries. g_summary() returns text summaries WKB/WKT geometries character vector length number input geometries. Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain information about WKB/WKT geometries — g_query","text":"","code":"g1 <- \"POLYGON ((0 0, 10 10, 10 0, 0 0))\" g2 <- \"POLYGON ((5 1, 9 5, 9 1, 5 1))\" g_difference(g2, g1) |> g_is_empty() #> [1] TRUE  g1 <- \"POLYGON ((0 0, 10 10, 10 0, 0 0))\" g2 <- \"POLYGON ((0 0, 10 10, 10 0))\" g3 <- \"POLYGON ((0 0, 10 10, 10 0, 0 1))\" g_is_valid(c(g1, g2, g3)) #> [1]  TRUE FALSE FALSE  g_is_3D(g1) #> [1] FALSE g_is_measured(g1) #> [1] FALSE  pt_xyz <- g_create(\"POINT\", c(1, 9, 100)) g_is_3D(pt_xyz) #> [1] TRUE g_is_measured(pt_xyz) #> [1] FALSE  pt_xyzm <- g_create(\"POINT\", c(1, 9, 100, 2000)) g_is_3D(pt_xyzm) #> [1] TRUE g_is_measured(pt_xyzm) #> [1] TRUE  f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package = \"gdalraster\") lyr <- new(GDALVector, f, \"mtbs_perims\")  feat <- lyr$getNextFeature() g_name(feat$geom) #> [1] \"MULTIPOLYGON\"  # g_summary() requires GDAL >= 3.7 if (gdal_version_num() >= gdal_compute_version(3, 7, 0)) {   feat <- lyr$getNextFeature()   g_summary(feat$geom) |> print()    feat_set <- lyr$fetch(5)   g_summary(feat_set$geom) |> print() } #> [1] \"MULTIPOLYGON : 3 geometries: POLYGON : 410 points POLYGON : 4 points POLYGON : 8 points\" #> [1] \"MULTIPOLYGON : 1 geometries: POLYGON : 302 points\"                                                            #> [2] \"MULTIPOLYGON : 1 geometries: POLYGON : 277 points\"                                                            #> [3] \"MULTIPOLYGON : 2 geometries: POLYGON : 54 points POLYGON : 7 points\"                                          #> [4] \"MULTIPOLYGON : 1 geometries: POLYGON : 159 points\"                                                            #> [5] \"MULTIPOLYGON : 4 geometries: POLYGON : 1376 points POLYGON : 17 points POLYGON : 5 points POLYGON : 9 points\"  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_swap_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap geometry x and y coordinates — g_swap_xy","title":"Swap geometry x and y coordinates — g_swap_xy","text":"g_swap_xy() swaps x y coordinates input geometry. Wrapper OGR_G_SwapXY() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_swap_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap geometry x and y coordinates — g_swap_xy","text":"","code":"g_swap_xy(   geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_swap_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap geometry x and y coordinates — g_swap_xy","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. as_wkb Logical value, TRUE return output geometry WKB format (default), FALSE return WKT. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\". byte_order Character string specifying byte order output WKB. One \"LSB\" (default) \"MSB\" (uncommon). quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_swap_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap geometry x and y coordinates — g_swap_xy","text":"geometry WKB raw vector WKT string, list/character vector geometries WKB/WKT length equal length(geom). NA returned warning WKB input converted OGR geometry object.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_swap_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swap geometry x and y coordinates — g_swap_xy","text":"","code":"g <- \"GEOMETRYCOLLECTION(POINT(1 2),                          LINESTRING(1 2,2 3),                          POLYGON((0 0,0 1,1 1,0 0)))\"  g_swap_xy(g, as_wkb = FALSE) #> [1] \"GEOMETRYCOLLECTION (POINT (2 1),LINESTRING (2 1,3 2),POLYGON ((0 0,1 0,1 1,0 0)))\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","title":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","text":"g_transform() transform coordinates geometry current spatial reference system new target spatial reference system. Normally means reprojecting vectors, include datum shifts, changes units.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","text":"","code":"g_transform(   geom,   srs_from,   srs_to,   wrap_date_line = FALSE,   date_line_offset = 10L,   traditional_gis_order = TRUE,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. srs_from Character string specifying spatial reference system geom. May WKT format formats supported srs_to_wkt(). srs_to Character string specifying output spatial reference system. May WKT format formats supported srs_to_wkt(). wrap_date_line Logical value, TRUE correct geometries incorrectly go longitude side antimeridian side. Defaults FALSE. date_line_offset Integer longitude gap degree. Defaults 10L. traditional_gis_order Logical value, TRUE use traditional GIS order axis mapping (default) FALSE use authority compliant axis order. default, input geom vertices assumed longitude/latitude order srs_from geographic coordinate system. can overridden setting traditional_gis_order = FALSE. as_wkb Logical value, TRUE return output geometry WKB format (default), FALSE return WKT. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\". byte_order Character string specifying byte order output WKB. One \"LSB\" (default) \"MSB\" (uncommon). quiet Logical value, TRUE suppress warnings. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","text":"geometry WKB raw vector WKT string, list/character vector geometries WKB/WKT length equal number input geometries. NA returned warning WKB input converted OGR geometry object, error occurs call underlying OGR API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","text":"function uses OGR_GeomTransformer_Create() OGR_GeomTransformer_Transform() functions GDAL API: \"enhanced version OGR_G_Transform(). reprojecting geometries Polar Stereographic projection projection naturally crossing antimeridian (like UTM Zone 60) geographic CRS, cut geometries along antimeridian. LineString might returned MultiLineString.\" wrap_date_line = TRUE option might specified circumstances correct geometries incorrectly go longitude side antimeridian side, e.g., LINESTRING (-179 0,179 0) transformed MULTILINESTRING ((-179 0,-180 0),(180 0,179 0)). use case, srs_to might srs_from.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a coordinate transformation to a WKB/WKT geometry — g_transform","text":"","code":"pt <- \"POINT (-114.0 47.0)\" g_transform(pt, \"WGS84\", \"EPSG:5070\", as_wkb = FALSE) #> [1] \"POINT (-1367125.77866242 2797551.11860518)\"  # correct geometries that incorrectly go from a longitude on a side of the # antimeridian to the other side geom <- \"LINESTRING (-179 0,179 0)\" g_transform(geom, \"WGS84\", \"WGS84\", wrap_date_line = TRUE, as_wkb = FALSE) #> [1] \"MULTILINESTRING ((-179 0,-180 0),(180 0,179 0))\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":null,"dir":"Reference","previous_headings":"","what":"Unary operations on WKB or WKT geometries — g_unary_op","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"functions implement algorithms operate one input geometry new output geometry generated. input geometries may given single raw vector WKB, list WKB raw vectors, character vector containing one WKT strings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"","code":"g_buffer(   geom,   dist,   quad_segs = 30L,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_boundary(   geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_convex_hull(   geom,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_delaunay_triangulation(   geom,   tolerance = 0,   only_edges = FALSE,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )  g_simplify(   geom,   tolerance,   preserve_topology = TRUE,   as_wkb = TRUE,   as_iso = FALSE,   byte_order = \"LSB\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"geom Either raw vector WKB list raw vectors, character vector containing one WKT strings. dist Numeric buffer distance units input geom. quad_segs Integer number segments used define 90 degree curve (quadrant circle). Large values result large numbers vertices resulting buffer geometry small numbers reduce accuracy result. as_wkb Logical value, TRUE return output geometry WKB format (default), FALSE return WKT. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\". byte_order Character string specifying byte order output WKB. One \"LSB\" (default) \"MSB\" (uncommon). quiet Logical value, TRUE suppress warnings. Defaults FALSE. tolerance Numeric value. g_simplify(), simplification tolerance distance units input geom. Simplification removes vertices within tolerance distance simplified linework (long topology preserved preserve_topology = TRUE). g_delaunay_triangulation(), optional snapping tolerance use improved robustness. only_edges Logical value. TRUE, g_delaunay_triangulation() return MULTILINESTRING, otherwise return GEOMETRYCOLLECTION containing triangular POLYGONs (default). preserve_topology Logical value, TRUE simplify geometries preserving topology (default). Setting FALSE simplifies geometries using standard Douglas-Peucker algorithm significantly faster (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"geometry WKB raw vector WKT string, list/character vector geometries WKB/WKT length equal number input geometries. NA returned warning WKB input converted OGR geometry object, error occurs call underlying OGR API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"functions use GEOS library via GDAL headers. g_boundary() computes boundary geometry. Wrapper OGR_G_Boundary() GDAL Geometry API. g_buffer() builds new geometry containing buffer region around geometry invoked. buffer polygon containing region within buffer distance original geometry. Wrapper OGR_G_Buffer() GDAL API. g_convex_hull() computes convex hull, smallest convex geometry contains points input geometry. Wrapper OGR_G_ConvexHull() GDAL API. g_delaunay_triangulation() returns Delaunay triangulation vertices input geometry. Wrapper OGR_G_DelaunayTriangulation() GDAL API. Requires GEOS >= 3.4. g_simplify() computes simplified geometry. default, simplifies input geometries preserving topology (see Note). Wrapper OGR_G_Simplify() / OGR_G_SimplifyPreserveTopology() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"Definitions operations given GEOS documentation (https://libgeos.org/doxygen/, GEOS 3.14.0dev), copied . g_boundary() computes \"boundary\" defined DE9IM (https://en.wikipedia.org/wiki/DE-9IM): boundary Polygon set linear rings dividing exterior interior boundary LineString two end points boundary Point/MultiPoint defined empty g_buffer() always returns polygonal result. negative zero-distance buffer lines points always empty Polygon. g_convex_hull() uses Graham Scan algorithm. g_simplify(): preserve_topology = TRUE (default): Simplifies geometry, ensuring result valid geometry dimension number components input. simplification uses maximum distance difference algorithm similar one used Douglas-Peucker algorithm. particular, input areal geometry (Polygon MultiPolygon), result number shells holes (rings) input, order. result rings touch number touching point input (although may touch fewer points). preserve_topology = FALSE: Simplifies geometry using standard Douglas-Peucker algorithm. Ensures polygonal geometries returned valid. Simple lines guaranteed remain simple simplification. Note general D-P preserve topology - e.g. polygons can split, collapse lines disappear, holes can created disappear, lines can cross. simplify geometry preserving topology use TopologyPreservingSimplifier. (However, using D-P significantly faster). N.B., preserve_topology = TRUE preserve boundaries shared polygons.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_unary_op.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unary operations on WKB or WKT geometries — g_unary_op","text":"","code":"g1 <- \"POLYGON((0 0,1 1,1 0,0 0))\" g_boundary(g1, as_wkb = FALSE) #> [1] \"LINESTRING (0 0,1 1,1 0,0 0)\"  g2 <- \"POINT (0 0)\" g_buffer(g2, dist = 10, as_wkb = FALSE) #> [1] \"POLYGON ((10 0,9.98629534754574 -0.523359562429438,9.94521895368273 -1.04528463267653,9.87688340595138 -1.56434465040231,9.78147600733806 -2.07911690817759,9.65925826289068 -2.58819045102521,9.51056516295153 -3.09016994374947,9.33580426497202 -3.583679495453,9.13545457642601 -4.067366430758,8.91006524188368 -4.53990499739547,8.66025403784439 -5,8.38670567945424 -5.44639035015027,8.09016994374947 -5.87785252292473,7.77145961456971 -6.29320391049837,7.43144825477394 -6.69130606358858,7.07106781186548 -7.07106781186547,6.69130606358858 -7.43144825477394,6.29320391049838 -7.77145961456971,5.87785252292473 -8.09016994374947,5.44639035015027 -8.38670567945424,5.0 -8.66025403784439,4.53990499739547 -8.91006524188368,4.067366430758 -9.13545457642601,3.583679495453 -9.33580426497202,3.09016994374947 -9.51056516295153,2.58819045102521 -9.65925826289068,2.07911690817759 -9.78147600733806,1.56434465040231 -9.87688340595138,1.04528463267654 -9.94521895368273,0.52335956242944 -9.98629534754574,0.0 -10,-0.523359562429436 -9.98629534754574,-1.04528463267653 -9.94521895368273,-1.56434465040231 -9.87688340595138,-2.07911690817759 -9.78147600733806,-2.58819045102521 -9.65925826289068,-3.09016994374947 -9.51056516295154,-3.583679495453 -9.33580426497202,-4.067366430758 -9.13545457642601,-4.53990499739547 -8.91006524188368,-5 -8.66025403784439,-5.44639035015027 -8.38670567945424,-5.87785252292473 -8.09016994374947,-6.29320391049837 -7.77145961456971,-6.69130606358858 -7.43144825477394,-7.07106781186547 -7.07106781186548,-7.43144825477394 -6.69130606358858,-7.77145961456971 -6.29320391049838,-8.09016994374947 -5.87785252292473,-8.38670567945424 -5.44639035015027,-8.66025403784439 -5,-8.91006524188368 -4.53990499739547,-9.13545457642601 -4.067366430758,-9.33580426497202 -3.58367949545301,-9.51056516295153 -3.09016994374947,-9.65925826289068 -2.58819045102521,-9.78147600733806 -2.0791169081776,-9.87688340595138 -1.56434465040231,-9.94521895368273 -1.04528463267654,-9.98629534754574 -0.523359562429442,-10 -0.0,-9.98629534754574 0.523359562429436,-9.94521895368273 1.04528463267653,-9.87688340595138 1.56434465040231,-9.78147600733806 2.07911690817759,-9.65925826289068 2.5881904510252,-9.51056516295154 3.09016994374947,-9.33580426497202 3.583679495453,-9.13545457642601 4.067366430758,-8.91006524188368 4.53990499739547,-8.66025403784439 5.0,-8.38670567945424 5.44639035015027,-8.09016994374948 5.87785252292473,-7.77145961456971 6.29320391049837,-7.43144825477395 6.69130606358858,-7.07106781186548 7.07106781186547,-6.69130606358858 7.43144825477394,-6.29320391049838 7.77145961456971,-5.87785252292473 8.09016994374947,-5.44639035015028 8.38670567945424,-5 8.66025403784438,-4.53990499739547 8.91006524188368,-4.06736643075801 9.135454576426,-3.58367949545301 9.33580426497202,-3.09016994374948 9.51056516295153,-2.58819045102522 9.65925826289068,-2.0791169081776 9.78147600733806,-1.56434465040231 9.87688340595138,-1.04528463267654 9.94521895368273,-0.523359562429443 9.98629534754574,-0.0 10.0,0.523359562429431 9.98629534754574,1.04528463267653 9.94521895368273,1.56434465040231 9.87688340595138,2.07911690817759 9.78147600733806,2.5881904510252 9.65925826289068,3.09016994374947 9.51056516295154,3.583679495453 9.33580426497202,4.067366430758 9.13545457642601,4.53990499739547 8.91006524188368,4.99999999999999 8.66025403784439,5.44639035015027 8.38670567945424,5.87785252292473 8.09016994374948,6.29320391049837 7.77145961456971,6.69130606358858 7.43144825477395,7.07106781186547 7.07106781186548,7.43144825477394 6.69130606358859,7.77145961456971 6.29320391049838,8.09016994374947 5.87785252292473,8.38670567945424 5.44639035015028,8.66025403784438 5.0,8.91006524188368 4.53990499739547,9.135454576426 4.06736643075801,9.33580426497202 3.58367949545301,9.51056516295153 3.09016994374948,9.65925826289068 2.58819045102522,9.78147600733806 2.0791169081776,9.87688340595138 1.56434465040231,9.94521895368273 1.04528463267654,9.98629534754574 0.523359562429444,10 0))\"  g3 <- \"GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))\" g_convex_hull(g3, as_wkb = FALSE) #> [1] \"POLYGON ((0 0,0 1,1 1,1 0,0 0))\"  g4 <- \"MULTIPOINT(0 0,0 1,1 1,1 0)\" g_delaunay_triangulation(g4, as_wkb = FALSE) #> [1] \"GEOMETRYCOLLECTION (POLYGON ((0 1,0 0,1 0,0 1)),POLYGON ((0 1,1 0,1 1,0 1)))\"  g5 <- \"LINESTRING(0 0,1 1,10 0)\" g_simplify(g5, tolerance = 5, as_wkb = FALSE) #> [1] \"LINESTRING (0 0,10 0)\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_wk2wk.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometry WKB/WKT conversion — g_wk2wk","title":"Geometry WKB/WKT conversion — g_wk2wk","text":"g_wk2wk() converts geometries Well Known Binary (WKB) Well Known Text (WKT) formats. geometry given raw vector WKB converted WKT string, geometry given WKT string converted WKB raw vector. Input may also list WKB raw vectors character vector WKT strings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_wk2wk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometry WKB/WKT conversion — g_wk2wk","text":"","code":"g_wk2wk(geom, as_iso = FALSE, byte_order = \"LSB\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_wk2wk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometry WKB/WKT conversion — g_wk2wk","text":"geom Either raw vector WKB list raw vectors convert WKT, character vector containing one WKT strings convert WKB. as_iso Logical value, TRUE export ISO WKB/WKT (ISO 13249 SQL/MM Part 3), FALSE (default) export \"Extended WKB/WKT\" (see Note). byte_order Character string specifying byte order converting WKB. One \"LSB\" (default) \"MSB\" (uncommon).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_wk2wk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometry WKB/WKT conversion — g_wk2wk","text":"input WKB raw vector list raw vectors, returns character vector WKT strings, length returned vector equal number input raw vectors. input single WKT string, returns raw vector WKB. input character vector containing one WKT string, returns list WKB raw vectors, length returned list equal number input strings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_wk2wk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Geometry WKB/WKT conversion — g_wk2wk","text":"as_iso = FALSE (default), geometries exported extended dimension (Z) WKB/WKT types Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon GeometryCollection. geometry types, equivalent ISO. return value list WKB raw vectors, element returned list contain NA corresponding input string NA empty (\"\"). input list WKB raw vectors, corresponding element returned character vector empty string (\"\") input raw vector length 0 (raw(0)). input list element raw vector, corresponding element returned character vector NA.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_wk2wk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometry WKB/WKT conversion — g_wk2wk","text":"","code":"wkt <- \"POINT (-114 47)\" wkb <- g_wk2wk(wkt) str(wkb) #>  raw [1:21] 01 01 00 00 ... g_wk2wk(wkb) #> [1] \"POINT (-114 47)\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_compute_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a GDAL integer version number from major, minor, revision — gdal_compute_version","title":"Compute a GDAL integer version number from major, minor, revision — gdal_compute_version","text":"gdal_compute_version() computes full integer version number (GDAL_VERSION_NUM) individual components (major, minor, revision). Convenience function checking GDAL version requirement using gdal_version_num().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_compute_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a GDAL integer version number from major, minor, revision — gdal_compute_version","text":"","code":"gdal_compute_version(maj, min, rev)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_compute_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a GDAL integer version number from major, minor, revision — gdal_compute_version","text":"maj Numeric value, major version component (coerced integer truncation). min Numeric value, min version component (coerced integer truncation). rev Numeric value, revision version component (coerced integer truncation).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_compute_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a GDAL integer version number from major, minor, revision — gdal_compute_version","text":"Integer version number compatible gdal_version_num().","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_compute_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a GDAL integer version number from major, minor, revision — gdal_compute_version","text":"","code":"(gdal_version_num() >= gdal_compute_version(3, 7, 0)) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"gdal_formats() returns table supported raster vector formats, information capabilities format driver.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"","code":"gdal_formats(format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"format character string containing driver short name. default, information configured raster vector format drivers returned.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"data frame containing format short name, long name, raster (logical), vector (logical), read/write flag (ro read-, w supports CreateCopy, w+ supports Create), virtual /O supported (logical), subdatasets (logical).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"Virtual /O refers operations GDAL Virtual File Systems. See https://gdal.org/en/stable/user/virtual_file_systems.html#virtual-file-systems.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"","code":"nrow(gdal_formats()) #> [1] 214 head(gdal_formats()) #>   short_name raster vector rw_flag virtual_io subdatasets #> 1        VRT   TRUE  FALSE     rw+       TRUE       FALSE #> 2    DERIVED   TRUE  FALSE      ro      FALSE       FALSE #> 3      GTiff   TRUE  FALSE     rw+       TRUE        TRUE #> 4        COG   TRUE  FALSE       w       TRUE       FALSE #> 5       NITF   TRUE  FALSE     rw+       TRUE        TRUE #> 6     RPFTOC   TRUE  FALSE      ro       TRUE        TRUE #>                                    long_name #> 1                             Virtual Raster #> 2 Derived datasets using VRT pixel functions #> 3                                    GeoTIFF #> 4          Cloud optimized GeoTIFF generator #> 5       National Imagery Transmission Format #> 6           Raster Product Format TOC format  gdal_formats(\"GPKG\") #>   short_name raster vector rw_flag virtual_io subdatasets  long_name #> 1       GPKG   TRUE   TRUE     rw+       TRUE        TRUE GeoPackage"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL version — gdal_version","title":"Get GDAL version — gdal_version","text":"gdal_version() returns character vector GDAL runtime version information. gdal_version_num() returns full version number (gdal_version()[2]) integer value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version()  gdal_version_num()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL version — gdal_version","text":"gdal_version() returns character vector length four containing: \"–version\" - one line version message, e.g., “GDAL 3.6.3, released 2023/03/12” \"GDAL_VERSION_NUM\" - formatted string, e.g., “3060300” GDAL 3.6.3.0 \"GDAL_RELEASE_DATE\" - formatted string, e.g., “20230312” \"GDAL_RELEASE_NAME\" - e.g., “3.6.3” gdal_version_num() returns .integer(gdal_version()[2])","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version() #> [1] \"GDAL 3.8.4, released 2024/02/08\" \"3080400\"                         #> [3] \"20240208\"                        \"3.8.4\"                            gdal_version_num() #> [1] 3080400"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bindings to the GDAL API — gdalraster-package","title":"Bindings to the GDAL API — gdalraster-package","text":"gdalraster interface Geospatial Data Abstraction   Library (GDAL) providing R implementation GDAL Raster Vector   Data Models. Bindings also include GDAL Geometry API, Spatial Reference   Systems API, utilities algorithms, methods coordinate transformation,   Virtual Systems Interface (VSI) API. Calling signatures resemble   native C, C++ Python APIs provided GDAL project.   See https://gdal.org/en/stable/api/ details GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bindings to the GDAL API — gdalraster-package","text":"Core raster functionality contained class GDALRaster several   related stand-alone functions: GDALRaster-class exposed C++ class allows   opening raster dataset calling methods GDALDataset,   GDALDriver GDALRasterBand objects underlying API   (e.g., get/set parameters, read/write pixel data). raster creation: create(),   createCopy(),   rasterFromRaster(),   translate(),   getCreationOptions(),   validateCreationOptions() virtual raster:   autoCreateWarpedVRT(),   buildVRT(),   rasterToVRT() reproject/resample/crop/mosaic: warp() algorithms: dem_proc(),   fillNodata(),   footprint(),   polygonize(),   rasterize(),   sieveFilter(),   GDALRaster$getChecksum() raster attribute tables: buildRAT(),   displayRAT(),   GDALRaster$getDefaultRAT(),   GDALRaster$setDefaultRAT() geotransform conversion:   apply_geotransform(),   get_pixel_line(),   inv_geotransform(),   pixel_extract() data type convenience functions:   dt_size(),   dt_is_complex(),   dt_is_integer(),   dt_is_floating(),   dt_is_signed(),   dt_union(),   dt_union_with_value(),   dt_find(),   dt_find_for_value() Core vector functionality contained class GDALVector several   related stand-alone functions: GDALVector-class exposed C++ class allows   opening vector dataset calling methods specified OGRLayer   object contains (e.g., obtain layer information, set attribute /  spatial filters, read/write feature data). OGR vector utilities:   ogrinfo(),   ogr2ogr(),   ogr_reproject(),   ogr_define,   ogr_manage,   ogr_proc() Bindings GDAL Geometry API, Spatial Reference Systems API, methods   coordinate transformation, Virtual Systems Interface (VSI) API, general   data management system configuration implemented several   stand-alone functions: Geometry API:   bbox_from_wkt(),   bbox_to_wkt(),   bbox_intersect(),   bbox_union(),   bbox_transform(),   g_factory,   g_query,   g_binary_pred,   g_binary_op,   g_measures,   g_unary_op,   g_coords(),   g_envelope(),   g_make_valid(),   g_swap_xy(),   g_transform(),   g_wk2wk(),   geos_version() Spatial Reference Systems API:   srs_convert,   srs_query coordinate transformation:   transform_xy(),   inv_project(),   transform_bounds() data management: addFilesInZip(),   copyDatasetFiles(),   deleteDataset(),   renameDataset(),   bandCopyWholeRaster(),   identifyDriver(),   inspectDataset() Virtual Systems Interface API:   VSIFile-class,   vsi_clear_path_options(),   vsi_copy_file(),   vsi_curl_clear_cache(),   vsi_get_disk_free_space(),   vsi_get_file_metadata(),   vsi_get_fs_options(),   vsi_get_fs_prefixes(),   vsi_is_local(),   vsi_mkdir(),   vsi_read_dir(),   vsi_rename(),   vsi_rmdir(),   vsi_set_path_option(),   vsi_stat(),   vsi_supports_rnd_write(),   vsi_supports_seq_write(),   vsi_sync(),   vsi_unlink(),   vsi_unlink_batch() GDAL configuration:   gdal_version,   gdal_compute_version(),   gdal_formats(),   get_cache_used(),   get_cache_max(),   set_cache_max(),   get_config_option(),   set_config_option(),   get_num_cpus(),   get_usable_physical_ram(),   has_spatialite(),   http_enabled(),   push_error_handler(),   pop_error_handler(),   dump_open_datasets() PROJ configuration:   proj_version(),   proj_search_paths(),   proj_networking() Additional functionality includes: RunningStats-class calculates mean variance one   pass. min, max, sum, count also tracked (efficient summary   statistics data streams). CmbTable-class implements hash table counting   unique combinations integer values. combine() overlays multiple rasters   unique ID assigned unique combination input values. Pixel   counts unique combination obtained, combination IDs   optionally written output raster. calc() evaluates R expression pixel   raster layer stack layers. Individual pixel coordinates available   variables R expression, either x/y raster projected   coordinate system inverse projected longitude/latitude. plot_raster() displays raster data using   base R graphics. Supports single-band grayscale, RGB, color tables   color map functions (e.g., color ramp).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bindings to the GDAL API — gdalraster-package","text":"GDAL : Frank Warmerdam, Even Rouault others   (see https://github.com/OSGeo/gdal/graphs/contributors) R interface/additional functionality: Chris Toney Maintainer: Chris Toney <chris.toney usda.gov>","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bindings to the GDAL API — gdalraster-package","text":"Documentation API bindings borrows heavily GDAL   documentation, (c) 1998-2025, Frank Warmerdam, Even Rouault, others,   MIT license. Sample datasets included package used examples throughout   documentation. sample data sources include: LANDFIRE raster layers describing terrain,   vegetation wildland fuels (LF 2020 version) Landsat C2 Analysis Ready Data   USGS Earth Explorer Monitoring Trends Burn Severity (MTBS)   fire perimeters 1984-2022 NLCD Tree Canopy Cover   produced USDA Forest Service National Park Service Open Data   vector layers roads points--interest Montana State Library boundary layer   Yellowstone National Park Metadata sample datasets inst/extdata/metadata.zip   inst/extdata/ynp_features.zip. system.file() used examples access sample datasets.   enables code run regardless R installed. Users   normally give file names regular full path relative current   working directory. Temporary files created examples cleanup code wrapped   dontshow{}. cleanup code shown   documentation, note code runs default examples run   example().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GEOS version — geos_version","title":"Get GEOS version — geos_version","text":"geos_version() returns version information GEOS library use GDAL. Requires GDAL >= 3.4.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GEOS version — geos_version","text":"","code":"geos_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GEOS version — geos_version","text":"list length four containing: name - string formatted \"major.minor.patch\" major - major version integer minor - minor version integer patch - patch version integer List elements NA GDAL < 3.4.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GEOS version — geos_version","text":"","code":"geos_version() #> $name #> [1] \"3.12.1\" #>  #> $major #> [1] 3 #>  #> $minor #> [1] 12 #>  #> $patch #> [1] 1 #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the list of creation options for a GDAL driver — getCreationOptions","title":"Return the list of creation options for a GDAL driver — getCreationOptions","text":"getCreationOptions() returns list creation options supported GDAL format driver. function wrapper GDALGetDriverCreationOptionList() GDAL API, parsing XML output named list.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the list of creation options for a GDAL driver — getCreationOptions","text":"","code":"getCreationOptions(format, filter = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the list of creation options for a GDAL driver — getCreationOptions","text":"format Format short name (e.g., \"GTiff\"). filter Optional character vector creation option names.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the list of creation options for a GDAL driver — getCreationOptions","text":"named list names matching creation option names, element named list elements $type, $description, $default $values (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the list of creation options for a GDAL driver — getCreationOptions","text":"output nested list names matching creation option names. information creation option named list following elements: $type: character string describing data type, e.g., \"int\", \"float\", \"string\". type \"string-select\" denotes list allowed string values returned character vector $values element (see ). $description: character string describing option, NA description provided GDAL driver. $default: default value option either character string numeric value, NA description provided GDAL driver. $values: character vector allowed string values creation option $type \"string-select\", otherwise NULL option \"string-select\" type. $min: (GDAL >= 3.11) minimum value valid range option, NA provided GDAL driver option numeric type. $max: (GDAL >= 3.11) maximum value valid range option, NA provided GDAL driver option numeric type.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the list of creation options for a GDAL driver — getCreationOptions","text":"","code":"opt <- getCreationOptions(\"GTiff\", \"COMPRESS\") names(opt) #> [1] \"COMPRESS\"  (opt$COMPRESS$type == \"string-select\")  # TRUE #> [1] TRUE opt$COMPRESS$values #>  [1] \"NONE\"         \"LZW\"          \"PACKBITS\"     \"JPEG\"         \"CCITTRLE\"     #>  [6] \"CCITTFAX3\"    \"CCITTFAX4\"    \"DEFLATE\"      \"LZMA\"         \"ZSTD\"         #> [11] \"WEBP\"         \"LERC\"         \"LERC_DEFLATE\" \"LERC_ZSTD\"     all_opt <- getCreationOptions(\"GTiff\") names(all_opt) #>  [1] \"COMPRESS\"                       \"PREDICTOR\"                      #>  [3] \"DISCARD_LSB\"                    \"JPEG_QUALITY\"                   #>  [5] \"JPEGTABLESMODE\"                 \"ZLEVEL\"                         #>  [7] \"LZMA_PRESET\"                    \"ZSTD_LEVEL\"                     #>  [9] \"MAX_Z_ERROR\"                    \"MAX_Z_ERROR_OVERVIEW\"           #> [11] \"WEBP_LOSSLESS\"                  \"WEBP_LEVEL\"                     #> [13] \"NUM_THREADS\"                    \"NBITS\"                          #> [15] \"INTERLEAVE\"                     \"TILED\"                          #> [17] \"TFW\"                            \"RPB\"                            #> [19] \"RPCTXT\"                         \"BLOCKXSIZE\"                     #> [21] \"BLOCKYSIZE\"                     \"PHOTOMETRIC\"                    #> [23] \"SPARSE_OK\"                      \"ALPHA\"                          #> [25] \"PROFILE\"                        \"PIXELTYPE\"                      #> [27] \"BIGTIFF\"                        \"ENDIANNESS\"                     #> [29] \"COPY_SRC_OVERVIEWS\"             \"SOURCE_ICC_PROFILE\"             #> [31] \"SOURCE_PRIMARIES_RED\"           \"SOURCE_PRIMARIES_GREEN\"         #> [33] \"SOURCE_PRIMARIES_BLUE\"          \"SOURCE_WHITEPOINT\"              #> [35] \"TIFFTAG_TRANSFERFUNCTION_RED\"   \"TIFFTAG_TRANSFERFUNCTION_GREEN\" #> [37] \"TIFFTAG_TRANSFERFUNCTION_BLUE\"  \"TIFFTAG_TRANSFERRANGE_BLACK\"    #> [39] \"TIFFTAG_TRANSFERRANGE_WHITE\"    \"STREAMABLE_OUTPUT\"              #> [41] \"GEOTIFF_KEYS_FLAVOR\"            \"GEOTIFF_VERSION\"                 # $description and $default will be NA if no value is provided by the driver # $values will be NULL if the option is not a 'string-select' type  all_opt$PREDICTOR #> $type #> [1] \"int\" #>  #> $description #> [1] \"Predictor Type (1=default, 2=horizontal differencing, 3=floating point prediction)\" #>  #> $default #> [1] NA #>  #> $values #> NULL #>   all_opt$BIGTIFF #> $type #> [1] \"string-select\" #>  #> $description #> [1] \"Force creation of BigTIFF file\" #>  #> $default #> [1] NA #>  #> $values #> [1] \"YES\"       \"NO\"        \"IF_NEEDED\" \"IF_SAFER\"  #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the maximum memory size available for the GDAL block cache — get_cache_max","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"get_cache_max() returns maximum amount memory available GDALRasterBlock caching system caching raster read/write data. Wrapper GDALGetCacheMax64() return value MB default.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"","code":"get_cache_max(units = \"MB\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"units Character string specifying units return value. One \"MB\" (default), \"GB\", \"KB\" \"bytes\" (values \"byte\", \"B\" empty string \"\" also recognized mean bytes).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"numeric value carrying integer64 class attribute. Maximum cache memory available requested units.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"first time function called, read GDAL_CACHEMAX configuration option initialize maximum cache memory. value configuration option can expressed x% usable physical RAM (may potentially used processes). Otherwise expected value MB. GDAL 3.10, default value, GDAL_CACHEMAX set explicitly, 5% usable physical RAM.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"value GDAL_CACHEMAX configuration option consulted first time cache size requested (.e., must set configuration option prior raster /O current session). change value programmatically operation program better use set_cache_max() (case, always given bytes).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the maximum memory size available for the GDAL block cache — get_cache_max","text":"","code":"get_cache_max() #> integer64 #> [1] 838"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the size of memory in use by the GDAL block cache — get_cache_used","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"get_cache_used() returns amount memory currently use GDAL block caching. Wrapper GDALGetCacheUsed64() return value MB default.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"","code":"get_cache_used(units = \"MB\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"units Character string specifying units return value. One \"MB\" (default), \"GB\", \"KB\" \"bytes\" (values \"byte\", \"B\" empty string \"\" also recognized mean bytes).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"numeric value carrying integer64 class attribute. Amount available cache memory currently use requested units.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"","code":"get_cache_used() #> integer64 #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL configuration option — get_config_option","title":"Get GDAL configuration option — get_config_option","text":"get_config_option() gets value GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/en/stable/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL configuration option — get_config_option","text":"","code":"get_config_option(key)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GDAL configuration option — get_config_option","text":"key Character name configuration option.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL configuration option — get_config_option","text":"Character. value (key, value) option previously set set_config_option(). empty string (\"\") returned key found.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL configuration option — get_config_option","text":"","code":"## this option is set during initialization of the gdalraster package get_config_option(\"OGR_CT_FORCE_TRADITIONAL_GIS_ORDER\") #> [1] \"YES\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of processors detected by GDAL — get_num_cpus","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"get_num_cpus() returns number processors detected GDAL. Wrapper CPLGetNumCPUs() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"","code":"get_num_cpus()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"Integer scalar, number CPUs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"","code":"get_num_cpus() #> [1] 4"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"get_pixel_line() converts geospatial coordinates pixel/line (raster column, row numbers). upper left corner pixel raster origin (0,0) column, row increasing left right, top bottom.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"get_pixel_line(xy, gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"xy Numeric matrix geospatial x, y coordinates spatial reference system gt (two-column data frame coerced numeric matrix, vector x, y one coordinate). gt Either numeric vector length six containing affine geotransform raster, object class GDALRaster geotransform obtained (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"Integer matrix raster pixel/line.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"function applies inverse geotransform input points. gt given numeric vector, bounds checking done (.e., min pixel/line less zero max pixel/line greater raster x/y size). gt obtained object class GDALRaster, NA returned points fall outside raster extent warning emitted giving number points outside. latter case equivalent calling $get_pixel_line() class method GDALRaster object (see Examples).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") # id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901  raster_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, raster_file) gt <- ds$getGeoTransform() get_pixel_line(pts[, -1], gt) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39  # or, using the class method ds$get_pixel_line(pts[, -1]) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39  # add a point outside the raster extent pts[11, ] <- c(11, 323318, 5105104) get_pixel_line(pts[, -1], gt) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39 #> [11,]   -6   -1  # with bounds checking on the raster extent ds$get_pixel_line(pts[, -1]) #> Warning: 1 point(s) were outside the raster extent, NA returned #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39 #> [11,]   NA   NA  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":null,"dir":"Reference","previous_headings":"","what":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"get_usable_physical_ram() returns total physical RAM, usable process, bytes. limit 2 GB 32 bit processes. Starting GDAL 2.4.0, also take account resource limits (virtual memory) Posix systems. Starting GDAL 3.6.1, also take account RLIMIT_RSS Linux. Wrapper CPLGetUsablePhysicalRAM() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"","code":"get_usable_physical_ram()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"Numeric scalar, number bytes bit64::integer64 type (0 case failure).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"memory may already partly used processes.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"","code":"get_usable_physical_ram() #> integer64 #> [1] 16772685824"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Is GEOS available? — has_geos","title":"Is GEOS available? — has_geos","text":"has_geos() returns logical value indicating whether GDAL built GEOS library. GDAL built GEOS system requirement gdalraster 1.10.0, function always return TRUE (may removed future version).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is GEOS available? — has_geos","text":"","code":"has_geos()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is GEOS available? — has_geos","text":"Logical. TRUE GEOS available, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is GEOS available? — has_geos","text":"","code":"has_geos() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":null,"dir":"Reference","previous_headings":"","what":"Is SpatiaLite available? — has_spatialite","title":"Is SpatiaLite available? — has_spatialite","text":"has_spatialite() returns logical value indicating whether GDAL built support SpatiaLite library. SpatiaLite extends SQLite core support full Spatial SQL capabilities.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is SpatiaLite available? — has_spatialite","text":"","code":"has_spatialite()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is SpatiaLite available? — has_spatialite","text":"Logical scalar. TRUE SpatiaLite available GDAL.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is SpatiaLite available? — has_spatialite","text":"GDAL supports executing SQL statements datasource. file formats (e.g. Shapefiles, GeoJSON, FlatGeobuf files), built-OGR SQL dialect used default. also possible request alternate \"SQLite\"  dialect, use SQLite engine evaluate commands GDAL datasets. assumes GDAL built support SQLite, preferably Spatialite support benefit spatial functions.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is SpatiaLite available? — has_spatialite","text":"GDAL/OGR drivers database systems, e.g., PostgreSQL / PostGIS, Oracle Spatial, SQLite / Spatialite RDBMS, GeoPackage, etc., override GDALDataset::ExecuteSQL() function dedicated implementation , default, pass SQL statements directly underlying RDBMS. cases SQL syntax varies particulars OGR SQL. Also, anything possible SQL can accomplished particular databases. drivers, also possible explicitly request OGRSQL SQLite dialects, although performance generally much less native SQL engine database systems.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is SpatiaLite available? — has_spatialite","text":"","code":"has_spatialite() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"http_enabled() returns TRUE libcurl support enabled. Wrapper CPLHTTPEnabled() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"","code":"http_enabled()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"Logical scalar, TRUE GDAL built libcurl support.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"","code":"http_enabled() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/identifyDriver.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the GDAL driver that can open a dataset — identifyDriver","title":"Identify the GDAL driver that can open a dataset — identifyDriver","text":"identifyDriver() try identify driver can open passed file name invoking Identify method registered GDALDriver turn. short name first driver successfully identifies file name returned character string. drivers fail NULL returned. Wrapper GDALIdentifyDriverEx() GDAL C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/identifyDriver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the GDAL driver that can open a dataset — identifyDriver","text":"","code":"identifyDriver(   filename,   raster = TRUE,   vector = TRUE,   allowed_drivers = NULL,   file_list = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/identifyDriver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the GDAL driver that can open a dataset — identifyDriver","text":"filename Character string containing name file access. may refer physical file, instead contain information driver access dataset (e.g., connection string, URL, etc.) raster Logical value indicating whether include raster format drivers search, TRUE default. May set FALSE include vector drivers. vector Logical value indicating whether include vector format drivers search, TRUE default. May set FALSE include raster drivers. allowed_drivers Optional character vector driver short names must considered. Set NULL consider candidate drivers (default). file_list Optional character vector filenames, including auxiliary main filename (see Note). May contain input filename required. Defaults NULL.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/identifyDriver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the GDAL driver that can open a dataset — identifyDriver","text":"character string short name first driver successfully identifies input file name, NULL failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/identifyDriver.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify the GDAL driver that can open a dataset — identifyDriver","text":"order reduce need searches touch file system machinery operating system, possible give optional list files. list files level file system target file, including target file. filenames include path components. target object filesystem semantics file list NULL. least one raster vector arguments must TRUE.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/identifyDriver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the GDAL driver that can open a dataset — identifyDriver","text":"","code":"src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  identifyDriver(src) |> gdal_formats() #>   short_name raster vector rw_flag virtual_io subdatasets  long_name #> 1       GPKG   TRUE   TRUE     rw+       TRUE        TRUE GeoPackage"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inspectDataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain information about a GDAL raster or vector dataset — inspectDataset","title":"Obtain information about a GDAL raster or vector dataset — inspectDataset","text":"inspectDataset() returns information format content dataset. function first calls identifyDriver(), opens dataset raster /vector obtain information content. return value list named elements.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inspectDataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain information about a GDAL raster or vector dataset — inspectDataset","text":"","code":"inspectDataset(filename, ...)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inspectDataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain information about a GDAL raster or vector dataset — inspectDataset","text":"filename Character string containing name file access. may refer physical file, instead contain information driver access dataset (e.g., connection string, URL, etc.) ... Additional arguments passed identifyDriver().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inspectDataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain information about a GDAL raster or vector dataset — inspectDataset","text":"list following named elements: $format: character string, format short name $supports_raster: logical, TRUE format supports raster data $contains_raster: logical, TRUE raster dataset source contains raster subdatasets $supports_subdatasets: logical, TRUE format supports raster subdatasets $contains_subdatasets: logical, TRUE source contains subdatasets $subdataset_names: character vector containing subdataset names, empty vector subdatasets supported present $supports_vector: logical, TRUE format supports vector data $contains_vector: logical, TRUE source contains one vector layers $layer_names: character vector containing vector layer names, empty vector format support vector source contain vector layers","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inspectDataset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Obtain information about a GDAL raster or vector dataset — inspectDataset","text":"Subdataset names character strings can used instantiate GDALRaster objects. See https://gdal.org/en/stable/en/latest/user/raster_data_model.html#subdatasets-domain. PostgreSQL / PostGISRaster handled special case. additional arguments raster vector given identifyDriver(), raster = FALSE assumed.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inspectDataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain information about a GDAL raster or vector dataset — inspectDataset","text":"","code":"f <- system.file(\"extdata/ynp_features.zip\", package = \"gdalraster\") ynp_dsn <- file.path(\"/vsizip\", f, \"ynp_features.gpkg\")  inspectDataset(ynp_dsn) #> $format #> [1] \"GPKG\" #>  #> $supports_raster #> [1] TRUE #>  #> $contains_raster #> [1] TRUE #>  #> $supports_subdatasets #> [1] TRUE #>  #> $contains_subdatasets #> [1] TRUE #>  #> $subdataset_names #> [1] \"GPKG:/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg:operational_roads\"   #> [2] \"GPKG:/vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg:forest_canopy_cover\" #>  #> $supports_vector #> [1] TRUE #>  #> $contains_vector #> [1] TRUE #>  #> $layer_names #> [1] \"ynp_bnd\"            \"roads\"              \"points_of_interest\" #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert geotransform — inv_geotransform","title":"Invert geotransform — inv_geotransform","text":"inv_geotransform() inverts vector geotransform coefficients. converts equation : raster pixel/line (column/row) -> geospatial x/y coordinate : geospatial x/y coordinate -> raster pixel/line (column/row)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert geotransform — inv_geotransform","text":"","code":"inv_geotransform(gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert geotransform — inv_geotransform","text":"gt Numeric vector length six containing geotransform invert.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert geotransform — inv_geotransform","text":"Numeric vector length six containing inverted geotransform. output vector contain NAs input geotransform uninvertable.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invert geotransform — inv_geotransform","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) invgt <- ds$getGeoTransform() |> inv_geotransform() ds$close()  ptX = 324181.7 ptY = 5103901.4  ## for a point x, y in the spatial reference system of elev_file ## raster pixel (column number): pixel <- floor(invgt[1] +                invgt[2] * ptX +                invgt[3] * ptY)  ## raster line (row number): line <- floor(invgt[4] +               invgt[5] * ptX +               invgt[6] * ptY)  ## get_pixel_line() applies this conversion"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"inv_project() transforms geospatial x/y coordinates longitude/latitude geographic coordinate system used given projected spatial reference system. output long/lat can optionally set specific geographic coordinate system specifying well known name (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"inv_project(pts, srs, well_known_gcs = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"pts data frame numeric matrix containing geospatial point coordinates, point geometries list WKB raw vectors character vector WKT strings. data frame matrix, number columns must either two (x, y), three (x, y, z) four (x, y, z, t). May also given numeric vector one point (xy, xyz, xyzt). srs Character string specifying projected spatial reference system pts. May WKT format formats supported srs_to_wkt(). well_known_gcs Optional character string containing supported well known name geographic coordinate system (see Details supported values).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"Numeric matrix longitude, latitude (potentially also z, z t columns).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"default, geographic coordinate system projection specified srs used. specific geographic coordinate system desired, well_known_gcs can set one values : coordinates returned inv_project()always longitude, latitude order (traditional GIS order) regardless axis order defined GCS names .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"Input points contain missing values (NA) assigned NA output warning emitted. Input points fail transform GDAL API call also assigned NA output specific warning indicating case.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") # id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 inv_project(pts[,-1], \"EPSG:26912\") #>            [,1]     [,2] #>  [1,] -113.2671 46.06118 #>  [2,] -113.2732 46.05827 #>  [3,] -113.2815 46.06076 #>  [4,] -113.2598 46.06280 #>  [5,] -113.2531 46.05276 #>  [6,] -113.2460 46.06682 #>  [7,] -113.2561 46.06862 #>  [8,] -113.2461 46.05405 #>  [9,] -113.2279 46.07214 #> [10,] -113.2733 46.06607"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vector data between different formats — ogr2ogr","title":"Convert vector data between different formats — ogr2ogr","text":"ogr2ogr() wrapper ogr2ogr command-line utility (see https://gdal.org/en/stable/programs/ogr2ogr.html). function can used convert simple features data file formats. can also perform various operations process, spatial attribute selection, reducing set attributes, setting output coordinate system even reprojecting features translation. Refer GDAL documentation URL description command-line arguments can passed cl_arg.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vector data between different formats — ogr2ogr","text":"","code":"ogr2ogr(   src_dsn,   dst_dsn,   src_layers = NULL,   cl_arg = NULL,   open_options = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vector data between different formats — ogr2ogr","text":"src_dsn Character string. Data source name source vector dataset. dst_dsn Character string. Data source name destination vector dataset. src_layers Optional character vector layer names source dataset. Defaults layers. cl_arg Optional character vector command-line arguments GDAL ogr2ogr command-line utility (see URL ). open_options Optional character vector dataset open options.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vector data between different formats — ogr2ogr","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert vector data between different formats — ogr2ogr","text":"progress reporting, see command-line argument -progress: Display progress terminal. works input layers \"fast feature count\" capability.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vector data between different formats — ogr2ogr","text":"","code":"src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # Convert GeoPackage to Shapefile ynp_shp <- file.path(tempdir(), \"ynp_fires.shp\") ogr2ogr(src, ynp_shp, src_layers = \"mtbs_perims\")  # Reproject to WGS84 ynp_gpkg <- file.path(tempdir(), \"ynp_fires.gpkg\") args <- c(\"-t_srs\", \"EPSG:4326\", \"-nln\", \"fires_wgs84\") ogr2ogr(src, ynp_gpkg, cl_arg = args)  # Clip to a bounding box (xmin, ymin, xmax, ymax in the source SRS) # This will select features whose geometry intersects the bounding box. # The geometries themselves will not be clipped unless \"-clipsrc\" is # specified. # The source SRS can be overridden with \"-spat_srs\" \"<srs_def>\" # Using -update mode to write a new layer in the existing DSN bb <- c(469685.97, 11442.45, 544069.63, 85508.15) args <- c(\"-update\", \"-nln\", \"fires_clip\", \"-spat\", bb) ogr2ogr(src, ynp_gpkg, cl_arg = args)  # Filter features by a -where clause sql <- \"ig_year >= 2000 ORDER BY ig_year\" args <- c(\"-update\", \"-nln\", \"fires_2000-2020\", \"-where\", sql) ogr2ogr(src, ynp_gpkg, src_layers = \"mtbs_perims\", cl_arg = args)  # Dissolve features based on a shared attribute value if (has_spatialite()) {     sql <- \"SELECT ig_year, ST_Union(geom) AS geom FROM mtbs_perims GROUP BY ig_year\"     args <- c(\"-update\", \"-sql\", sql, \"-dialect\", \"SQLITE\")     args <- c(args, \"-nlt\", \"MULTIPOLYGON\", \"-nln\", \"dissolved_on_year\")     ogr2ogr(src, ynp_gpkg, cl_arg = args) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":null,"dir":"Reference","previous_headings":"","what":"OGR feature class definition for vector data — ogr_define","title":"OGR feature class definition for vector data — ogr_define","text":"topic contains documentation helper functions defining OGR feature class. named list containing zero attribute field definitions, along one geometry field definitions, comprise OGR feature class definition (.k.. layer definition). ogr_def_layer() initializes list geometry type (optionally) spatial reference system. Attribute fields may added layer definition. ogr_def_field() creates attribute field definition, list containing field's data type potentially optional field properties. ogr_def_geom_field() similarly creates geometry field definition. might used certain vector formats support multiple geometry columns (e.g., PostGIS).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OGR feature class definition for vector data — ogr_define","text":"","code":"ogr_def_layer(geom_type, geom_fld_name = \"geom\", srs = NULL)  ogr_def_field(   fld_type,   fld_subtype = NULL,   fld_width = NULL,   fld_precision = NULL,   is_nullable = NULL,   is_unique = NULL,   default_value = NULL )  ogr_def_geom_field(geom_type, srs = NULL, is_nullable = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OGR feature class definition for vector data — ogr_define","text":"geom_type Character string specifying geometry type (see Details). geom_fld_name Character string specifying geometry field name Defaults \"geom\". srs Character string containing spatial reference system definition OGC WKT well-known format (e.g., input formats usable srs_to_wkt()). fld_type Character string containing name field data type (e.g., OFTInteger, OFTInteger64, OFTReal, OFTString). fld_subtype Character string containing name field subtype. One  OFSTNone (default), OFSTBoolean, OFSTInt16, OFSTFloat32, OFSTJSON, OFSTUUID. fld_width Optional integer value specifying max number characters. fld_precision Optional integer value specifying number digits decimal point. is_nullable Optional NULL field constraint (logical value). Defaults TRUE. is_unique Optional UNIQUE constraint field (logical value). Defaults FALSE. default_value Optional default value field character string.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OGR feature class definition for vector data — ogr_define","text":"features OGR Layer share common schema (feature class), modeled GDAL OGRFeatureDefn class. feature class definition includes set attribute fields data types geometry field(s). R, feature class definition represented named list, names attribute/geometry field names, list element holding attribute geometry field definition. definition attribute field named list elements:   OGR field type specified character string possible values: OFTInteger, OFTIntegerList, OFTReal, OFTRealList, OFTString, OFTStringList, OFTBinary,  OFTDate, OFTTime, OFTDateTime, OFTInteger64, OFTInteger64List. optional field subtype specified character string possible values: OFSTNone, OFSTBoolean, OFSTInt16, OFSTFloat32, OFSTJSON, OFSTUUID. default, fields nullable, unique constraint, ignored (.e., omitted fetching features). -null unique constraints supported format drivers. default field value taken account format drivers (generally SQL interface) support field creation time. given field definition, $default must character string. accepted values \"NULL\", numeric value (e.g., \"0\"), literal value enclosed single quote characters (e.g., \"'default value'\", inner single quote characters escaped repetition single quote character), \"CURRENT_TIMESTAMP\", \"CURRENT_TIME\", \"CURRENT_DATE\" driver-specific expression (might ignored drivers). datetime literal value, format \"'YYYY/MM/DD HH:MM:SS[.sss]'\" (considered UTC time). definition geometry field named list elements:   Typically, one geometry field layer, formats support one geometry column per table (e.g., \"PostgreSQL / PostGIS\" \"SQLite / Spatialite RDBMS\"). Geometry types specified character string containing OGC WKT. Common types include: Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon. See GDAL documentation list supported geometry types:https://gdal.org/en/stable/api/vector_c_api.html#_CPPv418OGRwkbGeometryType Format drivers may may support -null constraints attribute geometry fields. support creating fields -null constraints, generally creating features layer. cases, -null constraint may available layer creation option. example, GeoPackage format layer creation option GEOMETRY_NULLABLE=[YES/].","code":"$type       : OGR Field Type (\"OFTReal\", \"OFTString\" etc.) $subtype    : optional (\"OFSTBoolean\", ...) $width      : optional max number of characters $precision  : optional number of digits after the decimal point $is_nullable: optional NOT NULL constraint (logical value) $is_unique  : optional UNIQUE constraint (logical value) $default    : optional default value as character string $is_geom    : FALSE (the default) for attribute fields $type       : geom type (\"Point\", \"Polygon\", etc.) $srs        : optional spatial reference as WKT string $is_nullable: optional NOT NULL constraint (logical value) $is_geom    : TRUE (required) for geometry fields"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"OGR feature class definition for vector data — ogr_define","text":"feature id (FID) special property feature treated attribute feature. Additional information given GDAL documentation OGR SQL SQLite SQL dialects. Implications SQL statements result sets may depend dialect used. vector formats support schema definition prior creating features. example, GeoJSON Feature object member name properties. specification require Feature objects collection schema properties, require Feature objects collection geometry type (https://geojson.org/).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OGR feature class definition for vector data — ogr_define","text":"","code":"# create a SQLite data source, with SpatiaLite extensions if available dsn <- file.path(tempdir(), \"test.sqlite\") opt <- NULL if (has_spatialite()) {   opt <- \"SPATIALITE=YES\" }  # This creates an empty data source. Note that we could also create a layer # at the same time in this function call, but for this example we do that # separately, to show creation of a layer on an existing data source. ogr_ds_create(\"SQLite\", dsn, dsco = opt) #> [1] TRUE  # define a layer defn <- ogr_def_layer(\"Point\", srs = \"EPSG:4326\") defn$my_id <- ogr_def_field(\"OFTInteger64\") defn$my_description <- ogr_def_field(\"OFTString\")  # create a layer in the existing data source ogr_ds_test_cap(dsn)$CreateLayer  # TRUE #> [1] TRUE  ogr_layer_create(dsn, \"layer1\", layer_defn = defn) #> [1] TRUE  ogr_ds_layer_names(dsn) #> [1] \"layer1\"  ogr_layer_field_names(dsn, \"layer1\") #> [1] \"my_id\"          \"my_description\" \"GEOMETRY\"        deleteDataset(dsn) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for managing vector data sources — ogr_manage","title":"Utility functions for managing vector data sources — ogr_manage","text":"set functions can used create new vector datasets, test existence dataset/layer/field, test dataset layer capabilities, create new layers existing dataset, delete layers, create new attribute geometry fields existing layer, rename delete fields, edit data SQL statements.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for managing vector data sources — ogr_manage","text":"","code":"ogr_ds_exists(dsn, with_update = FALSE)  ogr_ds_format(dsn)  ogr_ds_test_cap(dsn, with_update = TRUE)  ogr_ds_create(   format,   dsn,   layer = NULL,   layer_defn = NULL,   geom_type = NULL,   srs = NULL,   fld_name = NULL,   fld_type = NULL,   dsco = NULL,   lco = NULL,   overwrite = FALSE,   return_obj = FALSE )  ogr_ds_layer_count(dsn)  ogr_ds_layer_names(dsn)  ogr_layer_exists(dsn, layer)  ogr_layer_test_cap(dsn, layer = NULL, with_update = TRUE)  ogr_layer_create(   dsn,   layer,   layer_defn = NULL,   geom_type = NULL,   srs = NULL,   lco = NULL,   return_obj = FALSE )  ogr_layer_field_names(dsn, layer = NULL)  ogr_layer_rename(dsn, layer, new_name)  ogr_layer_delete(dsn, layer)  ogr_field_index(dsn, layer, fld_name)  ogr_field_create(   dsn,   layer,   fld_name,   fld_defn = NULL,   fld_type = \"OFTInteger\",   fld_subtype = \"OFSTNone\",   fld_width = 0L,   fld_precision = 0L,   is_nullable = TRUE,   is_unique = FALSE,   default_value = \"\" )  ogr_geom_field_create(   dsn,   layer,   fld_name,   geom_fld_defn = NULL,   geom_type = NULL,   srs = NULL,   is_nullable = TRUE )  ogr_field_rename(dsn, layer, fld_name, new_name)  ogr_field_delete(dsn, layer, fld_name)  ogr_execute_sql(dsn, sql, spatial_filter = NULL, dialect = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for managing vector data sources — ogr_manage","text":"dsn Character string. vector data source name, e.g., filename database connection string. with_update Logical scalar. TRUE request update access opening dataset, FALSE open read-. format GDAL short name vector format character string. Examples common output formats include: \"GPKG\", \"FlatGeobuf\", \"ESRI Shapefile\", \"SQLite\". layer Character string layer name vector dataset. layer argument may given empty string (\"\") case first layer index opened (except ogr_layer_delete() ogr_layer_rename() layer name must specified). layer_defn feature class definition layer list zero attribute field definitions, least one geometry field definition (see ogr_define). field definition list named elements containing values field $type properties. layer_defn given, used additional parameters passed relate feature class definition ignored (.e., geom_type srs, well fld_name fld_type ogr_ds_create()). first geometry field definition layer_defn defines geometry type spatial reference system layer (geom field definition must contain $type, also contain $srs creating layer feature class definition). geom_type Character string specifying geometry type (see Details). srs Character string containing spatial reference system definition OGC WKT well-known format (e.g., input formats usable srs_to_wkt()). fld_name Character string containing name attribute field layer. fld_type Character string containing name field data type (e.g., OFTInteger, OFTReal, OFTString). dsco Optional character vector format-specific creation options dsn (\"NAME=VALUE\" pairs). lco Optional character vector format-specific creation options layer (\"NAME=VALUE\" pairs). overwrite Logical scalar. TRUE overwrite dsn already exists calling ogr_ds_create(). Default FALSE. return_obj Logical scalar. TRUE, object class GDALVector open newly created layer returned. Defaults FALSE. Must used either layer layer_defn arguments. new_name Character string containing new name assign. fld_defn field definition list (see ogr_def_field()). Additional arguments ogr_field_create() ignored fld_defn given. fld_subtype Character string containing name field subtype. One  OFSTNone (default), OFSTBoolean, OFSTInt16, OFSTFloat32, OFSTJSON, OFSTUUID. fld_width Optional integer scalar specifying max number characters. fld_precision Optional integer scalar specifying number digits decimal point. is_nullable Optional NULL field constraint (logical scalar). Defaults TRUE. is_unique Optional UNIQUE constraint field (logical scalar). Defaults FALSE. default_value Optional default value field character string. geom_fld_defn geometry field definition list (see ogr_def_geom_field()). Additional arguments ogr_geom_field_create() ignored geom_fld_defn given. sql Character string containing SQL statement (see Note). spatial_filter Either numeric vector length four containing bounding box (xmin, ymin, xmax, ymax), character string containing geometry OGC WKT, representing spatial filter. dialect Character string specifying SQL dialect use. OGR SQL engine (\"OGRSQL\") used default value given. \"SQLite\" dialect can also used (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions for managing vector data sources — ogr_manage","text":"functions complementary ogrinfo() ogr2ogr() vector data management. Bindings OGR wrap portions GDAL Vector API (ogr_core.h ogr_api.h, https://gdal.org/en/stable/api/vector_c_api.html). ogr_ds_exists() tests whether vector dataset can opened given data source name (DSN), potentially testing update access. Returns logical scalar. ogr_ds_format() returns character string containing short name format driver given DSN, NULL dataset opened vector source. ogr_ds_test_cap() tests capabilities vector data source, attempting open update access default. Returns list capabilities values TRUE FALSE, NULL returned dsn opened requested access. Wrapper GDALDatasetTestCapability() GDAL API. returned list contains following named elements: CreateLayer: TRUE datasource can create new layers DeleteLayer: TRUE datasource can delete existing layers CreateGeomFieldAfterCreateLayer: TRUE layers datasource support geometry field creation just layer creation CurveGeometries: TRUE datasource supports curve geometries Transactions: TRUE datasource supports (efficient) transactions EmulatedTransactions: TRUE datasource supports transactions emulation RandomLayerRead: TRUE datasource dedicated GetNextFeature() implementation, potentially returning features layers non-sequential way RandomLayerWrite: TRUE datasource supports calling CreateFeature() layers non-sequential way ogr_ds_create() creates new vector datasource, optionally also creating layer, optionally creating one fields layer. attribute fields geometry field(s) create can specified feature class definition (layer_defn list, see ogr_define), alternatively, giving geom_type srs, optionally along one fld_name fld_type created layer. default, returns logical TRUE indicating success (output written dst_filename), object class GDALVector output layer returned return_obj = TRUE. error raised operation fails. ogr_ds_layer_count() returns number layers vector dataset. ogr_ds_layer_names() returns character vector layer names vector dataset, NULL layers found. ogr_layer_exists() tests whether layer can accessed name given vector dataset. Returns logical scalar. ogr_layer_test_cap() tests whether layer supports named capabilities, attempting open dataset update access default. Returns list capabilities values TRUE FALSE. NULL returned dsn opened requested access, layer found. returned list contains following named elements: RandomRead, SequentialWrite, RandomWrite, UpsertFeature, FastSpatialFilter, FastFeatureCount, FastGetExtent, FastSetNextByIndex, CreateField, CreateGeomField, DeleteField, ReorderFields, AlterFieldDefn, AlterGeomFieldDefn, IgnoreFields, DeleteFeature, Rename, StringsAsUTF8, CurveGeometries. See GDAL documentation OGR_L_TestCapability(). ogr_layer_create() creates new layer existing vector data source, specified geometry type spatial reference definition. function also accepts feature class definition given list field names definitions (see ogr_define). (Note: use ogr_ds_create() create single-layer formats \"ESRI Shapefile\", \"FlatGeobuf\", \"GeoJSON\", etc.) default, returns logical TRUE indicating success, object class GDALVector returned return_obj = TRUE. error raised operation fails. ogr_layer_field_names() returns character vector field names layer, NULL fields found. first layer index opened NULL given layer argument. ogr_layer_rename() renames layer vector dataset. operation implemented layers expose Rename capability (see ogr_layer_test_cap() ). operation fail layer new name already exists. Returns logical scalar, TRUE indicating success. Requires GDAL >= 3.5. ogr_layer_delete() deletes existing layer vector dataset. Returns logical scalar, TRUE indicating success. ogr_field_index() tests existence attribute field name. Returns field index layer (0-based), -1 field exist. ogr_field_create() creates new attribute field specified data type given DSN/layer. Several optional field properties can specified addition type. Returns logical scalar, TRUE indicating success. ogr_geom_field_create() creates new geometry field specified type given DSN/layer. Returns logical scalar, TRUE indicating success. ogr_field_rename() renames existing field vector layer. format drivers support function. drivers may support renaming field still features layer. AlterFieldDefn relevant layer capability check. Returns logical scalar, TRUE indicating success. ogr_field_delete() deletes existing field vector layer. format drivers support function. drivers may support deleting field still features layer. Returns logical scalar, TRUE indicating success. ogr_execute_sql() executes SQL statement data store. function can used modify schema edit data using SQL (e.g., ALTER TABLE, DROP TABLE, CREATE INDEX, DROP INDEX, INSERT, UPDATE, DELETE), execute query (.e., SELECT). Returns NULL (invisibly) statements error, results set, object class GDALVector representing results set query. Wrapper GDALDatasetExecuteSQL() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Utility functions for managing vector data sources — ogr_manage","text":"OGR SQL document linked See Also contains information SQL dialect supported internally GDAL/OGR. format drivers (e.g., PostGIS) pass SQL directly underlying RDBMS (unless OGRSQL explicitly passed dialect). SQLite dialect can also requested SQLite string passed dialect argument ogr_execute_sql(). assumes GDAL/OGR built support SQLite, preferably also Spatialite support benefit spatial functions. GDAL document SQLite dialect detailed information. SQL dialects may also present vector formats. example, \"INDIRECT_SQLITE\" dialect might potentially used GeoPackage format (https://gdal.org/en/stable/drivers/vector/gpkg.html#sql). function ogrinfo() can also used edit data SQL statements (GDAL >= 3.7). name geometry column layer empty (\"\") formats ESRI Shapefile FlatGeobuf. Implications SQL may depend dialect used. See GDAL documentation \"OGR SQL\" \"SQLite\" dialects details.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions for managing vector data sources — ogr_manage","text":"","code":"## Create GeoPackage and manage schema dsn <- file.path(tempdir(), \"test1.gpkg\") ogr_ds_create(\"GPKG\", dsn) #> [1] TRUE ogr_ds_exists(dsn, with_update = TRUE) #> [1] TRUE # dataset capabilities ogr_ds_test_cap(dsn) #> $CreateLayer #> [1] TRUE #>  #> $DeleteLayer #> [1] TRUE #>  #> $CreateGeomFieldAfterCreateLayer #> [1] FALSE #>  #> $CurveGeometries #> [1] TRUE #>  #> $Transactions #> [1] TRUE #>  #> $EmulatedTransactions #> [1] FALSE #>  #> $RandomLayerRead #> [1] FALSE #>  #> $RandomLayerWrite #> [1] TRUE #>   ogr_layer_create(dsn, layer = \"layer1\", geom_type = \"Polygon\",                  srs = \"EPSG:5070\") #> [1] TRUE  ogr_field_create(dsn, layer = \"layer1\",                  fld_name = \"field1\",                  fld_type = \"OFTInteger64\",                  is_nullable = FALSE) #> [1] TRUE ogr_field_create(dsn, layer = \"layer1\",                  fld_name = \"field2\",                  fld_type = \"OFTString\") #> [1] TRUE  ogr_ds_layer_count(dsn) #> [1] 1 ogr_ds_layer_names(dsn) #> [1] \"layer1\" ogr_layer_field_names(dsn, layer = \"layer1\") #> [1] \"field1\" \"field2\" \"geom\"    # delete a field if (ogr_layer_test_cap(dsn, \"layer1\")$DeleteField) {   ogr_field_delete(dsn, layer = \"layer1\", fld_name = \"field2\") } #> [1] TRUE  ogr_layer_field_names(dsn, \"layer1\") #> [1] \"field1\" \"geom\"    # define a feature class and create layer defn <- ogr_def_layer(\"Point\", srs = epsg_to_wkt(4326)) # add the attribute fields defn$id_field <- ogr_def_field(fld_type = \"OFTInteger64\",                                is_nullable = FALSE,                                is_unique = TRUE) defn$str_field <- ogr_def_field(fld_type = \"OFTString\",                                 fld_width = 25,                                 is_nullable = FALSE,                                 default_value = \"'a default string'\") defn$numeric_field <- ogr_def_field(fld_type = \"OFTReal\",                                     default_value = \"0.0\")  ogr_layer_create(dsn, layer = \"layer2\", layer_defn = defn) #> [1] TRUE ogr_ds_layer_names(dsn) #> [1] \"layer1\" \"layer2\" ogr_layer_field_names(dsn, layer = \"layer2\") #> [1] \"id_field\"      \"str_field\"     \"numeric_field\" \"geom\"           # add a field using SQL instead ogr_execute_sql(dsn, sql = \"ALTER TABLE layer2 ADD field4 float\") #> info: open dataset successful on DSN: #>   '/tmp/RtmplY4zfC/test1.gpkg'  # rename a field if (ogr_layer_test_cap(dsn, \"layer1\")$AlterFieldDefn) {   ogr_field_rename(dsn, layer = \"layer2\",                    fld_name = \"field4\",                    new_name = \"renamed_field\") } #> [1] TRUE ogr_layer_field_names(dsn, layer = \"layer2\") #> [1] \"id_field\"      \"str_field\"     \"numeric_field\" \"renamed_field\" #> [5] \"geom\"           # GDAL >= 3.7 if (gdal_version_num() >= gdal_compute_version(3, 7, 0))   ogrinfo(dsn, \"layer2\") #> INFO: Open of `/tmp/RtmplY4zfC/test1.gpkg' #>       using driver `GPKG' successful. #>  #> Layer name: layer2 #> Geometry: Point #> Feature Count: 0 #> Layer SRS WKT: #> GEOGCRS[\"WGS 84\", #>     DATUM[\"World Geodetic System 1984\", #>         ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>             LENGTHUNIT[\"metre\",1]]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     USAGE[ #>         SCOPE[\"Horizontal component of 3D system.\"], #>         AREA[\"World.\"], #>         BBOX[-90,-180,90,180]], #>     ID[\"EPSG\",4326]] #> Data axis to CRS axis mapping: 2,1 #> FID Column = fid #> Geometry Column = geom #> id_field: Integer64 (0.0) UNIQUE NOT NULL #> str_field: String (25.0) NOT NULL DEFAULT 'a default string' #> numeric_field: Real (0.0) DEFAULT 0.0 #> renamed_field: Real(Float32) (0.0)  ## Edit data using SQL src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") perims_shp <- file.path(tempdir(), \"mtbs_perims.shp\") ogr2ogr(src_dsn = src, dst_dsn = perims_shp, src_layers = \"mtbs_perims\") ogr_ds_format(dsn = perims_shp) #> [1] \"ESRI Shapefile\" ogr_ds_layer_names(dsn = perims_shp) #> [1] \"mtbs_perims\" ogr_layer_field_names(dsn = perims_shp, layer = \"mtbs_perims\") #>  [1] \"event_id\"   \"incid_name\" \"incid_type\" \"map_id\"     \"burn_bnd_a\" #>  [6] \"burn_bnd_l\" \"burn_bnd_1\" \"ig_date\"    \"ig_year\"    \"\"            alt_tbl <- \"ALTER TABLE mtbs_perims ADD burn_bnd_ha float\" ogr_execute_sql(dsn = perims_shp, sql = alt_tbl) #> info: open dataset successful on DSN: #>   '/tmp/RtmplY4zfC/mtbs_perims.shp'  upd <- \"UPDATE mtbs_perims SET burn_bnd_ha = (burn_bnd_ac / 2.471)\" ogr_execute_sql(dsn = perims_shp, sql = upd, dialect = \"SQLite\") #> info: open dataset successful on DSN: #>   '/tmp/RtmplY4zfC/mtbs_perims.shp' ogr_layer_field_names(dsn = perims_shp, layer = \"mtbs_perims\") #>  [1] \"event_id\"   \"incid_name\" \"incid_type\" \"map_id\"     \"burn_bnd_a\" #>  [6] \"burn_bnd_l\" \"burn_bnd_1\" \"ig_date\"    \"ig_year\"    \"burn_bnd_h\" #> [11] \"\"            # if GDAL >= 3.7: #   ogrinfo(dsn = perims_shp, layer = \"mtbs_perims\") # or, for output incl. the feature data (omit the default \"-so\" arg): #   ogrinfo(dsn = perims_shp, layer = \"mtbs_perims\", cl_arg = \"-nomd\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":null,"dir":"Reference","previous_headings":"","what":"GDAL OGR facilities for vector geoprocessing — ogr_proc","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"ogr_proc() performs GIS overlay operations vector layers (https://en.wikipedia.org/wiki/Vector_overlay). provides interface GDAL API methods operations (OGRLayer::Intersection(), OGRLayer::Union(), etc). Inputs given objects class GDALVector, may spatial /attribute filters applied. output layer created exist, output can also appended existing layer, written existing empty layer custom schema defined. ogr_proc() basically port ogr_layer_algebra utility GDAL Python bindings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"","code":"ogr_proc(   mode,   input_lyr,   method_lyr,   out_dsn,   out_lyr_name = NULL,   out_geom_type = NULL,   out_fmt = NULL,   dsco = NULL,   lco = NULL,   mode_opt = NULL,   overwrite = FALSE,   quiet = FALSE,   return_obj = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"mode Character string specifying operation perform. One Intersection, Union, SymDifference, Identity, Update, Clip Erase (see Details). input_lyr object class GDALVector use input layer. overlay operations, first layer operation. method_lyr object class GDALVector use method layer. conditional layer supplied operation (e.g., Clip, Erase, Update), second layer overlay operations (e.g., Union, Intersection, SymDifference). out_dsn destination vector filename database connection string output layer written. out_lyr_name Layer name output vector written. May NULL (e.g., shapefile), typically must specified. out_geom_type Character string specifying geometry type output layer. One NONE, GEOMETRY, POINT, LINESTRING, POLYGON, GEOMETRYCOLLECTION, MULTIPOINT, MULTIPOLYGON, GEOMETRY25D, POINT25D, LINESTRING25D, POLYGON25D, GEOMETRYCOLLECTION25D, MULTIPOINT25D, MULTIPOLYGON25D. Defaults UNKNOWN specified. out_fmt GDAL short name output vector format. unspecified, function attempt guess format value out_dsn. dsco Optional character vector format-specific creation options out_dsn (\"NAME=VALUE\" pairs). lco Optional character vector format-specific creation options out_layer (\"NAME=VALUE\" pairs). mode_opt Optional character vector \"NAME=VALUE\" pairs specify processing options. Available options depend value mode (see Details). overwrite Logical value. TRUE overwrite output layer already exists. Defaults FALSE. quiet Logical value. TRUE, progress bar displayed. Defaults FALSE. return_obj Logical value. TRUE (default), object class GDALVector opened output layer returned, otherwise function returns logical value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"Upon successful completion, object class GDALVector returned default (return_obj = TRUE), logical TRUE returned return_obj = FALSE. Logical FALSE returned error occurs processing.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"Seven processing modes available: Intersection: output layer contains features whose geometries represent areas common features input layer method layer. features output layer attributes input method layers. Union: output layer contains features whose geometries represent areas either input layer, method layer, . features output layer attributes input method layers. features represent areas input layer method layer respective attributes undefined values. SymDifference: output layer contains features whose geometries represent areas either input layer method layer . features output layer attributes input method layers. features represent areas input method layer respective attributes undefined values. Identity: Identifies features input layer ones method layer. output layer contains features whose geometries represent areas input layer. features output layer attributes input method layers. Update: update method creates layer adds features input layer method layer, possibly cutting features input layer. features output layer areas features method layer areas features input layer covered method layer. features output layer get attributes input layer. Clip: clip method creates layer features input layer clipped areas features method layer. default output layer attributes input layer. Erase: erase method creates layer features input layer whose areas erased features method layer. default, output layer attributes input layer. default, ogr_proc() create output layer empty schema. initialized GDAL contain fields input layer, depending operation, fields input method layers. latter case, prefixes \"input_\" \"method_\" added output field names default. default prefixes can overridden mode_opt argument described . Alternatively, functions ogr_manage interface used create empty layer user-defined schema (e.g., ogr_ds_create(), ogr_layer_create() ogr_field_create()). schema output layer set user contains fields name field input method layers, attribute output feature get value feature method layer. Options affect processing can set NAME=VALUE pairs passed mode_opt argument. options specific certain processing modes noted : SKIP_FAILURES=YES/. Set YES go , even feature inserted GEOS call failed. PROMOTE_TO_MULTI=YES/. Set YES convert Polygons MultiPolygons, LineStrings MultiLineStrings Points MultiPoints (since GDAL 3.9.2 latter). INPUT_PREFIX=string. Set prefix field names created fields input layer. METHOD_PREFIX=string. Set prefix field names created fields method layer. USE_PREPARED_GEOMETRIES=YES/. Set use prepared geometries pretest intersection features method layer features input layer. Applies Intersection, Union, Identity. PRETEST_CONTAINMENT=YES/. Set YES pretest containment features method layer within features input layer. speed operation significantly cases. Requires prepared geometries effect. Applies Intersection. KEEP_LOWER_DIMENSION_GEOMETRIES=YES/. Set skip result features lower dimension geometry otherwise added output layer. default YES, add features lower dimension geometry, result output UNKNOWN geometry type. Applies Intersection, Union, Identity. input method layers spatial reference system. --fly reprojection done. output layer created SRS input_lyr.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"first geometry field layer always used. best performance use minimum amount features method layer copy memory layer.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"","code":"# MTBS fires in Yellowstone National Park 1984-2022 dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # layer filtered to fires after 1988 lyr1 <- new(GDALVector, dsn, \"mtbs_perims\") lyr1$setAttributeFilter(\"ig_year > 1988\") lyr1$getFeatureCount() #> [1] 46  # second layer for the 1988 North Fork fire perimeter sql <- \"SELECT incid_name, ig_year, geom FROM mtbs_perims         WHERE incid_name = 'NORTH FORK'\" lyr2 <- new(GDALVector, dsn, sql) lyr2$getFeatureCount() #> [1] 1  # intersect to obtain areas in the North Fork perimeter that have re-burned tmp_dsn <- tempfile(fileext = \".gpkg\") opt <- c(\"INPUT_PREFIX=layer1_\",          \"METHOD_PREFIX=layer2_\",          \"PROMOTE_TO_MULTI=YES\")  lyr_out <- ogr_proc(mode = \"Intersection\",                     input_lyr = lyr1,                     method_lyr = lyr2,                     out_dsn = tmp_dsn,                     out_lyr_name = \"north_fork_reburned\",                     out_geom_type = \"MULTIPOLYGON\",                     mode_opt = opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # the output layer has attributes of both the input and method layers (d <- lyr_out$fetch(-1)) #> OGR feature set #>   FID       layer1_event_id layer1_incid_name layer1_incid_type layer1_map_id #> 1   1 WY4484611038620100914          ANTELOPE          Wildfire      10013735 #> 2   2 WY4466711063920120810            CYGNET          Wildfire          1961 #> 3   3 WY4474311097820160809             MAPLE          Wildfire      10005020 #> 4   4 WY4492611093820160805              FAWN          Wildfire      10005117 #> 5   5 WY4457911058620160826           CENTRAL          Wildfire      10014143 #>   layer1_burn_bnd_ac layer1_burn_bnd_lat layer1_burn_bnd_lon layer1_ig_date #> 1               4888              44.839            -110.368     2010-09-14 #> 2               3188              44.682            -110.622     2012-08-10 #> 3             103193              44.731            -110.982     2016-08-09 #> 4               3161              44.936            -110.913     2016-08-05 #> 5               2340              44.595            -110.574     2016-08-26 #>   layer1_ig_year layer2_incid_name layer2_ig_year #> 1           2010        NORTH FORK           1988 #> 2           2012        NORTH FORK           1988 #> 3           2016        NORTH FORK           1988 #> 4           2016        NORTH FORK           1988 #> 5           2016        NORTH FORK           1988 #>                                    geom #> 1 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 2 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 3 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 4 WKB MULTIPOLYGON: raw 01 06 00 00 ... #> 5 WKB MULTIPOLYGON: raw 01 06 00 00 ...  # clean up lyr1$close() lyr2$close() lyr_out$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproject a vector layer — ogr_reproject","title":"Reproject a vector layer — ogr_reproject","text":"ogr_reproject() reprojects features vector layer different spatial reference system writes new layer specified output dataset. output may different vector file format input dataset. source SRS definition must available source layer reprojection occur.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproject a vector layer — ogr_reproject","text":"","code":"ogr_reproject(   src_dsn,   src_layer,   out_dsn,   out_srs,   out_fmt = NULL,   overwrite = FALSE,   append = FALSE,   nln = NULL,   nlt = NULL,   dsco = NULL,   lco = NULL,   dialect = NULL,   spat_bbox = NULL,   src_open_options = NULL,   progress = FALSE,   add_cl_arg = NULL,   return_obj = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproject a vector layer — ogr_reproject","text":"src_dsn Character string. filename database connection string specifying vector data source containing input layer. src_layer Character string. name input layer src_dsn reproject. Optionally can given SQL SELECT statement executed src_dsn, defining source layer result set. May also given empty string (\"\"), case first layer index used (mainly useful single-layer file formats ESRI Shapefile). out_dsn Character string. filename database connection string specifying vector data source output layer written. out_srs Character string specifying output spatial reference system. May WKT format formats supported srs_to_wkt(). out_fmt Optional character string giving GDAL short name output dataset format. used out_dsn needs created. Generally can NULL case format guessed file extension. overwrite Logical value. TRUE overwrite output layer already exists. Defaults FALSE. append Logical value. TRUE append output layer already exists. Defaults FALSE. nln Optional character string giving alternate name assign new layer. default, src_layer used, nln required src_layeris SQL SELECT statement. nlt Optional character string define geometry type output layer. Mainly useful nlt = PROMOTE_TO_MULTI might given automatically promote layers mix polygon / multipolygons multipolygons, layers mix linestrings / multilinestrings multilinestrings. Can useful converting shapefiles PostGIS output formats implement strict checks geometry types. dsco Optional character vector format-specific creation options out_dsn (\"NAME=VALUE\" pairs). used out_dsn already exist. lco Optional character vector format-specific creation options output layer (\"NAME=VALUE\" pairs). used appending existing layer. dialect Optional character string specifying SQL dialect use. OGR SQL engine (\"OGRSQL\") used default value given. \"SQLite\" dialect can also use. relevant src_layer given SQL SELECT statement. spat_bbox Optional numeric vector length four specifying spatial bounding box (xmin, ymin, xmax, ymax), SRS source layer. features whose geometry intersects spat_bbox selected reprojection. src_open_options Optional character vector dataset open options src_dsn (format-specific \"NAME=VALUE\" pairs). progress Logical value, TRUE display progress terminal. Defaults FALSE. works input layer \"fast feature count\" capability. add_cl_arg Optional character vector additional command-line arguments passed ogr2ogr() (see Note). return_obj Logical value, TRUE return object class GDALVector open output layer (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproject a vector layer — ogr_reproject","text":"Upon successful completion, object class GDALVector returned default (return_obj = TRUE), logical TRUE returned (invisibly) return_obj = FALSE. error raised reprojection fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reproject a vector layer — ogr_reproject","text":"ogr_reproject() convenience wrapper perform vector reprojection via ogr2ogr(), turn API binding GDAL's ogr2ogr command-line utility.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reproject a vector layer — ogr_reproject","text":"advanced use, additional command-line arguments may passed ogr2ogr() add_cl_arg (e.g., advanced geometry SRS related options). Users aware possible implications compatibility arguments already implied parameterization ogr_reproject(). function attempt create output datasource already exist. formats (e.g., PostgreSQL) support creation new datasets (.e., database within PostgreSQL), output layers can written existing database.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_reproject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reproject a vector layer — ogr_reproject","text":"","code":"# MTBS fire perimeters f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package = \"gdalraster\") (mtbs <- new(GDALVector, f, \"mtbs_perims\")) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /home/runner/work/_temp/Library/gdalraster/extdata/ynp_fires_1984_2022.gpkg #>  Layer  : mtbs_perims #>  CRS    : NAD83 / Montana (EPSG:32100) #>  Geom   : MULTIPOLYGON  mtbs$getSpatialRef() |> srs_is_projected()  # TRUE #> [1] TRUE  # YNP boundary f <- system.file(\"extdata/ynp_features.zip\", package = \"gdalraster\") ynp_dsn <- file.path(\"/vsizip\", f, \"ynp_features.gpkg\") (bnd <- new(GDALVector, ynp_dsn, \"ynp_bnd\")) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /vsizip//home/runner/work/_temp/Library/gdalraster/extdata/ynp_features.zip/ynp_features.gpkg #>  Layer  : ynp_bnd #>  CRS    : NAD83 (EPSG:4269) #>  Geom   : POLYGON  bnd$getSpatialRef() |> srs_is_projected()  # FALSE #> [1] FALSE  # project the boundary to match the MTBS layer out_dsn <- tempfile(fileext = \".gpkg\") (bnd_mtsp <- ogr_reproject(ynp_dsn, \"ynp_bnd\", out_dsn, mtbs$getSpatialRef())) #> C++ object of class GDALVector #>  Driver : GeoPackage (GPKG) #>  DSN    : /tmp/RtmplY4zfC/file23d0679eebd2.gpkg #>  Layer  : ynp_bnd #>  CRS    : NAD83 / Montana (EPSG:32100) #>  Geom   : POLYGON  bnd_mtsp$getFeatureCount() #> [1] 1  plot(bnd_mtsp$getNextFeature(), col = \"wheat\")  mtbs$setAttributeFilter(\"incid_name = 'MAPLE'\") mtbs$getFeatureCount()  # 1 #> [1] 1  (feat <- mtbs$getNextFeature()) #> OGR feature #> $FID #> integer64 #> [1] 56 #>  #> $event_id #> [1] WY4474311097820160809 #>  #> $incid_name #> [1] MAPLE #>  #> $incid_type #> [1] Wildfire #>  #> $map_id #> integer64 #> [1] 10005020 #>  #> $burn_bnd_ac #> integer64 #> [1] 103193 #>  #> $burn_bnd_lat #> [1] 44.731 #>  #> $burn_bnd_lon #> [1] -110.982 #>  #> $ig_date #> [1] 2016-08-09 #>  #> $ig_year #> [1] 2016 #>  #> $geom #> [1] WKB MULTIPOLYGON: raw 01 06 00 00 ... #>   plot(feat, col = \"red\", border = NA, add = TRUE)   mtbs$close() bnd$close() bnd_mtsp$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about a vector data source — ogrinfo","title":"Retrieve information about a vector data source — ogrinfo","text":"ogrinfo() wrapper ogrinfo command-line utility (see https://gdal.org/en/stable/programs/ogrinfo.html). function lists information OGR-supported data source. also possible edit data SQL statements. Refer GDAL documentation URL description command-line arguments can passed cl_arg. Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about a vector data source — ogrinfo","text":"","code":"ogrinfo(   dsn,   layers = NULL,   cl_arg = as.character(c(\"-so\", \"-nomd\")),   open_options = NULL,   read_only = TRUE,   cout = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information about a vector data source — ogrinfo","text":"dsn Character string. Data source name (e.g., filename, database connection string, etc.) layers Optional character vector layer names source dataset. cl_arg Optional character vector command-line arguments ogrinfo command-line utility GDAL (see URL reference). default c(\"-\", \"-nomd\") (see Note). open_options Optional character vector dataset open options. read_only Logical scalar. TRUE open data source read-(default), FALSE open write access. cout Logical scalar. TRUE write info standard C output stream (default). FALSE suppress console output.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information about a vector data source — ogrinfo","text":"Invisibly, character string containing information vector dataset, empty string (\"\") case error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve information about a vector data source — ogrinfo","text":"command-line argument -provides summary , .e., include details every single feature layer. -nomd suppresses metadata printing. datasets may contain lot metadata strings.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information about a vector data source — ogrinfo","text":"","code":"src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # Get the names of the layers in a GeoPackage file ogrinfo(src) #> INFO: Open of `/home/runner/work/_temp/Library/gdalraster/extdata/ynp_fires_1984_2022.gpkg' #>       using driver `GPKG' successful. #> 1: mtbs_perims (Multi Polygon)  # Summary of a layer ogrinfo(src, \"mtbs_perims\") #> INFO: Open of `/home/runner/work/_temp/Library/gdalraster/extdata/ynp_fires_1984_2022.gpkg' #>       using driver `GPKG' successful. #>  #> Layer name: mtbs_perims #> Geometry: Multi Polygon #> Feature Count: 61 #> Extent: (469685.726682, -12917.756287) - (573531.719643, 96577.336358) #> Layer SRS WKT: #> PROJCRS[\"NAD83 / Montana\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"SPCS83 Montana zone (meter)\", #>         METHOD[\"Lambert Conic Conformal (2SP)\", #>             ID[\"EPSG\",9802]], #>         PARAMETER[\"Latitude of false origin\",44.25, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-109.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",49, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",600000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"United States (USA) - Montana - counties of Beaverhead; Big Horn; Blaine; Broadwater; Carbon; Carter; Cascade; Chouteau; Custer; Daniels; Dawson; Deer Lodge; Fallon; Fergus; Flathead; Gallatin; Garfield; Glacier; Golden Valley; Granite; Hill; Jefferson; Judith Basin; Lake; Lewis and Clark; Liberty; Lincoln; Madison; McCone; Meagher; Mineral; Missoula; Musselshell; Park; Petroleum; Phillips; Pondera; Powder River; Powell; Prairie; Ravalli; Richland; Roosevelt; Rosebud; Sanders; Sheridan; Silver Bow; Stillwater; Sweet Grass; Teton; Toole; Treasure; Valley; Wheatland; Wibaux; Yellowstone.\"], #>         BBOX[44.35,-116.07,49.01,-104.04]], #>     ID[\"EPSG\",32100]] #> Data axis to CRS axis mapping: 1,2 #> FID Column = fid #> Geometry Column = geom #> event_id: String (254.0) #> incid_name: String (254.0) #> incid_type: String (254.0) #> map_id: Integer64 (0.0) #> burn_bnd_ac: Integer64 (0.0) #> burn_bnd_lat: String (10.0) #> burn_bnd_lon: String (10.0) #> ig_date: Date #> ig_year: Integer (0.0)  # Query an attribute to restrict the output of the features in a layer args <- c(\"-ro\", \"-nomd\", \"-where\", \"ig_year = 2020\") ogrinfo(src, \"mtbs_perims\", args) #> INFO: Open of `/home/runner/work/_temp/Library/gdalraster/extdata/ynp_fires_1984_2022.gpkg' #>       using driver `GPKG' successful. #>  #> Layer name: mtbs_perims #> Geometry: Multi Polygon #> Feature Count: 1 #> Extent: (469685.726682, -12917.756287) - (573531.719643, 96577.336358) #> Layer SRS WKT: #> PROJCRS[\"NAD83 / Montana\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"SPCS83 Montana zone (meter)\", #>         METHOD[\"Lambert Conic Conformal (2SP)\", #>             ID[\"EPSG\",9802]], #>         PARAMETER[\"Latitude of false origin\",44.25, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-109.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",49, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",600000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"United States (USA) - Montana - counties of Beaverhead; Big Horn; Blaine; Broadwater; Carbon; Carter; Cascade; Chouteau; Custer; Daniels; Dawson; Deer Lodge; Fallon; Fergus; Flathead; Gallatin; Garfield; Glacier; Golden Valley; Granite; Hill; Jefferson; Judith Basin; Lake; Lewis and Clark; Liberty; Lincoln; Madison; McCone; Meagher; Mineral; Missoula; Musselshell; Park; Petroleum; Phillips; Pondera; Powder River; Powell; Prairie; Ravalli; Richland; Roosevelt; Rosebud; Sanders; Sheridan; Silver Bow; Stillwater; Sweet Grass; Teton; Toole; Treasure; Valley; Wheatland; Wibaux; Yellowstone.\"], #>         BBOX[44.35,-116.07,49.01,-104.04]], #>     ID[\"EPSG\",32100]] #> Data axis to CRS axis mapping: 1,2 #> FID Column = fid #> Geometry Column = geom #> event_id: String (254.0) #> incid_name: String (254.0) #> incid_type: String (254.0) #> map_id: Integer64 (0.0) #> burn_bnd_ac: Integer64 (0.0) #> burn_bnd_lat: String (10.0) #> burn_bnd_lon: String (10.0) #> ig_date: Date #> ig_year: Integer (0.0) #> OGRFeature(mtbs_perims):61 #>   event_id (String) = WY4438911082120200822 #>   incid_name (String) = LONE STAR #>   incid_type (String) = Wildfire #>   map_id (Integer64) = 10020495 #>   burn_bnd_ac (Integer64) = 3348 #>   burn_bnd_lat (String) = 44.4 #>   burn_bnd_lon (String) = -110.782 #>   ig_date (Date) = 2020/08/22 #>   ig_year (Integer) = 2020 #>   MULTIPOLYGON (((496593.122306971 15506.8828590633,496491.761299067 15605.3612548792,496290.812130161 15388.0465179707,496283.32058496 15550.7644680398,495884.310957458 15387.7693642235,495381.498326246 15486.6808036345,494602.564947774 16084.5219875909,494585.357018058 16645.0572271436,495449.965836048 17082.648614691,495525.640892666 17349.0599324865,496097.733732823 17561.7347277213,496257.076620071 17855.1480298667,496528.929476077 17642.2200632185,496381.989621625 18210.3014108741,496658.623671105 18438.1622229537,496910.765693779 18401.6123902032,497124.005995667 18641.1244857657,497385.057088859 18431.8151440043,497742.662074771 18486.7201558508,498208.745156148 18684.677772214,498121.821253373 18790.2831039076,498326.37319691 19018.3598994669,498728.212799118 18905.4308658479,498920.731848098 19218.8393941772,499304.507662952 19088.0477058364,499719.773581338 19427.3696509425,499951.447535602 19280.5161594677,500309.224626601 19407.1241777105,500350.581048002 19515.2429516582,500076.319969425 19635.6901072339,500585.91703226 19670.8582722843,500834.488053378 19367.7099358598,501033.423276492 19380.0736723167,500824.027693014 19222.9522488669,501072.354115678 19104.0152762244,501094.913433901 18907.5622339096,500627.002229506 18832.1354026641,499946.728772314 18292.1207493556,499222.789246595 18426.7059182243,498360.994034972 17933.0977969646,499077.730444483 17521.134480303,499293.084153096 17745.599510172,499800.921713803 17647.4449673673,499785.561166901 17281.9472585942,500335.380841845 17251.0600839751,500381.818490701 16812.2886367497,499899.5387543 16765.5825321997,499579.392382428 16152.9342602384,499429.399837531 16121.8098907012,499265.572201365 16590.287674071,499028.649451778 16664.7644176055,498928.284642745 16318.141684453,498664.147923921 16184.1267454724,498679.339316004 15930.3618365987,498015.351459606 15310.80515169,497110.236344284 15635.150719899,496862.739246991 15529.0560671027,496817.793936327 15701.9140384736,496593.122306971 15506.8828590633))) #>   # Copy to a temporary in-memory file that is writeable src_mem <- paste0(\"/vsimem/\", basename(src)) vsi_copy_file(src, src_mem) #> [1] 0  # Add a column to a layer args <- c(\"-sql\", \"ALTER TABLE mtbs_perims ADD burn_bnd_ha float\") ogrinfo(src_mem, cl_arg = args, read_only = FALSE) #> INFO: Open of `/vsimem/ynp_fires_1984_2022.gpkg' #>       using driver `GPKG' successful.  # Update values of the column with SQL and specify a dialect sql <- \"UPDATE mtbs_perims SET burn_bnd_ha = (burn_bnd_ac / 2.471)\" args <- c(\"-dialect\", \"sqlite\", \"-sql\", sql) ogrinfo(src_mem, cl_arg = args, read_only = FALSE) #> INFO: Open of `/vsimem/ynp_fires_1984_2022.gpkg' #>       using driver `GPKG' successful."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pixel_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract pixel values at geospatial point locations — pixel_extract","title":"Extract pixel values at geospatial point locations — pixel_extract","text":"pixel_extract() returns raster pixel values set geospatial point locations. coordinates given two-column matrix (x, y) values spatial reference system input raster (unless xy_srs specified). Values extracted bands raster default, specific band numbers may given. optional interpolation method may specified bilinear (2 x 2 kernel), cubic convolution (4 x 4 kernel, GDAL >= 3.10), cubic spline (4 x 4 kernel, GDAL >= 3.10). Alternatively, optional kernel dimension may given extract values individual pixels within N x N kernel centered pixel containing point location. xy_srs given, function attempt transform input points projection raster call transform_xy().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pixel_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract pixel values at geospatial point locations — pixel_extract","text":"","code":"pixel_extract(   raster,   xy,   bands = NULL,   interp = NULL,   krnl_dim = NULL,   xy_srs = NULL,   max_ram = 300 )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pixel_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract pixel values at geospatial point locations — pixel_extract","text":"raster Either character string giving filename raster, object class GDALRaster source dataset. xy two-column numeric matrix two-column data frame geospatial (x, y) coordinates, vector (x, y) single point, spatial reference system raster. bands Optional numeric vector band numbers. bands raster processed default specified. interp Optional character string specifying interpolation method. Must one \"bilinear\", \"cubic\", \"cubicspline\", \"nearest\" (default specified, .e., interpolation). GDAL >= 3.10 required \"cubic\" \"cubicspline\". krnl_dim Optional integer value specifying dimension N x N kernel individual pixel values returned. supported extracting single raster band. Ignored interp specified \"nearest\" (.e., always use kernel implied interpolation method). xy_srs Optional character string specifying spatial reference system xy. May WKT format formats supported srs_to_wkt(). max_ram Numeric value giving maximum amount RAM (MB) use potentially copying remote raster memory processing (see Note). Defaults 300 MB. Set zero disable potential copy remote files memory.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pixel_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract pixel values at geospatial point locations — pixel_extract","text":"numeric matrix pixel values number rows equal number rows xy, number columns equal number bands, krnl_dim = N used, number columns equal N * N. Named columns indicate band number, e.g., \"b1\". krnl_dim used, named columns indicate band number pixel, e.g., \"b1_p1\", \"b1_p2\", ..., \"b1_p9\" krnl_dim = 3. Pixels left--right, top--bottom order kernel.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pixel_extract.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract pixel values at geospatial point locations — pixel_extract","text":"Depending number input points, extracting raster remote filesystem may require large number HTTP range requests may slow (.e., URLs/remote VSI filesystems). case, may faster copy raster memory first (either MEM format /vsimem filesystem). pixel_extract() attempt automate process total size file(s) copied exceed threshold given max_ram, length(xy) > 1 (requires GDAL >= 3.6). alternative workflows involve copying local storage, data management functions (e.g., copyDatasetFiles()) VSI filesystem functions (e.g., vsi_is_local(), vsi_stat(), vsi_copy_file()) may interest.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pixel_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract pixel values at geospatial point locations — pixel_extract","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") # id, x, y in NAD83 / UTM zone 12N, same as the raster pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901  raster_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  pixel_extract(raster_file, pts[-1]) #> extracting from band 1... #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>         b1 #>  [1,] 2648 #>  [2,] 2865 #>  [3,] 2717 #>  [4,] 2560 #>  [5,] 2916 #>  [6,] 2633 #>  [7,] 2548 #>  [8,] 2801 #>  [9,] 2475 #> [10,] 2822  # or as GDALRaster object ds <- new(GDALRaster, raster_file) pixel_extract(ds, pts[-1]) #> extracting from band 1... #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>         b1 #>  [1,] 2648 #>  [2,] 2865 #>  [3,] 2717 #>  [4,] 2560 #>  [5,] 2916 #>  [6,] 2633 #>  [7,] 2548 #>  [8,] 2801 #>  [9,] 2475 #> [10,] 2822  # interpolated values pixel_extract(raster_file, pts[-1], interp = \"bilinear\") #> extracting from band 1... #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>             b1 #>  [1,] 2649.217 #>  [2,] 2881.799 #>  [3,] 2716.290 #>  [4,] 2558.797 #>  [5,] 2920.404 #>  [6,] 2629.495 #>  [7,] 2548.250 #>  [8,] 2810.543 #>  [9,] 2478.609 #> [10,] 2819.776  # individual pixel values within a kernel pixel_extract(raster_file, pts[-1], krnl_dim = 3) #> extracting from band 1... #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>       b1_p1 b1_p2 b1_p3 b1_p4 b1_p5 b1_p6 b1_p7 b1_p8 b1_p9 #>  [1,]  2660  2654  2651  2652  2648  2646  2653  2647  2645 #>  [2,]  2924  2895  2901  2893  2865  2869  2863  2838  2841 #>  [3,]    NA  2709  2704    NA  2717  2717    NA  2725  2728 #>  [4,]  2554  2558  2562  2557  2560  2564  2559  2562  2566 #>  [5,]  2932  2920  2908  2927  2916  2903  2923  2911  2899 #>  [6,]  2633  2642  2650  2627  2633  2640  2619  2624  2630 #>  [7,]  2548  2548  2550  2549  2548  2550  2550  2548  2550 #>  [8,]  2785  2777  2776  2807  2801  2803  2833  2825  2827 #>  [9,]  2489  2482  2475  2479  2475  2470  2474  2471  2468 #> [10,]  2832  2810  2789  2839  2822  2800  2833  2811  2788  # lont/lat xy pts_wgs84 <- transform_xy(pts[-1], srs_from = ds$getProjection(),                           srs_to = \"WGS84\")  # transform the input xy pixel_extract(ds, xy = pts_wgs84, xy_srs = \"WGS84\") #> extracting from band 1... #> 0...10...20...30...40...50...60...70...80...90...100 - done. #>         b1 #>  [1,] 2648 #>  [2,] 2865 #>  [3,] 2717 #>  [4,] 2560 #>  [5,] 2916 #>  [6,] 2633 #>  [7,] 2548 #>  [8,] 2801 #>  [9,] 2475 #> [10,] 2822  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the geometry of an OGRFeature object — plot.OGRFeature","title":"Plot the geometry of an OGRFeature object — plot.OGRFeature","text":"Plot geometry OGRFeature object","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the geometry of an OGRFeature object — plot.OGRFeature","text":"","code":"# S3 method for class 'OGRFeature' plot(x, xlab = \"x\", ylab = \"y\", main = \"\", ...)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the geometry of an OGRFeature object — plot.OGRFeature","text":"x OGRFeature object. xlab Title x axis. ylab Title y axis. main main title (top). ... Optional arguments passed wk::wk_plot().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the geometry of an OGRFeature object — plot.OGRFeature","text":"input, invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the geometry column of an OGRFeatureSet — plot.OGRFeatureSet","title":"Plot the geometry column of an OGRFeatureSet — plot.OGRFeatureSet","text":"Plot geometry column OGRFeatureSet","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the geometry column of an OGRFeatureSet — plot.OGRFeatureSet","text":"","code":"# S3 method for class 'OGRFeatureSet' plot(x, xlab = \"x\", ylab = \"y\", main = \"\", ...)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the geometry column of an OGRFeatureSet — plot.OGRFeatureSet","text":"x OGRFeatureSet. xlab Title x axis. ylab Title y axis. main main title (top). ... Optional arguments passed wk::wk_plot().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot.OGRFeatureSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the geometry column of an OGRFeatureSet — plot.OGRFeatureSet","text":"input, invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Display raster data — plot_raster","title":"Display raster data — plot_raster","text":"plot_raster() displays raster data using base graphics.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display raster data — plot_raster","text":"","code":"plot_raster(   data,   xsize = NULL,   ysize = NULL,   nbands = NULL,   max_pixels = 2.5e+07,   col_tbl = NULL,   maxColorValue = 1,   normalize = TRUE,   minmax_def = NULL,   minmax_pct_cut = NULL,   col_map_fn = NULL,   pixel_fn = NULL,   xlim = NULL,   ylim = NULL,   interpolate = TRUE,   asp = 1,   axes = TRUE,   main = \"\",   xlab = \"x\",   ylab = \"y\",   xaxs = \"i\",   yaxs = \"i\",   legend = FALSE,   digits = 2,   na_col = rgb(0, 0, 0, 0),   ... )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display raster data — plot_raster","text":"data Either GDALRaster object data read, numeric vector pixel values arranged left right, top bottom order, list band vectors. input vector list, information attribute gis used present (see read_ds()), potentially ignoring values xsize, ysize, nbands. xsize number pixels along x dimension data. data GDALRaster object, specifies size raster read (used argument out_xsize GDALRaster$read()). default, entire raster read full resolution. ysize number pixels along y dimension data. data GDALRaster object, specifies size raster read (used argument out_ysize GDALRaster$read()). default, entire raster read full resolution. nbands number bands data. Must either 1 (grayscale) 3 (RGB). RGB, data interleaved band. nbands NULL (default), nbands = 3 assumed input data contain 3 bands, otherwise band 1 used. max_pixels maximum number pixels function attempt display (per band). error raised (xsize * ysize) exceeds value. Setting NULL turns check. col_tbl color table matrix data frame four five columns. Column 1 contains numeric pixel values. Columns 2:4 contain intensities red, green blue primaries (0:1 default, use integer 0:255 setting maxColorValue = 255). optional column 5 may contain alpha transparency values, 0 fully transparent 1 (maxColorValue) opaque (default column 5 missing). data GDALRaster object, built-color table used automatically one exists dataset. maxColorValue number giving maximum color values range col_tbl (see ). default 1. normalize Logical. TRUE rescale pixel values range [0,1], normalized full range pixel data default (min(data), max(data), per band). Ignored col_tbl used. Set normalize FALSE color map function used operates raw pixel values (see col_map_fn ). minmax_def Normalize user-defined min/max values (terms pixel data, per band). single-band grayscale, numeric vector length two containing min, max. 3-band RGB, numeric vector length six containing b1_min, b2_min, b3_min, b1_max, b2_max, b3_max. minmax_pct_cut Normalize truncated range pixel data using percentile cutoffs (removes outliers). numeric vector length two giving percentiles use (e.g., c(2, 98)). Applied per band. Ignored minmax_def used. col_map_fn optional color map function (default grDevices::gray single-band data grDevices::rgb 3-band). Ignored col_tbl used. Set normalize FALSE using color map function operates raw pixel values. pixel_fn optional function applied input pixel data. Must accept vector input return numeric vector length input. xlim Numeric vector length two giving x coordinate range. data GDALRaster object, default raster xmin, xmax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(0, xsize)). ylim Numeric vector length two giving y coordinate range. data GDALRaster object, default raster ymin, ymax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(ysize, 0)). interpolate Logical indicating whether apply linear interpolation image drawing (default TRUE). asp Numeric. aspect ratio y/x (see ?plot.window). axes Logical. TRUE draw axes (default). main main title (top). xlab Title x axis (see ?title). ylab Title y axis (see ?title). xaxs style axis interval calculation used x axis (see ?par). yaxs style axis interval calculation used y axis (see ?par). legend Logical indicating whether include legend plot. Currently, legends supported continuous data. color table used one specified raster built-color table, otherwise value col_map_fn used. digits number digits display decimal point legend labels raster data floating point. na_col Color use NA 7- 9-character hexadecimal code. default transparent (\"#00000000\", return value rgb(0,0,0,0)). ... parameters passed plot.default().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display raster data — plot_raster","text":"default, contrast enhancement stretch min/max applied input data single-band grayscale raster data type, three-band RGB raster data type larger Byte. minimum/maximum input data used default (.e., outlier removal). stretch applied default input RGB byte raster. defaults can overridden specifying either minmax_def argument (user-defined min/max per band), minmax_pct_cut argument (ignore outlier pixels based percentile range per band). settings (normalize argument) ignored color table used.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Display raster data — plot_raster","text":"plot_raster() uses function graphics::rasterImage() plotting supported devices (see ?rasterImage). data object class GDALRaster, plot_raster() attempt read entire raster memory default (unless number pixels per band exceed max_pixels). reduced resolution overview can read setting xsize, ysize smaller raster size disk. (data instead specified vector pixel values, reduced resolution overview read setting out_xsize out_ysize smaller raster region defined xsize, ysize call GDALRaster$read()). GDAL_RASTERIO_RESAMPLING configuration option can defined override default resampling (NEAREST) one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE, example:","code":"set_config_option(\"GDAL_RASTERIO_RESAMPLING\", \"BILINEAR\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display raster data — plot_raster","text":"","code":"## Elevation elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file)  # all other arguments are optional when passing a GDALRaster object # grayscale plot_raster(ds, legend = TRUE, main = \"Storm Lake elevation (m)\")   # color ramp from user-defined palette elev_pal <- c(\"#00A60E\",\"#63C600\",\"#E6E600\",\"#E9BD3B\",               \"#ECB176\",\"#EFC2B3\",\"#F2F2F2\") ramp <- scales::colour_ramp(elev_pal, alpha = FALSE) plot_raster(ds, col_map_fn = ramp, legend = TRUE,             main = \"Storm Lake elevation (m)\")   ds$close()  ## Landsat band combination b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b6_file <- system.file(\"extdata/sr_b6_20200829.tif\", package=\"gdalraster\") band_files <- c(b6_file, b5_file, b4_file)  vrt_file <- file.path(tempdir(), \"storml_b6_b5_b4.vrt\") buildVRT(vrt_file, band_files, cl_arg = \"-separate\") #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, vrt_file)  plot_raster(ds, main = \"Landsat 6-5-4 (vegetative analysis)\")   ds$close()  ## LANDFIRE Existing Vegetation Cover (EVC) with color map evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\")  # colors from the CSV attribute table distributed by LANDFIRE evc_csv <- system.file(\"extdata/LF20_EVC_220.csv\", package=\"gdalraster\") vat <- read.csv(evc_csv) head(vat) #>   VALUE                        CLASSNAMES   R   G   B      RED    GREEN #> 1 -9999                       Fill-NoData 255 255 255 1.000000 1.000000 #> 2    11                        Open Water   0   0 255 0.000000 0.000000 #> 3    12                          Snow/Ice 159 161 240 0.623529 0.631373 #> 4    13 Developed-Upland Deciduous Forest  64  61 168 0.250980 0.239216 #> 5    14 Developed-Upland Evergreen Forest  68  79 137 0.266667 0.309804 #> 6    15     Developed-Upland Mixed Forest 102 119 205 0.400000 0.466667 #>       BLUE #> 1 1.000000 #> 2 1.000000 #> 3 0.941176 #> 4 0.658824 #> 5 0.537255 #> 6 0.803922 vat <- vat[, c(1, 6:8)]  ds <- new(GDALRaster, evc_file) plot_raster(ds, col_tbl = vat, interpolate = FALSE,             main = \"Storm Lake LANDFIRE EVC\")   ds$close()  ## Apply a pixel function f <- system.file(\"extdata/complex.tif\", package=\"gdalraster\") ds <- new(GDALRaster, f) ds$getDataTypeName(band = 1)  # complex floating point #> [1] \"CFloat32\"  ramp <- scales::colour_ramp(scales::pal_viridis(option = \"plasma\")(6),                             alpha = FALSE)  plot_raster(ds, pixel_fn = Arg, col_map_fn = ramp, interpolate = FALSE,             legend = TRUE, main = \"Arg(complex.tif)\")   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polygon feature layer from raster data — polygonize","title":"Create a polygon feature layer from raster data — polygonize","text":"polygonize() creates vector polygons connected regions pixels source raster sharing common pixel value. polygon created attribute indicating pixel value polygon. raster mask may also provided determine pixels eligible processing. function create output vector layer already exist, otherwise try append existing one. function wrapper GDALPolygonize GDAL Algorithms API. provides essentially functionality gdal_polygonize.py command-line program (https://gdal.org/en/stable/programs/gdal_polygonize.html).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polygon feature layer from raster data — polygonize","text":"","code":"polygonize(   raster_file,   out_dsn,   out_layer,   fld_name = \"DN\",   out_fmt = NULL,   connectedness = 4,   src_band = 1,   mask_file = NULL,   nomask = FALSE,   overwrite = FALSE,   dsco = NULL,   lco = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polygon feature layer from raster data — polygonize","text":"raster_file Filename source raster. out_dsn destination vector filename polygons written (database connection string). out_layer Name layer writing polygon features. single-layer file formats \"ESRI Shapefile\", layer name filename without path extension (e.g., out_dsn = \"path_to_file/polygon_output.shp\", layer name \"polygon_output\"). fld_name Name integer attribute field out_layer pixel values written. created necessary using existing layer. out_fmt GDAL short name output vector format. unspecified, function attempt guess format filename/connection string. connectedness Integer scalar. Must either 4 8. default 4-connectedness, pixels value considered connected touch along one four sides, 8-connectedness also includes pixels touch one corners. src_band band raster_file build polygons (default 1). mask_file Use first band specified raster validity mask (zero invalid, non-zero valid). specified, default validity mask input band (nodata, alpha masks) used (unless nomask set TRUE). nomask Logical scalar. TRUE, use default validity mask input band (nodata, alpha masks). Default FALSE. overwrite Logical scalar. TRUE, overwrite out_layer already exists. Default FALSE. dsco Optional character vector format-specific creation options out_dsn (\"NAME=VALUE\" pairs). lco Optional character vector format-specific creation options out_layer (\"NAME=VALUE\" pairs). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a polygon feature layer from raster data — polygonize","text":"Polygon features created output layer, polygon geometries representing polygons. polygon geometries georeferenced coordinate system raster (based geotransform source dataset). acceptable output layer already features. output layer already exist, created coordinate system matching source raster. algorithm attempts minimize memory use large rasters can processed. However, raster many polygons large/complex polygons, memory use holding polygon enumerations active polygon geometries may grow quite large. algorithm generally produce dense polygon geometries, edges follow exactly pixel boundaries non-interior pixels. non-thematic raster data (satellite images) result essentially one small polygon per pixel, memory output layer sizes substantial. algorithm primarily intended relatively simple thematic rasters, masks, classification results.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a polygon feature layer from raster data — polygonize","text":"source pixel band values read signed 64-bit integer buffer (Int64) GDALPolygonize, floating point complex bands implicitly truncated processing. 8-connectedness used, many resulting polygons likely invalid due ring self-intersection (strict OGC definition polygon validity). may suitable -certain purposes calculating geometry attributes (area, perimeter). Package sf st_make_valid(), PostGIS ST_MakeValid(), QGIS vector processing utility \"Fix geometries\" (single polygons can become MultiPolygon case self-intersections). writing SQLite database format either GPKG (GeoPackage vector) SQLite (Spatialite vector), setting SQLITE_USE_OGR_VFS OGR_SQLITE_JOURNAL configuration options may increase performance substantially. writing PostgreSQL (PostGIS vector), setting PG_USE_COPY=YES faster:","code":"# SQLite: GPKG (.gpkg) and Spatialite (.sqlite) # enable extra buffering/caching by the GDAL/OGR I/O layer set_config_option(\"SQLITE_USE_OGR_VFS\", \"YES\") # set the journal mode for the SQLite database to MEMORY set_config_option(\"OGR_SQLITE_JOURNAL\", \"MEMORY\")  # PostgreSQL / PostGIS # use COPY for inserting data rather than INSERT set_config_option(\"PG_USE_COPY\", \"YES\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a polygon feature layer from raster data — polygonize","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") dsn <- file.path(tempdir(), \"storm_lake.gpkg\") layer <- \"lf_evt\" fld <- \"evt_value\" set_config_option(\"SQLITE_USE_OGR_VFS\", \"YES\") set_config_option(\"OGR_SQLITE_JOURNAL\", \"MEMORY\") polygonize(evt_file, dsn, layer, fld) #> 0...10...20...30...40...50...60...70...80...90...100 - done. set_config_option(\"SQLITE_USE_OGR_VFS\", \"\") set_config_option(\"OGR_SQLITE_JOURNAL\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Pop error handler off stack — pop_error_handler","title":"Pop error handler off stack — pop_error_handler","text":"pop_error_handler() wrapper CPLPopErrorHandler() GDAL Common Portability Library. Discards current error handler error handler stack, restores one use last push_error_handler() call. method effect error handlers current thread's error handler stack.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pop error handler off stack — pop_error_handler","text":"","code":"pop_error_handler()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pop error handler off stack — pop_error_handler","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pop error handler off stack — pop_error_handler","text":"","code":"push_error_handler(\"quiet\") # ... pop_error_handler()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an OGRFeature object — print.OGRFeature","title":"Print an OGRFeature object — print.OGRFeature","text":"Print OGRFeature object","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an OGRFeature object — print.OGRFeature","text":"","code":"# S3 method for class 'OGRFeature' print(x, ...)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an OGRFeature object — print.OGRFeature","text":"x OGRFeature object. ... Optional arguments passed base::print().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an OGRFeature object — print.OGRFeature","text":"input, invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeatureSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an OGRFeatureSet — print.OGRFeatureSet","title":"Print an OGRFeatureSet — print.OGRFeatureSet","text":"Print OGRFeatureSet","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeatureSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an OGRFeatureSet — print.OGRFeatureSet","text":"","code":"# S3 method for class 'OGRFeatureSet' print(x, ...)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeatureSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an OGRFeatureSet — print.OGRFeatureSet","text":"x OGRFeatureSet. ... Optional arguments passed base::print.data.frame().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/print.OGRFeatureSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an OGRFeatureSet — print.OGRFeatureSet","text":"input, invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":null,"dir":"Reference","previous_headings":"","what":"Check, enable or disable PROJ networking capabilities — proj_networking","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"proj_networking() returns status PROJ networking capabilities, optionally enabling disabling first. Requires GDAL 3.4 later PROJ 7 later.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"","code":"proj_networking(enabled = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"enabled Optional logical scalar. Set TRUE enable networking capabilities FALSE disable.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"Logical TRUE PROJ networking capabilities enabled (indicated return value OSRGetPROJEnableNetwork() GDAL Spatial Reference System C API). Logical NA returned GDAL < 3.4.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"","code":"proj_networking() #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set search path(s) for PROJ resource files — proj_search_paths","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"proj_search_paths() returns search path(s) PROJ resource files, optionally setting first.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"","code":"proj_search_paths(paths = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"paths Optional character vector containing one directory paths set.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"character vector containing currently used search path(s) PROJ resource files. empty string (\"\") returned search paths returned function OSRGetPROJSearchPaths() GDAL Spatial Reference System C API.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"","code":"proj_search_paths() #> [1] \"/home/runner/.local/share/proj\" \"/usr/share/proj\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PROJ version — proj_version","title":"Get PROJ version — proj_version","text":"proj_version() returns version information PROJ library use GDAL.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PROJ version — proj_version","text":"","code":"proj_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PROJ version — proj_version","text":"list length four containing: name - string formatted \"major.minor.patch\" major - major version integer minor - minor version integer patch - patch version integer","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PROJ version — proj_version","text":"","code":"proj_version() #> $name #> [1] \"9.4.0\" #>  #> $major #> [1] 9 #>  #> $minor #> [1] 4 #>  #> $patch #> [1] 0 #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Push a new GDAL CPLError handler — push_error_handler","title":"Push a new GDAL CPLError handler — push_error_handler","text":"push_error_handler() wrapper CPLPushErrorHandler() GDAL Common Portability Library. pushes new error handler thread-local error handler stack. handler used removed pop_error_handler(). typical use temporarily set CPLQuietErrorHandler() make attempt report passed error warning messages, process debug messages via CPLDefaultErrorHandler.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push a new GDAL CPLError handler — push_error_handler","text":"","code":"push_error_handler(handler)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push a new GDAL CPLError handler — push_error_handler","text":"handler Character name error handler push. One quiet, logging default.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push a new GDAL CPLError handler — push_error_handler","text":"return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Push a new GDAL CPLError handler — push_error_handler","text":"Setting handler = \"logging\" use CPLLoggingErrorHandler(), error handler logs file defined CPL_LOG configuration option, stderr otherwise. affects error reporting GDAL.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push a new GDAL CPLError handler — push_error_handler","text":"","code":"push_error_handler(\"quiet\") # ... pop_error_handler()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a raster from an existing raster as template — rasterFromRaster","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. Optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"rasterFromRaster(   srcfile,   dstfile,   fmt = NULL,   nbands = NULL,   dtName = NULL,   options = NULL,   init = NULL,   dstnodata = init )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"srcfile Source raster filename. dstfile Output raster filename. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename fmt specified. nbands Number output bands. dtName Output raster data type name. Commonly used types include \"Byte\", \"Int16\", \"UInt16\", \"Int32\" \"Float32\". options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). init Numeric value initialize pixels output raster. dstnodata Numeric nodata value output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"Returns destination filename invisibly.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"# band 2 in a FARSITE landscape file has slope degrees # convert slope degrees to slope percent in a new raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file) ds_lcp$getMetadata(band=2, domain=\"\") #> [1] \"SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tifegrees\"                                                                                                                slpp_file <- file.path(tempdir(), \"storml_slpp.tif\") opt = c(\"COMPRESS=LZW\") rasterFromRaster(srcfile = lcp_file,                  dstfile = slpp_file,                  nbands = 1,                  dtName = \"Int16\",                  options = opt,                  init = -32767) #> initializing destination raster... #> done ds_slp <- new(GDALRaster, slpp_file, read_only=FALSE)  # slpp_file is initialized to -32767 and nodata value set ds_slp$getNoDataValue(band=1) #> [1] -32767  # extent and cell size are the same as lcp_file ds_lcp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res() #> [1] 30 30 ds_slp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_slp$res() #> [1] 30 30  # convert slope degrees in lcp_file band 2 to slope percent in slpp_file # bring through LCP nodata -9999 to the output nodata value ncols <- ds_slp$getRasterXSize() nrows <- ds_slp$getRasterYSize() for (row in 0:(nrows-1)) {     rowdata <- ds_lcp$read(band=2,                            xoff=0, yoff=row,                            xsize=ncols, ysize=1,                            out_xsize=ncols, out_ysize=1)     rowslpp <- tan(rowdata*pi/180) * 100     rowslpp[rowdata==-9999] <- -32767     dim(rowslpp) <- c(1, ncols)     ds_slp$write(band=1, xoff=0, yoff=row, xsize=ncols, ysize=1, rowslpp) }  # min, max, mean, sd ds_slp$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 138.00000  44.76464  26.79985  ds_slp$close() ds_lcp$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"rasterToVRT() creates virtual raster dataset (VRT format) derived one source dataset options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter. (See buildVRT() virtual mosaicing.)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"","code":"rasterToVRT(   srcfile,   relativeToVRT = FALSE,   vrtfile = tempfile(\"tmprast\", fileext = \".vrt\"),   resolution = NULL,   subwindow = NULL,   src_align = TRUE,   resampling = \"nearest\",   krnl = NULL,   normalized = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"srcfile Source raster filename. relativeToVRT Logical. Indicates whether source filename interpreted relative .vrt file (TRUE) relative .vrt file (FALSE, default). TRUE, .vrt file assumed directory srcfile basename(srcfile) used .vrt file. Use TRUE .vrt file always stored directory srcfile. vrtfile Output VRT filename. resolution numeric vector length two (xres, yres). pixel size must expressed georeferenced units. must positive values. source pixel size used resolution specified. subwindow numeric vector length four (xmin, ymin, xmax, ymax). Selects subwindow source raster corners given georeferenced coordinates (source CRS). given, upper left corner VRT source, VRT extent larger source depending resolution. src_align Logical. TRUE: upper left corner VRT extent set upper left corner source pixel contains subwindow xmin, ymax. VRT pixel-aligned source VRT resolution source pixel size, otherwise VRT extent minimum rectangle contains subwindow given pixel size. Often, src_align=TRUE selecting raster minimum bounding box vector polygon. FALSE: VRT upper left corner exactly subwindow xmin, ymax, VRT extent minimum rectangle contains subwindow given pixel size. subwindow given, source raster extent used case src_align=FALSE effect. Use src_align=FALSE pixel-align two rasters different sizes, .e., intent target alignment. resampling resampling method use xsize, ysize VRT different size underlying source rectangle (number pixels). values allowed nearest, bilinear, cubic, cubicspline, lanczos, average mode (character). krnl filtering kernel specified pixel coefficients. krnl array dimensions (size, size), size must odd number. krnl can also given vector length size x size. example, 3x3 average filter given : kernel applied sub-sampled -sampled data. normalized Logical. Indicates whether kernel normalized. Defaults TRUE.","code":"krnl <- c( 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"Returns VRT filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"rasterToVRT() can used virtually clip pixel-align various raster layers relation vector polygon boundaries. also supports VRT kernel filtering. VRT dataset saved plain-text file extension .vrt. file contains description dataset XML format. description includes source raster filename can full path (relativeToVRT = FALSE) relative path (relativeToVRT = TRUE). relative path, rasterToVRT() assumes .vrt file directory source file uses basename(srcfile). elements XML schema describe source data read, along algorithms potentially applied forth. Documentation XML format .vrt : https://gdal.org/en/stable/drivers/raster/vrt.html. Since .vrt small plain-text file fast write requires little storage space. Read performance degraded certain simple operations (e.g., virtual clip without resampling). Reading slower virtual resampling different pixel resolution virtual kernel filtering since operations performed --fly (.vrt require front writing resampled kernel-filtered raster regular format). VRT sometimes useful intermediate raster series processing steps, e.g., tempfile (default). GDAL VRT format several capabilities uses beyond covered rasterToVRT(). See URL full discussion.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"Pixel alignment specified terms source raster pixels (.e., srcfile virtual raster). use case mind virtually clipping raster bounding box vector polygon keeping pixels aligned srcfile (src_align = TRUE). src_align set FALSE intent \"target alignment\". example, subwindow bounding box another raster different layout, also setting resolution pixel resolution target raster src_align = FALSE result virtual raster pixel-aligned target (.e., pixels virtual raster longer aligned srcfile). Resampling defaults nearest specified. Examples cases src_align given . rasterToVRT() assumes srcfile north-raster.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"","code":"## resample  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds <- new(GDALRaster, evt_file) ds$res() #> [1] 30 30 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$close()  # table of the unique pixel values and their counts tbl <- buildRAT(evt_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(tbl) #>    VALUE COUNT #> 1   7011    28 #> 2   7046  4564 #> 3   7050   570 #> 4   7055   889 #> 5   7056   304 #> 6   7057    11 #> 7   7070   267 #> 8   7106     3 #> 9   7125     1 #> 10  7126  1082 #> 11  7140   679 #> 12  7143   199 #> 13  7144   765 #> 14  7145   681 #> 15  7166    32 #> 16  7169    60 #> 17  7292   397 #> 18  7901     2 #> 19  9016  2486 #> 20  9017    13 #> 21  9018  1280 #> 22  9021    14 #> 23  9022    98 #> 24    NA   876 sum(tbl$COUNT) #> [1] 15301  # resample at 90-m resolution # EVT is thematic vegetation type so use a majority value vrt_file <- rasterToVRT(evt_file,                         resolution=c(90,90),                         resampling=\"mode\")  # .vrt is a small xml file pointing to the source raster file.size(vrt_file) #> [1] 1652  tbl90m <- buildRAT(vrt_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(tbl90m) #>    VALUE COUNT #> 1   7011     1 #> 2   7046   614 #> 3   7050    59 #> 4   7055    75 #> 5   7056    27 #> 6   7057     2 #> 7   7070    27 #> 8   7126   119 #> 9   7140    59 #> 10  7143    13 #> 11  7144    75 #> 12  7145    64 #> 13  7166     2 #> 14  7169     4 #> 15  7292    48 #> 16  9016   322 #> 17  9017     1 #> 18  9018   152 #> 19  9021     1 #> 20  9022     9 #> 21    NA    54 sum(tbl90m$COUNT) #> [1] 1728  ds <- new(GDALRaster, vrt_file) ds$res() #> [1] 90 90 ds$bbox() #> [1]  323476.1 5101842.0  327796.1 5105082.0 ds$close()  ## clip  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds_evt <- new(GDALRaster, evt_file) ds_evt$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0  # WKT string for a boundary within the EVT extent bnd = \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2 5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5, 325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\"  # src_align = TRUE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=TRUE) ds_vrt <- new(GDALRaster, vrt_file)  # VRT is a virtual clip, pixel-aligned with the EVT raster bbox_from_wkt(bnd) #> [1]  323794.2 5102885.8  326420.0 5104929.4 ds_vrt$bbox() #> [1]  323776.1 5102862.0  326446.1 5104932.0 ds_vrt$res() #> [1] 30 30 ds_vrt$close()  # src_align = FALSE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=FALSE) ds_vrt_noalign <- new(GDALRaster, vrt_file)  # VRT upper left corner (xmin, ymax) is exactly bnd xmin, ymax ds_vrt_noalign$bbox() #> [1]  323794.2 5102859.4  326434.2 5104929.4 ds_vrt_noalign$res() #> [1] 30 30  ds_vrt_noalign$close() ds_evt$close()   ## subset and pixel align two rasters  # FARSITE landscape file for the Storm Lake area lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file)  # Landsat band 5 file covering the Storm Lake area b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds_b5 <- new(GDALRaster, b5_file)  ds_lcp$bbox()  # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res()   # 30 30 #> [1] 30 30  ds_b5$bbox()   # 323400.9 5101815.8  327870.9 5105175.8 #> [1]  323400.9 5101815.8  327870.9 5105175.8 ds_b5$res()    # 30 30 #> [1] 30 30  # src_align = FALSE because we need target alignment in this case: vrt_file <- rasterToVRT(b5_file,                         resolution = ds_lcp$res(),                         subwindow = ds_lcp$bbox(),                         src_align = FALSE) ds_b5vrt <- new(GDALRaster, vrt_file)  ds_b5vrt$bbox() # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_b5vrt$res()  # 30 30 #> [1] 30 30  # read the the Landsat file pixel-aligned with the LCP file # summarize band 5 reflectance where FBFM = 165 # LCP band 4 contains FBFM (a classification of fuel beds): ds_lcp$getMetadata(band=4, domain=\"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           # verify Landsat nodata (0): ds_b5vrt$getNoDataValue(band=1) #> [1] 0 # will be read as NA and omitted from stats rs <- new(RunningStats, na_rm=TRUE)  ncols <- ds_lcp$getRasterXSize() nrows <- ds_lcp$getRasterYSize() for (row in 0:(nrows-1)) {     row_fbfm <- ds_lcp$read(band=4, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)     row_b5 <- ds_b5vrt$read(band=1, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)      rs$update(row_b5[row_fbfm == 165]) } rs$get_count() #> [1] 2498 rs$get_mean() #> [1] 12992.35 rs$get_min() #> [1] 7635 rs$get_max() #> [1] 17866 rs$get_sum() #> [1] 32454886 rs$get_var() #> [1] 1214912 rs$get_sd() #> [1] 1102.23  ds_b5vrt$close() ds_lcp$close() ds_b5$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":null,"dir":"Reference","previous_headings":"","what":"Burn vector geometries into a raster — rasterize","title":"Burn vector geometries into a raster — rasterize","text":"rasterize() burns vector geometries (points, lines, polygons) band(s) raster dataset. Vectors read GDAL OGR-supported vector format. function wrapper gdal_rasterize command-line utility (https://gdal.org/en/stable/programs/gdal_rasterize.html).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Burn vector geometries into a raster — rasterize","text":"","code":"rasterize(   src_dsn,   dstfile,   band = NULL,   layer = NULL,   where = NULL,   sql = NULL,   burn_value = NULL,   burn_attr = NULL,   invert = NULL,   te = NULL,   tr = NULL,   tap = NULL,   ts = NULL,   dtName = NULL,   dstnodata = NULL,   init = NULL,   fmt = NULL,   co = NULL,   add_options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Burn vector geometries into a raster — rasterize","text":"src_dsn Data source name input vector layer (filename connection string). dstfile Either character string giving filename output raster dataset, object class GDALRaster output. Must support update mode access. given filename, file created (overwritten already exists - see Note). given GDALRaster object existing dataset, affected pixels updated -place (object must open write access). band Numeric vector. band(s) burn values (existing dstfile). default burn band 1. used creating new raster. layer Character vector layer names(s) src_dsn  used input features. least one layer name sql option must specified. optional SQL style query string select features burn input layer(s). sql SQL statement evaluated src_dsn produce virtual layer features burned (alternative layer). burn_value fixed numeric value burn band features. numeric vector can supplied, one burn value per band written . burn_attr Character string. Name attribute field features used burn-value. value burned output bands. invert Logical scalar. TRUE invert rasterization. Burn fixed burn value, burn value associated first feature, parts raster inside provided polygon. te Numeric vector length four. Sets output raster extent. values must expressed georeferenced units. specified, extent output raster extent vector layer. tr Numeric vector length two. Sets target pixel resolution. values must expressed georeferenced units. must positive. tap Logical scalar. (target aligned pixels) Align coordinates extent output raster values tr, aligned extent includes minimum extent. Alignment means xmin / resx, ymin / resy, xmax / resx ymax / resy integer values. ts Numeric vector length two. Sets output raster size pixels (xsize, ysize). Note ts used tr. dtName Character name output raster data type, e.g., Byte, Int16, UInt16, Int32, UInt32, Float32, Float64. Defaults Float64. dstnodata Numeric scalar. Assign nodata value output bands. init Numeric vector. Pre-initialize output raster band(s) value(s). However, marked nodata value output file. one value given, value used bands. fmt Output raster format short name (e.g., \"GTiff\"). attempt guess output filename fmt specified. co Optional list format-specific creation options output raster vector \"NAME=VALUE\" pairs (e.g., options = c(\"TILED=YES\",\"COMPRESS=LZW\") set LZW compression creation tiled GTiff file). add_options optional character vector additional command-line options gdal_rasterize (see gdal_rasterize documentation URL available options). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Burn vector geometries into a raster — rasterize","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Burn vector geometries into a raster — rasterize","text":"rasterize() creates new target raster dstfile given filename (character string). case, combination fmt, dstnodata, init, co, te, tr, tap, ts, dtName arguments used. resolution size must specified using either tr ts argument new rasters. target raster overwritten already exists creation-related options used. update existing raster -place, object class GDALRaster may given dstfile argument. GDALRaster object open write access.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Burn vector geometries into a raster — rasterize","text":"","code":"# MTBS fire perimeters for Yellowstone National Park 1984-2022 dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") sql <- \"SELECT * FROM mtbs_perims ORDER BY mtbs_perims.ig_year\" out_file <- file.path(tempdir(), \"ynp_fires_1984_2022.tif\")  rasterize(src_dsn = dsn,           dstfile = out_file,           sql = sql,           burn_attr = \"ig_year\",           tr = c(90,90),           tap = TRUE,           dtName = \"Int16\",           dstnodata = -9999,           init = -9999,           co = c(\"TILED=YES\",\"COMPRESS=LZW\")) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, out_file) pal <- scales::viridis_pal(end = 0.8, direction = -1)(6) ramp <- scales::colour_ramp(pal) plot_raster(ds, legend = TRUE, col_map_fn = ramp, na_col = \"#d9d9d9\",             main=\"YNP Fires 1984-2022 - Most Recent Burn Year\")   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper for GDALRaster$read() — read_ds","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"read_ds() read raster dataset already open GDALRaster object. default, attempts read full raster extent bands full resolution. read_ds() sometimes convenient GDALRaster$read(), e.g., read specific multiple bands display plot_raster(), simply default arguments read entire raster memory (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"","code":"read_ds(   ds,   bands = NULL,   xoff = 0,   yoff = 0,   xsize = ds$getRasterXSize(),   ysize = ds$getRasterYSize(),   out_xsize = xsize,   out_ysize = ysize,   as_list = FALSE,   as_raw = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"ds object class GDALRaster open state. bands Integer vector band numbers read. default bands read. xoff Integer. pixel (column) offset top left corner raster region read (zero start left side). yoff Integer. line (row) offset top left corner raster region read (zero start top). xsize Integer. width pixels region read. ysize Integer. height pixels region read. out_xsize Integer. width pixels output buffer desired region read (e.g., read reduced resolution overview). out_ysize Integer. height pixels output buffer desired region read (e.g., read reduced resolution overview). as_list Logical. TRUE, return output list band vectors. FALSE (default), output vector pixel data interleaved band. as_raw Logical. TRUE underlying data type Byte, return output R's raw vector type. maps setting $readByteAsRaw GDALRaster object, temporarily updated function. control behavior persistent way dataset see $readByteAsRaw GDALRaster-class.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"as_list = FALSE (default), vector raw, integer, double complex containing values read. organized left right, top bottom pixel order, interleaved band. as_list = TRUE, list number elements equal number bands read. element contains vector raw, integer, double complex containing pixel values read band.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64). output object attribute gis, list containing: WKT version used projection string can overridden setting OSR_WKT_FORMAT configuration option. See srs_to_wkt() list supported values.","code":"$type = \"raster\"   $bbox = c(xmin, ymin, xmax, ymax)   $dim = c(xsize, ysize, nbands)   $srs = <projection as WKT2 string>   $datatype = <character vector of data type name by band>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"small overhead calling read_ds() compared calling GDALRaster$read() directly. matter calling function repeatedly read raster chunks. case reading large raster many chunks, optimal performance-wise call GDALRaster$read() directly. default, function attempt read full raster memory. generally called large raster datasets using default argument values. memory size bytes returned vector , e.g., (xsize * ysize * number bands * 4) data read integer, (xsize * ysize * number bands * 8) data read double (plus small object overhead vector).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"","code":"# read three bands from a multi-band dataset lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file)  # as a vector of pixel data interleaved by band r <- read_ds(ds, bands=c(6,5,4)) typeof(r) #> [1] \"integer\" length(r) #> [1] 45903 object.size(r) #> 185776 bytes  # as a list of band vectors r <- read_ds(ds, bands=c(6,5,4), as_list=TRUE) typeof(r) #> [1] \"list\" length(r) #> [1] 3 object.size(r) #> 185960 bytes  # gis attributes attr(r, \"gis\") #> $type #> [1] \"raster\" #>  #> $bbox #> [1]  323476.1 5101872.0  327766.1 5105082.0 #>  #> $dim #> [1] 143 107   3 #>  #> $srs #> [1] \"PROJCRS[\\\"NAD83 / UTM zone 12N\\\",BASEGEOGCRS[\\\"NAD83\\\",DATUM[\\\"North American Datum 1983\\\",ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,LENGTHUNIT[\\\"metre\\\",1]],ID[\\\"EPSG\\\",6269]],PRIMEM[\\\"Greenwich\\\",0,ANGLEUNIT[\\\"Degree\\\",0.0174532925199433]]],CONVERSION[\\\"UTM zone 12N\\\",METHOD[\\\"Transverse Mercator\\\",ID[\\\"EPSG\\\",9807]],PARAMETER[\\\"Latitude of natural origin\\\",0,ANGLEUNIT[\\\"Degree\\\",0.0174532925199433],ID[\\\"EPSG\\\",8801]],PARAMETER[\\\"Longitude of natural origin\\\",-111,ANGLEUNIT[\\\"Degree\\\",0.0174532925199433],ID[\\\"EPSG\\\",8802]],PARAMETER[\\\"Scale factor at natural origin\\\",0.9996,SCALEUNIT[\\\"unity\\\",1],ID[\\\"EPSG\\\",8805]],PARAMETER[\\\"False easting\\\",500000,LENGTHUNIT[\\\"metre\\\",1],ID[\\\"EPSG\\\",8806]],PARAMETER[\\\"False northing\\\",0,LENGTHUNIT[\\\"metre\\\",1],ID[\\\"EPSG\\\",8807]],ID[\\\"EPSG\\\",16012]],CS[Cartesian,2],AXIS[\\\"(E)\\\",east,ORDER[1],LENGTHUNIT[\\\"metre\\\",1,ID[\\\"EPSG\\\",9001]]],AXIS[\\\"(N)\\\",north,ORDER[2],LENGTHUNIT[\\\"metre\\\",1,ID[\\\"EPSG\\\",9001]]]]\" #>  #> $datatype #> [1] \"Int16\" \"Int16\" \"Int16\" #>   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a dataset — renameDataset","title":"Rename a dataset — renameDataset","text":"renameDataset() renames dataset format-specific way (e.g., rename associated files appropriate). include moving dataset new directory even new filesystem. dataset open existing GDALRaster objects renameDataset() called. Wrapper GDALRenameDataset() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a dataset — renameDataset","text":"","code":"renameDataset(new_filename, old_filename, format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a dataset — renameDataset","text":"new_filename New name dataset. old_filename Old name dataset (open GDALRaster object). format Raster format short name (e.g., \"GTiff\"). set empty string \"\" (default), attempt guess raster format old_filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a dataset — renameDataset","text":"Logical TRUE error FALSE failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rename a dataset — renameDataset","text":"format set empty string \"\" (default) function try identify driver old_filename. done internally GDAL invoking Identify method registered GDALDriver turn. first driver successful identifies file name returned. error raised format determined passed file name.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a dataset — renameDataset","text":"","code":"b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b5_tmp <- file.path(tempdir(), \"b5_tmp.tif\") file.copy(b5_file,  b5_tmp) #> [1] TRUE  ds <- new(GDALRaster, b5_tmp) ds$buildOverviews(\"BILINEAR\", levels = c(2, 4, 8), bands = c(1)) #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds$getFileList() #> [1] \"/tmp/RtmplY4zfC/b5_tmp.tif\"     \"/tmp/RtmplY4zfC/b5_tmp.tif.ovr\" ds$close() b5_tmp2 <- file.path(tempdir(), \"b5_tmp_renamed.tif\") renameDataset(b5_tmp2, b5_tmp) #> [1] TRUE ds <- new(GDALRaster, b5_tmp2) ds$getFileList() #> [1] \"/tmp/RtmplY4zfC/b5_tmp_renamed.tif\"     #> [2] \"/tmp/RtmplY4zfC/b5_tmp_renamed.tif.ovr\" ds$close()  deleteDataset(b5_tmp2) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_cache_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the maximum memory size for the GDAL block cache — set_cache_max","title":"Set the maximum memory size for the GDAL block cache — set_cache_max","text":"set_cache_max() sets maximum amount memory GDAL permitted use GDALRasterBlock caching. unit value set bytes. Wrapper GDALSetCacheMax64().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_cache_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the maximum memory size for the GDAL block cache — set_cache_max","text":"","code":"set_cache_max(nbytes)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_cache_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the maximum memory size for the GDAL block cache — set_cache_max","text":"nbytes numeric value optionally carrying integer64 class attribute (assumed whole number, coerced integer truncation). Specifies new cache size bytes (maximum number bytes caching).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_cache_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the maximum memory size for the GDAL block cache — set_cache_max","text":"return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_cache_max.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set the maximum memory size for the GDAL block cache — set_cache_max","text":"function make attempt check consistency passed value effective capabilities OS. recommended consult documentation get_cache_max() get_cache_used() using function. get_cache_max(), get_cache_used()","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_cache_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the maximum memory size for the GDAL block cache — set_cache_max","text":"","code":"(cachemax <- get_cache_max(\"bytes\")) #> integer64 #> [1] 838634291  set_cache_max(1e8) get_cache_max()  # returns in MB by default #> integer64 #> [1] 100  # reset to original set_cache_max(cachemax) get_cache_max() #> integer64 #> [1] 838"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GDAL configuration option — set_config_option","title":"Set GDAL configuration option — set_config_option","text":"set_config_option() sets GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/en/stable/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(key, value)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GDAL configuration option — set_config_option","text":"key Character name configuration option. value Character value set option. value = \"\" (empty string) unset value previously set set_config_option().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set GDAL configuration option — set_config_option","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(\"GDAL_CACHEMAX\", \"10%\") get_config_option(\"GDAL_CACHEMAX\") #> [1] \"10%\" ## unset: set_config_option(\"GDAL_CACHEMAX\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove small raster polygons — sieveFilter","title":"Remove small raster polygons — sieveFilter","text":"sieveFilter() wrapper GDALSieveFilter() GDAL Algorithms API. removes raster polygons smaller provided threshold size (pixels) replaces pixel value largest neighbour polygon.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove small raster polygons — sieveFilter","text":"","code":"sieveFilter(   src_filename,   src_band,   dst_filename,   dst_band,   size_threshold,   connectedness,   mask_filename = \"\",   mask_band = 0L,   options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove small raster polygons — sieveFilter","text":"src_filename Filename source raster processed. src_band Band number source raster processed. dst_filename Filename output raster. may src_filename update source file place. dst_band Band number dst_filename write output. may src_band update source raster place. size_threshold Integer. Raster polygons sizes (pixels) smaller value merged largest neighbour. connectedness Integer. Either 4 indicating diagonal pixels considered directly adjacent polygon membership purposes, 8 indicating . mask_filename Optional filename raster use mask. mask_band Band number mask_filename use mask. pixels mask band value zero considered suitable inclusion polygons. options Algorithm options character vector name=value pairs. None currently supported. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove small raster polygons — sieveFilter","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove small raster polygons — sieveFilter","text":"Polygons determined regions raster pixels value, contiguous (connected). Pixels determined \"nodata\" per mask band treated part polygon regardless pixel values. Nodata areas never changed affect polygon sizes. Polygons smaller threshold neighbours large threshold altered. Polygons surrounded nodata areas therefore altered. algorithm makes three passes input file enumerate polygons collect limited information . Memory use proportional number polygons (roughly 24 bytes per polygon), directly related size raster. large raster files can processed effectively many polygons. extremely noisy rasters many one pixel polygons end expensive (memory) process. input dataset read integer data means floating point values rounded integers.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove small raster polygons — sieveFilter","text":"","code":"## remove single-pixel polygons from the vegetation type layer (EVT) evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\")  # create a blank raster to hold the output evt_mmu_file <- file.path(tempdir(), \"storml_evt_mmu2.tif\") rasterFromRaster(srcfile = evt_file,                  dstfile = evt_mmu_file,                  init = 32767) #> initializing destination raster... #> done  # create a mask to exclude water pixels from the algorithm # recode water (7292) to 0 expr <- \"ifelse(EVT == 7292, 0, EVT)\" mask_file <- calc(expr = expr,                   rasterfiles = evt_file,                   var.names = \"EVT\") #> calculating from 1 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmplY4zfC/rastcalc23d0154a836e.tif  # create a version of EVT with two-pixel minimum mapping unit sieveFilter(src_filename = evt_file,             src_band = 1,             dst_filename = evt_mmu_file,             dst_band = 1,             size_threshold = 2,             connectedness = 8,             mask_filename = mask_file,             mask_band = 1) #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"functions convert various spatial reference formats Well Known Text (WKT) PROJJSON.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"","code":"epsg_to_wkt(epsg, pretty = FALSE)  srs_to_wkt(srs, pretty = FALSE, gcs_only = FALSE)  srs_to_projjson(srs, multiline = TRUE, indent_width = 2L, schema = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"epsg Integer EPSG code. pretty Logical value. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default). srs Character string containing SRS definition various formats (see Details). gcs_only Logical value. TRUE return definition GEOGCS node input srs. Defaults FALSE (see Note). multiline Logical value. TRUE PROJJSON multiline output (default). indent_width Integer value. Defaults 2. used multiline = TRUE PROJJSON output. schema Character string containing URL PROJJSON schema. Can set empty string disable (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"epsg_to_wkt() exports spatial reference EPSG code WKT format. Wrapper OSRImportFromEPSG() GDAL Spatial Reference System API output WKT. srs_to_wkt() converts spatial reference system (SRS) definition various text formats WKT. function examine input SRS, try deduce format, export WKT. Wrapper OSRSetFromUserInput() GDAL Spatial Reference System API output WKT. srs_to_projjson() accepts spatial reference system (SRS) definition formats supported srs_to_wkt(), converts PROJJSON format. Wrapper OSRExportToPROJJSON() GDAL Spatial Reference System API. input SRS may take following forms: WKT - convert WKT versions (see ) EPSG:n - EPSG code n AUTO:proj_id,unit_id,lon0,lat0 - WMS auto projections urn:ogc:def:crs:EPSG::n - OGC URNs PROJ.4 definitions filename - file read WKT, XML PROJ.4 definition well known name NAD27, NAD83, WGS84 WGS72 IGNF:xxxx, ESRI:xxxx - definitions PROJ database PROJJSON (PROJ >= 6.2) srs_to_wkt() intended flexible, nature imprecise must guess information format intended. epsg_to_wkt() used instead EPSG codes. GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"Setting gcs_only = TRUE srs_to_wkt() wrapper OSRCloneGeogCS() GDAL API. returned WKT GEOGCS node input srs.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spatial reference definitions to OGC WKT or PROJJSON — srs_convert","text":"","code":"epsg_to_wkt(5070) #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"5070\\\"]]\" writeLines(epsg_to_wkt(5070, pretty = TRUE)) #> PROJCS[\"NAD83 / Conus Albers\", #>     GEOGCS[\"NAD83\", #>         DATUM[\"North_American_Datum_1983\", #>             SPHEROID[\"GRS 1980\",6378137,298.257222101, #>                 AUTHORITY[\"EPSG\",\"7019\"]], #>             AUTHORITY[\"EPSG\",\"6269\"]], #>         PRIMEM[\"Greenwich\",0, #>             AUTHORITY[\"EPSG\",\"8901\"]], #>         UNIT[\"degree\",0.0174532925199433, #>             AUTHORITY[\"EPSG\",\"9122\"]], #>         AUTHORITY[\"EPSG\",\"4269\"]], #>     PROJECTION[\"Albers_Conic_Equal_Area\"], #>     PARAMETER[\"latitude_of_center\",23], #>     PARAMETER[\"longitude_of_center\",-96], #>     PARAMETER[\"standard_parallel_1\",29.5], #>     PARAMETER[\"standard_parallel_2\",45.5], #>     PARAMETER[\"false_easting\",0], #>     PARAMETER[\"false_northing\",0], #>     UNIT[\"metre\",1, #>         AUTHORITY[\"EPSG\",\"9001\"]], #>     AXIS[\"Easting\",EAST], #>     AXIS[\"Northing\",NORTH], #>     AUTHORITY[\"EPSG\",\"5070\"]]  srs_to_wkt(\"NAD83\") #> [1] \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]]\" writeLines(srs_to_wkt(\"NAD83\", pretty = TRUE)) #> GEOGCS[\"NAD83\", #>     DATUM[\"North_American_Datum_1983\", #>         SPHEROID[\"GRS 1980\",6378137,298.257222101, #>             AUTHORITY[\"EPSG\",\"7019\"]], #>         AUTHORITY[\"EPSG\",\"6269\"]], #>     PRIMEM[\"Greenwich\",0, #>         AUTHORITY[\"EPSG\",\"8901\"]], #>     UNIT[\"degree\",0.0174532925199433, #>         AUTHORITY[\"EPSG\",\"9122\"]], #>     AXIS[\"Latitude\",NORTH], #>     AXIS[\"Longitude\",EAST], #>     AUTHORITY[\"EPSG\",\"4269\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(srs_to_wkt(\"NAD83\", pretty = TRUE)) #> GEOGCRS[\"NAD83\", #>     DATUM[\"North American Datum 1983\", #>         ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>             LENGTHUNIT[\"metre\",1]]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     ID[\"EPSG\",4269]] set_config_option(\"OSR_WKT_FORMAT\", \"\")  srs_to_wkt(\"EPSG:5070\", gcs_only = TRUE) #> [1] \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]]\"  srs_to_projjson(\"NAD83\") |> cat(\"\\n\") #> { #>   \"$schema\": \"https://proj.org/schemas/v0.7/projjson.schema.json\", #>   \"type\": \"GeographicCRS\", #>   \"name\": \"NAD83\", #>   \"datum\": { #>     \"type\": \"GeodeticReferenceFrame\", #>     \"name\": \"North American Datum 1983\", #>     \"ellipsoid\": { #>       \"name\": \"GRS 1980\", #>       \"semi_major_axis\": 6378137, #>       \"inverse_flattening\": 298.257222101 #>     } #>   }, #>   \"coordinate_system\": { #>     \"subtype\": \"ellipsoidal\", #>     \"axis\": [ #>       { #>         \"name\": \"Geodetic latitude\", #>         \"abbreviation\": \"Lat\", #>         \"direction\": \"north\", #>         \"unit\": \"degree\" #>       }, #>       { #>         \"name\": \"Geodetic longitude\", #>         \"abbreviation\": \"Lon\", #>         \"direction\": \"east\", #>         \"unit\": \"degree\" #>       } #>     ] #>   }, #>   \"id\": { #>     \"authority\": \"EPSG\", #>     \"code\": 4269 #>   } #> }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain information about a spatial reference system — srs_query","title":"Obtain information about a spatial reference system — srs_query","text":"Bindings subset GDAL Spatial Reference System API (https://gdal.org/en/stable/api/ogr_srs_api.html). functions return various information spatial reference system passed text formats supported srs_to_wkt().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain information about a spatial reference system — srs_query","text":"","code":"srs_get_name(srs)  srs_find_epsg(srs, all_matches = FALSE)  srs_is_geographic(srs)  srs_is_derived_gcs(srs)  srs_is_local(srs)  srs_is_projected(srs)  srs_is_compound(srs)  srs_is_geocentric(srs)  srs_is_vertical(srs)  srs_is_dynamic(srs)  srs_is_same(   srs,   srs_other,   criterion = \"\",   ignore_axis_mapping = FALSE,   ignore_coord_epoch = FALSE )  srs_get_angular_units(srs)  srs_get_linear_units(srs)  srs_get_coord_epoch(srs)  srs_get_utm_zone(srs)  srs_get_axis_mapping_strategy(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain information about a spatial reference system — srs_query","text":"srs Character string containing SRS definition various formats (e.g., WKT, PROJ.4 string, well known name NAD27, NAD83, WGS84, etc., see srs_to_wkt()). all_matches Logical scalar. TRUE return identified matches data frame, including confidence value (0-100) match. default FALSE returns character string form \"EPSG:<code>\" first match (highest confidence). srs_other Character string containing SRS definition various formats(see ). criterion Character string. One STRICT, EQUIVALENT, EQUIVALENT_EXCEPT_AXIS_ORDER_GEOGCRS. Defaults EQUIVALENT_EXCEPT_AXIS_ORDER_GEOGCRS. ignore_axis_mapping Logical scalar. TRUE, sets IGNORE_DATA_AXIS_TO_SRS_AXIS_MAPPING=YES call OSRIsSameEx() GDAL Spatial Reference System API. Defaults . ignore_coord_epoch Logical scalar. TRUE, sets IGNORE_COORDINATE_EPOCH=YES call OSRIsSameEx() GDAL Spatial Reference System API. Defaults .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain information about a spatial reference system — srs_query","text":"srs_find_epsg() tries find matching EPSG code. Matching may partial, may fail. all_matches = TRUE, returns data frame entries sorted decreasing match confidence (first entry highest match confidence); default FALSE returns character string form \"EPSG:####\" first match (highest confidence). Wrapper OSRFindMatches() GDAL SRS API. srs_get_name() returns SRS name. Wrapper OSRGetName() GDAL API. srs_is_geographic() returns TRUE  root GEOGCS node. Wrapper OSRIsGeographic() GDAL API. srs_is_derived_gcs() returns TRUE SRS derived geographic coordinate system (example rotated long/lat grid). Wrapper OSRIsDerivedGeographic() GDAL API. srs_is_local() returns TRUE SRS local coordinate system (root LOCAL_CS node). Wrapper OSRIsLocal() GDAL API. srs_is_projected() returns TRUE SRS contains PROJCS node indicating projected coordinate system. Wrapper OSRIsProjected() GDAL API. srs_is_compound() returns TRUE SRS compound. Wrapper OSRIsCompound() GDAL API. srs_is_geocentric() returns TRUE SRS geocentric coordinate system. Wrapper OSRIsGeocentric() GDAL API. srs_is_vertical() returns TRUE SRS vertical coordinate system. Wrapper OSRIsVertical() GDAL API. srs_is_dynamic() returns TRUE SRS dynamic coordinate system (relies dynamic datum, .e., datum plate-fixed). Wrapper OSRIsDynamic() GDAL API. Requires GDAL >= 3.4. srs_is_same() returns TRUE two spatial references describe system. Wrapper OSRIsSame() GDAL API. srs_get_angular_units() fetches angular geographic coordinate system units. Returns list length two: first element contains unit name character string, second element contains numeric value multiply angular distances transform radians. Wrapper OSRGetAngularUnits() GDAL API. srs_get_linear_units() fetches linear projection units. Returns list length two: first element contains unit name character string, second element contains numeric value multiply linear distances transform meters. units available, values \"Meters\" 1.0 assumed. Wrapper OSRGetLinearUnits() GDAL API. srs_get_coord_epoch() returns coordinate epoch, decimal year (e.g. 2021.3), 0 set relevant. Wrapper OSRGetCoordinateEpoch() GDAL API. Requires GDAL >= 3.4. srs_get_utm_zone() returns UTM zone number zero srs UTM definition. positive value indicates northern hemisphere; negative value southern hemisphere. Wrapper OSRGetUTMZone() GDAL API. srs_get_axis_mapping_strategy() returns data axis CRS axis mapping strategy character string, one : OAMS_TRADITIONAL_GIS_ORDER: geographic CRS lat/long order, data still long/lat ordered. Similarly projected CRS northing/easting order, data still easting/northing ordered. OAMS_AUTHORITY_COMPLIANT: data axis identical CRS axis. OAMS_CUSTOM: custom-defined data axis","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain information about a spatial reference system — srs_query","text":"","code":"wkt <- 'PROJCS[\"ETRS89 / UTM zone 32N (N-E)\",         GEOGCS[\"ETRS89\",             DATUM[\"European_Terrestrial_Reference_System_1989\",                 SPHEROID[\"GRS 1980\",6378137,298.257222101,                     AUTHORITY[\"EPSG\",\"7019\"]],                 TOWGS84[0,0,0,0,0,0,0],                 AUTHORITY[\"EPSG\",\"6258\"]],             PRIMEM[\"Greenwich\",0,                 AUTHORITY[\"EPSG\",\"8901\"]],             UNIT[\"degree\",0.0174532925199433,                 AUTHORITY[\"EPSG\",\"9122\"]],             AUTHORITY[\"EPSG\",\"4258\"]],         PROJECTION[\"Transverse_Mercator\"],         PARAMETER[\"latitude_of_origin\",0],         PARAMETER[\"central_meridian\",9],         PARAMETER[\"scale_factor\",0.9996],         PARAMETER[\"false_easting\",500000],         PARAMETER[\"false_northing\",0],         UNIT[\"metre\",1,             AUTHORITY[\"EPSG\",\"9001\"]],         AXIS[\"Northing\",NORTH],         AXIS[\"Easting\",EAST]]'  srs_find_epsg(wkt) #> [1] \"EPSG:3044\"  srs_find_epsg(wkt, all_matches = TRUE) #>   authority_name authority_code confidence #> 1           EPSG           3044        100  srs_get_name(\"EPSG:5070\") #> [1] \"NAD83 / Conus Albers\"  srs_is_geographic(\"EPSG:5070\") #> [1] FALSE srs_is_geographic(\"EPSG:4326\") #> [1] TRUE  srs_is_derived_gcs(\"WGS84\") #> [1] FALSE  srs_is_projected(\"EPSG:5070\") #> [1] TRUE srs_is_projected(\"EPSG:4326\") #> [1] FALSE  srs_is_compound(\"EPSG:4326\") #> [1] FALSE  srs_is_geocentric(\"EPSG:7789\") #> [1] TRUE  srs_is_vertical(\"EPSG:5705\") #> [1] TRUE  f <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, f)  ds$getProjection() |> srs_is_projected() #> [1] TRUE ds$getProjection() |> srs_get_utm_zone() #> [1] 12 ds$getProjection() |> srs_get_angular_units() #> $unit_name #> [1] \"degree\" #>  #> $to_radians #> [1] 0.01745329 #>  ds$getProjection() |> srs_get_linear_units() #> $unit_name #> [1] \"metre\" #>  #> $to_meters #> [1] 1 #>  ds$getProjection() |> srs_get_axis_mapping_strategy() #> [1] \"OAMS_AUTHORITY_COMPLIANT\"  ds$getProjection() |> srs_is_same(\"EPSG:26912\") #> [1] TRUE ds$getProjection() |> srs_is_same(\"NAD83\") #> [1] FALSE  ds$close()  # Requires GDAL >= 3.4 if (gdal_version_num() >= gdal_compute_version(3, 4, 0)) {   if (srs_is_dynamic(\"WGS84\"))     print(\"WGS84 is dynamic\")    if (!srs_is_dynamic(\"NAD83\"))     print(\"NAD83 is not dynamic\") } #> [1] \"WGS84 is dynamic\" #> [1] \"NAD83 is not dynamic\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform boundary — transform_bounds","title":"Transform boundary — transform_bounds","text":"transform_bounds() transforms bounding box, densifying edges account nonlinear transformations along edges extracting outermost bounds. Wrapper OCTTransformBounds() GDAL Spatial Reference System API. Requires GDAL >= 3.4.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform boundary — transform_bounds","text":"","code":"transform_bounds(   bbox,   srs_from,   srs_to,   densify_pts = 21L,   traditional_gis_order = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform boundary — transform_bounds","text":"bbox Numeric vector length four containing input bounding box (xmin, ymin, xmax, ymax). srs_from Character string specifying spatial reference system pts. May WKT format formats supported srs_to_wkt(). srs_to Character string specifying output spatial reference system. May WKT format formats supported srs_to_wkt(). densify_pts Integer value giving number points use densify bounding polygon transformation. Recommended use 21 (default). traditional_gis_order Logical value, TRUE use traditional GIS order axis mapping (default) FALSE use authority compliant axis order (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform boundary — transform_bounds","text":"Numeric vector length four containing bounding box output spatial reference system (xmin, ymin, xmax, ymax).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform boundary — transform_bounds","text":"following refer output values xmin, ymin, xmax, ymax: destination CRS geographic, first axis longitude, xmax < xmin bounds crossed antimeridian. scenario two polygons, one side antimeridian. first polygon constructed (xmin, ymin, 180, ymax) second (-180, ymin, xmax, ymax). destination CRS geographic, first axis latitude, ymax < ymin bounds crossed antimeridian. scenario two polygons, one side antimeridian. first polygon constructed (ymin, xmin, ymax, 180) second (ymin, -180, ymax, xmax).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform boundary — transform_bounds","text":"traditional_gis_order = TRUE (default) means geographic CRS lat/long order, data still long/lat ordered. Similarly projected CRS northing/easting order, data still easting/northing ordered (GDAL's OAMS_TRADITIONAL_GIS_ORDER). traditional_gis_order = FALSE means data axis identical CRS axis (GDAL's OAMS_AUTHORITY_COMPLIANT). See https://gdal.org/en/stable/tutorials/osr_api_tut.html#crs--axis-order.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform boundary — transform_bounds","text":"","code":"bb <- c(-1405880.71737, -1371213.76254, 5405880.71737, 5371213.76254)  # traditional GIS axis ordering by  default (lon, lat) transform_bounds(bb, \"EPSG:32761\", \"EPSG:4326\") #> [1] -180.00000  -90.00000  180.00000  -48.65641  # authority compliant axis ordering transform_bounds(bb, \"EPSG:32761\", \"EPSG:4326\",                  traditional_gis_order = FALSE) #> [1]  -90.00000 -180.00000  -48.65641  180.00000"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform geospatial x/y coordinates — transform_xy","title":"Transform geospatial x/y coordinates — transform_xy","text":"transform_xy() transforms geospatial x, y coordinates new projection. input points may optionally z vertices (x, y, z) time values (x, y, z, t). Wrapper OGRCoordinateTransformation::Transform() GDAL Spatial Reference System C++ API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"transform_xy(pts, srs_from, srs_to)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform geospatial x/y coordinates — transform_xy","text":"pts data frame numeric matrix containing geospatial point coordinates, point geometries list WKB raw vectors character vector WKT strings. data frame matrix, number columns must either two (x, y), three (x, y, z) four (x, y, z, t). May also given numeric vector one point (xy, xyz, xyzt). srs_from Character string specifying spatial reference system pts. May WKT format formats supported srs_to_wkt(). srs_to Character string specifying output spatial reference system. May WKT format formats supported srs_to_wkt().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform geospatial x/y coordinates — transform_xy","text":"Numeric matrix geospatial (x, y) coordinates projection specified srs_to (potentially also z, z t columns).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform geospatial x/y coordinates — transform_xy","text":"transform_xy() uses traditional GIS order input output xy (.e., longitude/latitude ordered geographic coordinates). Input points contain missing values (NA) assigned NA output warning emitted. Input points fail transform GDAL API call also assigned NA output specific warning indicating case.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 # id, x, y in NAD83 / UTM zone 12N # transform to NAD83 / CONUS Albers transform_xy(pts = pts[, -1], srs_from = \"EPSG:26912\", srs_to = \"EPSG:5070\") #>           [,1]    [,2] #>  [1,] -1330885 2684892 #>  [2,] -1331408 2684660 #>  [3,] -1331994 2685048 #>  [4,] -1330297 2684967 #>  [5,] -1329991 2683777 #>  [6,] -1329167 2685212 #>  [7,] -1329903 2685550 #>  [8,] -1329432 2683821 #>  [9,] -1327683 2685541 #> [10,] -1331265 2685514"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raster data between different formats — translate","title":"Convert raster data between different formats — translate","text":"translate() wrapper gdal_translate command-line utility (see https://gdal.org/en/stable/programs/gdal_translate.html). function can used convert raster data different formats, potentially performing operations like subsetting, resampling, rescaling pixels process. Refer GDAL documentation URL list command-line arguments can passed cl_arg.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raster data between different formats — translate","text":"","code":"translate(src_filename, dst_filename, cl_arg = NULL, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raster data between different formats — translate","text":"src_filename Either character string giving filename source raster, object class GDALRaster source. dst_filename Character string. Filename output raster. cl_arg Optional character vector command-line arguments gdal_translate (see URL ). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raster data between different formats — translate","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raster data between different formats — translate","text":"","code":"# convert the elevation raster to Erdas Imagine format and resample to 90m elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") img_file <- file.path(tempdir(), \"storml_elev_90m.img\")  # command-line arguments for gdal_translate args <- c(\"-tr\", \"90\", \"90\", \"-r\", \"average\") args <- c(args, \"-of\", \"HFA\", \"-co\", \"COMPRESSED=YES\")  translate(elev_file, img_file, args) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, img_file) ds$info() #> Driver: HFA/Erdas Imagine Images (.img) #> Files: /tmp/RtmplY4zfC/storml_elev_90m.img #>        /tmp/RtmplY4zfC/storml_elev_90m.img.aux.xml #> Size is 48, 36 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"meters\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"meters\",1]], #>     ID[\"EPSG\",26912]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (90.000000000000000,-90.000000000000000) #> Metadata: #>   AREA_OR_POINT=Area #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101841.983) (113d16'54.08\"W, 46d 2'50.54\"N) #> Upper Right (  327796.072, 5105081.983) (113d13'37.43\"W, 46d 4'39.40\"N) #> Lower Right (  327796.072, 5101841.983) (113d13'33.21\"W, 46d 2'54.50\"N) #> Center      (  325636.072, 5103461.983) (113d15'15.78\"W, 46d 3'44.98\"N) #> Band 1 Block=64x64 Type=Int16, ColorInterp=Undefined #>   Description = Layer_1 #>   NoData Value=32767 #>   Metadata: #>     LAYER_TYPE=athematic #>     RepresentationType=ATHEMATIC #>   Image Structure Metadata: #>     COMPRESSION=RLE #>   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/validateCreationOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the list of creation options that are handled by a driver — validateCreationOptions","title":"Validate the list of creation options that are handled by a driver — validateCreationOptions","text":"validateCreationOptions() helper function primarily used GDAL's Create() CreateCopy() validate passed-list creation options compatible GDAL_DMD_CREATIONOPTIONLIST metadata item defined drivers. GDAL_DMD_CREATIONOPTIONLIST metadata item defined, function return TRUE. Otherwise check keys values list creation options compatible capabilities declared GDAL_DMD_CREATIONOPTIONLIST metadata item. case incompatibility message emitted FALSE returned. Wrapper GDALValidateCreationOptions() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/validateCreationOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the list of creation options that are handled by a driver — validateCreationOptions","text":"","code":"validateCreationOptions(format, options)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/validateCreationOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the list of creation options that are handled by a driver — validateCreationOptions","text":"format Character string giving format driver short name (e.g., \"GTiff\"). options character vector format-specific creation options \"NAME=VALUE\" pairs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/validateCreationOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the list of creation options that are handled by a driver — validateCreationOptions","text":"logical value, TRUE given creation options compatible capabilities declared GDAL_DMD_CREATIONOPTIONLIST metadata item specified format driver (GDAL_DMD_CREATIONOPTIONLIST metadata item defined driver), otherwise FALSE.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/validateCreationOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate the list of creation options that are handled by a driver — validateCreationOptions","text":"","code":"validateCreationOptions(\"GTiff\", c(\"COMPRESS=LZW\", \"TILED=YES\")) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear path specific configuration options — vsi_clear_path_options","title":"Clear path specific configuration options — vsi_clear_path_options","text":"vsi_clear_path_options() clears path specific options previously set vsi_set_path_option(). Wrapper VSIClearPathSpecificOptions() GDAL Common Portability Library. Requires GDAL >= 3.6.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear path specific configuration options — vsi_clear_path_options","text":"","code":"vsi_clear_path_options(path_prefix)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear path specific configuration options — vsi_clear_path_options","text":"path_prefix Character string. set \"\" (empty string), path specific options cleared. set path prefix, options set vsi_set_path_option(path_prefix, ...) cleared.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear path specific configuration options — vsi_clear_path_options","text":"return value, called side effect.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Clear path specific configuration options — vsi_clear_path_options","text":"particular care taken remove options RAM secure way.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for VSIFile$seek() — vsi_constants","title":"Constants for VSIFile$seek() — vsi_constants","text":"package global constants convenience calling VSIFile$seek().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for VSIFile$seek() — vsi_constants","text":"","code":"SEEK_SET  SEEK_CUR  SEEK_END"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for VSIFile$seek() — vsi_constants","text":"object class character length 1. object class character length 1. object class character length 1.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a source file to a target filename — vsi_copy_file","title":"Copy a source file to a target filename — vsi_copy_file","text":"vsi_copy_file() wrapper VSICopyFile() GDAL Common Portability Library. GDAL VSI functions allow virtualization disk /O non file data sources can made appear files. See https://gdal.org/en/stable/user/virtual_file_systems.html. Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a source file to a target filename — vsi_copy_file","text":"","code":"vsi_copy_file(src_file, target_file, show_progress = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a source file to a target filename — vsi_copy_file","text":"src_file Character string. Filename source file. target_file Character string. Filename target file. show_progress Logical scalar. TRUE, progress bar displayed (size src_file retrieved GDAL VSIStatL()). Default FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a source file to a target filename — vsi_copy_file","text":"0 success -1 error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy a source file to a target filename — vsi_copy_file","text":"following copies made fully target server, without local download source upload target: /vsis3/ -> /vsis3/ /vsigs/ -> /vsigs/ /vsiaz/ -> /vsiaz/ /vsiadls/ -> /vsiadls/ /vsicurl/ -> /vsiaz/ (starting GDAL 3.8)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Copy a source file to a target filename — vsi_copy_file","text":"target_file form /vsizip/foo.zip/bar, default options described function addFilesInZip() effect.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a source file to a target filename — vsi_copy_file","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tmp_file <- \"/vsimem/elev_temp.tif\"  # Requires GDAL >= 3.7 if (gdal_version_num() >= gdal_compute_version(3, 7, 0)) {   result <- vsi_copy_file(elev_file, tmp_file)   (result == 0)   print(vsi_stat(tmp_file, \"size\"))    vsi_unlink(tmp_file) } #> integer64 #> [1] 31152 #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"vsi_curl_clear_cache() cleans local cache associated /vsicurl/ (related file systems). function wrapper VSICurlClearCache() VSICurlPartialClearCache() GDAL Common Portability Library. See Details GDAL documentation.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"","code":"vsi_curl_clear_cache(partial = FALSE, file_prefix = \"\", quiet = TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"partial Logical scalar. Whether clear cache given filename (see Details). file_prefix Character string. Filename prefix use partial = TRUE. quiet Logical scalar. TRUE (default) wrap API call quiet error handler, FALSE print potential error messages console.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"/vsicurl/ (related file systems like /vsis3/, /vsigs/, /vsiaz/, /vsioss/, /vsiswift/) cache number metadata data faster execution read-scenarios. content server-side may change process, mechanisms can prevent opening new files, give outdated version . partial = TRUE, cleans local cache associated given filename (subfiles subdirectories directory).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"","code":"vsi_curl_clear_cache()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"vsi_get_actual_url() returns actual URL supplied filename. Currently returns non-NULL value network-based virtual file systems. example \"/vsis3/bucket/filename\" expanded \"https://bucket.s3.amazon.com/filename\". Wrapper VSIGetActualURL() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"","code":"vsi_get_actual_url(filename)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"filename Character string containing /vsiPREFIX/ filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"Character string containing actual URL, NULL filename network-based virtual file system.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"","code":"if (FALSE) { # \\dontrun{ f <- \"/vsiaz/items/io-lulc-9-class.parquet\" set_config_option(\"AZURE_STORAGE_ACCOUNT\", \"pcstacitems\") # token obtained from: # https://planetarycomputer.microsoft.com/api/sas/v1/token/pcstacitems/items set_config_option(\"AZURE_STORAGE_SAS_TOKEN\",\"<token>\") vsi_get_actual_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet\" vsi_get_signed_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet?<token>\" } # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Return free disk space available on the filesystem — vsi_get_disk_free_space","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"vsi_get_disk_free_space() returns free disk space available filesystem. Wrapper VSIGetDiskFreeSpace() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"","code":"vsi_get_disk_free_space(path)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"path Character string. directory filesystem query.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"Numeric scalar. free space bytes (bit64::integer64 type), -1 case error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"","code":"tmp_dir <- file.path(\"/vsimem\", \"tmpdir\") vsi_mkdir(tmp_dir) #> [1] 0 vsi_get_disk_free_space(tmp_dir) #> integer64 #> [1] 16772685824 vsi_rmdir(tmp_dir) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata on files — vsi_get_file_metadata","title":"Get metadata on files — vsi_get_file_metadata","text":"vsi_get_file_metadata() returns metadata file system objects. Implemented network-like filesystems. Starting GDAL 3.7, implemented /vsizip/ SOZip metadata. Wrapper VSIGetFileMetadata() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata on files — vsi_get_file_metadata","text":"","code":"vsi_get_file_metadata(filename, domain)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata on files — vsi_get_file_metadata","text":"filename Character string. path file system object queried. domain Character string. Metadata domain query. Depends file system, see Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata on files — vsi_get_file_metadata","text":"named list values, NULL case error empty list.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metadata on files — vsi_get_file_metadata","text":"metadata available depends file system. following supported GDAL 3.9: HEADERS: get HTTP headers network-like filesystems (/vsicurl/, /vsis3/, /vsgis/, etc). TAGS: /vsis3/, get S3 Object tagging information. /vsiaz/, get blob tags. STATUS: specific /vsiadls/: returns system-defined properties path (seems practice subset HEADERS). ACL: specific /vsiadls/ /vsigs/: returns access control list path. /vsigs/, single XML=xml_content string returned. METADATA: specific /vsiaz/: blob metadata (subset domain=HEADERS returns). ZIP: specific /vsizip/: obtain ZIP specific metadata, particular file SOZIP-enabled (SOZIP_VALID=YES).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata on files — vsi_get_file_metadata","text":"","code":"# validate an SOZip-enabled file # Requires GDAL >= 3.7 f <- system.file(\"extdata/ynp_features.zip\", package = \"gdalraster\")  zf <- file.path(\"/vsizip\", f) # files in zip archive vsi_read_dir(zf) #> [1] \"readme_lf_forest_canopy_cover.txt\" \"readme_lf_operational_roads.txt\"   #> [3] \"readme_ynp_vector_features.txt\"    \"ynp_bnd_metadata.html\"             #> [5] \"ynp_features.gpkg\"                  # SOZip metadata for ynp_features.gpkg zf_gpkg <- file.path(zf, \"ynp_features.gpkg\") vsi_get_file_metadata(zf_gpkg, domain = \"ZIP\") #> $START_DATA_OFFSET #> [1] \"5188\" #>  #> $COMPRESSION_METHOD #> [1] \"8 (DEFLATE)\" #>  #> $COMPRESSED_SIZE #> [1] \"532555\" #>  #> $UNCOMPRESSED_SIZE #> [1] \"1220608\" #>  #> $SOZIP_FOUND #> [1] \"YES\" #>  #> $SOZIP_VERSION #> [1] \"1\" #>  #> $SOZIP_OFFSET_SIZE #> [1] \"8\" #>  #> $SOZIP_CHUNK_SIZE #> [1] \"32768\" #>  #> $SOZIP_START_DATA_OFFSET #> [1] \"537801\" #>  #> $SOZIP_VALID #> [1] \"YES\" #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"vsi_get_fs_options() returns list options associated virtual file system handler. options may set configuration options set_config_option(). Wrapper VSIGetFileSystemOptions() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"","code":"vsi_get_fs_options(filename, as_list = TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"filename Filename, prefix virtual file system handler. as_list Logical scalar. TRUE (default), XML string returned GDAL coerced list. FALSE return configuration options serialized XML string.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"XML string, empty string (\"\") options declared. as_list = TRUE (default), XML string coerced list xml2::as_list().","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"","code":"vsi_get_fs_options(\"/vsimem/\") #> [1] \"\"  vsi_get_fs_options(\"/vsizip/\") #> $Options #> $Options$Option #> list() #> attr(,\"name\") #> [1] \"GDAL_NUM_THREADS\" #> attr(,\"type\") #> [1] \"string\" #> attr(,\"description\") #> [1] \"Number of threads for compression. Either a integer or ALL_CPUS\" #>  #> $Options$Option #> list() #> attr(,\"name\") #> [1] \"CPL_VSIL_DEFLATE_CHUNK_SIZE\" #> attr(,\"type\") #> [1] \"string\" #> attr(,\"description\") #> [1] \"Chunk of uncompressed data for parallelization. Use K(ilobytes) or M(egabytes) suffix\" #> attr(,\"default\") #> [1] \"1M\" #>  #>   vsi_get_fs_options(\"/vsizip/\", as_list = FALSE) #> [1] \"<Options>  <Option name='GDAL_NUM_THREADS' type='string' description='Number of threads for compression. Either a integer or ALL_CPUS'/>  <Option name='CPL_VSIL_DEFLATE_CHUNK_SIZE' type='string' description='Chunk of uncompressed data for parallelization. Use K(ilobytes) or M(egabytes) suffix' default='1M'/><\/Options>\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"vsi_get_fs_prefixes() returns list prefixes virtual file system handlers currently registered (e.g., \"/vsimem/\", \"/vsicurl/\", etc). Wrapper VSIGetFileSystemsPrefixes() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"","code":"vsi_get_fs_prefixes()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"Character vector containing prefixes virtual file system handlers.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"","code":"vsi_get_fs_prefixes() #>  [1] \"/vsiadls/\"            \"/vsiaz/\"              \"/vsiaz_streaming/\"    #>  [4] \"/vsicached?\"          \"/vsicrypt/\"           \"/vsicurl/\"            #>  [7] \"/vsicurl_streaming/\"  \"/vsigs/\"              \"/vsigs_streaming/\"    #> [10] \"/vsigzip/\"            \"/vsimem/\"             \"/vsioss/\"             #> [13] \"/vsioss_streaming/\"   \"/vsipmtiles/\"         \"/vsis3/\"              #> [16] \"/vsis3_streaming/\"    \"/vsisparse/\"          \"/vsistdin/\"           #> [19] \"/vsistdin?\"           \"/vsistdout/\"          \"/vsistdout_redirect/\" #> [22] \"/vsisubfile/\"         \"/vsiswift/\"           \"/vsiswift_streaming/\" #> [25] \"/vsitar/\"             \"/vsiwebhdfs/\"         \"/vsizip/\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"vsi_get_signed_url() Returns signed URL supplied filename. Currently returns non-NULL value /vsis3/, /vsigs/, /vsiaz/ /vsioss/ example \"/vsis3/bucket/filename\" expanded \"https://bucket.s3.amazon.com/filename?X-Amz-Algorithm=AWS4-HMAC-SHA256...\" Configuration options apply file opening (typically provide credentials), returned vsi_get_fs_options(), also valid context. Wrapper VSIGetSignedURL() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"","code":"vsi_get_signed_url(filename, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"filename Character string containing /vsiPREFIX/ filename. options Character vector NAME=VALUE pairs (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"Character string containing signed URL, NULL filename network-based virtual file system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"options argument accepts character vector name=value pairs. /vsis3/, /vsigs/, /vsiaz/ /vsioss/, following options supported: START_DATE=YYMMDDTHHMMSSZ: date time UTC following ISO 8601 standard, corresponding start validity URL. specified, current date time. EXPIRATION_DELAY=number_of_seconds: number 1 604800 (seven days) validity signed URL. Defaults 3600 (one hour). VERB=GET/HEAD/DELETE/PUT/POST: HTTP VERB request used. Defaults GET. /vsiaz/ supports additional options: SIGNEDIDENTIFIER=value: relate given shared access signature corresponding stored access policy. SIGNEDPERMISSIONS=r|w: permissions associated shared access signature. Normally deduced VERB.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"","code":"if (FALSE) { # \\dontrun{ f <- \"/vsiaz/items/io-lulc-9-class.parquet\" set_config_option(\"AZURE_STORAGE_ACCOUNT\", \"pcstacitems\") # token obtained from: # https://planetarycomputer.microsoft.com/api/sas/v1/token/pcstacitems/items set_config_option(\"AZURE_STORAGE_SAS_TOKEN\", \"<token>\") vsi_get_actual_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet\" vsi_get_signed_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet?<token>\" } # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_is_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns if the file/filesystem is ","title":"Returns if the file/filesystem is ","text":"vsi_is_local() returns whether file/filesystem \"local\". Wrapper VSIIsLocal() GDAL API. Requires GDAL >= 3.6.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_is_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns if the file/filesystem is ","text":"","code":"vsi_is_local(filename)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_is_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns if the file/filesystem is ","text":"filename Character string. path filesystem object tested.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_is_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns if the file/filesystem is ","text":"Logical scalar. TRUE input file path local.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_is_local.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Returns if the file/filesystem is ","text":"concept local mostly opposition network / remote file system whose access time can long. /vsimem/ considered local file system, although non-persistent one.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_is_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns if the file/filesystem is ","text":"","code":"# Requires GDAL >= 3.6 if (gdal_version_num() >= gdal_compute_version(3, 6, 0))   print(vsi_is_local(\"/vsimem/test-mem-file.tif\")) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directory — vsi_mkdir","title":"Create a directory — vsi_mkdir","text":"vsi_mkdir() creates new directory indicated mode. POSIX-style systems, mode modified file creation mask (umask). However, file systems platforms may use umask, may ignore mode completely. reasonable cross-platform default mode value 0755. recursive = TRUE, creates directory ancestors. function wrapper VSIMkdir() VSIMkdirRecursive() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directory — vsi_mkdir","text":"","code":"vsi_mkdir(path, mode = \"0755\", recursive = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directory — vsi_mkdir","text":"path Character string. path directory create. mode Character string. permissions mode octal prefix 0, e.g., \"0755\" (default). recursive Logical scalar. TRUE create directory ancestors. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directory — vsi_mkdir","text":"0 success -1 error.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directory — vsi_mkdir","text":"","code":"new_dir <- file.path(tempdir(), \"newdir\") vsi_mkdir(new_dir) #> [1] 0 vsi_stat(new_dir, \"type\") #> [1] \"dir\" vsi_rmdir(new_dir) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Read names in a directory — vsi_read_dir","title":"Read names in a directory — vsi_read_dir","text":"vsi_read_dir() abstracts access directory contents. returns character vector containing names files directories directory. recursive = TRUE, reads list entries directory subdirectories. function wrapper VSIReadDirEx() VSIReadDirRecursive() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read names in a directory — vsi_read_dir","text":"","code":"vsi_read_dir(path, max_files = 0L, recursive = FALSE, all_files = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read names in a directory — vsi_read_dir","text":"path Character string. relative absolute path directory read. max_files Integer scalar. maximum number files stop, 0 limit (see Note). Ignored recursive = TRUE. recursive Logical scalar. TRUE read directory subdirectories. Defaults FALSE. all_files Logical scalar. FALSE (default), names visible files returned (following Unix-style visibility, files whose name start dot). TRUE, file names returned.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read names in a directory — vsi_read_dir","text":"character vector containing names files directories directory given path. listing alphabetical order, include special entries '.' '..' even present directory. empty string (\"\") returned path exist.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read names in a directory — vsi_read_dir","text":"max_files set positive number, directory listing stop limit reached. Note indicate truncation, least one element max_files limit returned. length returned character vector lesser equal max_files, truncation occurred. max_files parameter ignored recursive = TRUE.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read names in a directory — vsi_read_dir","text":"","code":"# regular file system for illustration data_dir <- system.file(\"extdata\", package=\"gdalraster\") vsi_read_dir(data_dir) #>  [1] \"LF20_EVC_220.csv\"          \"LF20_EVH_220.csv\"          #>  [3] \"LF20_EVT_220.csv\"          \"LF20_F40_220.csv\"          #>  [5] \"byte.tif\"                  \"complex.tif\"               #>  [7] \"doctype.xml\"               \"domains.gpkg\"              #>  [9] \"geomatrix.tif\"             \"int64.tif\"                 #> [11] \"metadata.zip\"              \"multisurface.zip\"          #> [13] \"poly_multipoly.dbf\"        \"poly_multipoly.prj\"        #> [15] \"poly_multipoly.shp\"        \"poly_multipoly.shx\"        #> [17] \"small_world_and_byte.gpkg\" \"south-up.tif\"              #> [19] \"sr_b4_20200829.tif\"        \"sr_b5_20200829.tif\"        #> [21] \"sr_b6_20200829.tif\"        \"storm_lake.lcp\"            #> [23] \"storm_lake.prj\"            \"storml_elev.tif\"           #> [25] \"storml_evc.tif\"            \"storml_evh.tif\"            #> [27] \"storml_evt.tif\"            \"storml_pts.csv\"            #> [29] \"storml_tcc.tif\"            \"test.geojson\"              #> [31] \"ynp_features.zip\"          \"ynp_fires_1984_2022.gpkg\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a file — vsi_rename","title":"Rename a file — vsi_rename","text":"vsi_rename() renames file object file system. GDAL documentation states possible rename file onto new filesystem, safest function used rename files remain directory. function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIRename() GDAL Common Portability Library. Analog POSIX rename() function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a file — vsi_rename","text":"","code":"vsi_rename(oldpath, newpath)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a file — vsi_rename","text":"oldpath Character string. name file renamed. newpath Character string. name file given.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a file — vsi_rename","text":"0 success -1 error.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a file — vsi_rename","text":"","code":"# regular file system for illustration elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tmp_file <- tempfile(fileext = \".tif\") file.copy(elev_file, tmp_file) #> [1] TRUE new_file <- file.path(dirname(tmp_file), \"storml_elev_copy.tif\") vsi_rename(tmp_file, new_file) #> [1] 0 vsi_stat(new_file) #> [1] TRUE vsi_unlink(new_file) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a directory — vsi_rmdir","title":"Delete a directory — vsi_rmdir","text":"vsi_rmdir() deletes directory object file system. systems directory must empty can deleted. recursive = TRUE, deletes directory object content file system. function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIRmdir() VSIRmdirRecursive() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a directory — vsi_rmdir","text":"","code":"vsi_rmdir(path, recursive = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a directory — vsi_rmdir","text":"path Character string. path directory deleted. recursive Logical scalar. TRUE delete directory content. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a directory — vsi_rmdir","text":"0 success -1 error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete a directory — vsi_rmdir","text":"/vsis3/ efficient implementation deleting recursively. Starting GDAL 3.4, /vsigs/ efficient implementation deleting recursively, provided OAuth2 authentication used.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a directory — vsi_rmdir","text":"","code":"new_dir <- file.path(tempdir(), \"newdir\") vsi_mkdir(new_dir) #> [1] 0 vsi_rmdir(new_dir) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a path specific option for a given path prefix — vsi_set_path_option","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"vsi_set_path_option() sets path specific option given path prefix. option typically, limited , setting credentials virtual file system. Wrapper VSISetPathSpecificOption() GDAL Common Portability Library. Requires GDAL >= 3.6.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"","code":"vsi_set_path_option(path_prefix, key, value)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"path_prefix Character string. path prefix virtual file system handler. Typically form /vsiXXX/bucket. key Character string. Option key. value Character string. Option value. Passing value = \"\" (empty string) unset value previously set vsi_set_path_option().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"return value, called side effect.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"Options may also set set_config_option(), vsi_set_path_option() allows specifying granularity level file path. makes easier using virtual file system different credentials (e.g., different credentials buckets \"/vsis3/foo\" \"/vsis3/bar\"). supported following virtual file systems: /vsis3/, /vsigs/, /vsiaz/, /vsioss/, /vsiwebhdfs, /vsiswift.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"Setting options path starting /vsiXXX/ also apply /vsiXXX_streaming/ requests. particular care taken store options RAM secure way. might accidentally hit persistent storage swapping occurs, someone access memory allocated process may able read .","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get filesystem object info — vsi_stat","title":"Get filesystem object info — vsi_stat","text":"vsi_stat() fetches status information filesystem object (file, directory, etc). function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIStatExL() GDAL Common Portability Library. Analog POSIX stat() function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get filesystem object info — vsi_stat","text":"","code":"vsi_stat(filename, info = \"exists\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get filesystem object info — vsi_stat","text":"filename Character string. path filesystem object queried. info Character string. type information fetch, one \"exists\" (default), \"type\" \"size\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get filesystem object info — vsi_stat","text":"info = \"exists\", returns logical TRUE file system object exists, otherwise FALSE. info = \"type\", returns character string one \"file\" (regular file), \"dir\" (directory), \"symlink\" (symbolic link), empty string (\"\"). info = \"size\", returns file size bytes (bit64::integer64 type), -1 error occurs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get filesystem object info — vsi_stat","text":"portability, vsi_stat() supports subset stat()-type information filesystem objects. function primarily intended use GDAL virtual file systems (e.g., URLs, cloud storage systems, ZIP/GZip/7z/RAR archives, -memory files). base R function utils::file_test() used instead file tests regular local filesystems.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get filesystem object info — vsi_stat","text":"","code":"data_dir <- system.file(\"extdata\", package=\"gdalraster\") vsi_stat(data_dir) #> [1] TRUE vsi_stat(data_dir, \"type\") #> [1] \"dir\" # stat() on a directory doesn't return the sum of the file sizes in it, # but rather how much space is used by the directory entry vsi_stat(data_dir, \"size\") #> integer64 #> [1] 4096  elev_file <- file.path(data_dir, \"storml_elev.tif\") vsi_stat(elev_file) #> [1] TRUE vsi_stat(elev_file, \"type\") #> [1] \"file\" vsi_stat(elev_file, \"size\") #> integer64 #> [1] 31152  nonexistent <- file.path(data_dir, \"nonexistent.tif\") vsi_stat(nonexistent) #> [1] FALSE vsi_stat(nonexistent, \"type\") #> [1] \"\" vsi_stat(nonexistent, \"size\") #> integer64 #> [1] -1  # /vsicurl/ file system handler base_url <- \"https://raw.githubusercontent.com/usdaforestservice/\" f <- \"gdalraster/main/sample-data/landsat_c2ard_sr_mt_hood_jul2022_utm.tif\" url_file <- paste0(\"/vsicurl/\", base_url, f)  # try to be CRAN-compliant for the example: set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"10\") set_config_option(\"GDAL_HTTP_TIMEOUT\", \"10\")  vsi_stat(url_file) #> [1] TRUE vsi_stat(url_file, \"type\") #> [1] \"file\" vsi_stat(url_file, \"size\") #> integer64 #> [1] 13067777"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Return whether the filesystem supports random write — vsi_supports_rnd_write","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"vsi_supports_rnd_write() returns whether filesystem supports random write. Wrapper VSISupportsRandomWrite() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"","code":"vsi_supports_rnd_write(filename, allow_local_tmpfile)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"filename Character string. path filesystem object tested. allow_local_tmpfile Logical scalar. TRUE filesystem allowed use local temporary file uploading target location.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"Logical scalar. TRUE random write supported.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"location GDAL uses temporary files can forced via CPL_TMPDIR configuration option.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"","code":"# Requires GDAL >= 3.6 if (gdal_version_num() >= gdal_compute_version(3, 6, 0))   vsi_supports_rnd_write(\"/vsimem/test-mem-file.gpkg\", TRUE) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"vsi_supports_seq_write() returns whether filesystem supports sequential write. Wrapper VSISupportsSequentialWrite() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"","code":"vsi_supports_seq_write(filename, allow_local_tmpfile)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"filename Character string. path filesystem object tested. allow_local_tmpfile Logical scalar. TRUE filesystem allowed use local temporary file uploading target location.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"Logical scalar. TRUE sequential write supported.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"location GDAL uses temporary files can forced via CPL_TMPDIR configuration option.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"","code":"# Requires GDAL >= 3.6 if (gdal_version_num() >= gdal_compute_version(3, 6, 0))   vsi_supports_seq_write(\"/vsimem/test-mem-file.gpkg\", TRUE) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronize a source file/directory with a target file/directory — vsi_sync","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"vsi_sync() wrapper VSISync() GDAL Common Portability Library. GDAL documentation given Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"","code":"vsi_sync(src, target, show_progress = FALSE, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"src Character string. Source file directory. target Character string. Target file directory. show_progress Logical scalar. TRUE, progress bar displayed. Defaults FALSE. options Character vector NAME=VALUE pairs (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"Logical scalar, TRUE success FALSE error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"VSISync() analog Linux rsync utility. current implementation, rsync efficient local file copying, VSISync() main interest source target remote file system like /vsis3/ /vsigs/, case can take account timestamps files (optionally ETag/MD5Sum) avoid unneeded copy operations. implemented efficiently : local filesystem <–> remote filesystem remote filesystem <–> remote filesystem (starting GDAL 3.1) source target remote filesystems one /vsis3/, /vsigs/ /vsiaz/. target /vsiaz/ source /vsis3/, /vsigs/, /vsiadls/ /vsicurl/ (starting GDAL 3.8) Similarly rsync behavior, source filename ends slash, means content directory must copied, directory name. example, assuming \"/home/even/foo\" contains file \"bar\", VSISync(\"/home/even/foo/\", \"/mnt/media\", ...) create \"/mnt/media/bar\" file. Whereas VSISync(\"/home/even/foo\", \"/mnt/media\", ...) create \"/mnt/media/foo\" directory contains bar file. options argument accepts character vector name=value pairs. Currently accepted options : RECURSIVE=(default YES) SYNC_STRATEGY=TIMESTAMP/ETAG/OVERWRITE. Determines criterion used determine target file must replaced already exists file size source. applies source target network filesystem. default TIMESTAMP (similarly 'aws s3 sync' works), say upload operation, remote file replaced different size older source. download operation, local file replaced different size newer remote file. ETAG strategy assumes ETag metadata remote file MD5Sum file content, true case /vsis3/ files using KMS server side encryption uploaded single PUT operation (smaller 50 MB given default used GDAL). used /vsis3/, /vsigs/ filesystems using MD5Sum ETAG. OVERWRITE strategy (GDAL >= 3.2) always overwrite target file source one. NUM_THREADS=integer. Number threads use parallel file copying. use /vsis3/, /vsigs/, /vsiaz/ /vsiadls/ source target. default 10 since GDAL 3.3. CHUNK_SIZE=integer. Maximum size chunk (bytes) use split large objects downloading /vsis3/, /vsigs/, /vsiaz/ /vsiadls/ local file system, upload /vsis3/, /vsiaz/ /vsiadls/ local file system. used NUM_THREADS > 1. upload /vsis3/, chunk size must set least 5 MB. default 8 MB since GDAL 3.3. x-amz-KEY=value. (GDAL >= 3.5) MIME header pass creation /vsis3/ object. x-goog-KEY=value. (GDAL >= 3.5) MIME header pass creation /vsigs/ object. x-ms-KEY=value. (GDAL >= 3.5) MIME header pass creation /vsiaz/ /vsiadls/ object.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"","code":"if (FALSE) { # \\dontrun{ # sample-data is a directory in the git repository for gdalraster that is # not included in the R package: # https://github.com/USDAForestService/gdalraster/tree/main/sample-data # A copy of sample-data in an AWS S3 bucket, and a partial copy in an # Azure Blob container, were used to generate the example below.  src <- \"/vsis3/gdalraster-sample-data/\" # s3://gdalraster-sample-data is not public, set credentials set_config_option(\"AWS_ACCESS_KEY_ID\", \"xxxxxxxxxxxxxx\") set_config_option(\"AWS_SECRET_ACCESS_KEY\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\") vsi_read_dir(src) #> [1] \"README.md\" #> [2] \"bl_mrbl_ng_jul2004_rgb_720x360.tif\" #> [3] \"blue_marble_ng_neo_metadata.xml\" #> [4] \"landsat_c2ard_sr_mt_hood_jul2022_utm.json\" #> [5] \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\" #> [6] \"lf_elev_220_metadata.html\" #> [7] \"lf_elev_220_mt_hood_utm.tif\" #> [8] \"lf_fbfm40_220_metadata.html\" #> [9] \"lf_fbfm40_220_mt_hood_utm.tif\"  dst <- \"/vsiaz/sampledata\" set_config_option(\"AZURE_STORAGE_CONNECTION_STRING\",                   \"<connection_string_for_gdalraster_account>\") vsi_read_dir(dst) #> [1] \"lf_elev_220_metadata.html\"   \"lf_elev_220_mt_hood_utm.tif\"  # GDAL VSISync() supports direct copy for /vsis3/ -> /vsiaz/ (GDAL >= 3.8) result <- vsi_sync(src, dst, show_progress = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(result) #> [1] TRUE vsi_read_dir(dst) #> [1] \"README.md\" #> [2] \"bl_mrbl_ng_jul2004_rgb_720x360.tif\" #> [3] \"blue_marble_ng_neo_metadata.xml\" #> [4] \"landsat_c2ard_sr_mt_hood_jul2022_utm.json\" #> [5] \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\" #> [6] \"lf_elev_220_metadata.html\" #> [7] \"lf_elev_220_mt_hood_utm.tif\" #> [8] \"lf_fbfm40_220_metadata.html\" #> [9] \"lf_fbfm40_220_mt_hood_utm.tif\" } # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a file — vsi_unlink","title":"Delete a file — vsi_unlink","text":"vsi_unlink() deletes file object file system. function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIUnlink() GDAL Common Portability Library. Analog POSIX unlink() function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a file — vsi_unlink","text":"","code":"vsi_unlink(filename)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a file — vsi_unlink","text":"filename Character string. path file deleted.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a file — vsi_unlink","text":"0 success -1 error.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a file — vsi_unlink","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") mem_file <- file.path(\"/vsimem\", \"tmp.tif\") copyDatasetFiles(mem_file, elev_file) #> [1] TRUE vsi_read_dir(\"/vsimem\") #> [1] \"ogr2sqlite\"               \"tmp.tif\"                  #> [3] \"ynp_fires_1984_2022.gpkg\" vsi_unlink(mem_file) #> [1] 0 vsi_read_dir(\"/vsimem\") #> [1] \"ogr2sqlite\"               \"ynp_fires_1984_2022.gpkg\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete several files in a batch — vsi_unlink_batch","title":"Delete several files in a batch — vsi_unlink_batch","text":"vsi_unlink_batch() deletes list files passed character vector. files belong file system handler. implemented efficiently /vsis3/ /vsigs/ (provided /vsigs/ OAuth2 authentication used). function wrapper VSIUnlinkBatch() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete several files in a batch — vsi_unlink_batch","text":"","code":"vsi_unlink_batch(filenames)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete several files in a batch — vsi_unlink_batch","text":"filenames Character vector. list files delete.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete several files in a batch — vsi_unlink_batch","text":"Logical vector length(filenames) values depending success deletion corresponding file. NULL might returned case general error (example, files belonging different file system handlers).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete several files in a batch — vsi_unlink_batch","text":"","code":"# regular file system for illustration elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tcc_file <- system.file(\"extdata/storml_tcc.tif\", package=\"gdalraster\")  tmp_elev <- file.path(tempdir(), \"tmp_elev.tif\") file.copy(elev_file, tmp_elev) #> [1] TRUE tmp_tcc <- file.path(tempdir(), \"tmp_tcc.tif\") file.copy(tcc_file, tmp_tcc) #> [1] TRUE vsi_unlink_batch(c(tmp_elev, tmp_tcc)) #> [1] TRUE TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster reprojection and mosaicing — warp","title":"Raster reprojection and mosaicing — warp","text":"warp() wrapper gdalwarp command-line utility raster reprojection warping (see https://gdal.org/en/stable/programs/gdalwarp.html). function can reproject supported spatial reference system (SRS). can also used crop, mosaic, resample, optionally write output different raster format. See Details list commonly used processing options can passed arguments warp().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster reprojection and mosaicing — warp","text":"","code":"warp(src_files, dst_filename, t_srs, cl_arg = NULL, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster reprojection and mosaicing — warp","text":"src_files Either character vector source filenames(s) reprojected, GDALRaster object list GDALRaster objects source data. dst_filename Either character string giving filename output dataset, object class GDALRaster output. t_srs Character string. Target spatial reference system. Usually EPSG code (\"EPSG:#####\") well known text (WKT) SRS definition. Can set empty string \"\" spatial reference src_files[1] used unless destination raster already exists (see Note). cl_arg Optional character vector command-line arguments gdalwarp addition -t_srs (see Details). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster reprojection and mosaicing — warp","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster reprojection and mosaicing — warp","text":"Several processing options can performed one call warp() passing necessary command-line arguments. following list describes several commonly used arguments. Note gdalwarp supports large number arguments enable variety different processing options. Users encouraged review original source documentation provided GDAL project URL full list. -te <xmin> <ymin> <xmax> <ymax> Georeferenced extents output file created (target SRS default). -te_srs <srs_def> SRS interpret coordinates given -te (different t_srs). -tr <xres> <yres> Output pixel resolution (target georeferenced units). -tap (target aligned pixels) align coordinates extent output file values -tr, aligned extent includes minimum extent. Alignment means xmin / resx, ymin / resy, xmax / resx ymax / resy integer values. -ovr <level>|AUTO|AUTO-<n>|NONE Specify overview level source files must used. default choice, AUTO, select overview level whose resolution closest target resolution. Specify integer value (0-based, .e., 0=1st overview level) select particular level. Specify AUTO-n n integer greater equal 1, select overview level AUTO one. specify NONE force base resolution used (can useful overviews generated low quality resampling method, warping done using higher quality resampling method). -wo <NAME>=<VALUE> Set warp option described GDAL documentation GDALWarpOptions Multiple -wo may given. See also -multi . -ot <type> Force output raster bands specific data type supported format, may one following: Byte, Int8, UInt16, Int16, UInt32, Int32, UInt64, Int64, Float32, Float64, CInt16, CInt32, CFloat32 CFloat64. -r <resampling_method> Resampling method use. Available methods : near (nearest neighbour, default), bilinear, cubic, cubicspline, lanczos, average, rms (root mean square, GDAL >= 3.3), mode, max, min, med, q1 (first quartile), q3 (third quartile), sum (GDAL >= 3.1). -srcnodata \"<value>[ <value>]...\" Set nodata masking values input bands (different values can supplied band). one value supplied values quoted keep together single operating system argument. Masked values used interpolation. Use value None ignore intrinsic nodata settings source dataset. -srcnodata explicitly set, source dataset nodata values, taken account default. -dstnodata \"<value>[ <value>]...\" Set nodata values output bands (different values can supplied band). one value supplied values quoted keep together single operating system argument. New files initialized value possible nodata value recorded output file. Use value \"None\" ensure nodata defined. argument used nodata values copied source dataset. -srcband <n> (GDAL >= 3.7) Specify input band number warp (1 number bands source dataset). option used warp subset input bands. input bands used specified. option may repeated multiple times select several input bands. order bands specified order appear output dataset (unless -dstband specified). alpha band specified list, automatically retrieved (unless -nosrcalpha specified). -dstband <n> (GDAL >= 3.7) Specify output band number warp. practice, option useful updating existing dataset, e.g warp one band time. -srcband specified, must many occurrences -dstband -srcband. -dstband specified, :c(\"-dstband\", \"1\", \"-dstband\", \"2\", ... \"-dstband\", \"N\") assumed N number input bands (implicitly, specified explicitly -srcband). alpha band specified list, automatically retrieved (unless -nosrcalpha specified). -wm <memory_in_mb> Set amount memory warp API allowed use caching. value interpreted megabytes value <10000. values >=10000, interpreted bytes. warper total memory required hold input output image arrays auxiliary masking arrays larger \"warp memory\" allowed subdivide chunk smaller chunks try . -wm value small extra overhead many small chunks setting larger better matter diminishing returns. -multi Use multithreaded warping implementation. Two threads used process chunks image perform input/output operation simultaneously. Note computation multithreaded . , can use -wo NUM_THREADS=val/ALL_CPUS option, can combined -multi. -<format> Set output raster format. guessed extension specified. Use short format name (e.g., \"GTiff\"). -co <NAME>=<VALUE> Set one format specific creation options output dataset. example, GeoTIFF driver supports creation options control compression, whether file tiled. getCreationOptions() can used look available creation options, GDAL Raster drivers documentation definitive reference format specific options. Multiple -co may given, e.g., -overwrite Overwrite target dataset already exists. Overwriting means deleting recreating file scratch. Note option specified output file already exists, updated place. documentation gdalwarp describes additional command-line options related spatial reference systems, alpha bands, masking polygon cutlines including blending, . Mosaicing existing output file supported output file already exists. spatial extent existing file modified accommodate new data, may remove case, use -overwrite option. Command-line options passed warp() character vector. elements vector individual options followed individual values, e.g., set target pixel resolution 30 x 30 target georeferenced units use bilinear resampling.","code":"c(\"-co\", \"COMPRESS=LZW\", \"-co\", \"BIGTIFF=YES\") cl_arg = c(\"-tr\", \"30\", \"30\", \"-r\", \"bilinear\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raster reprojection and mosaicing — warp","text":"warp() can used reproject also perform processing crop, resample, mosaic. processing generally done single function call passing arguments output (\"target\") pixel resolution, extent, resampling method, nodata value, format, forth. warp() called t_srs = \"\" output raster already exist, target spatial reference set src_files[1]. case, processing options given cl_arg performed without reprojecting (one source raster multiple sources use spatial reference system, otherwise reproject inputs SRS src_files[1] different). t_srs = \"\" destination raster already exists, output SRS projection destination dataset.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster reprojection and mosaicing — warp","text":"","code":"# reproject the elevation raster to NAD83 / CONUS Albers (EPSG:5070) elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  # command-line arguments for gdalwarp # resample to 90-m resolution and keep pixels aligned: args <- c(\"-tr\", \"90\", \"90\", \"-r\", \"cubic\", \"-tap\") # write to Erdas Imagine format (HFA) with compression: args <- c(args, \"-of\", \"HFA\", \"-co\", \"COMPRESSED=YES\")  alb83_file <- file.path(tempdir(), \"storml_elev_alb83.img\") warp(elev_file, alb83_file, t_srs=\"EPSG:5070\", cl_arg = args) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, alb83_file) ds$getDriverLongName() #> [1] \"Erdas Imagine Images (.img)\" ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$res() #> [1] 90 90 ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3044.0000 2676.0243  132.9744 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-2009009-dev","dir":"Changelog","previous_headings":"","what":"gdalraster 2.0.0.9009 (dev)","title":"gdalraster 2.0.0.9009 (dev)","text":"Geom API: support one--many input (--others) binary predicate functions g_distance() (#728) (2025-05-31) add g_boundary(): compute boundary geometry (#727) (2025-05-31) add g_convex_hull(): compute convex hull input geometries (#726) (2025-05-31) g_envelope(): fix order xy coordinates returned envelope(s) (fixes #725, breaking change); add argument as_3d, wrapper OGR_G_GetEnvelope3D() GDAL Geometry API (#724) (2025-05-30) (internal) avoid clang-asan error implicitly wrapping CPLString R character vector, due changes introduced dev version 2.0.0.9000 PR #714 (fix #723) (2025-05-29) srs_to_wkt(): add argument gcs_only, wrapper OSRCloneGeogCS() GDAL API (2025-05-28) add srs_to_projjson(), wrapper OSRExportToPROJJSON() GDAL Spatial Reference System API (#721) (2025-05-28) add web article Vector Read Benchmarks (2025-05-26) (internal) make variables constexpr const several places (2025-05-25) pixel_extract(): fix input validation xy_srs (2025-05-23) (internal) ogrinfo() GDALRaster::infoAsJSON() now use convenience class CPLString GDAL Common Portability Library replaceAll() method (2025-05-19)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-200","dir":"Changelog","previous_headings":"","what":"gdalraster 2.0.0","title":"gdalraster 2.0.0","text":"CRAN release: 2025-05-11","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"summary-of-main-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Summary of main changes","title":"gdalraster 2.0.0","text":"add bindings GDAL Vector API, implemented exposed C++ class GDALVector along several additions enhancements ogr_*() stand-alone functions enhance expand existing bindings Geometry API, now operating raw vectors WKB WKT strings enhance expand existing bindings Spatial Reference Systems API add several new features improvements Raster API, Virtual Systems Interface (VSI) API, coordinate transformation functions add helper functions working GDAL raster data types (see ?data_type_helpers) add S4 show() method Rcpp exposed classes bug fixes, code linting internal improvements","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"dependencies-2-0-0","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"gdalraster 2.0.0","text":"package nanoarrow added Imports LinkingTo package wk added Imports C++17 now System Requirement gdalraster 1.12 requires GDAL >= 3.1 PROJ GDAL build requirement since GDAL 3.0 gdalraster uses PROJ via GDAL headers (.e., longer requirement linking external libproj case)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"vector-api-bindings-2-0-0","dir":"Changelog","previous_headings":"","what":"Vector API bindings","title":"gdalraster 2.0.0","text":"add class GDALVector: encapsulates OGRLayer object GDALDataset contains , exposing 48 class methods obtaining vector layer information, attribute spatial filtering, reading/writing feature data wrap GDAL’s Arrow C Stream interface reading vector data exposing ArrowArrayStream layer nanoarrow_array_stream object (GDAL >= 3.6) (#591) add ogr_reproject(): reproject vector layer (purpose-built wrapper GDALVectorTranslate()) add ogr_proc(): interface GDAL OGR facilities vector geoprocessing add ogr_layer_rename(): rename existing layer vector dataset (GDAL >= 3.5) ogr_execute_sql() now returns object class GDALVector SQL SELECT statements add argument return_obj ogr_ds_create() ogr_layer_create(), TRUE return GDALVector object write access created layer layer argument certain ogr_manage functions now supports NULL empty string, default first layer index (mainly convenience single-layer formats) remove element $is_ignored list object feature class definition (affects certain ogr_define ogr_manage functions): potentially breaking change assumed unused layer / field creation (#513)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"geometry-api-2-0-0","dir":"Changelog","previous_headings":"","what":"Geometry API","title":"gdalraster 2.0.0","text":"update geometry interface support vector API gdalraster 2.0, changes existing functions, add g_wk2wk() (WKB <–> WKT conversion), g_create() (create geometries input points), g_add_geom() (build container geometry types sub-geometries) (#572) geometry wrapper functions now operate input either WKB raw vector, list WKB, character vector WKT strings, returned geometries either WKB raw vector (list ) WKT character string (vector ) breaking changes: breaks existing functions renaming argument wkt geom, returning raw vectors WKB default functions return geometries (as_wkb = TRUE default) update g_is_valid(), g_is_empty(), g_name() g_buffer() new style Geometry API add g_make_valid(): attempt make invalid geometries valid add g_summary(): obtain text summaries WKB/WKT geometries (GDAL >= 3.7) add g_simplify(): simplify WKB/WKT geometries, optionally preserving topology add g_swap_xy(): swap x y coordinates input geometry add g_geodesic_area() g_geodesic_length() (#671) add g_is_3D() g_is_measured() (#650) add g_envelope(): computes returns bounding envelope(s) input geometries add g_coords(): extract coordinate values geometries g_transform(): add argument traditional_gis_order default TRUE, support authority compliant order geometries using geographic coordinates bbox_transform(): add argument use_transform_bounds (TRUE default requires GDAL >= 3.4)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"spatial-reference-systems-api-2-0-0","dir":"Changelog","previous_headings":"","what":"Spatial Reference Systems API","title":"gdalraster 2.0.0","text":"improve expand bindings subset GDAL Spatial Reference System API (#584) breaking change srs_is_same(): argument srs1 renamed srs argument srs2 srs_other functions previously required input WKT string now accept SRS definitions formats supported srs_to_wkt() (wrapper OSRSetFromUserInput()) srs_convert functions: epsg_to_wkt(), srs_to_wkt() srs_query functions: srs_find_epsg(), srs_get_name(), srs_is_geographic(), srs_is_derived_gcs(), srs_is_local(), srs_is_projected(), srs_is_compound(), srs_is_geocentric(), srs_is_vertical(), srs_is_dynamic(), srs_is_same(), srs_get_angular_units(), srs_get_linear_units(), srs_get_coord_epoch(), srs_get_utm_zone(), srs_get_axis_mapping_strategy()","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-2-0-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 2.0.0","text":"add method $get_block_indexing(): helper get indexing values block layout raster band (#667) add method $addBand(): add band dataset underlying format supports action, e.g., MEM VRT add method $clearColorTable(): clear color table associated raster band add method $getMaskBand(): return mask filename band number associated given band dataset add method $getMaskFlags(): return status flags mask band associated given band dataset add method $setMetadata(): set dataset band-level metadata character vector NAME=VALUE pairs (instead per metadata item existing method $setMetadataItem()) support band = 0 existing method $setDescription() set dataset-level description improve methods $bbox() $res() handle south-/ rotated raster (related fixes read_ds() plot_raster()) (#569)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-2-0-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems","title":"gdalraster 2.0.0","text":"add vsi_get_actual_url(): return actual URL supplied VSI filename, wrapper VSIGetActualURL() GDAL API add vsi_get_signed_url(): return signed URL supplied VSI filename, wrapper VSIGetSignedURL() GDAL API add vsi_is_local(): returns whether file/filesystem “local”, wrapper VSIIsLocal() GDAL API","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-configuration-2-0-0","dir":"Changelog","previous_headings":"","what":"GDAL configuration","title":"gdalraster 2.0.0","text":"add get_cache_max() set_cache_max(): get/set maximum memory size available GDAL block cache get_cache_used(): change return value R numeric type carrying integer64 class attribute, add argument units defaulting \"MB\" expose gdal_version_num() (previously internal/undocumented): return full version number integer value (convenience .integer(gdal_version()[2])) add gdal_compute_version(): compute integer version number (GDAL_VERSION_NUM) individual components (major, minor, revision)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-stand-alone-functions-2-0-0","dir":"Changelog","previous_headings":"","what":"Other stand-alone functions","title":"gdalraster 2.0.0","text":"add pixel_extract(): extract pixel values geospatial point locations, options multiple interpolation methods returning individual pixel values N x N kernel (#570) add transform_bounds(): transform bounding box, densifying edges account nonlinear transformations along edges extracting outermost bounds (wrapper OCTTransformBounds() GDAL Spatial Reference System API, requires GDAL >= 3.4) add autoCreateWarpedVRT(): create warped virtual dataset representing input raster warped target coordinate system (wrapper GDALAutoCreateWarpedVRT()) add validateCreationOptions(): validate list creation options handled driver (#663) getCreationOptions(): change return value named list options information (#662) getCreationOptions(): include $min $max attributes returned list GDAL >= 3.11 create(): add argument return_obj, TRUE return object class GDALRaster update access created dataset createCopy(): add argument return_obj, TRUE return object class GDALRaster update access created dataset createCopy(): object class GDALRaster can given argument src_filename specify source dataset warp(): source destination rasters may given objects class GDALRaster translate(): source raster can given GDALRaster object inspectDataset(): handle case separate raster vector drivers identified specific flag dataset type given (#693) rasterize(): support passing GDALRaster object -place updating (#660) accept one (x, y) vector functions expect matrix data frame input (transform_xy(), inverse_proj(), apply_geotransform(), get_pixel_line()) transform_xy() / inv_project(): support input points z vertices (three column xyz) time values (four column xyzt), optionally accept input point geometries character vector WKT strings, WKB raw vector, list WKB raw vectors transform_xy() / inv_project(): account behavior change GDAL Transform() methods OGRCoordinateTransformation GDAL 3.11 (#631) plot_raster(): add argument pixel_fn specify function applied input data plotting, handle input raster complex data type (#582) inspectDataset() warp(): set quiet error handler around code checks based try() statement attempts open raster dataset (#709)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gdalraster 2.0.0","text":"handle NA input coordinates transform_xy(), inv_project(), transform_bounds(), apply_geotransform() get_pixel_line() (#592) fix plot_raster() avoid integer overflow (#613 thanks @mdsumner) fix potential integer overflow multiplying raster dimensions R without explicit .numeric() (#620 thanks @mdsumner) configure.ac: fix test GDAL >= 3.1.0 fix class method VSIFile$read(): nbytes argument accept values carrying integer64 class attribute (fixes #677 thanks @mdsumner)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-2-0-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 2.0.0","text":"configure.ac: remove configuration PROJ include directory libs longer needed (#702) implement create(), createCopy() autoCreateWarpedVRT() GDALRaster object factories (#606) implement ogr_ds_create() ogr_layer_create() GDALVector object factories (#609) code linting cppcheck style src/geom_api.cpp src/srs_api.cpp (#658) various C++ code linting throughout (#624) add header src/gdal_vsi.h, minor code cleanups src/gdal_vsi.cpp rename files: src/wkt_conv.cpp -> src/srs_api.cpp, src/wkt_conv.h -> src/srs_api.h, tests/testthat/test-wkt_conv.R -> tests/testthat/test-srs_api.R use consistent naming convention C++ class member variables pass arguments const reference srs geom functions use try/catch potentially large allocation std::vector (#485) replace CPLIsNan() std::isnan() (#485) read_ds(): pre-allocate output vector based bit size unioned data type across bands validate input columns data frame--matrix internal C++ conversion functions","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-2-0-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 2.0.0","text":"update package Description add package vignette Vector API Overview update descriptions C++ exposed classes emphasize lack named argument support cases (.e., argument order matters, mainly concern class constructors) update Raster API Tutorial use argument return_obj create() createCopy() additions section Azure (/vsiaz/) GDAL Config Quick Reference add -srcband -dstband command-line options documentation warp() add example ogr2ogr() dissolving features based attribute value minor updates g_transform() restructure edit ?ogr_define update examples inspectDataset() vsi_get_file_metadata() use new sample data file inst/extdata/ynp_features.zip (#691) add alt text images package vignettes web-articles code cleans temp files examples now wrapped \\dontshow{} add Development practices CONTRIBUTING.md add OpenSSF best practices badge README.md add OpenSSF Scorecard badge README.md","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1120","dir":"Changelog","previous_headings":"","what":"gdalraster 1.12.0","title":"gdalraster 1.12.0","text":"CRAN release: 2025-01-19","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"features--enhancements-1-12-0","dir":"Changelog","previous_headings":"","what":"Features / enhancements","title":"gdalraster 1.12.0","text":"add inspectDataset(): obtain information GDAL raster vector dataset (#552) add identifyDriver(): identify driver can open given filename, connection string, etc. (#553) transform_xy() inv_project(): accept SRS arguments format supported srs_to_wkt() vsi_read_dir(): add recursive argument (#426); omit “.” “..” output directory listing; add all_files argument, TRUE include hidden files; sort directory listing alphabetically","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"bug-fixes-1-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gdalraster 1.12.0","text":"fix mode name \"color-relief\" DEFAULT_DEM_PROC (#430) fix unit test class VSIFile: create file “w+” access read/write (#546) ogr_def_geom_field(): fix input validation srs argument (#507) createCopy(): check driver GDAL_DCAP_CREATE capability well GDAL_DCAP_CREATECOPY (#479) plot_raster(): default stretch input RGB Byte raster (#435)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-12-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.12.0","text":"fix example class VSIFile needs “w+” access instead “w” fix missing double quote transform_xy() examples document fillRaster() method class GDALRaster","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1111","dir":"Changelog","previous_headings":"","what":"gdalraster 1.11.1","title":"gdalraster 1.11.1","text":"CRAN release: 2024-06-13 fix test test-ogr_manage.R: test GeoJSON layer need check existence using with_update = TRUE file extdata (#410) add apply_geotransform(): convert raster column/row geospatial x/y coordinates, wrapper GDALApplyGeoTransform() GDAL API, operating matrix input col/row coordinates (internal wrapper .apply_geotransform() unchanged) add GDALRaster$apply_geotransform(): class method alternative calling stand-alone function apply_geotransform() object class GDALRaster vsi_curl_clear_cache(): add parameter quiet wrap API call quiet error handler, TRUE default Documentation: document w+ access flag class VSIFile; add CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE configuration option vignette GDAL Config Quick Reference; replace paste0() file.path() examples throughout code linting","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1110","dir":"Changelog","previous_headings":"","what":"gdalraster 1.11.0","title":"gdalraster 1.11.0","text":"CRAN release: 2024-06-03","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"system-requirements-1-11-0","dir":"Changelog","previous_headings":"","what":"System requirements","title":"gdalraster 1.11.0","text":"GDAL >= 3.1.0 now required (previously >= 2.4.0) package bit64 added Imports package RcppInt64 added LinkingTo","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"new-utility-functions-for-managing-vector-data-sources-1-11-0","dir":"Changelog","previous_headings":"","what":"New utility functions for managing vector data sources","title":"gdalraster 1.11.0","text":"initial bindings GDAL/OGR Vector API supporting data source management: ogr_ds_exists(), ogr_ds_format(), ogr_ds_test_cap(), ogr_ds_create(), ogr_ds_layer_count(), ogr_ds_layer_names(), ogr_layer_exists(), ogr_layer_test_cap(), ogr_layer_create(), ogr_layer_field_names(), ogr_layer_delete(), ogr_field_index(), ogr_field_create(), ogr_geom_field_create(), ogr_field_rename(), ogr_field_delete(), ogr_execute_sql() documentation helper functions feature class definition: ogr_def_field(), ogr_def_geom_field(), ogr_def_layer()","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"new-bindings-to-the-gdal-vsivirtualhandle-api-1-11-0","dir":"Changelog","previous_headings":"","what":"New bindings to the GDAL VSIVirtualHandle API","title":"gdalraster 1.11.0","text":"class VSIFile wraps VSIVirtualHandle Standard C binary file /O regular file systems, URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-bug-fix--enhancements-1-11-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems (bug fix / enhancements)","title":"gdalraster 1.11.0","text":"bug fix vsi_mkdir(): file mode set incorrectly mode passed correctly octal literal. mode now passed character string containing file mode octal. add vsi_get_file_metadata(): returns metadata network filesystem objects (/vsicurl/, /vsis3/, /vsiaz/, etc.), GDAL >= 3.7, /vsizip/ SOZip metadata add vsi_set_path_option(): set path specific option given path prefix, e.g., credential setting virtual file system (GDAL >= 3.6) add vsi_clear_path_options(): clear path specific configuration options previously set vsi_set_path_option() (GDAL >= 3.6) vsi_rmdir(): add argument recursive, TRUE delete directory content vsi_mkdir(): add argument recursive, TRUE create directory ancestors several VSI functions returned 0 -1 invisibly indicating success/failure, consistent GDAL return values. return values now visible consistent return values VSIFile class methods. vsi_stat() info = \"size\", vsi_get_disk_free_space() now return bit64::integer64 type","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-11-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.11.0","text":"behavior change: class methods $info() $infoAsJSON() now use default command-line arguments underlying gdalinfo utility. Arguments configurable new read/write $infoOptions field, empty vector default (character(0)). add support /O Byte raster R raw type, add setting $readByteAsRaw class field (#314, thanks @mdsumner) add read/write fields $infoOptions $quiet applying per-object settings add optional constructor allow specifying whether dataset opened shared mode, TRUE default add method $getActualBlockSize(): retrieve actual block size given block offset add method $get_pixel_line(): class method alternative calling stand-alone function get_pixel_line() object class GDALRaster(#339) add method $getProjection(): equivalent $getProjectionRef() (consistent osgeo.gdal.Dataset.getProjection() / osgeo.gdal.Dataset.getProjectionRef() GDAL Python API) method $getDefaultRAT(): add progress bar since retrieving large raster attribute tables take >30 sec","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"stand-alone-processing-functions-1-11-0","dir":"Changelog","previous_headings":"","what":"Stand-alone processing functions","title":"gdalraster 1.11.0","text":"calc(): add support multiband output (#319) calc(): add input validation var.names, must expr get_pixel_line(): object class GDALRaster can now passed gt parameter, case geotransform obtained object bounds checking raster extent done (original behavior gt numeric vector unchanged) (#339) ogr2ogr(): add parameter open_options support options source dataset read_ds(): add parameter as_raw read Byte raster R raw type (#314, thanks @mdsumner)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-configuration-1-11-0","dir":"Changelog","previous_headings":"","what":"GDAL configuration","title":"gdalraster 1.11.0","text":"add dump_open_datasets(): dump list open datasets (shared ) console add get_num_cpus(): get number processors detected GDAL add get_usable_physical_ram(): get usable physical RAM reported GDAL add has_spatialite(): returns TRUE GDAL built SpatiaLite support add http_enabled(): returns TRUE GDAL built libcurl support add .cpl_http_cleanup(): wrapper CPLHTTPCleanup() internal use (2024-05-29)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"geometry-functions-1-11-0","dir":"Changelog","previous_headings":"","what":"Geometry functions","title":"gdalraster 1.11.0","text":"new additional geometry functions operating WKT (GEOS via GDAL headers): g_is_empty(), g_is_valid(), g_name(), g_intersects(), g_equals(), g_disjoint(), g_touches(), g_contains(), g_within(), g_crosses(),g_overlaps(), g_intersection(), g_union(), g_difference(), g_sym_difference(), g_distance(), g_length(), g_area(), g_centroid() add bbox_transform(): transform bounding box different projection g_transform(): now uses OGR_GeomTransformer_Create() OGR_GeomTransformer_Transform() GDAL API, enhanced version OGR_G_Transform(); add arguments wrap_date_line date_line_offset","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-11-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.11.0","text":"add Discussions GitHub repository add section HTTP/HTTPS (/vsicurl/) vignette GDAL Config Quick Reference DESCRIPTION file: add Michael D. Sumner Authors@R","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-internal-changes-and-fixes-1-11-0","dir":"Changelog","previous_headings":"","what":"Other internal changes and fixes","title":"gdalraster 1.11.0","text":"fix memory leaks detected Valgrind GDALRaster class methods $info(), $infoAsJSON() $getDefaultRAT() register finalizer call CPLHTTPCleanup() upon R session exit add GDALRaster class method $setFilename(): set filename uninitialized GDALRaster object, currently undocumented / internal use add GDALRaster class method _getGDALDatasetH(): get GDAL dataset handle internal use buildRAT(): input raster object class GDALRaster, use reference rather instantiating another GDALRaster object internally calc(): close input raster dataset exit differing extent detected add missing null checks, object destruction error conditions, src/geos_wkt.cpp improve check \"-json\" cl_arg ogrinfo() code linting","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1100","dir":"Changelog","previous_headings":"","what":"gdalraster 1.10.0","title":"gdalraster 1.10.0","text":"CRAN release: 2024-03-26","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"system-requirements-1-10-0","dir":"Changelog","previous_headings":"","what":"System requirements","title":"gdalraster 1.10.0","text":"GDAL built GEOS now required","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-1-10-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems","title":"gdalraster 1.10.0","text":"add vsi_get_fs_prefixes(): get list prefixes virtual file system handlers currently registered add vsi_get_fs_options(): get list options associated virtual file system handler (setting set_config_option()) add vsi_supports_rnd_write() vsi_supports_seq_write(): test whether filesystem supports random write sequential write, conditional whether local temp file allowed uploading target location add vsi_get_disk_free_space(): return free disk space available filesystem fixed misspelled argument vsi_copy_file() vsi_sync() (#233)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-stand-alone-functions-1-10-0","dir":"Changelog","previous_headings":"","what":"Other stand-alone functions","title":"gdalraster 1.10.0","text":"add ogrinfo(): wrapper ogrinfo command-line utility, retrieve information vector data source potentially edit data SQL statements (GDAL >= 3.7) add ogr2ogr(): wrapper ogr2ogr command-line utility, convert vector data different formats add g_transform(): apply coordinate transformation WKT geometry add geos_version(): get version information GEOS library use GDAL add push_error_handler(): wrapper CPLPushErrorHandler() GDAL Common Portability Library add pop_error_handler(): wrapper CPLPopErrorHandler() GDAL Common Portability Library calc(): argument usePixelLonLat deprecated unnecessary, variables pixelLon / pixelLat now auto-detected used calc expression; small performance improvement computing pixelY needed add optional argument quiet several functions configure progress reporting (#237) make dataset management functions quieter (#282) gdal_formats() now returns data frame supported raster vector formats, information capabilities format driver","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"cmbtable-class-1-10-0","dir":"Changelog","previous_headings":"","what":"CmbTable-class","title":"gdalraster 1.10.0","text":"new(): assign default variable names constructor names given","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-10-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.10.0","text":"src/geos_wkt.cpp, src/transform.cpp, src/wkt_conv.cpp: deallocate OGR geometry OSR spatial ref objects fix memory leaks add unit tests geometry operations using GEOS via GDAL headers GDALRaster::getMetadataDomainList(): deallocate returned string list avoid memory leak GDALRaster::close(): clear cache needed, check return values GDALClose() GDALFlushCache() GDAL >= 3.7 configure.ac: add back proj-include proj-lib, latter needed cases source install macOS; rework system requirement GDAL built GEOS remove internal has_geos() checks update documentation, since GDAL GEOS now required add .editorconfig file bulk reformat code style fix R code lintr add .lintr file mass replace NULL -> nullptr C++ code format diagnostic messages throughout consistency follow guidelines given “Writing R Extensions” clean temp files examples throughout","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-190","dir":"Changelog","previous_headings":"","what":"gdalraster 1.9.0","title":"gdalraster 1.9.0","text":"CRAN release: 2024-02-25","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"behavior-change-1-9-0","dir":"Changelog","previous_headings":"","what":"Behavior change","title":"gdalraster 1.9.0","text":"remove OSR_DEFAULT_AXIS_MAPPING_STRATEGY=TRADITIONAL_GIS_ORDER _gdal_init() (#209), since give different SRS comparison result depending GDAL version cases axis mapping matters default options OSRIsSameEx() used","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-1-9-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems","title":"gdalraster 1.9.0","text":"add vsi_copy_file(): wrapper VSICopyFile() add vsi_curl_clear_cache(): wrapper VSICurlClearCache() VSICurlPartialClearCache() add vsi_mkdir(): wrapper VSIMkdir() add vsi_read_dir(): wrapper VSIReadDirEx() add vsi_rename(): wrapper VSIRename() add vsi_rmdir(): wrapper VSIRmdir() add vsi_stat(): wrapper VSIStatExL() add vsi_sync(): wrapper VSISync() add vsi_unlink(): wrapper VSIUnlink() add vsi_unlink_batch(): wrapper VSIUnlinkBatch()","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-9-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.9.0","text":"GDALRaster$new(): add constructor passing dataset open options","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"stand-alone-functions-1-9-0","dir":"Changelog","previous_headings":"","what":"Stand-alone functions","title":"gdalraster 1.9.0","text":"add footprint(): wrapper gdal_footprint command-line utility, compute footprint raster (GDAL >= 3.8) read_ds(): add as_list argument option return multi-band output list form; attach attribute gis output, list containing bbox, dimension spatial reference (thanks input @mdsumner #185) plot_raster(): accept pixel data list form (band vectors list elements), make use gis attribute present (thanks input @mdsumner #185) srs_is_same(): add arguments criterion, ignore_axis_mapping ignore_coord_epoch","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-9-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.9.0","text":"organize website reference index add Microsoft Azure information GDAL Config Quick Reference update DESCRIPTION","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-9-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.9.0","text":"add _check_gdal_filename(): minimal filename check UTF-8 add _get_physical_RAM(): wrapper CPLGetUsablePhysicalRAM() internal use set test coverage target minimum 90%, codecov range: 70..90 (previously 80%, 60..80)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-180","dir":"Changelog","previous_headings":"","what":"gdalraster 1.8.0","title":"gdalraster 1.8.0","text":"CRAN release: 2024-01-27","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"dependencies-1-8-0","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"gdalraster 1.8.0","text":"libxml2 listed SystemRequirements since required imported package xml2","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-8-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.8.0","text":"read_only=TRUE now optional default class constructor add clearStatistics(): clear statistics PAM supported datasets (GDAL >= 3.2)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"stand-alone-functions-1-8-0","dir":"Changelog","previous_headings":"","what":"Stand-alone functions","title":"gdalraster 1.8.0","text":"add addFilesInZip(): create/append Seek-Optimized ZIP files (GDAL >= 3.7) plot_raster(): now uses georeferenced coordinates default instead pixel/line (#184 thanks @mdsumner)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-8-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.8.0","text":"example code calc() using Landsat bands applied scale/offset given .json metadata - corrected add AWS_REGION, section SOZip GDAL Config Quick Ref update documentation examples throughout default read_only=TRUE constructor GDALRaster add translate() warp() Raster API Tutorial","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-8-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.8.0","text":"configure.ac: remove parts PROJ config unneeded since gdalraster uses PROJ via GDAL headers; use autoconf macros compiler invocations; get PROJ data directory pkg-config possible; add action--cross-compiling argument (#190 #197; thanks Simon Urbanek debugging initial issue providing helpful feedback) get GDAL libs pkg-config Windows possible (#125 thanks @kalibera) translate() warp(): close output dataset closing source dataset(s) case output VRT switch using R convention x.x.x.9000 development versioning","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-170","dir":"Changelog","previous_headings":"","what":"gdalraster 1.7.0","title":"gdalraster 1.7.0","text":"CRAN release: 2023-11-29","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-api-stand-alone-functions-1-7-0","dir":"Changelog","previous_headings":"","what":"GDAL API stand-alone functions","title":"gdalraster 1.7.0","text":"add polygonize(): create polygon feature layer raster data, wrapper GDALPolygonize GDAL Algorithms API. add rasterize(): burn vector geometries (points, lines, polygons) raster, wrapper gdal_rasterize command-line utility add buildVRT(): build GDAL virtual raster mosaic list datasets, wrapper gdalbuildvrt command-line utility add translate(): convert raster data different formats, wrapper gdal_translate command-line utility make t_srs optional warp() GDAL configuration option TRADITIONAL_GIS_ORDER=OSR_DEFAULT_AXIS_MAPPING_STRATEGY now set package load","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-7-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.7.0","text":"add GDAL Config Quick Reference vignettes warp() additional documentation covering several processing options add COMPRESS_OVERVIEW configuration option documentation GDALRaster::buildOverviews() add str() GDALRaster object Raster API Tutorial add display EVT raster along attribute table Raster Attribute Tables","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-7-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.7.0","text":"add src/ogr_util.cpp src/ogr_util.h: OGR utility functions vector data sources src/gdal_exp.cpp: additional error handling several wrapper functions, increased test coverage","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-160","dir":"Changelog","previous_headings":"","what":"gdalraster 1.6.0","title":"gdalraster 1.6.0","text":"CRAN release: 2023-10-27","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"dependencies-1-6-0","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"gdalraster 1.6.0","text":"GDAL >= 2.4.0 (previously >= 2.3.0) package xml2 now required (previously Suggests) package gt added Suggests (required displayRAT())","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-6-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.6.0","text":"add methods Raster Attribute Tables: getDefaultRAT(), setDefaultRAT() add getDefaultHistogram(): fetch default raster histogram band add getHistogram(): compute raster histogram band add getMinMax(): compute min/max raster band add getMetadataDomainList(): get list metadata domains dataset raster band fix getMetadataItem() specific domain dataset level (#109)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-api-stand-alone-functions-1-6-0","dir":"Changelog","previous_headings":"","what":"GDAL API stand-alone functions","title":"gdalraster 1.6.0","text":"add buildRAT(): compute raster band set unique pixel values counts, build GDAL Raster Attribute Table data frame add displayRAT(): generate presentation Raster Attribute Table, showing colors table contains RGB columns add gdal_formats(): report supported raster formats add getCreationOptions(): get list creation options raster format add copyDatasetFiles(): copy files associated dataset add deleteDataset(): delete dataset format-specific way add renameDataset(): rename dataset format-specific way add missing error checks src/gdal_exp.cpp (#104)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"cmbtable-class-1-6-0","dir":"Changelog","previous_headings":"","what":"CmbTable-class","title":"gdalraster 1.6.0","text":"argument incr count increment CmbTable::update() can zero","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"runningstats-class-1-6-0","dir":"Changelog","previous_headings":"","what":"RunningStats-class","title":"gdalraster 1.6.0","text":"use uint64_t count accumulator (previously long long) make explicit return cast get_count() (user-visible changes) slightly faster update","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-miscellaneous-1-6-0","dir":"Changelog","previous_headings":"","what":"Other miscellaneous","title":"gdalraster 1.6.0","text":"plot_raster(): normalize legend correctly minmax_def minmax_pct_cut (#131)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-6-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.6.0","text":"add vignette Raster Attribute Tables add notes RunningStats-class update vignette Raster API Tutorial gdal_formats() getCreationOptions() update installation instructions README","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-150","dir":"Changelog","previous_headings":"","what":"gdalraster 1.5.0","title":"gdalraster 1.5.0","text":"CRAN release: 2023-09-25","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-5-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.5.0","text":"add methods color tables: getColorTable(), getPaletteInterp(), setColorTable() add getRasterColorInterp(), setRasterColorInterp(): get/set color interpretation raster bands add getDescription(), setDescription(): get/set description raster band objects add flushCache(): flush write cached data disk add getFileList(): returns list files forming dataset add infoAsJSON(): returns output gdalinfo command-line utility JSON-formatted string new(): add warning class constructor raster int64 data type (handled double now)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-api-stand-alone-functions-1-5-0","dir":"Changelog","previous_headings":"","what":"GDAL API stand-alone functions","title":"gdalraster 1.5.0","text":"add bandCopyWholeRaster(): wrapper GDALRasterBandCopyWholeRaster(), efficiently copy whole raster band add createColorRamp(): wrapper GDALCreateColorRamp(), automatically create ramp one color another add sieveFilter(): wrapper GDALSieveFilter() Algorithms API, remove small raster polygons add PROJ utility functions: proj_version(), proj_search_paths(), proj_networking() (via GDAL headers) add g_buffer(): compute buffer WKT geometry (GEOS convenience function via GDAL headers)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"cmbtable-class-1-5-0","dir":"Changelog","previous_headings":"","what":"CmbTable-class","title":"gdalraster 1.5.0","text":"add updateFromMatrixByRow(): update hash table matrix integer combinations arranged rows add asMatrix(): return combinations table numeric matrix (alternative asDataFrame())","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"bug-fix-1-5-0","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"gdalraster 1.5.0","text":"warp() caused segfault proj.db found (#96)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-miscellaneous-1-5-0","dir":"Changelog","previous_headings":"","what":"Other miscellaneous","title":"gdalraster 1.5.0","text":"plot_raster(): default value legend argument changed FALSE; legend can now use color table continuous data; add argument maxColorValue (e.g., use RGB 0:255 instead 0:1 col_tbl) bbox_from_wkt(), bbox_to_wkt(): add arguments extend_x, extend_y Windows, reset GDAL environment variables package unload previously set load add inst/extdata/storml_tcc.tif: example dataset NLCD Tree Canopy Cover update package vignette color tables raster display","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-140","dir":"Changelog","previous_headings":"","what":"gdalraster 1.4.0","title":"gdalraster 1.4.0","text":"CRAN release: 2023-08-29 add dem_proc(): wrapper gdaldem command-line utility generate DEM derivatives add following set methods class GDALRaster: setMetadataItem(), setUnitType(), setScale(), setOffset() add GDALRaster$buildOverviews(): build raster overviews add GDALRaster$dim(): returns vector xsize, ysize, nbands transform_xy() inv_project(): pts can data frame matrix plot_raster() now accepts GDALRaster object data argument plot_raster(): make legend narrower add argument digits format legend labels raster data floating point add test suite code coverage report","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-130","dir":"Changelog","previous_headings":"","what":"gdalraster 1.3.0","title":"gdalraster 1.3.0","text":"CRAN release: 2023-06-29 GDALRaster::read(): data now read R integer type possible raster data type (#23) add fillNodata(): wrapper GDALFillNodata() GDAL Algorithms API add read_ds(): convenience wrapper GDALRaster$read() add plot_raster(): display raster data using base R graphics add get_cache_used(): wrapper GDALGetCacheUsed64() return value MB add GDALRaster$getOverviewCount(): return number overview layers available GDALRaster$info(): drop -nomd argument internal call bbox_from_wkt(): return NA creation geometry object fails (#27) fix GDALRaster$getMetadata(): requesting band-level metadata domain default metadata domain returning dataset-level metadata instead add vignette containing R port GDAL Raster API tutorial add description GDAL_RASTERIO_RESAMPLING configuration option documentation GDALRaster$read() add web article GDAL block cache configuration GDAL_CACHEMAX","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-120","dir":"Changelog","previous_headings":"","what":"gdalraster 1.2.0","title":"gdalraster 1.2.0","text":"CRAN release: 2023-05-28 starting v. 1.2.0, gdalraster require R >= 4.2.0 fix: check GEOS availability bbox geometry functions fix: wrong array dimensions read() (#5). Starting v. 1.2.0, read() return vector instead matrix better matches concept native GDAL-like interface (thanks Michael Sumner). add: has_geos() exported R add: srs_is_same() - wrapper OSRIsSame() GDAL Spatial Reference System C API documentation - minor edits throughout improve clarity","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-111","dir":"Changelog","previous_headings":"","what":"gdalraster 1.1.1","title":"gdalraster 1.1.1","text":"CRAN release: 2023-05-24 Initial public release.","code":""}]
