[{"path":"https://usdaforestservice.github.io/gdalraster/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"See General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Welcome","title":"Welcome","text":"’re glad ’re thinking contributing open source project USDA Forest Service, Rocky Montain Research Station. ’re unsure anything, just ask – submit issue pull request anyway. worst can happen ’ll politely asked change something. welcome friendly contributions.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"policies","dir":"","previous_headings":"","what":"Policies","title":"Welcome","text":"want ensure welcoming environment projects. staff follow General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct contributors .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"public-domain","dir":"","previous_headings":"","what":"Public domain","title":"Welcome","text":"project released MIT license. Portions project public domain within United States, copyright related rights waived worldwide CC0 1.0 Universal public domain dedication. See file inst/COPYRIGHTS details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"development-practices","dir":"","previous_headings":"","what":"Development practices","title":"Welcome","text":"EditorConfig use development environment .editorconfig file included repository. automatically tell popular code editors basic style settings like indentation, whitespaces end--line markers distinguished types plain text files. lintr use development environment static analysis R code, .lintr file included repository. Cpplint use development environment C++ code style checking. VSCode plugin available. cppcheck also used static analysis C++ code. can installed various package managers, e.g., sudo apt-get install cppcheck Debian/Ubuntu. Documentation, source code Windows installer available cppcheck website. new functionality must include tests added automated test suite tests/testthat/. Documentation testthat available https://testthat.r-lib.org/. Dynamic analysis C++ code using Valgrind Clang Address Sanitizer done regularly development, new version release. analyses performed GitHub Actions using workflows provided rhub.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023-2024 gdalraster authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/SECURITY.html","id":null,"dir":"","previous_headings":"","what":"Security Policy","title":"Security Policy","text":"Private vulnerability reporting enabled repository. package provides API bindings GDAL, large software library dealing hundreds file formats protocols. Please see GDAL security policy additional information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GDAL Block Cache","text":"GDAL implements read/write memory caching raster /O. Caching operates raster blocks offers potential substantial performance improvement accessing pixel data across block boundaries. analytical context processing may row-oriented, means /O can efficient even rows intersect many tiles raster arranged square blocks (opposed blocks arranged one whole row). Consideration caching mechanism helpful scaling /O large datasets need processed many chunks. article describe operation caching mechanism, relative performance accessing data row tile relation different raster block arrangements. Implications configuring cache memory size GDAL_CACHEMAX setting described. Focus reading pixel data, similar concepts apply writing well.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"relative-performance","dir":"Articles","previous_headings":"","what":"Relative performance","title":"GDAL Block Cache","text":"dataset containing 16-bit integer elevation 30-m pixel resolution conterminous US obtained LANDFIRE. version “LF 2020 [LF 2.2.0]” available 8.4 GB download. download includes raster overviews (.ovr), elevation raster 6.8 GB GeoTIFF file using LZW compression 128 x 128 tiles. direct download link LF 2020 elevation :https://landfire.gov/bulk/downloadfile.php?FNAME=US_Topo_2020-LF2020_Elev_220_CONUS.zip&TYPE=landfire Tests run laptop Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, 8 GB RAM SSD, Ubuntu 22.04.2, R 4.3.0, gdalraster 1.2.1 (dev), GDAL 3.6.2. Open elevation dataset get parameters: first test reads pixels raster row. tile size 128 x 128 pixels, row intersects 1222 raster blocks (156335 / 128 = 1221.4, last block incomplete). test reflects performance implications GDAL read-ahead caching: comparison, read data raster arranged blocks whole rows (efficient row-level access). gdalraster::createCopy() copies raster dataset optional changes format. extent, number bands, data type, projection, geotransform copied source raster: creates “striped” tif raster blocks arranged row-level access (TILED=default creation option GTiff format driver). resulting file larger 10.6 GB vs. 6.8 GB, since compression efficient strips vs. tiles. Substituting new file (f2) test gives following time read pixels row: final test reads block original tiled raster distributed LANDFIRE. read square blocks need calculate row/column offsets x/y sizes tile, including incomplete tiles along right bottom edges. Package stars provides helper function use . stars represents raster data using R’s 1-based indexing column-major array order (raster rows array columns R). Accounting differences native GDAL indexing, get matrix block boundaries using: terms expected efficiency, reading tiled raster block similar reading striped raster row (reading block boundaries, retrieval cache). difference striped tif contains fewer larger blocks (101538 blocks, 156335 pixels per block), tiled tif contains order magnitude blocks smaller (970268 blocks, 16384 pixels per block). test reads pixels tile original LANDFIRE elevation file (f):","code":"library(gdalraster)  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize() print(paste(\"Size is\", ncols, \"x\",  nrows))  # 1.587394e+10 pixels #> [1] \"Size is 156335 x 101538\"  ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\" \"INTERLEAVE=BAND\"  ds$getBlockSize(band=1) #> [1] 128 128  ds$getDataTypeName(band=1) #> [1] \"Int16\" process_row = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   ## process pixels, possibly write output...   return() }  ## Test 1 ## original tiled raster, reading by row (across block boundaries)  system.time( lapply(0:(nrows-1), process_row) ) #>    user  system elapsed  #> 228.269  11.319 242.195  ds$close() f2 = \"LC20_Elev_220_striped.tif\" opt = c(\"COMPRESS=LZW\", \"TILED=NO\", \"BLOCKYSIZE=1\", \"BIGTIFF=YES\") gdalraster::createCopy(format=\"GTiff\", dst_filename=f2, src_filename=f,                        options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds2 = new(GDALRaster, f2, read_only = TRUE) ds2$getBlockSize(band=1) #> [1] 156335      1  ds2$close() ## Test 2 ## striped tif, reading on block boundaries (rows) ## cache retrieval not involved  system.time( lapply(0:(nrows-1), process_row) ) #>    user  system elapsed #> 230.650   5.112 236.370 library(stars)  r = read_stars(f, proxy = TRUE) nrows = nrow(r) ncols = ncol(r) blocks = st_tile(nrows, ncols, 128, 128) blocks[, 1:2] = blocks[, 1:2] - 1L  nrow(blocks) #> [1] 970268 ## Test 3 ## original tiled raster, reading on block boundaries (tiles) ## cache retrieval not involved  system.time({   for (i in seq_len(nrow(blocks))) {     ds$read(1, blocks[i, 1], blocks[i, 2], blocks[i, 3], blocks[i, 4],         blocks[i, 3], blocks[i, 4])     }   }) #>    user  system elapsed  #> 237.920   7.165 251.200"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"description-of-cache-operation","dir":"Articles","previous_headings":"","what":"Description of cache operation","title":"GDAL Block Cache","text":"GDAL block caching enables reading large tiled raster efficiently row (1.6e+10 total pixels test dataset). default size limit memory cache 5% usable physical RAM. row LANDFIRE tiled raster intersects 1222 blocks size 128 x 128. intersected block read file, decoded LZW compression, placed cache memory. data successive read() intersects block retrieved cache. Caching intersected blocks requires 128 x 128 x 2 bytes = 32768 bytes per block, 32768 x 1222 = 40042496 bytes, approximately 40 MB. decoded block data row can held cache case, meaning 1 every 128 row-level read() involves retrieval file decoding compressed blocks. 127/128 provided cache. Memory recovered request new cache block put cache memory use established limit (least recently used blocks flushed cache accommodate adding new blocks). code uses function gdalraster::get_cache_used() demonstrate behavior:  examples focus reading tiled raster row, similar considerations apply processing large row-oriented rasters 2-D chunks.","code":"## run in a new R session library(gdalraster)  f = \"LC20_Elev_220.tif\" ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize()  ## Default cache size is approximately 400 MB in this case (5% of 8 GB RAM) ## Read enough data to reach cache max rows_read = 0 cache_use = get_cache_used() for (row in 0:1536) {   rowdata = ds$read(1, 0, row, ncols, 1, ncols, 1)   rows_read = c(rows_read, row+1)   cache_use = c(cache_use, get_cache_used()) }  get_cache_used() #> [1] 401 ds$close() get_cache_used() #> [1] 0  plot(rows_read, cache_use, type=\"S\",       xlab=\"rows read\", ylab=\"cache in use (MB)\",       col=\"blue\", lwd=2, xaxt=\"n\") axis(1, at = seq(0, 1536, by = 128), las=2)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"configuring-cache-size","dir":"Articles","previous_headings":"","what":"Configuring cache size","title":"GDAL Block Cache","text":"cache size limit can set GDAL_CACHEMAX configuration option, e.g., Note size limit block cache set upon first use (first /O). Setting GDAL_CACHEMAX point resize cache. per-session setting. GDAL_CACHEMAX configured upon first use cache, default cache size effect current session. /O involves block caching large datasets may require setting GDAL_CACHEMAX larger default. LANDFIRE elevation raster tiled 256 x 256, block require 65536 x 2 = 131072 bytes 16-bit data. cache size needed hold intersected blocks row approximately 160 MB (likewise, 640 MB 512 x 512 tiles). Similarly, cache size configured case multiple large rasters need read (written) simultaneously processing. cache flushed upon dataset closing recover memory. behavior described assumes GDAL dataset opened , required /O completed closing dataset. normally case using GDAL API via gdalraster (GDALRaster-class encapsulates GDALDataset object associated GDALRasterBand objects underlying API). also worth noting without block caching mechanism, possible read tiled elevation raster row reasonable time. can checked repeating Test 1 cache disabled:","code":"## set to a specific size in MB gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"1000\")  ## or percent of physical RAM gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"20%\") ## Test 4 ## original tiled raster, reading by row (across block boundaries) ## cache disabled for testing ## run in a new R session  library(gdalraster)  ## for testing only set_config_option(\"GDAL_CACHEMAX\", \"0\")  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize()  process_row = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   return() }  system.time( lapply(0:(nrows-1), process_row) ) #> ^C #> Timing stopped at: 3650 42.97 3694  # killed with ctrl-c  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"GDAL Block Cache","text":"RFC 26: GDAL Block Cache Improvements Configuration options GDAL Performance optimization GDAL Warp GDALRasterBlock Class Reference gcore/gdalrasterblock.cpp","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GDAL Config Quick Reference","text":"Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. large number configuration options available. overall discussion along full list available options apply GDAL documentation https://gdal.org/user/configoptions.html. quick reference covers small subset configuration options may useful common scenarios, links topic-specific documentation provided GDAL project. Options can set R gdalraster::set_config_option(). Note specific usage context dependent. Passing value = \"\" (empty string) unset value previously set set_config_option():","code":"library(gdalraster)  set_config_option(\"GDAL_NUM_THREADS\", \"ALL_CPUS\") # unset: set_config_option(\"GDAL_NUM_THREADS\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"general-options","dir":"Articles","previous_headings":"","what":"General options","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/user/configoptions.html#general-options GDAL_RASTERIO_RESAMPLING $read() method GDALRaster object perform automatic resampling specified output size (out_xsize * out_ysize) different size source region read (xsize * ysize). case, resampling can configured override default NEAR one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE, MODE, RMS, GAUSS: CPL_TMPDIR default, temporary files written current working directory. can changed :","code":"# bilinear interpolation (2x2 neighborhood of pixels) set_config_option(\"GDAL_RASTERIO_RESAMPLING\", \"BILINEAR\") set_config_option(\"CPL_TMPDIR\", \"<dirname>\") # tmpdir to use"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"performance-and-caching","dir":"Articles","previous_headings":"","what":"Performance and caching","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/user/configoptions.html#performance--caching GDAL_NUM_THREADS Sets number worker threads used GDAL operations support multithreading. affects several different parts GDAL including multi-threaded compression GeoTiff SOZip, multithreaded computation warp() (see topics ). GDAL_CACHEMAX size limit block cache set upon first use (first /O). Setting GDAL_CACHEMAX point resize cache. per-session setting. GDAL_CACHEMAX set upon first use cache, default cache size (5% physical RAM) effect current session. See also GDAL Block Cache. GDAL_MAX_DATASET_POOL_SIZE default number datasets can opened simultaneously GDALProxyPool mechanism (used VRT example) 100. can increased get better random /O performance VRT mosaics made numerous underlying raster files. Note: Linux systems, number file handles can opened process generally limited 1024. currently clamped 2 1000. Also note gdalwarp increases pool size 450: PG_USE_COPY configures PostgreSQL/PostGIS use COPY inserting data significantly faster INSERT. can increase performance substantially using gdalraster::polygonize() write polygons PostGIS vector. See also GDAL configuration options PostgreSQL. SQLITE_USE_OGR_VFS SQLite-based formats GeoPackage (.gpkg) Spatialite (.sqlite), setting SQLITE_USE_OGR_VFS enables extra buffering/caching GDAL/OGR /O layer can speed /O. aware file locking occur option activated, concurrent edits may lead database corruption. setting may increase performance substantially using gdalraster::polygonize() write polygons vector layer formats. Additional configuration performance hints SQLite databases driver documentation : https://gdal.org/drivers/vector/sqlite.html#configuration-options. OGR_SQLITE_JOURNAL SQLite transactional DBMS. many INSERT statements executed close sequence, application code may group large batches within transactions order get optimal performance. default, transaction explicitly started, SQLite autocommit every statement slow. OGR_SQLITE_JOURNAL option configures operation rollback journal implements transactions SQLite. SQLite documentation describes default operation: DELETE journaling mode normal behavior. DELETE mode, rollback journal deleted conclusion transaction. Indeed, delete operation action causes transaction commit. DELETE mode requires file system /O performance degraded many INSERTs autocommitted individually. Using MEMORY journaling mode (even ) can much faster case: MEMORY journaling mode stores rollback journal volatile RAM. saves disk /O expense database safety integrity. application using SQLite crashes middle transaction MEMORY journaling mode set, database file likely go corrupt. See SQLite documentation available journal modes. setting also applies using gdalraster::polygonize() write polygons vector layer GeoPackage (.gpkg) Spatialite (.sqlite) formats (see SQLITE_USE_OGR_VFS ).","code":"# set to a specific size in MB set_config_option(\"GDAL_CACHEMAX\", \"800\")  # or percent of physical RAM set_config_option(\"GDAL_CACHEMAX\", \"10%\") # default is 100 set_config_option(\"GDAL_MAX_DATASET_POOL_SIZE\", \"450\") # use COPY for inserting to PostGIS set_config_option(\"PG_USE_COPY\", \"YES\") # SQLite: GPKG (.gpkg) and Spatialite (.sqlite) # enable extra buffering/caching by the GDAL/OGR I/O layer set_config_option(\"SQLITE_USE_OGR_VFS\", \"YES\") # configure SQLite to store the rollback journal in RAM set_config_option(\"OGR_SQLITE_JOURNAL\", \"MEMORY\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"networking","dir":"Articles","previous_headings":"","what":"Networking","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/user/configoptions.html#networking-options CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE Whether use local temporary file support random writes certain virtual file systems. temporary file located CPL_TMPDIR (see ).","code":"# YES|NO to use a temp file set_config_option(\"CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE\", \"YES\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"proj","dir":"Articles","previous_headings":"","what":"PROJ","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/user/configoptions.html#proj-options OSR_DEFAULT_AXIS_MAPPING_STRATEGY option can set either TRADITIONAL_GIS_ORDER AUTHORITY_COMPLIANT. GDAL >= 3.5 defaults AUTHORITY_COMPLIANT. Determines whether honor declared axis mapping CRS override traditional GIS ordering (x = longitude, y = latitude). OSR_WKT_FORMAT GDAL 3.0, default format exporting spatial reference definition Well Known Text WKT 1. can overridden :","code":"# SFSQL/WKT1_SIMPLE/WKT1/WKT1_GDAL/WKT1_ESRI/WKT2_2015/WKT2_2018/WKT2/DEFAULT set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"warp","dir":"Articles","previous_headings":"","what":"Warp","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/programs/gdalwarp.html#memory-usage performance caching topic generally applies processing gdalraster::warp() (reproject/resample/crop/mosaic). GDAL_NUM_THREADS Multithreaded computation warp() can enabled : Increasing memory available warp() may also increase performance (.e., options passed cl_arg include value like c(\"-wm\", \"1000\")). warp memory specified \"-wm\" shared among threads. especially beneficial increase value running warp() multithreading enabled. Multithreading also enabled including GDAL warp option cl_arg c(\"-wo\", \"NUM_THREADS=<value>\") greater 1, equivalent setting GDAL_NUM_THREADS configuration option shown . option can combined -multi command-line argument passed warp() cl_arg. -multi, two threads used process chunks raster perform input/output operation simultaneously, whereas GDAL_NUM_THREADS configuration option affects computation separately. GDAL_CACHEMAX Increasing size /O block cache may also help. can done setting GDAL_CACHEMAX described performance caching topic .","code":"# note this also affects several other parts of GDAL set_config_option(\"GDAL_NUM_THREADS\", \"4\") # number of threads or ALL_CPUS"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"geotiff","dir":"Articles","previous_headings":"","what":"GeoTIFF","title":"GDAL Config Quick Reference","text":"GDAL doc: https://gdal.org/drivers/raster/gtiff.html#configuration-options behavior GTiff driver highly configurable, including respect overview creation. full discussion, see link also documentation gdaladdo command-line utility. GDAL_NUM_THREADS GTiff driver supports multi-threaded compression (default compression main thread). GDAL documentation states worth slow compression algorithms DEFLATE LZMA. Starting GDAL 3.6, option also enables multi-threaded decoding read requests intersect several tiles/strips: COMPRESS_OVERVIEW Raster overviews (.k.. pyramids) can built $buildOverviews() method GDALRaster object. may desirable compress overviews building: PREDICTOR_OVERVIEW Sets predictor use overviews LZW, DEFLATE ZSTD compression. default 1 (predictor), 2 horizontal differencing 3 floating point prediction. PREDICTOR=2 supported 8, 16, 32 64 bit samples (support 64 bit added libtiff > 4.3.0). PREDICTOR=3 supported 16, 32 64 bit floating-point data.","code":"# specify the number of worker threads or ALL_CPUS # note this also affects several other parts of GDAL set_config_option(\"GDAL_NUM_THREADS\", \"ALL_CPUS\") # applies to external overviews (.ovr), and internal overviews if GDAL >= 3.6 # LZW is a good default but several other compression algorithms are available set_config_option(\"COMPRESS_OVERVIEW\", \"LZW\") # horizontal differencing set_config_option(\"PREDICTOR_OVERVIEW\", \"2\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"httphttps","dir":"Articles","previous_headings":"","what":"HTTP/HTTPS","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsicurl/ (HTTP/HTTPS random access) GDAL_HTTP_CONNECTTIMEOUT Maximum delay connection established aborted. GDAL_HTTP_TIMEOUT Maximum delay whole request complete aborted. CPL_VSIL_CURL_CHUNK_SIZE Partial downloads (requires HTTP server support random reading) done 16 KB granularity default. chunk size can configured option. driver detects sequential reading, progressively increase chunk size 128 times CPL_VSIL_CURL_CHUNK_SIZE (2 MB default) improve download performance. increasing value CPL_VSIL_CURL_CHUNK_SIZE optimize sequential reading, recommended increase CPL_VSIL_CURL_CACHE_SIZE well 128 times value CPL_VSIL_CURL_CHUNK_SIZE. CPL_VSIL_CURL_CACHE_SIZE global least-recently-used cache 16 MB shared among downloaded content used, content may reused file handle closed reopen, life-time process vsi_curl_clear_cache() called. size global LRU cache can modified :","code":"# max delay for connection establishment in seconds set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"<seconds>\") # max delay for whole request completion in seconds set_config_option(\"GDAL_HTTP_TIMEOUT\", \"<seconds>\") # chunk size in bytes set_config_option(\"CPL_VSIL_CURL_CHUNK_SIZE\", \"<bytes>\") # size in bytes defaults to 16 MB set_config_option(\"CPL_VSIL_CURL_CACHE_SIZE\", \"<bytes>\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"aws-s3-buckets","dir":"Articles","previous_headings":"","what":"AWS S3 buckets","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsis3/ (AWS S3 file system handler) AWS_NO_SIGN_REQUEST Request signing can disabled public buckets require AWS account: AWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEY AWS_SESSION_TOKENAWS_REQUEST_PAYER authentication required, configure credentials : AWS_REGION Sets AWS region requests sent. Defaults us-east-1.","code":"# public bucket no AWS account required set_config_option(\"AWS_NO_SIGN_REQUEST\", \"YES\") set_config_option(\"AWS_ACCESS_KEY_ID\", \"<value>\") # key ID set_config_option(\"AWS_SECRET_ACCESS_KEY\", \"<value>\") # secret access key # used for validation if using temporary credentials: set_config_option(\"AWS_SESSION_TOKEN\", \"<value>\") # session token # if requester pays: set_config_option(\"AWS_REQUEST_PAYER\", \"<value>\") # requester # specify region set_config_option(\"AWS_REGION\", \"us-west-2\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"google-cloud-storage","dir":"Articles","previous_headings":"","what":"Google Cloud Storage","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsigs/ (Google Cloud Storage files)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"microsoft-azure-blob","dir":"Articles","previous_headings":"","what":"Microsoft Azure Blob","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsiaz/ (Microsoft Azure Blob files) Recognized filenames form /vsiaz/container/key, container name container key object “key”, .e. filename potentially containing subdirectories. AZURE_NO_SIGN_REQUEST Controls whether requests signed. AZURE_STORAGE_CONNECTION_STRING Credential string provided Access Keys section administrative interface, containing account name secret key. AZURE_STORAGE_ACCOUNTAZURE_STORAGE_ACCESS_TOKENAZURE_STORAGE_ACCESS_KEYAZURE_STORAGE_SAS_TOKEN Whereas Azure connection string contains account name key, storage account name might set using AZURE_STORAGE_ACCOUNT along one : AZURE_STORAGE_ACCESS_TOKEN: value obtained using Microsoft Authentication Library (MSAL) AZURE_STORAGE_ACCESS_KEY: value secret key associated AZURE_STORAGE_ACCOUNT AZURE_STORAGE_SAS_TOKEN: value Shared Access Signature AZURE_NO_SIGN_REQUEST=YES disable request signing AZURE_STORAGE_SAS_TOKEN used, example, Microsoft Planetary Computer documented : https://planetarycomputer.microsoft.com/docs/concepts/sas/ SAS token can requested via API token endpoint: https://planetarycomputer.microsoft.com/api/sas/v1/token/{collection_id} https://planetarycomputer.microsoft.com/api/sas/v1/token/{storage_account}/{container} authentication methods possible Azure. See GDAL documentation details.","code":"# public access set_config_option(\"AZURE_NO_SIGN_REQUEST\", \"YES\") set_config_option(\"AZURE_STORAGE_CONNECTION_STRING\", \"<my_connection_string>\") # e.g., Planetary Computer access to STAC items as geoparquet datasets # https://planetarycomputer.microsoft.com/docs/quickstarts/stac-geoparquet/ set_config_option(\"AZURE_STORAGE_ACCOUNT\", \"pcstacitems\") # SAS token is the value of \"token\" in the JSON returned by: # https://planetarycomputer.microsoft.com/api/sas/v1/token/pcstacitems/items set_config_option(\"AZURE_STORAGE_SAS_TOKEN\", \"<token>\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"microsoft-azure-data-lake","dir":"Articles","previous_headings":"","what":"Microsoft Azure Data Lake","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsiadls/ (Microsoft Azure Data Lake Storage Gen2)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-config-quick-ref.html","id":"sozip","dir":"Articles","previous_headings":"","what":"SOZip","title":"GDAL Config Quick Reference","text":"GDAL doc: /vsizip/ (Seek-Optimized ZIP files, GDAL >= 3.7) function gdalraster::addFilesInZip() can used create new append existing ZIP files, potentially using seek optimization extension. Function arguments available options , configuration options can set change default behavior. GDAL_NUM_THREADS GDAL_NUM_THREADS configuration option can set ALL_CPUS integer value specify number threads use SOZip-compressed files. option similarly described compression GeoTiff. Note option also affects several parts GDAL. CPL_SOZIP_ENABLED Defaults AUTO. Determines whether SOZip optimization enabled. AUTO, SOZip enabled uncompressed files larger CPL_SOZIP_MIN_FILE_SIZE. CPL_SOZIP_MIN_FILE_SIZE Defaults 1M. Determines minimum file size SOZip automatically enabled. Specified bytes, K, M G suffix can used respectively specify value kilobytes, megabytes gigabytes.","code":"# SOZip optimization defaults to AUTO set_config_option(\"CPL_SOZIP_ENABLED\", \"YES\") # SOZip minimum file size set_config_option(\"CPL_SOZIP_MIN_FILE_SIZE\", \"100K\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Draft Bindings to the GDAL/OGR Vector API","text":"document describes R bindings GDAL/OGR Vector API proposed inclusion package gdalraster, analogous existing raster support. package providing low-level access raster vector APIs GDAL interest developers creating higher level interfaces. example, custom workflows /O intensive may benefit direct access GDAL’s /O capabilities. R bindings vector API support persistent connections data store, cursors attribute spatial filtering, transactions, feature-level insert/delete, update attributes geometries, OGR facilities geoprocessing. Calling signatures class-based interface resemble C++ Python APIs provided GDAL project. intended bindings gdalraster provide long-term API stability tracking changes GDAL. proposed interface described terms GDAL Vector Data Model, along draft class definition implementation via RCPP_EXPOSED_CLASS. initial implemetation supporting read access merged gdalraster main branch (v. 1.11.1.9100, 2024-07-23), online documentation available : https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"description-of-the-interface","dir":"Articles","previous_headings":"","what":"Description of the interface","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Bindings implemented Rcpp modules including RCPP_EXPOSED_CLASS. Exposing C++ classes directly R provides natural interface underlying object model.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"vector-dataset","dir":"Articles","previous_headings":"Description of the interface","what":"Vector dataset","title":"Draft Bindings to the GDAL/OGR Vector API","text":"GDAL Dataset vector file database containing one OGR layers. vector dataset represented R data source name (DSN), character string may filename, database connection string, URL, virtual file, etc. Management datasets vector schemas done : existing management functions gdalraster operate vector datasets: copyDatasetFiles(), deleteDataset(), renameDataset() addFilesInZip() (supports SOZip) existing utility functions managing vector data sources (gdalraster 1.11.0): ogr_manage ogr_define existing wrappers ogr2ogr() ogrinfo() GDAL Utils API (gdalraster 1.10.0) ogr_execute_sql(): execute SQL statement data store edit data (SQL SELECT statement can used constructor class GDALVector described , open layer features)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"vector-layer","dir":"Articles","previous_headings":"Description of the interface","what":"Vector layer","title":"Draft Bindings to the GDAL/OGR Vector API","text":"OGR Layer class represents layer features within data source. modeled R class GDALVector, exposed C++ class encapsulating OGR Layer GDAL Dataset owns . GDALVector object persist open connection dataset, expose methods retrieving layer information, setting attribute spatial filters, reading/writing features, layer geoprocessing. draft definition class GDALVector given .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"feature-class-field-definitions","dir":"Articles","previous_headings":"Description of the interface","what":"Feature class / field definitions","title":"Draft Bindings to the GDAL/OGR Vector API","text":"features OGR Layer share common schema (feature class) modeled GDAL OGR Feature Definition. feature class definition includes set attribute fields data types, geometry field(s), feature class name (normally used layer name). feature class definition represented list R, names attribute/geometry field names, list element holding field definition. attribute field definition list named elements: geometry field definition list named elements:","code":"$type       : OGR Field Type (\"OFTString\", \"OFTInteger\", ...) $subtype    : optional (\"OFSTBoolean\", ...) $width      : optional max number of characters $precision  : optional number of digits after the decimal point $is_nullable: optional NOT NULL constraint (logical scalar) $is_unique  : optional UNIQUE constraint (logical scalar) $default    : optional field default value as character string $is_ignored : whether ignored when retrieving features (logical scalar) $domain     : optional domain name $is_geom    : FALSE for attribute fields $type       : geom type (\"Point\", \"Polygon\", etc.) $srs        : optional spatial reference as WKT string $is_nullable: optional NOT NULL constraint (logical scalar) $is_ignored : whether ignored when retrieving features (logical scalar) $is_geom    : TRUE for geometry fields"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"feature-retrieval","dir":"Articles","previous_headings":"Description of the interface","what":"Feature retrieval","title":"Draft Bindings to the GDAL/OGR Vector API","text":"OGR Feature – read GDALVector::getNextFeature() GDALVector::getFeature(), passed write methods – list unique feature identifier (FID), attribute geometry field names, values. GDALVector::fetch() fetches next n features layer returns data frame (analog DBI::dbFetch()). allows retrieving entire feature set (potentially attribute /spatial filter applied), one page features time, remaining features. fetch() can called multiple times (forward paging). Fetching zero features also possible retrieve structure result set data frame. OGR field types returned corresponding native R types (NA OGR NULL values): OFTInteger: integer (subtype OFSTBoolean logical) OFTIntegerList: vector integer (list column data frames) OFTInteger64: bit64::integer64 (subtype OFSTBoolean logical) OFTInteger64List: vector bit64::integer64 (list column data frames) OFTReal: numeric OFTRealList: vector numeric (list column data frames) OFTString: character string OFTStringList: vector character strings (list column data frames) OFTDate: Date OFTDateTime: POSIXct (millisecond accuracy, adjustment time zone flag present) OFTBinary: raw vector (list column data frames)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"geometry","dir":"Articles","previous_headings":"Description of the interface","what":"Geometry","title":"Draft Bindings to the GDAL/OGR Vector API","text":"OGR Geometry can represented R either character string containing OGC Well Known Text (WKT), raw vector bytes containing Well Known Binary (WKB). OGR Spatial Reference, encapsulates definition projection datum, represented R WKT. gdalraster existing functions working spatial reference systems WKT (srs_to_wkt(), srs_is_projected(), etc.), set geometry convenience functions also operating WKT (GEOS via GDAL headers). Package wk supports parsing WKB WKT representation geometries R-native formats. Interoperability sf classes simple features also straightforward (e.g., sf::st_sf()). Returning geometries optional retrieving features data store gdalraster. Omitting geometries can improve performance memory utilization access attributes needed (currently default). geometries included, can retrieved either WKB WKT (optionally ISO versions). WKB compact fast parse, e.g., using high performance functions provided wk. setting geometry retrieval per-object class GDALvector, can set back forth needed lifetime object.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"class-gdalvector","dir":"Articles","previous_headings":"","what":"class GDALVector","title":"Draft Bindings to the GDAL/OGR Vector API","text":"draft class definition partially implemented : https://github.com/USDAForestService/gdalraster/blob/gdalvector/src/gdalvector.cpp header file can referenced public class methods implemented far prototype (subset draft class definition ): https://github.com/USDAForestService/gdalraster/blob/gdalvector/src/gdalvector.h","code":"class GDALVector {  private:     std::string m_dsn;     std::string m_layer_name;  // layer name or sql statement     bool m_is_sql;     Rcpp::CharacterVector m_open_options;     std::string m_spatial_filter;     std::string m_dialect;     GDALDatasetH m_hDataset;     GDALAccess m_eAccess;     OGRLayerH m_hLayer;     std::string m_attr_filter = \"\";   public:     GDALVector();     explicit GDALVector(Rcpp::CharacterVector dsn);     GDALVector(Rcpp::CharacterVector dsn, std::string layer);     GDALVector(Rcpp::CharacterVector dsn, std::string layer, bool read_only);     GDALVector(Rcpp::CharacterVector dsn, std::string layer, bool read_only,                Rcpp::CharacterVector open_options);     GDALVector(Rcpp::CharacterVector dsn, std::string layer, bool read_only,                Rcpp::Nullable<Rcpp::CharacterVector> open_options,                std::string spatial_filter, std::string dialect);      // read/write fields exported to R     std::string defaultGeomFldName = \"geometry\";     std::string returnGeomAs = \"NONE\";     std::string wkbByteOrder = \"LSB\";      // public methods exported to R     void open(bool read_only);     bool isOpen() const;     std::string getDsn() const;     Rcpp::CharacterVector getFileList() const;     std::string getDriverShortName() const;     std::string getDriverLongName() const;      std::string getName() const;     Rcpp::List testCapability() const;     std::string getFIDColumn() const;     std::string getGeomType() const;     std::string getGeometryColumn() const;     std::string getSpatialRef() const;     Rcpp::NumericVector bbox();     Rcpp::List getLayerDefn() const;      void setAttributeFilter(std::string query);     void setSpatialFilterRect(Rcpp::NumericVector bbox);     void setSpatialFilter(std::string wkt);     std::string getSpatialFilter() const;     void clearSpatialFilter();      double getFeatureCount();     SEXP getNextFeature();     // fid must be a length-1 numeric vector, since numeric vector can carry     // the class attribute for integer64:     SEXP getFeature(Rcpp::NumericVector fid);     void resetReading();          void setNextByIndex(int64_t fid);     void setIgnoredFields(Rcpp::CharacterVector fields);      Rcpp::DataFrame fetch(double n);      // initialize an empty feature as list:     Rcpp::List initFeature();     // the following return the FID of the affected feature if successful     // create and write a new feature within a layer:     int64_t createFeature(Rcpp::List feat);     // rewrite/replace an existing feature:     int64_t setFeature(Rcpp::List feat);     // rewrite/replace an existing feature or create a new feature:     int64_t upsertFeature(Rcpp::List feat);     // delete feature from layer:     int64_t deleteFeature(int64_t fid);      bool startTransaction(bool force);     bool commitTransaction();     bool rollbackTransaction();      void layerIntersection(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);     void layerUnion(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);     void layerSymDifference(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);     void layerIdentity(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);     void layerUpdate(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);     void layerClip(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);     void layerErase(             GDALVector method_layer,             GDALVector result_layer,             bool quiet,             Rcpp::Nullable<Rcpp::CharacterVector> options);      void close();      // methods for internal use not exported to R     void _checkAccess(GDALAccess access_needed) const;     OGRLayerH _getOGRLayerH(); };  RCPP_EXPOSED_CLASS(GDALVector)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"example-usage-for-class-gdalvector","dir":"Articles","previous_headings":"","what":"Example: usage for class GDALVector","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Created 2024-07-21 reprex v2.1.1","code":"## usage for GDALVector class  library(gdalraster) #> GDAL 3.8.4, released 2024/02/08, GEOS 3.12.1, PROJ 9.3.1  # MTBS fires in Yellowstone National Park 1984-2022 f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") # copy to a temporary in-memory file that is writeable dsn <- paste0(\"/vsimem/\", basename(f)) vsi_copy_file(f, dsn) #> [1] 0  lyr <- new(GDALVector, dsn, \"mtbs_perims\")  # object of class GDALVector lyr #> C++ object <0x58bb870345b0> of class 'GDALVector' <0x58bb8825b400> str(lyr) #> Reference class 'Rcpp_GDALVector' [package \"gdalraster\"] with 3 fields #>  $ defaultGeomFldName: chr \"geometry\" #>  $ returnGeomAs      : chr \"NONE\" #>  $ wkbByteOrder      : chr \"LSB\" #>  and 46 methods, of which 32 are  possibly relevant: #>    bbox, clearSpatialFilter, close, fetch, finalize, getDriverLongName, #>    getDriverShortName, getDsn, getFeature, getFeatureCount, getFIDColumn, #>    getFileList, getGeometryColumn, getGeomType, getLayerDefn, getName, #>    getNextFeature, getSpatialRef, initialize, isOpen, layerClip, layerErase, #>    layerIdentity, layerIntersection, layerSymDifference, layerUnion, #>    layerUpdate, open, resetReading, setAttributeFilter, setSpatialFilterRect, #>    testCapability  # dataset info lyr$getDriverShortName() #> [1] \"GPKG\" lyr$getDriverLongName() #> [1] \"GeoPackage\" lyr$getFileList() #> [1] \"/vsimem/ynp_fires_1984_2022.gpkg\"  # layer info lyr$getName() #> [1] \"mtbs_perims\" lyr$getGeomType() #> [1] \"MULTIPOLYGON\" lyr$getGeometryColumn() #> [1] \"geom\" lyr$getFIDColumn() #> [1] \"fid\" lyr$getSpatialRef() #> [1] \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Lambert_Conformal_Conic_2SP\\\"],PARAMETER[\\\"latitude_of_origin\\\",44.25],PARAMETER[\\\"central_meridian\\\",-109.5],PARAMETER[\\\"standard_parallel_1\\\",49],PARAMETER[\\\"standard_parallel_2\\\",45],PARAMETER[\\\"false_easting\\\",600000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"32100\\\"]]\" lyr$bbox() #> [1] 469685.73 -12917.76 573531.72  96577.34  # layer capabilities lyr$testCapability() #> $RandomRead #> [1] TRUE #>  #> $SequentialWrite #> [1] FALSE #>  #> $RandomWrite #> [1] FALSE #>  #> $UpsertFeature #> [1] FALSE #>  #> $FastSpatialFilter #> [1] TRUE #>  #> $FastFeatureCount #> [1] TRUE #>  #> $FastGetExtent #> [1] TRUE #>  #> $FastSetNextByIndex #> [1] TRUE #>  #> $CreateField #> [1] FALSE #>  #> $CreateGeomField #> [1] FALSE #>  #> $DeleteField #> [1] FALSE #>  #> $ReorderFields #> [1] FALSE #>  #> $AlterFieldDefn #> [1] FALSE #>  #> $AlterGeomFieldDefn #> [1] FALSE #>  #> $DeleteFeature #> [1] FALSE #>  #> $StringsAsUTF8 #> [1] TRUE #>  #> $Transactions #> [1] TRUE #>  #> $CurveGeometries #> [1] TRUE  # re-open with write access lyr$open(read_only = FALSE) lyr$testCapability()$SequentialWrite #> [1] TRUE lyr$testCapability()$RandomWrite #> [1] TRUE  # feature class definition - a list of fields and their definitions defn <- lyr$getLayerDefn() names(defn) #>  [1] \"event_id\"     \"incid_name\"   \"incid_type\"   \"map_id\"       \"burn_bnd_ac\"  #>  [6] \"burn_bnd_lat\" \"burn_bnd_lon\" \"ig_date\"      \"ig_year\"      \"geom\"  # each list element holds a field definition list str(defn) #> List of 10 #>  $ event_id    :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ incid_name  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ incid_type  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ map_id      :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_ac :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lat:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lon:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ ig_date     :List of 9 #>   ..$ type       : chr \"OFTDate\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ ig_year     :List of 9 #>   ..$ type       : chr \"OFTInteger\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ geom        :List of 5 #>   ..$ type       : chr \"MULTIPOLYGON\" #>   ..$ srs        : chr \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,2\"| __truncated__ #>   ..$ is_nullable: logi TRUE #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi TRUE  lyr$getFeatureCount() #> [1] 61  # cursor feat <- lyr$getNextFeature() # a list of field names and their values str(feat) #> List of 10 #>  $ FID         :integer64 1  #>  $ event_id    : chr \"WY4413411069519870807\" #>  $ incid_name  : chr \"POLECAT\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10015934  #>  $ burn_bnd_ac :integer64 1093  #>  $ burn_bnd_lat: chr \"44.132\" #>  $ burn_bnd_lon: chr \"-110.696\" #>  $ ig_date     : Date[1:1], format: \"1987-08-07\" #>  $ ig_year     : int 1987  # attribute filter lyr$setAttributeFilter(\"ig_year = 2020\") lyr$getFeatureCount() #> [1] 1  # default value of read/write field 'returnGeomAs' lyr$returnGeomAs #> [1] \"NONE\"  feat <- lyr$getNextFeature() str(feat) #> List of 10 #>  $ FID         :integer64 61  #>  $ event_id    : chr \"WY4438911082120200822\" #>  $ incid_name  : chr \"LONE STAR\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10020495  #>  $ burn_bnd_ac :integer64 3348  #>  $ burn_bnd_lat: chr \"44.4\" #>  $ burn_bnd_lon: chr \"-110.782\" #>  $ ig_date     : Date[1:1], format: \"2020-08-22\" #>  $ ig_year     : int 2020  # NULL if no more features are available feat <- lyr$getNextFeature() str(feat) #>  NULL  # reset reading to the start and return geometry as WKT lyr$resetReading() lyr$returnGeomAs <- \"WKT\" feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 61  #>  $ event_id    : chr \"WY4438911082120200822\" #>  $ incid_name  : chr \"LONE STAR\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10020495  #>  $ burn_bnd_ac :integer64 3348  #>  $ burn_bnd_lat: chr \"44.4\" #>  $ burn_bnd_lon: chr \"-110.782\" #>  $ ig_date     : Date[1:1], format: \"2020-08-22\" #>  $ ig_year     : int 2020 #>  $ geom        : chr \"MULTIPOLYGON (((496593.122306971 15506.8828590633,496491.761299067 15605.3612548792,496290.812130161 15388.0465\"| __truncated__  # clear attribute filter lyr$setAttributeFilter(\"\") lyr$getFeatureCount() #> [1] 61  # spatial filter # get the bounding box of the largest 1988 fire and use as spatial filter # first set a temporary attribute filter to do the lookup lyr$setAttributeFilter(\"ig_year = 1988 ORDER BY burn_bnd_ac DESC\") feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 7  #>  $ event_id    : chr \"WY4470811082119880722\" #>  $ incid_name  : chr \"NORTH FORK\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10014217  #>  $ burn_bnd_ac :integer64 563527  #>  $ burn_bnd_lat: chr \"44.678\" #>  $ burn_bnd_lon: chr \"-110.716\" #>  $ ig_date     : Date[1:1], format: \"1988-07-22\" #>  $ ig_year     : int 1988 #>  $ geom        : chr \"MULTIPOLYGON (((469685.969312071 29526.2354109807,469918.933844832 29654.3220754602,470030.299119989 29518.7441\"| __truncated__  bbox <- bbox_from_wkt(feat$geom) print(bbox) #> [1] 469685.97  11442.45 544069.63  85508.15  # set spatial filter on the full layer lyr$setAttributeFilter(\"\") lyr$setSpatialFilterRect(bbox) lyr$getFeatureCount() #> [1] 40  # fetch n features at a time and return as a data frame # analog of DBI::dbFetch() where the lyr object is a result set # geometry can optionally be returned as NONE, WKT or WKB d <- lyr$fetch(20) str(d) #> 'data.frame':    20 obs. of  11 variables: #>  $ FID         :integer64 38 7 32 25 6 40 36 8 ...  #>  $ event_id    : chr  \"MT4471311115120070627\" \"WY4470811082119880722\" \"MT4491211108020030820\" \"WY4433011103020000816\" ... #>  $ incid_name  : chr  \"MADISON ARM\" \"NORTH FORK\" \"RATHBONE\" \"SPRUCE COMPLEX (PLATEAU)\" ... #>  $ incid_type  : chr  \"Wildfire\" \"Wildfire\" \"Wildfire\" \"Wildfire\" ... #>  $ map_id      :integer64 16113 10014217 13014 10014141 10014215 16428 15432 10014218 ...  #>  $ burn_bnd_ac :integer64 3564 563527 2701 2808 20422 2175 3745 95233 ...  #>  $ burn_bnd_lat: chr  \"44.713\" \"44.678\" \"44.912\" \"44.329\" ... #>  $ burn_bnd_lon: chr  \"-111.151\" \"-110.716\" \"-111.080\" \"-111.027\" ... #>  $ ig_date     : Date, format: \"2007-06-27\" \"1988-07-22\" ... #>  $ ig_year     : int  2007 1988 2003 2000 1988 2007 2006 1988 1988 1988 ... #>  $ geom        : chr  \"MULTIPOLYGON (((469685.969631834 54506.9481370259,470235.509134591 54383.4837249131,470939.42854159 53898.69574\"| __truncated__ \"MULTIPOLYGON (((469685.969312071 29526.2354109807,469918.933844832 29654.3220754602,470030.299119989 29518.7441\"| __truncated__ \"MULTIPOLYGON (((475136.766856355 74053.2153491452,475188.847231864 74366.3342955356,475341.959781024 74368.4856\"| __truncated__ \"MULTIPOLYGON (((477992.723214764 8483.08443989834,477312.456870818 7630.95433906866,477088.305832492 6955.09786\"| __truncated__ ...  # the next 20 features d <- lyr$fetch(20) nrow(d) #> [1] 20  # no features remaining d <- lyr$fetch(20) nrow(d) #> [1] 0 str(d)  # 0-row data frame with columns typed #> 'data.frame':    0 obs. of  11 variables: #>  $ FID         :integer64   #>  $ event_id    : chr  #>  $ incid_name  : chr  #>  $ incid_type  : chr  #>  $ map_id      :integer64   #>  $ burn_bnd_ac :integer64   #>  $ burn_bnd_lat: chr  #>  $ burn_bnd_lon: chr  #>  $ ig_date     : 'Date' num(0)  #>  $ ig_year     : int  #>  $ geom        : chr  # fetch all available features by passing n = -1, resets to first feature # return geom as a list column of WKB raw vectors lyr$returnGeomAs <- \"WKB\" d <- lyr$fetch(-1) str(d) #> 'data.frame':    40 obs. of  11 variables: #>  $ FID         :integer64 38 7 32 25 6 40 36 8 ...  #>  $ event_id    : chr  \"MT4471311115120070627\" \"WY4470811082119880722\" \"MT4491211108020030820\" \"WY4433011103020000816\" ... #>  $ incid_name  : chr  \"MADISON ARM\" \"NORTH FORK\" \"RATHBONE\" \"SPRUCE COMPLEX (PLATEAU)\" ... #>  $ incid_type  : chr  \"Wildfire\" \"Wildfire\" \"Wildfire\" \"Wildfire\" ... #>  $ map_id      :integer64 16113 10014217 13014 10014141 10014215 16428 15432 10014218 ...  #>  $ burn_bnd_ac :integer64 3564 563527 2701 2808 20422 2175 3745 95233 ...  #>  $ burn_bnd_lat: chr  \"44.713\" \"44.678\" \"44.912\" \"44.329\" ... #>  $ burn_bnd_lon: chr  \"-111.151\" \"-110.716\" \"-111.080\" \"-111.027\" ... #>  $ ig_date     : Date, format: \"2007-06-27\" \"1988-07-22\" ... #>  $ ig_year     : int  2007 1988 2003 2000 1988 2007 2006 1988 1988 1988 ... #>  $ geom        :List of 40 #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ...  # parse WKB using the wk package wk_obj <- wk::wkb(d$geom, crs = lyr$getSpatialRef()) plot(wk_obj) lyr$clearSpatialFilter() lyr$getFeatureCount() #> [1] 61  lyr$close() vsi_unlink(dsn) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"example-layer-geoprocessing","dir":"Articles","previous_headings":"","what":"Example: layer geoprocessing","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Created 2024-07-30 reprex v2.1.1","code":"## layer intersection example  library(gdalraster) #> GDAL 3.8.4, released 2024/02/08, GEOS 3.12.1, PROJ 9.3.1  # MTBS fires in Yellowstone National Park 1984-2022 dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # layer filtered to fires since year 2000 lyr1 <- new(GDALVector, dsn, \"mtbs_perims\") lyr1$setAttributeFilter(\"ig_year >= 2000\") lyr1$getFeatureCount() #> [1] 40  # second layer for the 1988 North Fork fire perimeter sql <- paste0(\"SELECT incid_name, ig_year, geom \",               \"FROM mtbs_perims \",               \"WHERE incid_name = 'NORTH FORK'\") lyr2 <- new(GDALVector, dsn, sql) lyr2$getFeatureCount() #> [1] 1  # intersect to obtain areas re-burned since 2000 tmp_dsn <- tempfile(fileext = \".gpkg\") opt <- c(\"INPUT_PREFIX=layer1_\",          \"METHOD_PREFIX=layer2_\",          \"PROMOTE_TO_MULTI=YES\")  lyr_out <- ogr_proc(mode = \"Intersection\",                      input_lyr = lyr1,                     method_lyr = lyr2,                      out_dsn = tmp_dsn,                     out_lyr_name = \"north_fork_reburned\",                     out_geom_type = \"MULTIPOLYGON\",                     mode_opt = opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # result layer has attributes of the input and the method layers lyr_out$returnGeomAs <- \"TYPE_NAME\" d <- lyr_out$fetch(-1) print(d) #>   FID       layer1_event_id layer1_incid_name layer1_incid_type layer1_map_id #> 1   1 WY4484611038620100914          ANTELOPE          Wildfire      10013735 #> 2   2 WY4466711063920120810            CYGNET          Wildfire          1961 #> 3   3 WY4474311097820160809             MAPLE          Wildfire      10005020 #> 4   4 WY4492611093820160805              FAWN          Wildfire      10005117 #> 5   5 WY4457911058620160826           CENTRAL          Wildfire      10014143 #>   layer1_burn_bnd_ac layer1_burn_bnd_lat layer1_burn_bnd_lon layer1_ig_date #> 1               4888              44.839            -110.368     2010-09-14 #> 2               3188              44.682            -110.622     2012-08-10 #> 3             103193              44.731            -110.982     2016-08-09 #> 4               3161              44.936            -110.913     2016-08-05 #> 5               2340              44.595            -110.574     2016-08-26 #>   layer1_ig_year layer2_incid_name layer2_ig_year         geom #> 1           2010        NORTH FORK           1988 MULTIPOLYGON #> 2           2012        NORTH FORK           1988 MULTIPOLYGON #> 3           2016        NORTH FORK           1988 MULTIPOLYGON #> 4           2016        NORTH FORK           1988 MULTIPOLYGON #> 5           2016        NORTH FORK           1988 MULTIPOLYGON  # clean up lyr1$close() lyr2$close() lyr_out$close() deleteDataset(tmp_dsn) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"example-worldcover-sentinel-2-composites","dir":"Articles","previous_headings":"","what":"Example: WorldCover Sentinel-2 composites","title":"Draft Bindings to the GDAL/OGR Vector API","text":"Created 2024-07-21 reprex v2.1.1","code":"## WorldCover Sentinel-2 annual composites ## see: https://blog.vito.be/remotesensing/worldcover-annual-composites ## tile index lookup on remote filesystem and obtain raster data  library(gdalraster) #> GDAL 3.8.4, released 2024/02/08, GEOS 3.12.1, PROJ 9.3.1  fgb = \"/vsicurl/https://esa-worldcover.s3.eu-central-1.amazonaws.com/esa_worldcover_grid_composites.fgb\" lyr_tiles <- new(GDALVector, fgb)  lyr_tiles$getDriverShortName() #> [1] \"FlatGeobuf\" lyr_tiles$getName() #> [1] \"worldcover_composites_grid_aws\" lyr_tiles$getGeomType() #> [1] \"POLYGON\" lyr_tiles$getSpatialRef() #> [1] \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\"  lyr_tiles$testCapability()$RandomRead #> [1] TRUE lyr_tiles$testCapability()$FastSpatialFilter #> [1] TRUE lyr_tiles$testCapability()$FastFeatureCount #> [1] TRUE lyr_tiles$testCapability()$FastGetExtent #> [1] TRUE  lyr_tiles$getFeatureCount() #> [1] 19363 lyr_tiles$bbox() #> [1] -180  -60  180   83  defn <- lyr_tiles$getLayerDefn() names(defn) #>  [1] \"tile\"              \"s1_vvvhratio_2020\" \"s1_vvvhratio_2021\" #>  [4] \"s2_rgbnir_2020\"    \"s2_rgbnir_2021\"    \"s2_ndvi_2020\"      #>  [7] \"s2_ndvi_2021\"      \"s2_swir_2020\"      \"s2_swir_2021\"      #> [10] \"geometry\"  # AOI for the Fishhawk fire dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") lyr_ynp <- new(GDALVector, dsn, \"mtbs_perims\")  lyr_ynp$setAttributeFilter(\"incid_name = 'FISHHAWK'\") lyr_ynp$getFeatureCount() #> [1] 1 lyr_ynp$returnGeomAs <- \"WKT\" feat <- lyr_ynp$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 60  #>  $ event_id    : chr \"WY4437710988020190902\" #>  $ incid_name  : chr \"FISHHAWK\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10016957  #>  $ burn_bnd_ac :integer64 10775  #>  $ burn_bnd_lat: chr \"44.384\" #>  $ burn_bnd_lon: chr \"-109.85\" #>  $ ig_date     : Date[1:1], format: \"2019-09-02\" #>  $ ig_year     : int 2019 #>  $ geom        : chr \"MULTIPOLYGON (((573530.585472236 9160.22088906913,573266.183153384 9415.42216938034,573137.427110327 9285.44517\"| __truncated__  # get the feature bbox in WGS84 bb <- g_transform(feat$geom, lyr_ynp$getSpatialRef(), epsg_to_wkt(4326)) |>   bbox_from_wkt() print(bb) #> [1] -109.89753   44.32714 -109.83172   44.44030  # tile index lookup lyr_tiles$setSpatialFilterRect(bb) lyr_tiles$getFeatureCount() #> [1] 1 feat <- lyr_tiles$getNextFeature() str(feat) #> List of 10 #>  $ FID              :integer64 16615  #>  $ tile             : chr \"N44W110\" #>  $ s1_vvvhratio_2020: chr \"s3://esa-worldcover-s1/vvvhratio/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_S1VVVHratio.tif\" #>  $ s1_vvvhratio_2021: chr \"s3://esa-worldcover-s1/vvvhratio/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_S1VVVHratio.tif\" #>  $ s2_rgbnir_2020   : chr \"s3://esa-worldcover-s2/rgbnir/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_S2RGBNIR.tif\" #>  $ s2_rgbnir_2021   : chr \"s3://esa-worldcover-s2/rgbnir/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_S2RGBNIR.tif\" #>  $ s2_ndvi_2020     : chr \"s3://esa-worldcover-s2/ndvi/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_NDVI.tif\" #>  $ s2_ndvi_2021     : chr \"s3://esa-worldcover-s2/ndvi/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_NDVI.tif\" #>  $ s2_swir_2020     : chr \"s3://esa-worldcover-s2/swir/2020/N44/ESA_WorldCover_10m_2020_v100_N44W110_SWIR.tif\" #>  $ s2_swir_2021     : chr \"s3://esa-worldcover-s2/swir/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_SWIR.tif\"  # get the Sentinel-2 RGBNIR composite for this AOI tif_file <- sub(\"s3://\", \"/vsis3/\", feat$s2_rgbnir_2021, fixed = TRUE) print(tif_file) #> [1] \"/vsis3/esa-worldcover-s2/rgbnir/2021/N44/ESA_WorldCover_10m_2021_v200_N44W110_S2RGBNIR.tif\"  # public bucket so disable request signing set_config_option(\"AWS_NO_SIGN_REQUEST\", \"YES\")  # check if file exists and get size in MB vsi_stat(tif_file) #> [1] TRUE vsi_stat(tif_file, \"size\") / (1000 * 1000) #> [1] 562.039  # copy to a local or remote filesystem, e.g., # tif_copy <- file.path(tempdir(), basename(tif_file)) # vsi_copy_file(tif_file, tif_copy, show_progress = TRUE)  # or open the dataset for reading ds <- new(GDALRaster, tif_file) ds$dim() #> [1] 12000 12000     4 ds$getMetadata(band=0, domain=\"\") #>  [1] \"algorithm_version=V2.0.0\"                                                                                                                                             #>  [2] \"AREA_OR_POINT=Area\"                                                                                                                                                   #>  [3] \"bands=Band 1: B04 (Red), Band 2: B03 (Green), Band 3: B02 (Blue), Band 4: B08 (Infrared)\"                                                                             #>  [4] \"copyright=ESA WorldCover project 2021 / Contains modified Copernicus Sentinel data (2021) processed by ESA WorldCover consortium\"                                     #>  [5] \"creation_time=2022-12-09 17:08:25.881589\"                                                                                                                             #>  [6] \"description=The ESA WorldCover Sentinel-2 median L2A (RGBNIR) composite is a color image made from images in Blue (B02), Green (B03), Red (B04) and Infrared (B08). \" #>  [7] \"license=CC-BY 4.0 - https://creativecommons.org/licenses/by/4.0/\"                                                                                                     #>  [8] \"product_crs=EPSG:4326\"                                                                                                                                                #>  [9] \"product_grid=1x1 degree tiling grid\"                                                                                                                                  #> [10] \"product_tile=N44W110\"                                                                                                                                                 #> [11] \"product_type=Sentinel-2 median L2A (RGBNIR) composite\"                                                                                                                #> [12] \"product_version=V2.0.0\"                                                                                                                                               #> [13] \"reference=https://esa-worldcover.org\"                                                                                                                                 #> [14] \"time_end=2021-12-31T23:59:59Z\"                                                                                                                                        #> [15] \"time_start=2021-01-01T00:00:00Z\"                                                                                                                                      #> [16] \"title=ESA WorldCover Sentinel-2 median L2A (RGBNIR) composite at 10m resolution for year 2021\" ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=DEFLATE\" \"INTERLEAVE=PIXEL\"    \"LAYOUT=COG\"          #> [4] \"PREDICTOR=2\"  r <- read_ds(ds, bands=c(4,1,2), out_xsize = 800, out_ysize = 800) txt <- paste0(tools::file_path_sans_ext(basename(tif_file)),               \"\\n(color infrared B8-B4-B3)\") plot_raster(r,             minmax_pct_cut = c(2, 98),             xlab = \"longitude\",             ylab = \"latitude\",             main = txt) ds$close() lyr_ynp$close() lyr_tiles$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"further-consideration-tbd","dir":"Articles","previous_headings":"","what":"Further consideration / TBD","title":"Draft Bindings to the GDAL/OGR Vector API","text":"working list potential issues design questions need consideration, determined: OGR’s Arrow C interface: Implement GDALVector::getArrowStream() (GDAL >= 3.6) GDALVector::writeArrowBatch() (GDAL >= 3.8), supported R side package nanoarrow. OGR layer geoprocessing expected moved stand-alone functions instead class methods GDALVector, implemented ogr_proc() interface.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"document-changelog","dir":"Articles","previous_headings":"","what":"Document changelog","title":"Draft Bindings to the GDAL/OGR Vector API","text":"add GDALVector::setSpatialFilter() draft class definition - set spatial filter WKT geometry (2024-03-02) add comment layer intersection example re: feature retrieval FID (2024-03-02) add arguments fields geom_column GDALVector::getFeatureSet() - optionally retrieve subset attribute fields, specify whether include geometry column(s) returned data frame (2024-03-02) return value feature writing methods FID newly created/set/deleted feature upon successful write, OGRNullFID failure (2024-03-02) add note class GDALVector re: handling 64-bit integer types determined (2024-03-02) add GDALVector::setIgnoredFields(): set fields can omitted retrieving features layer. driver supports functionality (testable using OLCIgnoreFields capability), fetch specified fields subsequent calls getFeature() / getNextFeature() thus save processing time /bandwidth. (2024-03-02) add ogr_execute_sql() dataset/schema management (2024-03-02) add GDALVector::setNextByIndex() cursor positioning (2024-03-03) add GDALVector::getSpatialFilter(): get WKT geometry currently use spatial filter, \"\" (2024-03-03) add section “consideration / TBD” (2024-03-03) ogr2ogr() ogrinfo() available 1.9.0.9080 dev (2024-03-04) add potential output vectors geos ogr pointers, wkb/wkt support {wk} (@mdsumner, 2024-03-04) add section “Contributors” (2024-03-04) add link issue 241 discussion thread (2024-03-05) OGR layer geoprocessing may stand-alone functions instead class methods TBD (2024-03-10) add link header file reference class methods implemented far prototype (2024-03-10) ogr2ogr() ogrinfo() available gdalraster 1.10.0 CRAN (2024-03-26) initial int64 support; now linking RcppInt64, importing bit64; FID OFTInteger64 fields now returned R integer64; updated examples (2024-04-06) add GDALVector::getFeature(): fetch feature FID (2024-04-06) add GDALVector class constructor spatial_filter SQL dialect arguments (2024-04-28) ogr_manage ogr_define added gdalraster dev; examples updated (2024-05-14) update draft class definition: Add read/write fields per-object settings (defaultGeomFldName, returnGeomAs wkbByteOrder). Rename method getFeatureSet() fetch(), analog DBI::dbFetch(), fetch next n features layer return data frame. (2024-07-11) update usage example recent changes gdalvector branch: defaultGeomFldName, returnGeomAs = NONE|WKT|WKT_ISO|WKB|WKB_ISO, GDALVector::fetch(), OGR attribute field types now supported (2024-07-12) add sub-headings heading “Description interface”, add specifications “Feature retrieval” “Geometry” (2024-07-13) GDALVector::testCapability() returns list named capabilities TRUE|FALSE, class method version ogr_layer_test_cap() (2024-07-21) branch gdalvector merged main (2024-07-23) added ogr_proc(), interface GDAL OGR facilities vector geoprocessing; updated “Example: layer geoprocessing” (2024-07-30)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html","id":"contributors","dir":"Articles","previous_headings":"","what":"Contributors","title":"Draft Bindings to the GDAL/OGR Vector API","text":"@goergen95 (#205) @mdsumner","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"opening-a-raster-dataset","dir":"Articles","previous_headings":"","what":"Opening a raster dataset","title":"Raster API Tutorial","text":"opening GDAL-supported data store necessary register drivers. driver supported raster format. gdalraster automatically registers drivers package loaded. raster dataset opened creating new instance GDALRaster-class passing filename access desired (read_only = TRUE default specified, read_only = FALSE open update access): error returned dataset opened (creation GDALRaster object fails). Also, note filename may actually name physical file (though usually ). interpretation driver dependent, might URL, database connection string, file name additional parameters, etc. GDALRaster C++ class exposed directly R (via RCPP_EXPOSED_CLASS) encapsulates GDAL dataset object associated raster band objects. Methods class accessed R using $ operator:","code":"library(gdalraster) #> GDAL 3.4.1, released 2021/12/27, GEOS 3.10.2, PROJ 8.2.1  tcc_file <- system.file(\"extdata/storml_tcc.tif\", package=\"gdalraster\") ds <- new(GDALRaster, tcc_file, read_only = TRUE) ds #> C++ object <0x55ee381b8fe0> of class 'GDALRaster' <0x55ee3a650cd0> str(ds) #> Reference class 'Rcpp_GDALRaster' [package \"gdalraster\"] with 3 fields #>  $ infoOptions  : chr(0)  #>  $ quiet        : logi FALSE #>  $ readByteAsRaw: logi FALSE #>  and 81 methods, of which 67 are  possibly relevant: #>    addBand, apply_geotransform, bbox, buildOverviews, clearColorTable, #>    clearStatistics, close, deleteNoDataValue, dim, fillRaster, finalize, #>    flushCache, get_pixel_line, getActualBlockSize, getBlockSize, getChecksum, #>    getColorTable, getDataTypeName, getDefaultHistogram, getDefaultRAT, #>    getDescription, getDriverLongName, getDriverShortName, getFileList, #>    getFilename, getGeoTransform, getHistogram, getMaskBand, getMaskFlags, #>    getMetadata, getMetadataDomainList, getMetadataItem, getMinMax, #>    getNoDataValue, getOffset, getOverviewCount, getPaletteInterp, #>    getProjection, getProjectionRef, getRasterColorInterp, getRasterCount, #>    getRasterXSize, getRasterYSize, getScale, getStatistics, getUnitType, info, #>    infoAsJSON, initialize, isOpen, open, read, res, setColorTable, #>    setDefaultRAT, setDescription, setFilename, setGeoTransform, setMetadata, #>    setMetadataItem, setNoDataValue, setOffset, setProjection, #>    setRasterColorInterp, setScale, setUnitType, write"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"getting-dataset-information","dir":"Articles","previous_headings":"","what":"Getting dataset information","title":"Raster API Tutorial","text":"described GDAL Raster Data Model, GDAL dataset contains list raster bands, pertaining area resolution. also metadata, coordinate system, georeferencing transform, size raster various information. particular common case “north ” raster without rotation shearing, georeferencing transform (see Geotransform Tutorial) takes following form 1-based indexing R: general case, affine transform. Class GDALRaster includes convenience methods case north-raster: following code retrieves additional information dataset:","code":"gt <- ds$getGeoTransform() gt[1]  # x-coordinate of upper-left corner of the upper-left pixel #> [1] 323476.1 gt[2]  # pixel width (w-e resolution) #> [1] 30 gt[3]  # 0 for north-up #> [1] 0 gt[4]  # y-coordinate of upper-left corner of the upper-left pixel #> [1] 5105082 gt[5]  # 0 for north-up #> [1] 0 gt[6]  # pixel height (n-s resolution, negative value) #> [1] -30 ds$bbox()  # xmin, ymin, xmax, ymax #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res()   # pixel width, pixel height as positive values #> [1] 30 30 # GDAL format driver ds$getDriverShortName() #> [1] \"GTiff\" ds$getDriverLongName() #> [1] \"GeoTIFF\"  # raster size in pixels, number of bands ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getRasterCount() #> [1] 1 ds$dim() #> [1] 143 107   1  # coordinate reference system as WKT string ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"26912\\\"]]\"  # origin and pixel size from the geotransform print(paste(\"Origin:\", gt[1], gt[4])) #> [1] \"Origin: 323476.1 5105082\" print(paste(\"Pixel size:\", gt[2], gt[6])) #> [1] \"Pixel size: 30 -30\""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"fetching-a-raster-band","dir":"Articles","previous_headings":"","what":"Fetching a raster band","title":"Raster API Tutorial","text":"time access raster data via GDAL done one band time. Also, metadata, block sizes, nodata values various information available per-band basis. Class GDALRaster provides methods access raster band objects dataset (numbered 1 ds$getRasterCount()) specifying band number first argument:","code":"# block size ds$getBlockSize(band = 1) #> [1] 143  57  # data type ds$getDataTypeName(band = 1) #> [1] \"Byte\"  # nodata value ds$getNoDataValue(band = 1) #> [1] 255  # min, max, mean, sd of pixel values in the band ds$getStatistics(band = 1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  0.00000 71.00000 23.69950 23.17744  # does this band have overviews? (aka \"pyramids\") ds$getOverviewCount(band = 1) #> [1] 0  # does this band have a color table? col_tbl <- ds$getColorTable(band = 1) if (!is.null(col_tbl))   head(col_tbl) #>      value red green blue alpha #> [1,]     0 255   255  255   255 #> [2,]     1 252   254  252   255 #> [3,]     2 250   253  250   255 #> [4,]     3 248   252  247   255 #> [5,]     4 245   251  245   255 #> [6,]     5 243   250  242   255"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"reading-raster-data","dir":"Articles","previous_headings":"","what":"Reading raster data","title":"Raster API Tutorial","text":"GDALRaster$read() wrapper GDALRasterBand::RasterIO() method underlying API. method automatically take care data type conversion, /sampling windowing. following code read first row data similarly sized vector. GDALRaster$read() return data R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise returned vector type double (UInt32, Float32, Float64) complex (CInt16, CInt32, CFloat32, CFloat64). returned data organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band: Writing data GDALRaster$write() similar $read() additional argument specifying vector pixel data write (arranged left right, top bottom pixel order). xoff, yoff, xsize, ysize arguments describe window raster data disk read (write). doesn’t fall tile boundaries, though access may efficient cases . Note GDAL uses memory caching algorithms raster /O improve performance. operation caching mechanism configuration cache memory size might considered scaling /O large datasets (see GDAL Block Cache). values out_xsize out_ysize describe size output buffer (R vector length out_xsize * out_ysize data read ). reading data full resolution window size (xsize, ysize). However, load reduced resolution overview, out_xsize, out_ysize set smaller window disk. $read() method perform automatic resampling necessary specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, overviews (.k.. “pyramids”) utilized /O efficiently overviews available suitable resolution. stand-alone function plot_raster() uses base R graphics display raster data read open dataset (options display subwindow, read reduced resolution overview, read multiple bands RGB data):","code":"# read the first row of pixel values ncols <- ds$getRasterXSize() rowdata <- ds$read(band = 1,                    xoff = 0,                    yoff = 0,                    xsize = ncols,                    ysize = 1,                    out_xsize = ncols,                    out_ysize = 1)  length(rowdata) #> [1] 143 typeof(rowdata) #> [1] \"integer\" head(rowdata) #> [1] 59 63 64 51 25 20 plot_raster(ds, legend = TRUE, main = \"Storm Lake Tree Canopy Cover (%)\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"closing-the-dataset","dir":"Articles","previous_headings":"","what":"Closing the dataset","title":"Raster API Tutorial","text":"Calling GDALRaster$close() result proper cleanup, flushing pending writes. Forgetting close dataset opened update mode popular format like GTiff likely result unable open afterwards.","code":"# close the dataset for proper cleanup ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"techniques-for-creating-datasets","dir":"Articles","previous_headings":"","what":"Techniques for creating datasets","title":"Raster API Tutorial","text":"New raster datasets GDAL-supported formats may created format driver supports creation. two general techniques creating datasets GDAL API: GDALDriver::CreateCopy() GDALDriver::Create(). Using CreateCopy method R involves calling stand-alone function createCopy(), passing source raster file name copied. Using Create method R involves calling stand-alone function create(), explicitly writing metadata raster data separate calls. format drivers support creating new datasets support createCopy(), support create(). function gdal_formats() lists currently configured raster formats along following read/write flags: ro - read rw - read/write, supports createCopy() rw+ - read/write/update, supports create() table GDAL raster format drivers can also consulted determine particular driver supports Create CreateCopy methods. Note number drivers read-support either creation method.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"using-createcopy","dir":"Articles","previous_headings":"","what":"Using createCopy()","title":"Raster API Tutorial","text":"createCopy() simple use information collected source dataset. includes argument passing list format specific creation options. can used copy raster different format, /change options block size arrangement, compression, various metadata, etc. following code copies multi-band raster FARSITE v.4 LCP format (basically raw format without support compression nodata values) LZW-compressed GeoTiff: Note createCopy() method return_obj = TRUE returns writable dataset, must closed properly complete writing flushing dataset disk. createCopy() also optional strict argument defaults FALSE indicating call proceed without fatal error even destination dataset created exactly match input dataset. might output format support pixel datatype input dataset, destination support writing georeferencing instance. Information format specific creation options can obtained function getCreationOptions(). default, function lists available creation options format. Output can also filtered specific options:","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- file.path(tempdir(), \"storml_lndscp.tif\") ds <- createCopy(format = \"GTiff\",                  dst_filename = tif_file,                  src_filename = lcp_file,                  options = \"COMPRESS=LZW\",                  return_obj = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # band = 0 for dataset-level metadata: ds$getMetadata(band = 0, domain = \"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\"  # set nodata value for all bands for (band in 1:ds$getRasterCount())   ds$setNoDataValue(band, -9999)  # band 2 of an LCP file is slope degrees ds$getStatistics(band = 2, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  0.00000 54.00000 22.93012 12.51330 ds$close()  vsi_stat(lcp_file, \"size\") #> integer64 #> [1] 252132 vsi_stat(tif_file, \"size\") #> integer64 #> [1] 113942 getCreationOptions(\"GTiff\", \"COMPRESS\") #> {xml_node} #> <Option name=\"COMPRESS\" type=\"string-select\"> #>  [1] <Value>NONE<\/Value> #>  [2] <Value>LZW<\/Value> #>  [3] <Value>PACKBITS<\/Value> #>  [4] <Value>JPEG<\/Value> #>  [5] <Value>CCITTRLE<\/Value> #>  [6] <Value>CCITTFAX3<\/Value> #>  [7] <Value>CCITTFAX4<\/Value> #>  [8] <Value>DEFLATE<\/Value> #>  [9] <Value>LZMA<\/Value> #> [10] <Value>ZSTD<\/Value> #> [11] <Value>WEBP<\/Value>  getCreationOptions(\"GTiff\", \"SPARSE_OK\") #> {xml_node} #> <Option name=\"SPARSE_OK\" type=\"boolean\" description=\"Should empty blocks be omitted on disk?\" default=\"FALSE\">"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"using-create","dir":"Articles","previous_headings":"","what":"Using create()","title":"Raster API Tutorial","text":"create() can used create new raster dataset manually. function can also take list creation options described createCopy(), raster size, number bands band type must provided explicitly: dataset successfully created, appropriate metadata raster data must written file. includes vary according usage, simple case projection, geotransform raster data covered :","code":"new_file <- file.path(tempdir(), \"newdata.tif\") ds <- create(format = \"GTiff\",              dst_filename = new_file,              xsize = 143,              ysize = 107,              nbands = 1,               dataType = \"Int16\",              return_obj = TRUE) # EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE  gt <- c(323476.1, 30, 0, 5105082.0, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE  ds$setNoDataValue(band = 1, -9999) #> [1] TRUE ds$fillRaster(band = 1, -9999, 0)  # ...  # close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Raster API Tutorial","text":"gdalraster provides two additional functions creating raster datasets: rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value. rasterToVRT() creates virtual raster dataset (VRT) derived source raster options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter. Wrapper functions several GDAL utilities, including translate() warp(), also available. See package overview full summary functionality provided GDAL API bindings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Raster API Tutorial","text":"example datasets National Land Cover Database (NLCD) Tree Canopy Cover (TCC v2021.4) USDA Forest Service (https://data.fs.usda.gov/geodata/rastergateway/treecanopycover/), multi-band FARSITE landscape file describing terrain, vegetation wildland fuels LANDFIRE Program (LF 2020 version, https://landfire.gov/).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"format-of-gdal-rat","dir":"Articles","previous_headings":"","what":"Format of GDAL RAT","title":"Raster Attribute Tables","text":"column raster attribute table name, type (integer, floating point string), GDALRATFieldUsage. field usage distinguishes columns particular understood purposes (color, histogram count, class name), columns purposes understood library (long labels, ancillary attributes, etc). general case, row field indicating minimum pixel value falling category, field indicating maximum pixel value. GDAL API, indicated usage values GFU_Min GFU_Max (GDALRATFieldUsage enumeration constants). vignette focus particular common case row discrete pixel value. case, single column usage GFU_MinMax (indicating class value) used instead separate min max columns. table represented R data frame column attribute \"GFU\" containing field usage, e.g., \"MinMax\" (case-sensitive string). field usage types include \"PixelCount\" (GFU_PixelCount, histogram pixel count), \"Name\" (GFU_Name, class name), \"Red\" (GFU_Red, class color 0-255), \"Green\" (GFU_Green, class color 0-255), \"Blue\" (GFU_Blue, class color 0-255), \"Generic\" (GFU_Generic, general purpose field). raster attribute table can used thematic athematic (continuous) data. defined R attribute data frame named \"GDALRATTableType\" value either \"thematic\" \"athematic\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"readbuildset-attribute-tables","dir":"Articles","previous_headings":"","what":"Read/build/set attribute tables","title":"Raster Attribute Tables","text":"gdalraster can read, build set Raster Attribute Tables via data frame. object class GDALRaster method $getDefaultRAT() read existing RAT, method $setDefaultRAT() set RAT data frame. stand-alone function buildRAT() scans raster obtain set unique pixel values counts, optionally joins additional columns passed data frame, returns data frame appropriate metadata automatically assigned (.e., R attributes assigned data frame columns define usage GDAL RAT, passing GDALRaster$setDefaultRAT()):","code":"library(gdalraster) #> GDAL 3.4.1, released 2021/12/27, GEOS 3.10.2, PROJ 8.2.1  # LANDFIRE Existing Vegetation Type (EVT) evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\")  # make a copy to modify f <- paste0(tempdir(), \"/\", \"storml_evt_tmp.tif\") file.copy(evt_file,  f) #> [1] TRUE ds <- new(GDALRaster, f, read_only=FALSE) ds$getDefaultRAT(band=1) #> NULL  # get the full attribute table for LANDFIRE EVT from its CSV file evt_csv <- system.file(\"extdata/LF20_EVT_220.csv\", package=\"gdalraster\") evt_df <- read.csv(evt_csv) nrow(evt_df) #> [1] 860 head(evt_df) #>   VALUE                                            EVT_NAME EVT_LF EVT_PHYS   R #> 1 -9999                                         Fill-NoData   <NA>     <NA> 255 #> 2  7008                          North Pacific Oak Woodland   Tree Hardwood 203 #> 3  7009 Northwestern Great Plains Aspen Forest and Parkland   Tree Hardwood 192 #> 4  7010       Northern Rocky Mountain Western Larch Savanna   Tree  Conifer 180 #> 5  7011            Rocky Mountain Aspen Forest and Woodland   Tree Hardwood 192 #> 6  7012       Rocky Mountain Bigtooth Maple Ravine Woodland   Tree Hardwood 171 #>     G   B      RED GREEN     BLUE #> 1 255 255 1.000000     1 1.000000 #> 2 255 171 0.796078     1 0.670588 #> 3 255 138 0.752941     1 0.541176 #> 4 255 148 0.705882     1 0.580392 #> 5 255 138 0.752941     1 0.541176 #> 6 255 138 0.670588     1 0.541176  # keep just the R, G, B fields (0-255) and drop RED, GREEN, BLUE evt_df <- evt_df[,1:7]  # build a RAT for the EVT raster, attaching additional columns from evt_df tbl <- buildRAT(ds,                 table_type = \"thematic\",                 na_value = -9999,                 join_df = evt_df) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done.  nrow(tbl) #> [1] 24 head(tbl) #>   VALUE COUNT                                                          EVT_NAME #> 1 -9999   876                                                       Fill-NoData #> 2  7011    28                          Rocky Mountain Aspen Forest and Woodland #> 3  7046  4564           Northern Rocky Mountain Subalpine Woodland and Parkland #> 4  7050   570                              Rocky Mountain Lodgepole Pine Forest #> 5  7055   889 Rocky Mountain Subalpine Dry-Mesic Spruce-Fir Forest and Woodland #> 6  7056   304 Rocky Mountain Subalpine Mesic-Wet Spruce-Fir Forest and Woodland #>   EVT_LF EVT_PHYS   R   G   B #> 1   <NA>     <NA> 255 255 255 #> 2   Tree Hardwood 192 255 138 #> 3   Tree  Conifer 191 255 233 #> 4   Tree  Conifer 163 240 219 #> 5   Tree  Conifer 236 252 204 #> 6   Tree  Conifer 236 252 204  # attributes on the returned data frame and its columns define RAT metadata attr(tbl, \"GDALRATTableType\") #> [1] \"thematic\" attributes(tbl$VALUE)     # GFU_MinMax for column of discrete pixel values #> $GFU #> [1] \"MinMax\" attributes(tbl$COUNT)     # pixel counts #> $GFU #> [1] \"PixelCount\" attributes(tbl$EVT_NAME)  # the class names #> $GFU #> [1] \"Name\" attributes(tbl$EVT_LF)    # ancillary attribute #> $GFU #> [1] \"Generic\" attributes(tbl$EVT_PHYS)  # ancillary attribute #> $GFU #> [1] \"Generic\" attributes(tbl$R)         # red 0-255 #> $GFU #> [1] \"Red\" attributes(tbl$G)         # green 0-255 #> $GFU #> [1] \"Green\" attributes(tbl$B)         # blue 0-255 #> $GFU #> [1] \"Blue\"  # set as default RAT on the EVT raster ds$setDefaultRAT(band=1, tbl) #> [1] TRUE ds$flushCache()  # it can now be read from the raster dataset rm(tbl) tbl <- ds$getDefaultRAT(band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl) #> [1] 24"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"display-attribute-tables","dir":"Articles","previous_headings":"","what":"Display attribute tables","title":"Raster Attribute Tables","text":"attribute table RGB columns can passed gdalraster::plot_raster() color table (columns VALUE, R, G, B):  function displayRAT() generates nicely formatted table display. Colors shown RAT contains RGB columns: displayRAT() returns object class \"gt_tbl\". table object can modified using functions gt package.","code":"bb <- ds$bbox() #| fig.alt: > #|   A plot of LANDFIRE Existing Vegetation Type (EVT) for an area of interest #|   named Storm Lake which is used for several example datasets in package #|   gdalraster. A color map has been to the pixels using color values provided #|   by LANDFIRE in the CSV attribute table for the EVT layer. plot_raster(data = ds,             col_tbl = tbl[,c(1,6:8)],             maxColorValue = 255,             interpolate = FALSE,             main = \"Storm Lake LANDFIRE EVT\") displayRAT(tbl, title = \"Raster Attribute Table for Storm Lake EVT\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"using-in-qgis","dir":"Articles","previous_headings":"","what":"Using in QGIS","title":"Raster Attribute Tables","text":"QGIS since 3.30 includes extensive support Raster Attribute Tables. QGIS < 3.30, Raster Attribute Table Plugin can used edit display RATs discrete rasters using paletted/unique-values renderer (QGIS-style classification arbitrary RAT columns). plugin enabled, “Open Attribute Table” can selected right-clicking raster layer associated RAT. LANDFIRE EVT layer modified , classifying EVT_NAME generates following display: LANDFIRE EVT Raster Attribute Table QGIS Plugin","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Raster Attribute Tables","text":"Documentation gdalraster::buildRAT() GDALRasterAttributeTable Class Reference Raster Attribute Table QGIS GUI (since QGIS 3.30; examples different use cases workflows) Raster Attribute Table QGIS Plugin (QGIS < 3.30) Package gt","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-attribute-tables.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Raster Attribute Tables","text":"example dataset Existing Vegetation Type (EVT) LANDFIRE Program (LF 2020 version, https://landfire.gov/). Map units based NatureServe Ecological Systems.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"single-band-grayscale-or-color-ramp","dir":"Articles","previous_headings":"","what":"Single-band grayscale or color ramp","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"lf_elev_220_mt_hood_utm.tif\") ds <- new(GDALRaster, f)  # gray plot_raster(ds, legend=TRUE, main=\"Mount Hood elevation (m)\") elev_pal <- c(\"#00A60E\",\"#63C600\",\"#E6E600\",\"#E9BD3B\",\"#ECB176\",\"#EFC2B3\",\"#F2F2F2\") ramp <- scales::colour_ramp(elev_pal, alpha=FALSE)  plot_raster(ds, legend=TRUE, col_map_fn=ramp, main=\"Mount Hood elevation (m)\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"rgb","dir":"Articles","previous_headings":"","what":"RGB","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\") ds <- new(GDALRaster, f)  # passing a vector of pixel values rather than the open dataset r <- read_ds(ds, bands=c(7,5,4)) ds$close()  # normalizing to ranges derived from the full Landsat scene (2-98 percentiles) plot_raster(r,             minmax_def=c(7551,7679,7585,14842,24997,12451),             main=\"Mount Hood July 2022 Landsat 7-5-4 (SWIR)\"            )"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"color-table","dir":"Articles","previous_headings":"","what":"Color table","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"lf_fbfm40_220_mt_hood_utm.tif\") ds <- new(GDALRaster, f) dm <- ds$dim() print(paste(\"Size is\", dm[1], \"x\",  dm[2], \"x\", dm[3])) #> [1] \"Size is 1013 x 799 x 1\"  # using the CSV attribute table distributed by LANDFIRE fbfm_csv <- system.file(\"extdata/LF20_F40_220.csv\", package=\"gdalraster\") vat <- read.csv(fbfm_csv) head(vat) #>   VALUE FBFM40   R   G   B      RED    GREEN     BLUE #> 1    91    NB1 104 104 104 0.407843 0.407843 0.407843 #> 2    92    NB2 225 225 225 0.882353 0.882353 0.882353 #> 3    93    NB3 255 237 237 1.000000 0.929412 0.929412 #> 4    98    NB8   0  14 214 0.000000 0.054902 0.839216 #> 5    99    NB9  77 110 112 0.301961 0.431373 0.439216 #> 6   101    GR1 255 235 190 1.000000 0.921569 0.745098 vat <- vat[,c(1,6:8)]  # read at reduced resolution for display plot_raster(ds, xsize=dm[1] / 2, ysize=dm[2] / 2,             col_tbl=vat, interpolate=FALSE,             main=\"LANDFIRE surface fuel class (FBFM40)\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"axis-labels","dir":"Articles","previous_headings":"","what":"Axis labels","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"bl_mrbl_ng_jul2004_rgb_720x360.tif\") ds <- new(GDALRaster, f) srs_is_projected(ds$getProjectionRef()) #> [1] FALSE r <- read_ds(ds) ds$close()  plot_raster(r,             xlab=\"longitude\", ylab=\"latitude\",             main=\"NASA Earth Observatory Blue Marble July 2004\"            )"},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Toney. Author, maintainer.           R interface/additional functionality Michael D. Sumner. Contributor. Frank Warmerdam. Contributor, copyright holder.           GDAL API documentation; src/progress_r.cpp gdal/port/cpl_progress.cpp Even Rouault. Contributor, copyright holder.           GDAL API documentation Marius Appel. Contributor, copyright holder.           configure.ac based https://github.com/appelmar/gdalcubes Daniel James. Contributor, copyright holder.           Boost combine hashes method src/cmb_table.h Peter Dimov. Contributor, copyright holder.           Boost combine hashes method src/cmb_table.h","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Toney C (2024). gdalraster: R Bindings 'Geospatial Data Abstraction Library' Raster API. USDA Forest Service, Rocky Mountain Research Station, Missoula, MT, USA. https://usdaforestservice.github.io/gdalraster/.","code":"@Manual{,   title = {gdalraster: R Bindings to the 'Geospatial Data Abstraction Library' Raster API},   author = {Chris Toney},   year = {2024},   organization = {USDA Forest Service, Rocky Mountain Research Station},   address = {Missoula, MT, USA},   url = {https://usdaforestservice.github.io/gdalraster/}, }"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R Bindings to GDAL","text":"gdalraster R interface Raster API Geospatial Data Abstraction Library (GDAL). Bindings subset GDAL Vector API included provide utilities managing vector data sources. Bindings GDAL Virtual Systems Interface (VSI) support file system operations binary /O URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files, well regular file systems. Calling signatures resemble native C, C++ Python APIs provided GDAL project. Bindings GDAL implemented exposed C++ class GDALRaster along several stand-alone functions, supporting: manual creation uninitialized raster datasets creation existing raster template read/set raster dataset parameters metadata low-level /O build/read/set color tables raster attribute tables virtual raster (VRT) virtual cropping, resampling, kernel filtering, mosaicing gdalwarp wrapper reproject/resample/crop/mosaic coordinate transformation spatial reference systems GDAL algorithms (dem_proc(), polygonize(), rasterize(), ...) OGR vector utilities (ogrinfo(), ogr2ogr(), ogr_manage interface) copy files/move/rename/delete raster vector datasets create/append Seek-Optimized ZIP (SOZip) abstraction file system operations URLs cloud storage Standard C binary file /O VSI (class VSIFile) Additional functionality includes: class RunningStats calculates mean variance one pass, tracks min, max, sum, count (.e., summary statistics data stream). input data values stored memory, class can used compute statistics large data streams. class CmbTable identifies counts unique combinations integer values using hash table. combine() overlays multiple rasters unique ID assigned unique combination input values. Pixel counts unique combination obtained, combination IDs optionally written output raster. calc() evaluates R expression pixel raster layer stack layers. Individual pixel coordinates available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude. plot_raster() displays raster data using base R graphics. gdalraster may useful applications need scalable, low-level /O, prefer direct GDAL API. Comprehensive documentation provided package online.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Bindings to GDAL","text":"Install released version CRAN : CRAN provides pre-compiled binary packages Windows macOS. require separate installation external libraries GDAL.","code":"install.packages(\"gdalraster\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"linux","dir":"","previous_headings":"Installation > From source code","what":"Linux","title":"R Bindings to GDAL","text":"GDAL >= 3.1.0 built GEOS required, recent GDAL version recommended, e.g., >= 3.6.4. GDAL version 3.9 requires PROJ >= 6.3.1, recent version PROJ also recommended. PROJ requires sqlite3, libxml2 required imported R package xml2. Ubuntu, recent versions geospatial libraries can installed ubuntugis-unstable PPA following commands: versions ubuntugis-unstable generally work well --date, less recent versions ubuntugis-stable PPA used instead. Package sf provides helpful instructions installing geospatial libraries Linux distributions. dependent libraries available system, install CRAN: install development version GitHub using package remotes:","code":"sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable sudo apt update sudo apt install libgdal-dev libgeos-dev libproj-dev libsqlite3-dev libxml2-dev install.packages(\"gdalraster\") remotes::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"windows","dir":"","previous_headings":"Installation > From source code","what":"Windows","title":"R Bindings to GDAL","text":"RTools needed install source Windows. RTools since version 4.2 includes GDAL, PROJ dependent libraries needed compile gdalraster. Note CRAN releases periodic revisions RTools often include updates libraries new versions become available. example, release 6104 RTools 4.4 contains GDAL 3.8.4 PROJ 9.3.1. RTools installed:","code":"# Install the development version from GitHub remotes::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"macos","dir":"","previous_headings":"Installation > From source code","what":"macOS","title":"R Bindings to GDAL","text":"GDAL PROJ can installed Homebrew: configure.args may needed: Caution seems warranted macOS regard mixing source installation installation binaries CRAN.","code":"brew install pkg-config gdal proj # Install the development version from GitHub remotes::install_github(\"USDAForestService/gdalraster\", configure.args = \"--with-proj-lib=$(brew --prefix)/lib/\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"from-r-universe","dir":"","previous_headings":"Installation","what":"From R-universe","title":"R Bindings to GDAL","text":"R-universe provides pre-compiled binary packages Windows macOS track development version gdalraster. New packages built usually within ~1 hour recent commit.","code":"# Install the development version from r-universe install.packages(\"gdalraster\", repos = c(\"https://usdaforestservice.r-universe.dev\", \"https://cran.r-project.org\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R Bindings to GDAL","text":"Reference Manual Raster API Tutorial Raster Attribute Tables Raster Display GDAL Block Caching GDAL Config Quick Ref","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for counting unique combinations of integers — CmbTable-class","title":"Class for counting unique combinations of integers — CmbTable-class","text":"CmbTable implements hash table vector integers key, count occurrences unique integer combination value. unique ID assigned unique combination input values.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for counting unique combinations of integers — CmbTable-class","text":"keyLen number integer values comprising combination. varNames Optional character vector names variables combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for counting unique combinations of integers — CmbTable-class","text":"object class CmbTable. Contains hash table vector keyLen integers key count occurrences unique integer combination value, along methods operate table described Details. CmbTable C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed R using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"## Constructors cmb <- new(CmbTable, keyLen) # or, giving the variable names: cmb <- new(CmbTable, keyLen, varNames)  ## Methods cmb$update(int_cmb, incr) cmb$updateFromMatrix(int_cmbs, incr) cmb$updateFromMatrixByRow(int_cmbs, incr) cmb$asDataFrame() cmb$asMatrix()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class for counting unique combinations of integers — CmbTable-class","text":"new(CmbTable, keyLen) Default variable names assigned V1, V2, .... Returns object class CmbTable. new(CmbTable, keyLen, varNames) Alternate constructor specify variable names. Returns object class CmbTable.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class for counting unique combinations of integers — CmbTable-class","text":"$update(int_cmb, incr) Updates hash table integer combination numeric vector int_cmb (coerced integer truncation). combination exists table, count incremented incr. combination found table, inserted count set incr. Returns unique ID assigned combination. Combination IDs sequential integers starting 1. $updateFromMatrix(int_cmbs, incr) method $update() numeric matrix integer combinations int_cmbs (coerced integer truncation). matrix arranged column vector forming integer combination. example, rows matrix one row set keyLen rasters read extent pixel resolution (.e., row--row raster overlay). method calls $update() combination (column int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length ncol(int_cmbs) containing IDs assigned combinations. $updateFromMatrixByRow(int_cmbs, incr) method $updateFromMatrix() except integer combinations rows matrix int_cmbs (columns variables). method calls $update() combination (row int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length nrow(int_cmbs) containing IDs assigned combinations. $asDataFrame() Returns CmbTable data frame column cmbid containing unique combination IDs, column count containing counts occurrences, keyLen columns (names varNames) containing integer values comprising unique combination. $asMatrix() Returns CmbTable matrix column 1 (cmbid) containing unique combination IDs, column 2 (count) containing counts occurrences, columns 3:keyLen+2 (names varNames) containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 3, 6, byrow=FALSE) rownames(m) <- c(\"layer1\", \"layer2\", \"layer3\") print(m) #>        [,1] [,2] [,3] [,4] [,5] [,6] #> layer1    1    1    4    1    4    1 #> layer2    2    2    5    3    5    1 #> layer3    3    3    6    2    6    1 cmb <- new(CmbTable, 3, rownames(m)) cmb$updateFromMatrix(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count layer1 layer2 layer3 #> 1     4     1      1      1      1 #> 2     3     1      1      3      2 #> 3     2     2      4      5      6 #> 4     1     2      1      2      3 cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count layer1 layer2 layer3 #> 1     5     1      1      3      5 #> 2     4     1      1      1      1 #> 3     3     1      1      3      2 #> 4     2     3      4      5      6 #> 5     1     2      1      2      3  # same as above but matrix arranged with integer combinations in the rows m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 6, 3, byrow=TRUE) colnames(m) <- c(\"V1\", \"V2\", \"V3\") print(m) #>      V1 V2 V3 #> [1,]  1  2  3 #> [2,]  1  2  3 #> [3,]  4  5  6 #> [4,]  1  3  2 #> [5,]  4  5  6 #> [6,]  1  1  1 cmb <- new(CmbTable, 3) cmb$updateFromMatrixByRow(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count V1 V2 V3 #> 1     4     1  1  1  1 #> 2     3     1  1  3  2 #> 3     2     2  4  5  6 #> 4     1     2  1  2  3 cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count V1 V2 V3 #> 1     5     1  1  3  5 #> 2     4     1  1  1  1 #> 3     3     1  1  3  2 #> 4     2     3  4  5  6 #> 5     1     2  1  2  3"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default DEM processing options — DEFAULT_DEM_PROC","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"values used dem_proc() default processing options:","code":"list(          \"hillshade\" =    c(\"-z\", \"1\", \"-s\", \"1\", \"-az\", \"315\",                             \"-alt\", \"45\", \"-alg\", \"Horn\",                             \"-combined\", \"-compute_edges\"),          \"slope\" =        c(\"-s\", \"1\", \"-alg\", \"Horn\", \"-compute_edges\"),          \"aspect\" =       c(\"-alg\", \"Horn\", \"-compute_edges\"),          \"color-relief\" = character(),          \"TRI\" =          c(\"-alg\", \"Riley\", \"-compute_edges\"),          \"TPI\" =          c(\"-compute_edges\"),          \"roughness\" =    c(\"-compute_edges\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"","code":"DEFAULT_DEM_PROC"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"object class list length 7.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default nodata values by raster data type — DEFAULT_NODATA","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"values currently used gdalraster nodata value needed specified:","code":"list(\"Byte\" = 255, \"Int8\" = -128,          \"UInt16\" = 65535, \"Int16\" = -32767,          \"UInt32\" = 4294967293, \"Int32\" = -2147483647,          \"Float32\" = -99999.0, \"Float64\" = -99999.0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"","code":"DEFAULT_NODATA"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"object class list length 8.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"GDALRaster provides interface accessing raster dataset via GDAL calling methods underlying GDALDataset, GDALDriver GDALRasterBand objects. See https://gdal.org/api/index.html details GDAL Raster API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"filename Character string containing file name raster dataset open, full path relative current working directory. cases, filename may refer local file system, instead contain format-specific information access dataset database connection string, URL, /vsiPREFIX/, etc. (see GDAL raster format descriptions: https://gdal.org/drivers/raster/index.html). read_only Logical. TRUE open dataset read-(default), FALSE open write access. open_options Optional character vector NAME=VALUE pairs specifying dataset open options. shared Logical. FALSE open dataset without using shared mode. Default TRUE (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"object class GDALRaster contains pointer opened dataset, methods operate dataset described Details. GDALRaster C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Fields methods class accessed using $ operator. read/write fields can used per-object settings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"dataset object opened update access (read_only = FALSE), recommended open new dataset underlying filename. Datasets opened shared mode default. allows sharing GDALDataset handles dataset callers open shared filename, dataset opened thread. Functions gdalraster processing open input datasets shared mode. provides potential efficiency cases object class GDALRaster already open read-mode filename (avoids overhead associated initial dataset opening using existing handle, potentially makes use existing data GDAL block cache). Opening shared mode can disabled specifying optional shared parameter class constructor. $read() method perform automatic resampling specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, GDAL_RASTERIO_RESAMPLING configuration option also set override default resampling one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE (see set_config_option()).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"","code":"## Constructors # read-only by default: ds <- new(GDALRaster, filename) # for update access: ds <- new(GDALRaster, filename, read_only = FALSE) # to use dataset open options: ds <- new(GDALRaster, filename, read_only = TRUE|FALSE, open_options) # to open without shared mode: new(GDALRaster, filename, read_only, open_options, shared = FALSE)  ## Read/write fields ds$infoOptions ds$quiet ds$readByteAsRaw  ## Methods ds$getFilename() ds$setFilename(filename) ds$open(read_only) ds$isOpen() ds$getFileList()  ds$info() ds$infoAsJSON()  ds$getDriverShortName() ds$getDriverLongName()  ds$getRasterXSize() ds$getRasterYSize() ds$getRasterCount()  ds$addBand(dataType, options)  ds$getGeoTransform() ds$setGeoTransform(transform)  ds$getProjection() ds$getProjectionRef() ds$setProjection(projection)  ds$bbox() ds$res() ds$dim() ds$apply_geotransform(col_row) ds$get_pixel_line(xy)  ds$getDescription(band) ds$setDescription(band, desc) ds$getBlockSize(band) ds$getActualBlockSize(band, xblockoff, yblockoff) ds$getOverviewCount(band) ds$buildOverviews(resampling, levels, bands) ds$getDataTypeName(band) ds$getNoDataValue(band) ds$setNoDataValue(band, nodata_value) ds$deleteNoDataValue(band) ds$getMaskFlags(band) ds$getMaskBand(band) ds$getUnitType(band) ds$setUnitType(band, unit_type) ds$getScale(band) ds$setScale(band, scale) ds$getOffset(band) ds$setOffset(band, offset) ds$getRasterColorInterp(band) ds$setRasterColorInterp(band, col_interp)  ds$getMinMax(band, approx_ok) ds$getStatistics(band, approx_ok, force) ds$clearStatistics() ds$getHistogram(band, min, max, num_buckets, incl_out_of_range, approx_ok) ds$getDefaultHistogram(band, force)  ds$getMetadata(band, domain) ds$setMetadata(band, metadata, domain) ds$getMetadataItem(band, mdi_name, domain) ds$setMetadataItem(band, mdi_name, mdi_value, domain) ds$getMetadataDomainList(band)  ds$read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) ds$write(band, xoff, yoff, xsize, ysize, rasterData) ds$fillRaster(band, value, ivalue)  ds$getColorTable(band) ds$getPaletteInterp(band) ds$setColorTable(band, col_tbl, palette_interp) ds$clearColorTable(band)  ds$getDefaultRAT(band) ds$setDefaultRAT(band, df)  ds$flushCache()  ds$getChecksum(band, xoff, yoff, xsize, ysize)  ds$close()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"new(GDALRaster, filename, read_only) Returns object class GDALRaster. read_only argument defaults TRUE specified. new(GDALRaster, filename, read_only, open_options) Alternate constructor passing dataset open_options, character vector NAME=VALUE pairs. read_only required form constructor, TRUE read-access, FALSE open write access. Returns object class GDALRaster. new(GDALRaster, filename, read_only, open_options, shared) Alternate constructor specifying shared mode dataset opening. shared argument defaults TRUE can set FALSE constructor (see Note). arguments required form constructor, open_options can NULL. Returns object class GDALRaster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"read-write-fields","dir":"Reference","previous_headings":"","what":"Read/write fields","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"$infoOptions character vector command-line arguments control output $info() $infoAsJSON() (see ). Defaults character(0). Can set vector strings specifying arguments gdalinfo command-line utility, e.g., c(\"-nomd\", \"-norat\", \"-noct\"). Restore default setting empty string (\"\") character(0). $quiet logical value, FALSE default. field can set TRUE suppress various messages well progress reporting potentially long-running processes building overviews computation statistics histograms. $readByteAsRaw logical value, FALSE default. field can set TRUE affect data type returned $read() read_ds(). underlying band data type Byte readByteAsRaw TRUE output type raw rather integer. See also as_raw argument read_ds() control non-persistent setting. underlying band data type Byte setting effect.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"$getFilename() Returns character string containing filename associated GDALRaster object (filename originally used open dataset). May regular filename, database connection string, URL, etc. $setFilename(filename) Sets filename underlying dataset already associated filename. Explicitly setting filename advanced setting used user determined needed. Writing certain virtual datasets file one potential use case (e.g., dataset returned autoCreateWarpedVRT()). $open(read_only) (Re-)opens raster dataset existing filename. Use method open dataset closed using $close(). May used re-open dataset different read/write access (read_only set TRUE FALSE). method first close open dataset, required call $close() explicitly case. return value, called side effects. $isOpen() Returns logical indicating whether associated raster dataset open. $getFileList() Returns character vector files believed part dataset. returns empty string (\"\") means believed local file system files associated dataset (e.g., virtual file system). returned filenames normally relative absolute paths depending path used originally open dataset. $info() Prints various information raster dataset console (return value, called side effect ). Equivalent output gdalinfo command-line utility (gdalinfo filename, using default infoOptions). See field $infoOptions setting arguments gdalinfo. $infoAsJSON() Returns information raster dataset JSON-formatted string. Equivalent output gdalinfo command-line utility (gdalinfo -json filename, using default infoOptions). See field $infoOptions setting arguments gdalinfo. $getDriverShortName() Returns short name raster format driver. $getDriverLongName() Returns long name raster format driver. $getRasterXSize() Returns number pixels along x dimension. $getRasterYSize() Returns number pixels along y dimension. $getRasterCount() Returns number raster bands dataset. methods described operate individual bands, band argument integer band number (1-based). $addBand(dataType, options) Adds band dataset underlying format supports action. formats , \"MEM\" \"VRT\" notable exceptions support adding bands. added band always last band. dataType character string containing data type name (e.g., \"Byte\", \"Int16\", \"UInt16\", \"Int32\", \"Float32\", etc). options argument character vector NAME=VALUE option strings. Supported options format specific. Note options argument required may given NULL. Returns logical TRUE success FALSE band added. $getGeoTransform() Returns affine transformation coefficients transforming pixel/line raster space (column/row) projection coordinate space (geospatial x/y). return value numeric vector length six. See https://gdal.org/tutorials/geotransforms_tut.html details affine transformation. 1-based indexing R, geotransform vector contains (map units raster spatial reference system): $setGeoTransform(transform) Sets affine transformation coefficients dataset. transform numeric vector length six. Returns logical TRUE success FALSE geotransform set. $getProjection() Returns coordinate reference system raster OGC WKT format string. Equivalent ds$getProjectionRef(). $getProjectionRef() Returns coordinate reference system raster OGC WKT format string. empty string returned projection definition available. $setProjection(projection) Sets projection reference dataset. projection string OGC WKT format. Returns logical TRUE success FALSE projection set. $bbox() Returns numeric vector length four containing bounding box (xmin, ymin, xmax, ymax) assuming north-raster. $res() Returns numeric vector length two containing resolution (pixel width, pixel height positive values) assuming north-raster. $dim() Returns integer vector length three containing raster dimensions. Equivalent :   $apply_geotransform(col_row) Applies geotransform coefficients raster coordinates pixel/line space (column/row), converting georeferenced (x/y) coordinates. col_row numeric matrix raster col/row coordinates (two-column data frame coerced numeric matrix). Returns numeric matrix geospatial x/y coordinates. See stand-alone function name (apply_geotransform()) info examples. $get_pixel_line(xy) Converts geospatial coordinates pixel/line (raster column/row numbers). xy numeric matrix geospatial x,y coordinates spatial reference system raster (two-column data frame coerced numeric matrix). Returns integer matrix raster pixel/line. See stand-alone function name (get_pixel_line()) info examples. $getDescription(band) Returns string containing description band. empty string returned description set band. Passing band = 0 return dataset-level description. $setDescription(band, desc) Sets description band. desc character string set. return value. (Passing band = 0 can used set dataset-level description. Note dataset description generally filename used open dataset. usually changed calling method existing dataset.) $getBlockSize(band) Returns integer vector length two (xsize, ysize) containing \"natural\" block size band. GDAL concept natural block size rasters applications can organize data access efficiently file formats. natural block size block size efficient accessing format. many formats simply whole row case block xsize $getRasterXSize() block ysize 1. However, tiled images block size typically tile size. Note X Y block sizes divide image size evenly, meaning right bottom edge blocks may incomplete. $getActualBlockSize(band, xblockoff, yblockoff) Returns integer vector length two (xvalid, yvalid) containing actual block size given block offset band. Handles partial blocks edges raster returns true number pixels. xblockoff integer scalar, horizontal block offset calculate number valid pixels, zero indicating left block, 1 next block, etc. yblockoff likewise vertical block offset, zero indicating top block, 1 next block, etc. $getOverviewCount(band) Returns number overview layers (.k.. pyramids) available band. $buildOverviews(resampling, levels, bands) Build one raster overview images using specified downsampling algorithm. resampling character string, one AVERAGE, AVERAGE_MAGPHASE, RMS, BILINEAR, CUBIC, CUBICSPLINE, GAUSS, LANCZOS, MODE, NEAREST NONE. levels integer vector giving list overview decimation factors build (e.g., c(2, 4, 8)), 0 delete overviews (least external overviews (.ovr) GTiff internal overviews). bands integer vector giving list band numbers build overviews , 0 build bands. Note GTiff, overviews created internally dataset open update mode, external overviews (.ovr) created dataset open read-. External overviews created GTiff format may compressed using COMPRESS_OVERVIEW configuration option. compression methods supported GTiff driver available (e.g., set_config_option(\"COMPRESS_OVERVIEW\", \"LZW\")). Since GDAL 3.6, COMPRESS_OVERVIEW honoured creating internal overviews GTiff files. GDAL documentation gdaladdo command-line utility describes additional configuration overview building. See also set_config_option(). return value, called side effects. $getDataTypeName(band) Returns name pixel data type band. possible data types : raster formats including GeoTIFF (\"GTiff\") Erdas Imagine .img (\"HFA\") support sub-byte data types. Rasters can created data types specifying \"NBITS=n\" creation option n=1...7 GTiff n=1/2/4 HFA. cases, $getDataTypeName() reports apparent type \"Byte\". GTiff also supports n=9...15 (UInt16 type) n=17...31 (UInt32 type), n=16 accepted Float32 generate half-precision floating point values. $getNoDataValue(band) Returns nodata value band one exists. generally special value defined mark pixels valid data. NA returned nodata value defined band. raster formats support designated nodata value. $setNoDataValue(band, nodata_value) Sets nodata value band. nodata_value numeric value defined nodata marker. Depending format, changing nodata value may may effect pixel values raster just created (often ). thus advised call $fillRaster() explicitly intent initialize raster nodata value. case, changing existing nodata value, one already exists initialized dataset, effect pixels whose values matched previous nodata value. Returns logical TRUE success FALSE nodata value set. $deleteNoDataValue(band) Removes nodata value band. affects definition nodata value raster formats support one (modify pixel values). return value. error raised nodata value removed. $getMaskFlags(band) Returns status flags mask band associated band. Masks represented Byte bands value zero indicating nodata non-zero values indicating valid data. Normally value 255 used valid data pixels. GDAL supports external (.msk) mask bands, normal Byte alpha (transparency) band mask (value 0 treated valid data). masks may regular raster bands datasource, implied mask band nodata value ALL_VALID mask. See RFC 15: Band Masks details (https://gdal.org/development/rfc/rfc15_nodatabitmask.html. Returns named list GDAL mask flags logical values, following definitions: ALL_VALID: invalid pixels, mask values 255. used normally flag set. PER_DATASET: mask band shared bands dataset. ALPHA: mask band actually alpha band may values 0 255. NODATA: Indicates mask actually generated nodata values (mutually exclusive ALPHA). $getMaskBand(band) Returns mask filename band number associated band. return value named list two elements. MaskFile element gives filename mask band located, e.g., file name main dataset suffixed .msk case GDAL external mask file. MaskFile empty string derived ALL_VALID NODATA masks, internally freestanding bands considered part dataset. MaskBand element gives band number mask regular alpha band main dataset external mask file. BandNumber 0 ALL_VALID NODATA masks. $getUnitType(band) Returns name unit type pixel values band (e.g., \"m\" \"ft\"). empty string (\"\") returned units available. $setUnitType(band, unit_type) Sets name unit type pixel values band. unit_type one empty string \"\" (default indicating unknown), \"m\" indicating meters, \"ft\" indicating feet, though nonstandard values allowed. Returns logical TRUE success FALSE unit type set. $getScale(band) Returns pixel value scale (units value = (raw value * scale) + offset) band. value (combination $getOffset() value) can used transform raw pixel values units returned $getUnitType(). Returns NA scale value defined band. $setScale(band, scale) Sets pixel value scale (units value = (raw value * scale) + offset) band. Many raster formats implement method. Returns logical TRUE success FALSE scale set. $getOffset(band) Returns pixel value offset (units value = (raw value * scale) + offset) band. value (combination $getScale() value) can used transform raw pixel values units returned $getUnitType(). Returns NA offset value defined band. $setOffset(band, offset) Sets pixel value offset (units value = (raw value * scale) + offset) band. Many raster formats implement method. Returns logical TRUE success FALSE offset set. $getRasterColorInterp(band) Returns string describing color interpretation band. color interpretation values meanings : $setRasterColorInterp(band, col_interp) Sets color interpretation band. See list valid values col_interp (passed string). $getMinMax(band, approx_ok) Returns numeric vector length two containing min/max values band. approx_ok TRUE raster format knows values intrinsically values returned. work, subsample blocks read get approximate min/max. band nodata value excluded minimum maximum. approx_ok FALSE, pixels read used compute exact range. $getStatistics(band, approx_ok, force) Returns numeric vector length four containing minimum, maximum, mean standard deviation pixel values band (excluding nodata pixels). raster formats cache statistics allowing fast retrieval first request. approx_ok: TRUE: Approximate statistics sufficient, case overviews subset raster tiles may used computing statistics. FALSE: pixels read used compute statistics (computation forced). force: TRUE: raster scanned compute statistics. computed, statistics generally “set” back raster band format supports caching statistics. (Note: ComputeStatistics() GDAL API called automatically . change behavior GetStatistics() API, definitive force.) FALSE: Results returned can done quickly (.e., without scanning raster, typically using pre-existing STATISTICS_xxx metadata items). NAs returned statistics obtained quickly. $clearStatistics() Clear statistics. implemented now PAM supported datasets (Persistable Auxiliary Metadata via .aux.xml file). GDAL >= 3.2. $getHistogram(band, min, max, num_buckets, incl_out_of_range, approx_ok) Computes raster histogram band. min lower bound histogram. max upper bound histogram. num_buckets number buckets use (bucket size (max - min) / num_buckets). incl_out_of_range logical scalar: TRUE values histogram range mapped first bucket values mapped last bucket, FALSE range values discarded. approx_ok logical scalar: TRUE approximate histogram OK (generally faster), FALSE exactly computed histogram. Returns histogram numeric vector length num_buckets. $getDefaultHistogram(band, force) Returns default raster histogram band. GDAL API, method overridden derived classes (GDALPamRasterBand, VRTDataset, HFADataset...) may able fetch efficiently already stored histogram. force logical scalar: TRUE force computation default histogram; FALSE default histogram available, warning emitted returned list 0-length histogram vector. Returns list length four containing named elements $min (lower bound), $max (upper bound), $num_buckets (number buckets), $histogram (numeric vector length num_buckets). $getMetadata(band, domain) Returns character vector metadata NAME=VALUE pairs exist specified domain, empty string (\"\") metadata items domain (metadata context GDAL Raster Data Model: https://gdal.org/user/raster_data_model.html). Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve metadata default domain. $setMetadata(band, metadata, domain) Sets metadata specified domain. metadata argument given character vector NAME=VALUE pairs. Pass band = 0 set dataset-level metadata, pass integer band number set band-level metadata. Use domain = \"\" (empty string) set item default domain. Returns logical TRUE success FALSE metadata set. $getMetadataItem(band, mdi_name, domain) Returns value specific metadata item named mdi_name specified domain, empty string (\"\") matching item found. Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve item default domain. $setMetadataItem(band, mdi_name, mdi_value, domain) Sets value (mdi_value) specific metadata item named mdi_name specified domain. Pass band = 0 set dataset-level metadata, pass integer band number set band-level metadata. Use domain = \"\" (empty string) set item default domain. Returns logical TRUE success FALSE metadata set. $getMetadataDomainList(band) Returns character vector metadata domains empty string (\"\"). Set band = 0 retrieve dataset-level domains, integer band number retrieve band-level domains. $read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) Reads region raster data band. method takes care pixel decimation / replication output size (out_xsize * out_ysize) different size region accessed (xsize * ysize). xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region accessed. ysize height pixels region accessed. out_xsize width output array desired region read (typically value xsize). out_ysize height output array desired region read (typically value ysize). Returns numeric complex vector containing values read. organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64). rescaling data performed (see $getScale() $getOffset() ). error raised read operation fails. See also setting $readByteAsRaw . $write(band, xoff, yoff, xsize, ysize, rasterData) Writes region raster data band. xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region write. ysize height pixels region write. rasterData numeric complex vector containing values write. organized left right, top bottom pixel order. NA rasterData replaced suitable nodata value prior writing (see $getNoDataValue() $setNoDataValue() ). error raised operation fails (return value). $fillRaster(band, value, ivalue) Fills band constant value. GDAL makes guarantees values pixels newly created files set , method can used clear band specified \"default\" value. fill value passed numeric, converted underlying raster data type writing file. ivalue argument allows setting imaginary component complex value. Note ivalue required argument can set 0 real data types. return value. error raised operation fails. $getColorTable(band) Returns color table associated band, NULL associated color table. color table returned integer matrix five columns. associate color raster pixel, pixel value used subscript color table. means colors always applied starting zero ascending (see GDAL Color Table). Column 1 contains pixel values. Interpretation columns 2:5 depends value $getPaletteInterp() (see ). \"RGB\", columns 2:5 contain red, green, blue, alpha 0-255 integer values. $getPaletteInterp(band) band associated color table, method returns character string palette interpretation columns 2:5 table. empty string (\"\") returned band associated color table. palette interpretation values meanings : Gray: column 2 contains grayscale values (columns 3:5 unused) RGB: columns 2:5 contain red, green, blue, alpha CMYK: columns 2:5 contain cyan, magenta, yellow, black HLS: columns 2:4 contain hue, lightness, saturation (column 5 unused) $setColorTable(band, col_tbl, palette_interp) Sets raster color table band (see GDAL Color Table). col_tbl integer matrix data frame either four five columns (see $getColorTable() ). Column 1 contains pixel values. Valid values integers 0 larger (note GTiff format supports color tables Byte UInt16 bands). Negative values skipped warning emitted. Interpretation columns 2:5 depends value $getPaletteInterp() (see ). RGB, columns 2:4 contain red, green, blue 0-255 integer values, optional column 5 contains alpha transparency values (defaults 255 opaque). palette_interp string, one Gray, RGB, CMYK HLS (see $getPaletteInterp() ). Returns logical TRUE success FALSE color table set. $clearColorTable(band) Clears raster color table band. Returns logical TRUE success FALSE color table cleared, e.g., action supported driver. $getDefaultRAT(band) Returns Raster Attribute Table band data frame, NULL associated Raster Attribute Table. See stand-alone function buildRAT() details Raster Attribute Table format. $setDefaultRAT(band, df) Sets default Raster Attribute Table band data frame df. input data frame checked attribute \"GDALRATTableType\" can values \"thematic\" \"athematic\" (continuous data). Columns data frame checked attribute \"GFU\" (\"GDAL field usage\"). \"GFU\" attribute missing, value \"Generic\" used (corresponding GFU_Generic GDAL API, general purpose field). Columns , specific field usage values generally present df, fields containing set unique (discrete) pixel values (GFU \"MinMax\"), pixel counts (GFU \"PixelCount\"), class names (GFU \"Name\"), color values (GFUs \"Red\", \"Green\", \"Blue\"), etc. data frame also checked attributes \"Row0Min\" \"BinSize\" can numeric values describe linear binning. See stand-alone function buildRAT() details GDAL Raster Attribute Table format representation data frame. $flushCache() Flush write cached data disk. raster data written via GDAL calls, buffered internally written disk. Using method preclude calling $close() properly close dataset ensure important data addressed $flushCache() written file (see also $open() ). return value, called side effect. $getChecksum(band, xoff, yoff, xsize, ysize) Returns 16-bit integer (0-65535) checksum region raster data band. Floating point data converted 32-bit integer decimal portions raster data affect checksum. Real imaginary components complex bands influence result. xoff pixel (column) offset window read. yoff line (row) offset window read. Raster row/column offsets use 0-based indexing. xsize width pixels window read. ysize height pixels window read. $close() Closes GDAL dataset (return value, called side effects). Calling $close() results proper cleanup, flushing pending writes. Forgetting close dataset opened update mode formats GTiff result unable open afterwards. GDALRaster object still available calling $close(). dataset can re-opened existing filename $open(read_only=TRUE) $open(read_only=FALSE).","code":"c(ds$getRasterXSize(), ds$getRasterYSize(), ds$getRasterCount())"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class encapsulating a raster dataset and associated band objects — GDALRaster-class","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file)  ## print information about the dataset to the console ds$info() #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>        /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6269]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]], #>         ID[\"EPSG\",16012]], #>     CS[Cartesian,2], #>         AXIS[\"easting\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"northing\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   DESCRIPTION=LCP file created by GDAL. #>   LATITUDE=46 #>   LINEAR_UNIT=Meters #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #>   Metadata: #>     ELEVATION_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ELEVATION_MAX=3046 #>     ELEVATION_MIN=-9999 #>     ELEVATION_NUM_CLASSES=-1 #>     ELEVATION_UNIT=0 #>     ELEVATION_UNIT_NAME=Meters #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #>   Metadata: #>     SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     SLOPE_MAX=54 #>     SLOPE_MIN=-9999 #>     SLOPE_NUM_CLASSES=53 #>     SLOPE_UNIT=0 #>     SLOPE_UNIT_NAME=Degrees #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #>   Metadata: #>     ASPECT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ASPECT_MAX=359 #>     ASPECT_MIN=-9999 #>     ASPECT_NUM_CLASSES=-1 #>     ASPECT_UNIT=2 #>     ASPECT_UNIT_NAME=Azimuth degrees #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #>   Metadata: #>     FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     FUEL_MODEL_MAX=183 #>     FUEL_MODEL_MIN=-9999 #>     FUEL_MODEL_NUM_CLASSES=12 #>     FUEL_MODEL_OPTION=0 #>     FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed #>     FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183 #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #>   Metadata: #>     CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_COV_MAX=75 #>     CANOPY_COV_MIN=-9999 #>     CANOPY_COV_NUM_CLASSES=8 #>     CANOPY_COV_UNIT=1 #>     CANOPY_COV_UNIT_NAME=Percent #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #>   Metadata: #>     CANOPY_HT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_HT_MAX=390 #>     CANOPY_HT_MIN=-9999 #>     CANOPY_HT_NUM_CLASSES=8 #>     CANOPY_HT_UNIT=3 #>     CANOPY_HT_UNIT_NAME=Meters x 10 #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #>   Metadata: #>     CBH_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBH_MAX=100 #>     CBH_MIN=-9999 #>     CBH_NUM_CLASSES=22 #>     CBH_UNIT=3 #>     CBH_UNIT_NAME=Meters x 10 #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density #>   Metadata: #>     CBD_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBD_MAX=34 #>     CBD_MIN=-9999 #>     CBD_NUM_CLASSES=15 #>     CBD_UNIT=3 #>     CBD_UNIT_NAME=kg/m^3 x 100  ## retrieve the raster format name ds$getDriverShortName() #> [1] \"LCP\" ds$getDriverLongName() #> [1] \"FARSITE v.4 Landscape File (.lcp)\"  ## retrieve a list of files composing the dataset ds$getFileList() #> [1] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp\" #> [2] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj\"  ## retrieve dataset parameters ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getGeoTransform() #> [1]  323476.1      30.0       0.0 5105082.0       0.0     -30.0 ds$getProjection() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$getRasterCount() #> [1] 8 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res() #> [1] 30 30 ds$dim() #> [1] 143 107   8  ## retrieve some band-level parameters ds$getDescription(band = 1) #> [1] \"Elevation\" ds$getBlockSize(band = 1) #> [1] 143   1 ds$getOverviewCount(band = 1) #> [1] 0 ds$getDataTypeName(band = 1) #> [1] \"Int16\" # LCP format does not support an intrinsic nodata value so this returns NA: ds$getNoDataValue(band = 1) #> [1] NA  ## LCP driver reports several dataset- and band-level metadata ## see the format description at https://gdal.org/drivers/raster/lcp.html ## set band = 0 to retrieve dataset-level metadata ## set domain = \"\" (empty string) for the default metadata domain ds$getMetadata(band = 0, domain = \"\") #> [1] \"DESCRIPTION=LCP file created by GDAL.\" #> [2] \"LATITUDE=46\"                           #> [3] \"LINEAR_UNIT=Meters\"                     ## retrieve metadata for a band as a vector of name=value pairs ds$getMetadata(band = 4, domain = \"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           ## retrieve the value of a specific metadata item ds$getMetadataItem(band = 2, mdi_name = \"SLOPE_UNIT_NAME\", domain = \"\") #> [1] \"Degrees\"  ## read one row of pixel values from band 1 (elevation) ## raster row/column index are 0-based ## the upper left corner is the origin ## read the tenth row: ncols <- ds$getRasterXSize() rowdata <- ds$read(band = 1, xoff = 0, yoff = 9,                    xsize = ncols, ysize = 1,                    out_xsize = ncols, out_ysize = 1) head(rowdata) #> [1] -9999 -9999 -9999  2456  2466  2479  ds$close()  ## create a new raster using lcp_file as a template new_file <- file.path(tempdir(), \"storml_newdata.tif\") rasterFromRaster(srcfile = lcp_file,                  dstfile = new_file,                  nbands = 1,                  dtName = \"Byte\",                  init = -9999) #> initializing destination raster... #> done  ds_new <- new(GDALRaster, new_file, read_only = FALSE)  ## write random values to all pixels set.seed(42) ncols <- ds_new$getRasterXSize() nrows <- ds_new$getRasterYSize() for (row in 0:(nrows - 1)) {     rowdata <- round(runif(ncols, 0, 100))     ds_new$write(band = 1,                  xoff = 0,                  yoff = row,                  xsize = ncols,                  ysize = 1,                  rowdata) }  ## re-open in read-only mode when done writing ## this will ensure flushing of any pending writes (implicit $close) ds_new$open(read_only = TRUE)  ## getStatistics returns min, max, mean, sd, and sets stats in the metadata ds_new$getStatistics(band = 1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 100.00000  49.90667  29.05491 ds_new$getMetadataItem(band = 1, \"STATISTICS_MEAN\", \"\") #> [1] \"49.906672766486\"  ## close the dataset for proper cleanup ds_new$close() # \\donttest{ ## using a GDAL Virtual File System handler '/vsicurl/' ## see: https://gdal.org/user/virtual_file_systems.html url <- \"/vsicurl/https://raw.githubusercontent.com/\" url <- paste0(url, \"usdaforestservice/gdalraster/main/sample-data/\") url <- paste0(url, \"lf_elev_220_mt_hood_utm.tif\")  set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"20\") set_config_option(\"GDAL_HTTP_TIMEOUT\", \"20\") if (http_enabled() && vsi_stat(url)) {   ds <- new(GDALRaster, url)   plot_raster(ds, legend = TRUE, main = \"Mount Hood elevation (m)\")   ds$close() }  set_config_option(\"GDAL_HTTP_CONNECTTIMEOUT\", \"\") set_config_option(\"GDAL_HTTP_TIMEOUT\", \"\") # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"GDALVector provides interface accessing vector layer GDAL dataset calling methods underlying OGRLayer object. object class GDALVector persists open connection dataset, exposes methods retrieving layer information, setting attribute spatial filters, reading/writing feature data. See https://gdal.org/api/index.html details GDAL Vector API. Class GDALVector currently development. initial implementation supporting read access added gdalraster 1.11.1.9100. working document draft specifications available :https://usdaforestservice.github.io/gdalraster/articles/gdalvector-draft.html discussion thread/status updates :https://github.com/USDAForestService/gdalraster/issues/241.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"dsn Character string containing data source name (DSN), usually filename database connection string. layer Character string containing name layer within data source. May also given SQL SELECT statement executed data source, defining layer result set. read_only Logical scalar. TRUE open layer read-(default), FALSE open write access. open_options Optional character vector NAME=VALUE pairs specifying dataset open options. spatial_filter Optional character string containing geometry Well Known Text (WKT) format represents spatial filter. dialect Optional character string control statement dialect SQL used define layer. default, OGR SQL engine used, except RDBMS drivers use dedicated SQL engine, unless \"OGRSQL\" explicitly passed dialect. \"SQLITE\" dialect can also used.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"object class GDALVector contains pointers opened layer dataset owns , methods operate layer described Details. GDALVector C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Fields methods class accessed using $ operator. Note arguments exposed class methods required (named). read/write fields per-object settings can changed needed lifetime object.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"","code":"## Constructors # for single-layer file formats such as shapefile lyr <- new(GDALVector, dsn) # specifying the layer name, or SQL statement defining the layer lyr <- new(GDALVector, dsn, layer) # for update access lyr <- new(GDALVector, dsn, layer, read_only = FALSE) # using dataset open options lyr <- new(GDALVector, dsn, layer, read_only, open_options) # setting a spatial filter and/or specifying the SQL dialect lyr <- new(GDALVector, dsn, layer, read_only, open_options, spatial_filter, dialect)  ## Read-only fields lyr$featureTemplate  ## Read/write fields lyr$defaultGeomFldName lyr$promoteToMulti lyr$returnGeomAs lyr$wkbByteOrder  ## Methods lyr$open(read_only) lyr$isOpen() lyr$getDsn() lyr$getFileList() lyr$getDriverShortName() lyr$getDriverLongName()  lyr$getName() lyr$testCapability() lyr$getFIDColumn() lyr$getGeomType() lyr$getGeometryColumn() lyr$getSpatialRef() lyr$bbox() lyr$getLayerDefn()  lyr$setAttributeFilter(query) lyr$getAttributeFilter() lyr$setIgnoredFields(fields)  lyr$setSpatialFilter(wkt) lyr$setSpatialFilterRect(bbox) lyr$getSpatialFilter() lyr$clearSpatialFilter()  lyr$getFeatureCount() lyr$getNextFeature() lyr$setNextByIndex(i) lyr$getFeature(fid) lyr$resetReading() lyr$fetch(n)  lyr$setFeature(feature) lyr$createFeature(feature) lyr$upsertFeature(feature) lyr$getLastWriteFID() lyr$deleteFeature(fid) lyr$syncToDisk()  lyr$startTransaction(force) lyr$commitTransaction() lyr$rollbackTransaction()  lyr$close()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"new(GDALVector, dsn) first layer index assumed layer argument omitted, form constructor might used single-layer formats like shapefile. new(GDALVector, dsn, layer) Constructor specifying name layer open. layer argument may also given SQL SELECT statement define layer result set. new(GDALVector, dsn, layer, read_only) Constructor specifying read/write access (read_only = {TRUE|FALSE}). layer argument required form constructor, may given empty string (\"\"), case first layer index assumed. new(GDALVector, dsn, layer, read_only, open_options) Constructor specifying dataset open options character vector NAME=VALUE pairs. new(GDALVector, dsn, layer, read_only, open_options, spatial_filter, dialect)) Constructor specify spatial filter /SQL dialect. arguments required form constructor, open_options may NULL, spatial_filter dialect may empty string (\"\").","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"read-only-fields","dir":"Reference","previous_headings":"","what":"Read-only fields","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"$featureTemplate list attribute geometry field names, NA values equivalent OGR NULL values. list elements fully typed corresponding missing value types assigned (NA_integer_, NA_real_, NA_character_, etc.). featureTemplate useful initialize new empty feature, field geometry values can assigned, use $createFeature() method (create write new feature within layer). Note geometry fields initialized character type template, may set either character string specifying geometry WKT format, raw vector containing geometry WKB.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"read-write-fields","dir":"Reference","previous_headings":"","what":"Read/write fields","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"$defaultGeomFldName Character string specifying name use returned columns geometry column name source layer empty, like shapefiles etc. Defaults \"geometry\". $promoteToMulti logical value specifying whether automatically promote geometries Polygon MultiPolygon, Point MultiPoint, LineString MultiLineString read operations (.e., methods $getFeature(), $getNextFeature(), $fetch()). Defaults FALSE. Setting TRUE may useful reading layers shapefiles mix, e.g., Polygons MultiPolygons. $returnGeomAs Character string specifying return format feature geometries. Must one WKT, WKT_ISO, WKB (default), WKB_ISO, SUMMARY (GDAL >= 3.7), TYPE_NAME NONE. Using WKB/WKT exports 99-402 extended dimension (Z) types Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon GeometryCollection. geometry types, equivalent using WKB_ISO/WKT_ISO (see https://libgeos.org/specifications/wkb/). $wkbByteOrder Character string specifying byte order WKB geometries. Must either LSB (Least Significant Byte first, default) MSB (Significant Byte first).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"$open(read_only) (Re-)opens vector layer existing DSN. Use method open layer closed using $close(). May used re-open layer different read/write access (read_only set TRUE FALSE). method first close open dataset, required call $close() explicitly case. return value, called side effects. $isOpen() Returns logical scalar indicating whether vector dataset open. $getDsn() Returns character string containing dsn associated GDALVector object (dsn originally used open layer). $getFileList() Returns character vector files believed part data source. returns empty string (\"\") means believed local file system files associated dataset (e.g., virtual file system). returned filenames normally relative absolute paths depending path used originally open dataset. $getDriverShortName() Returns short name vector format driver. $getDriverLongName() Returns long name vector format driver. $getName() Returns layer name. $testCapability() Tests whether layer supports named capabilities based current read/write access. Returns list capabilities values TRUE FALSE. returned list contains following named elements: RandomRead, SequentialWrite, RandomWrite, UpsertFeature, FastSpatialFilter, FastFeatureCount, FastGetExtent, FastSetNextByIndex, CreateField, CreateGeomField, DeleteField, ReorderFields, AlterFieldDefn, AlterGeomFieldDefn, DeleteFeature, StringsAsUTF8, Transactions, CurveGeometries. (See GDAL documentation OGR_L_TestCapability().) $getFIDColumn() Returns name underlying database column used FID column, empty string (\"\") supported. $getGeomType() Returns well known name layer geometry type character string. layers multiple geometry fields, method returns geometry type first geometry column. columns, use $getLayerDefn(). layers without geometry field, method returns \"NONE\". $getGeometryColumn() Returns name underlying database column used geometry column, empty string (\"\") supported. layers multiple geometry fields, method returns name first geometry column. columns, use $getLayerDefn(). $getSpatialRef() Returns WKT string containing spatial reference system layer, empty string (\"\") spatial reference exists. $bbox() Returns numeric vector length four containing bounding box layer (xmin, ymin, xmax, ymax). Note bForce = true set underlying API call OGR_L_GetExtent(), entire layer may scanned compute minimum bounding rectangle (see FastGetExtent list returned $testCapability()). Depending format driver, spatial filter may may taken account, safer call $bbox() without setting spatial filter. $getLayerDefn() Returns list containing OGR feature class definition layer (.k.. layer definition). list contains zero attribute field definitions, along one geometry field definitions. See ogr_define details field feature class definitions. $setAttributeFilter(query) Sets attribute query string used fetching features via $getNextFeature() $fetch() methods. features query evaluates true returned. query string format SQL clause, described \"\" section OGR SQL dialect documentation (e.g., \"population > 1000000 population < 5000000\", population attribute layer). cases (RDBMS backed drivers, SQLite, GeoPackage) native capabilities database may used interpret clause, case capabilities broader OGR SQL. Note installing query string generally result resetting current reading position ($resetReading() described ). query parameter may set empty string (\"\") clear current attribute filter. $getAttributeFilter() Returns attribute query string currently use, empty string (\"\") attribute filter set. $setIgnoredFields(fields) Set fields can omitted retrieving features layer. fields argument character vector field names. format driver supports functionality (testable using $testCapability()$IgnoreFields), fetch specified fields subsequent calls $getFeature() / $getNextFeature() / $fetch(), thus save processing time /bandwidth. Besides field names layer, following special fields can passed: \"OGR_GEOMETRY\" ignore geometry \"OGR_STYLE\" ignore layer style. default, fields ignored. Note fields used attribute filter generally set ignored fields, drivers (relying OGR SQL engine) unable correctly evaluate attribute filter. return value, called side effects. $setSpatialFilter(wkt) Sets new spatial filter geometry WKT format. method sets geometry used spatial filter fetching features via $getNextFeature() $fetch() methods. features geometrically intersect filter geometry returned. Currently test may inaccurately implemented (depending vector format driver), guaranteed features whose envelope overlaps envelope spatial filter returned. can result shapes returned strictly case. wkt character string containing WKT geometry coordinate system layer. empty string (\"\") may passed indicating current spatial filter cleared, new one instituted. $setSpatialFilterRect(bbox) Sets new rectangular spatial filter. method sets rectangle used spatial filter fetching features via $getNextFeature() $fetch() methods. features geometrically intersect given rectangle returned. bbox numeric vector length four containing xmin, ymin, xmax, ymax coordinate system layer whole (returned $getSpatialRef()). $getSpatialFilter() Returns current spatial filter geometry WKT string, empty string (\"\") spatial filter set. $clearSpatialFilter() Clears spatial filter set $setSpatialFilterRect(). return value, called side effect. $getFeatureCount() Returns number features layer. dynamic databases count may exact. method forces count underlying API call (.e., bForce = TRUE call OGR_L_GetFeatureCount()). Note vector drivers actually scan entire layer count features. FastFeatureCount element list returned $testCapability() method can checked might concern. number features returned takes account spatial /attribute filters. driver implementations method may alter read cursor layer. $getNextFeature() Fetch next available feature layer. features matching current spatial /attribute filter (defined) returned. method implements sequential access features layer. $resetReading() method can used start beginning . Returns list unique feature identifier (FID), attribute geometry field names, values. NULL returned features available. $setNextByIndex() Moves read cursor ith feature current result set (0-based indexing). method allows positioning layer call $getNextFeature() fetch() read requested feature(s), absolute index current result set. , setting = 3 mean next feature read $getNextFeature() 4th feature read sequential reading took place beginning layer, including accounting spatial attribute filters. method implemented efficiently vector format drivers. default implementation simply resets reading beginning calls GetNextFeature() times. determine fast seeking available current layer, check FastSetNextByIndex element list returned $testCapability() method. return value, called side effect. $getFeature(fid) Returns feature identifier. value fid must numeric scalar, optionally carrying bit64::integer64 class attribute. Success failure operation unaffected spatial attribute filters may effect. RandomRead element list returned $testCapability() can checked establish layer supports efficient random access reading; however, call always work feature exists since fallback implementation just scans features layer looking desired feature. Returns list unique feature identifier (FID), attribute geometry field names, values, NULL failure. Note sequential reads ($getNextFeature()) generally considered interrupted call $getFeature(). $resetReading() Reset feature reading start first feature. return value, called side effect. $fetch(n) Fetches next n features layer returns data frame. allows retrieving entire set features, one page features time, remaining features (current cursor position). Returns data frame many rows features fetched, many columns attribute plus geometry fields result set, even result single value one zero rows. method analog DBI::dbFetch(). n argument maximum number features retrieve per fetch given integer numeric assumed whole number (truncated). Use n = -1 n = Inf retrieve pending features (resets reading first feature). Otherwise, $fetch() can called multiple times perform forward paging current cursor position. Passing n = NA also supported returns remaining features. Fetching zero features possible retrieve structure feature set data frame (columns fully typed). OGR field types returned following R types (NA OGR NULL values): OFTInteger: integer OFTInteger subtype OFSTBoolean: logical OFTIntegerList: vector integer (list column) OFTInteger64: bit64::integer64 OFTInteger64 subtype OFSTBoolean: logical OFTInteger64List: vector bit64::integer64 (list column) OFTReal: numeric OFTRealList: vector numeric (list column) OFTString: character string OFTStringList: vector character strings (list column) OFTDate: Date OFTDateTime: POSIXct (millisecond accuracy adjustment time zone flag present) OFTBinary: raw vector (list column, NULL entries OGR NULL values) Geometries returned field returnGeomAs set NONE. Omitting geometries may beneficial performance memory usage access feature attributes needed. Geometries returned raw vectors data frame list column returnGeomAs set WKB (default) WKB_ISO. Otherwise, geometries returned character strings returnGeomAs set one WKT, WKT_ISO TYPE_NAME. Note $getFeatureCount() called internally fetching full feature set remaining features (page features). $setFeature(feature) Rewrites/replaces existing feature. method writes feature based feature id within input feature. feature argument named list fields values, must include $FID element referencing existing feature rewrite. RandomWrite element list returned $testCapability() can checked establish layer supports random access writing via $setFeature(). way omitted fields passed feature processed driver dependent: SQL-based drivers implement set feature SQL UPDATE skip unset fields, thus content existing feature preserved. shapefile driver write NULL value DBF file. GeoJSON driver take account unset fields remove corresponding JSON member. Returns logical TRUE upon successful completion, FALSE setting feature succeed. FID last feature written layer may obtained method $getLastWriteFID() (see ). set feature, create exist see $upsertFeature() method. $createFeature(feature) Creates writes new feature within layer. feature argument named list fields values. GDALVector object provides read-$featureTemplate set list values initialized NA (OGR NULL). passed feature written layer new feature, rather overwriting existing one. feature $FID element NA, vector format driver may use feature id new feature, necessarily. FID last feature written layer may obtained method $getLastWriteFID() (see ). Returns logical TRUE upon successful completion, FALSE creating feature succeed. create feature, set already exists see $upsertFeature() method. $upsertFeature(feature) Rewrites/replaces existing feature creates new feature within layer. method write feature layer, based feature id within input feature. feature argument named list fields values, potentially including $FID element referencing existing feature rewrite. feature id exist new feature written. Otherwise, existing feature rewritten. UpsertFeature element list returned $testCapability() can checked determine layer supports upsert writing. See $setFeature() description omitted fields passed feature processed. Returns logical TRUE upon successful completion, FALSE upserting feature succeed. Requires GDAL >= 3.6. $getLastWriteFID() Returns FID last feature written (either newly created updated existing). NULL returned features written layer. Note OGRNullFID (-1) may returned writing feature formats. case FID assigned yet, generally indicate error (e.g., formats store persistent FID assign FIDs upon sequential read operation). returned FID numeric scalar carrying bit64::integer64 class attribute. $deleteFeature(fid) Deletes feature layer. feature indicated feature ID deleted layer supported format driver. value fid must numeric scalar, optionally carrying bit64::integer64 class attribute (whole number, truncated). DeleteFeature element list returned $testCapability() can checked establish layer delete feature capability. Returns logical TRUE operation succeeds, FALSE failure. $syncToDisk() Flushes pending changes disk. call intended force layer flush pending writes disk, leave disk file consistent state. normally effect read-datasources. formats implement method, still return error. error returned error occurs attempting flush disk. event, always close opened datasource $close() ensure data correctly flushed. Returns logical TRUE error occurs (even nothing done) FALSE error. $startTransaction(force) Creates transaction supported vector data source. force argument logical value. force = FALSE, \"efficient\" transactions attempted. drivers may offer emulation transactions, sometimes significant overhead, case user must explicitly allow emulation setting force =TRUE. function ogr_ds_test_cap() can used determine whether vector data source supports efficient emulated transactions. changes done start transaction definitely applied data source $commitTransaction() called. can canceled calling rollbackTransaction() instead. Nested transactions supported. Transactions implemented dataset level, multiple GDALVector objects using data source transactions active time. case $startTransaction() fails, neither $commitTransaction() $rollbackTransaction() called. error occurs successful $startTransaction(), whole transaction may may implicitly canceled, depending format driver (e.g., PostGIS driver cancel , SQLite/GPKG ). case, event error, explicit call rollbackTransaction() done keep things balanced. Returns logical TRUE transaction created, FALSE failure. $commitTransaction() Commits transaction supported vector data source. Returns logical value, TRUE transaction successfully committed. Returns FALSE transaction active, rollback fails, data source support transactions. Depending format driver, may may abort layer sequential reading may active. $rollbackTransaction() Rolls back data source state start current transaction, transactions supported data source. Returns logical value, TRUE transaction successfully rolled back. Returns FALSE transaction active, rollback fails, data source support transactions. $close() Closes vector dataset (return value, called side effects). Calling $close() results proper cleanup, flushing pending writes. GDALVector object still available calling $close(). layer can re-opened existing dsn $open(read_only = {TRUE|FALSE}).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALVector-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class encapsulating a vector layer in a GDAL dataset — GDALVector-class","text":"","code":"## MTBS fire perimeters in Yellowstone National Park 1984-2022 f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package = \"gdalraster\")  ## copy to a temporary file that is writeable dsn <- file.path(tempdir(), basename(f)) file.copy(f, dsn) #> [1] TRUE  lyr <- new(GDALVector, dsn, \"mtbs_perims\")  ## object of class GDALVector lyr #> C++ object <0x55a70c23e000> of class 'GDALVector' <0x55a70238b720> str(lyr) #> Reference class 'Rcpp_GDALVector' [package \"gdalraster\"] with 8 fields #>  $ defaultGeomFldName: chr \"geometry\" #>  $ featureTemplate   :List of 11 #>   ..$ FID         :integer64 NA  #>   ..$ event_id    : chr NA #>   ..$ incid_name  : chr NA #>   ..$ incid_type  : chr NA #>   ..$ map_id      :integer64 NA  #>   ..$ burn_bnd_ac :integer64 NA  #>   ..$ burn_bnd_lat: chr NA #>   ..$ burn_bnd_lon: chr NA #>   ..$ ig_date     : Date[1:1], format: NA #>   ..$ ig_year     : int NA #>   ..$ geom        : chr NA #>  $ m_dialect         : chr \"\" #>  $ m_is_sql          : logi FALSE #>  $ m_layer_name      : chr \"mtbs_perims\" #>  $ promoteToMulti    : logi FALSE #>  $ returnGeomAs      : chr \"WKB\" #>  $ wkbByteOrder      : chr \"LSB\" #>  and 61 methods, of which 47 are  possibly relevant: #>    OGRFeatureFromList_dumpReadble, bbox, clearSpatialFilter, close, #>    commitTransaction, createFeature, deleteFeature, fetch, finalize, #>    getAttributeFilter, getDriverLongName, getDriverShortName, getDsn, #>    getFIDColumn, getFeature, getFeatureCount, getFileList, getGeomType, #>    getGeometryColumn, getLastWriteFID, getLayerDefn, getName, getNextFeature, #>    getSpatialFilter, getSpatialRef, initialize, isOpen, layerClip, layerErase, #>    layerIdentity, layerIntersection, layerSymDifference, layerUnion, #>    layerUpdate, open, resetReading, rollbackTransaction, setAttributeFilter, #>    setFeature, setIgnoredFields, setNextByIndex, setSpatialFilter, #>    setSpatialFilterRect, startTransaction, syncToDisk, testCapability, #>    upsertFeature  ## dataset info lyr$getDriverShortName() #> [1] \"GPKG\" lyr$getDriverLongName() #> [1] \"GeoPackage\" lyr$getFileList() #> [1] \"/tmp/RtmprS3Ajq/ynp_fires_1984_2022.gpkg\"  ## layer info lyr$getName() #> [1] \"mtbs_perims\" lyr$getGeomType() #> [1] \"MULTIPOLYGON\" lyr$getGeometryColumn() #> [1] \"geom\" lyr$getFIDColumn() #> [1] \"fid\" lyr$getSpatialRef() #> [1] \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Lambert_Conformal_Conic_2SP\\\"],PARAMETER[\\\"latitude_of_origin\\\",44.25],PARAMETER[\\\"central_meridian\\\",-109.5],PARAMETER[\\\"standard_parallel_1\\\",49],PARAMETER[\\\"standard_parallel_2\\\",45],PARAMETER[\\\"false_easting\\\",600000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"32100\\\"]]\" lyr$bbox() #> [1] 469685.73 -12917.76 573531.72  96577.34  ## layer capabilities lyr$testCapability() #> $RandomRead #> [1] TRUE #>  #> $SequentialWrite #> [1] FALSE #>  #> $RandomWrite #> [1] FALSE #>  #> $FastSpatialFilter #> [1] TRUE #>  #> $FastFeatureCount #> [1] TRUE #>  #> $FastGetExtent #> [1] TRUE #>  #> $FastSetNextByIndex #> [1] FALSE #>  #> $CreateField #> [1] FALSE #>  #> $CreateGeomField #> [1] FALSE #>  #> $DeleteField #> [1] FALSE #>  #> $ReorderFields #> [1] FALSE #>  #> $AlterFieldDefn #> [1] FALSE #>  #> $IgnoreFields #> [1] TRUE #>  #> $DeleteFeature #> [1] FALSE #>  #> $StringsAsUTF8 #> [1] TRUE #>  #> $CurveGeometries #> [1] TRUE #>   ## re-open with write access lyr$open(read_only = FALSE) lyr$testCapability()$SequentialWrite #> [1] TRUE lyr$testCapability()$RandomWrite #> [1] TRUE  ## feature class definition - a list of field names and their definitions defn <- lyr$getLayerDefn() names(defn) #>  [1] \"event_id\"     \"incid_name\"   \"incid_type\"   \"map_id\"       \"burn_bnd_ac\"  #>  [6] \"burn_bnd_lat\" \"burn_bnd_lon\" \"ig_date\"      \"ig_year\"      \"geom\"         str(defn) #> List of 10 #>  $ event_id    :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ incid_name  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ incid_type  :List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 254 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ map_id      :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_ac :List of 9 #>   ..$ type       : chr \"OFTInteger64\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lat:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ burn_bnd_lon:List of 9 #>   ..$ type       : chr \"OFTString\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 10 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ ig_date     :List of 9 #>   ..$ type       : chr \"OFTDate\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ ig_year     :List of 9 #>   ..$ type       : chr \"OFTInteger\" #>   ..$ subtype    : chr \"OFSTNone\" #>   ..$ width      : int 0 #>   ..$ precision  : int 0 #>   ..$ is_nullable: logi TRUE #>   ..$ is_unique  : logi FALSE #>   ..$ default    : chr \"\" #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi FALSE #>  $ geom        :List of 5 #>   ..$ type       : chr \"MULTIPOLYGON\" #>   ..$ srs        : chr \"PROJCS[\\\"NAD83 / Montana\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,2\"| __truncated__ #>   ..$ is_nullable: logi TRUE #>   ..$ is_ignored : logi FALSE #>   ..$ is_geom    : logi TRUE  ## default value of the read/write field 'returnGeomAs' lyr$returnGeomAs #> [1] \"WKB\"  lyr$getFeatureCount() #> [1] 61  ## sequential read cursor feat <- lyr$getNextFeature() # a list of field names and their values str(feat) #> List of 11 #>  $ FID         :integer64 1  #>  $ event_id    : chr \"WY4413411069519870807\" #>  $ incid_name  : chr \"POLECAT\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10015934  #>  $ burn_bnd_ac :integer64 1093  #>  $ burn_bnd_lat: chr \"44.132\" #>  $ burn_bnd_lon: chr \"-110.696\" #>  $ ig_date     : Date[1:1], format: \"1987-08-07\" #>  $ ig_year     : int 1987 #>  $ geom        : raw [1:598] 01 06 00 00 ...  ## set an attribute filter lyr$setAttributeFilter(\"ig_year = 2020\") lyr$getFeatureCount() #> [1] 1  feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 61  #>  $ event_id    : chr \"WY4438911082120200822\" #>  $ incid_name  : chr \"LONE STAR\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10020495  #>  $ burn_bnd_ac :integer64 3348  #>  $ burn_bnd_lat: chr \"44.4\" #>  $ burn_bnd_lon: chr \"-110.782\" #>  $ ig_date     : Date[1:1], format: \"2020-08-22\" #>  $ ig_year     : int 2020 #>  $ geom        : raw [1:966] 01 06 00 00 ...  ## NULL when no more features are available feat <- lyr$getNextFeature() str(feat) #>  NULL  ## reset reading to the start and return geometries as WKT lyr$resetReading() lyr$returnGeomAs <- \"WKT\" feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 61  #>  $ event_id    : chr \"WY4438911082120200822\" #>  $ incid_name  : chr \"LONE STAR\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10020495  #>  $ burn_bnd_ac :integer64 3348  #>  $ burn_bnd_lat: chr \"44.4\" #>  $ burn_bnd_lon: chr \"-110.782\" #>  $ ig_date     : Date[1:1], format: \"2020-08-22\" #>  $ ig_year     : int 2020 #>  $ geom        : chr \"MULTIPOLYGON (((496593.122306971 15506.8828590633,496491.761299067 15605.3612548792,496290.812130161 15388.0465\"| __truncated__  ## clear the attribute filter lyr$setAttributeFilter(\"\") lyr$getFeatureCount() #> [1] 61  ## set a spatial filter ## get the bounding box of the largest 1988 fire and use as spatial filter ## first set a temporary attribute filter to do the lookup lyr$setAttributeFilter(\"ig_year = 1988 ORDER BY burn_bnd_ac DESC\") feat <- lyr$getNextFeature() str(feat) #> List of 11 #>  $ FID         :integer64 7  #>  $ event_id    : chr \"WY4470811082119880722\" #>  $ incid_name  : chr \"NORTH FORK\" #>  $ incid_type  : chr \"Wildfire\" #>  $ map_id      :integer64 10014217  #>  $ burn_bnd_ac :integer64 563527  #>  $ burn_bnd_lat: chr \"44.678\" #>  $ burn_bnd_lon: chr \"-110.716\" #>  $ ig_date     : Date[1:1], format: \"1988-07-22\" #>  $ ig_year     : int 1988 #>  $ geom        : chr \"MULTIPOLYGON (((469685.969312071 29526.2354109807,469918.933844832 29654.3220754602,470030.299119989 29518.7441\"| __truncated__  bbox <- bbox_from_wkt(feat$geom) print(bbox) #> [1] 469685.97  11442.45 544069.63  85508.15  ## set spatial filter on the full layer lyr$setAttributeFilter(\"\")  # clears lyr$setSpatialFilterRect(bbox) lyr$getFeatureCount() #> [1] 40  ## fetch in chunks and return as data frame d <- lyr$fetch(20) str(d) #> 'data.frame':\t20 obs. of  11 variables: #>  $ FID         :integer64 38 7 32 25 6 40 36 8 ...  #>  $ event_id    : chr  \"MT4471311115120070627\" \"WY4470811082119880722\" \"MT4491211108020030820\" \"WY4433011103020000816\" ... #>  $ incid_name  : chr  \"MADISON ARM\" \"NORTH FORK\" \"RATHBONE\" \"SPRUCE COMPLEX (PLATEAU)\" ... #>  $ incid_type  : chr  \"Wildfire\" \"Wildfire\" \"Wildfire\" \"Wildfire\" ... #>  $ map_id      :integer64 16113 10014217 13014 10014141 10014215 16428 15432 10014218 ...  #>  $ burn_bnd_ac :integer64 3564 563527 2701 2808 20422 2175 3745 95233 ...  #>  $ burn_bnd_lat: chr  \"44.713\" \"44.678\" \"44.912\" \"44.329\" ... #>  $ burn_bnd_lon: chr  \"-111.151\" \"-110.716\" \"-111.080\" \"-111.027\" ... #>  $ ig_date     : Date, format: \"2007-06-27\" \"1988-07-22\" ... #>  $ ig_year     : int  2007 1988 2003 2000 1988 2007 2006 1988 1988 1988 ... #>  $ geom        : chr  \"MULTIPOLYGON (((469685.969631834 54506.9481370259,470235.509134591 54383.4837249131,470939.42854159 53898.69574\"| __truncated__ \"MULTIPOLYGON (((469685.969312071 29526.2354109807,469918.933844832 29654.3220754602,470030.299119989 29518.7441\"| __truncated__ \"MULTIPOLYGON (((475136.766856355 74053.2153491452,475188.847231864 74366.3342955356,475341.959781024 74368.4856\"| __truncated__ \"MULTIPOLYGON (((477992.723214764 8483.08443989834,477312.456870818 7630.95433906866,477088.305832492 6955.09786\"| __truncated__ ...  ## the next chunk d <- lyr$fetch(20) nrow(d) #> [1] 20  ## no features remaining d <- lyr$fetch(20) nrow(d) #> [1] 0 str(d)  # 0-row data frame with columns typed #> 'data.frame':\t0 obs. of  11 variables: #>  $ FID         :integer64   #>  $ event_id    : chr  #>  $ incid_name  : chr  #>  $ incid_type  : chr  #>  $ map_id      :integer64   #>  $ burn_bnd_ac :integer64   #>  $ burn_bnd_lat: chr  #>  $ burn_bnd_lon: chr  #>  $ ig_date     : 'Date' num(0)  #>  $ ig_year     : int  #>  $ geom        : chr   ## fetch all pending features with geometries as WKB lyr$returnGeomAs <- \"WKB\" d <- lyr$fetch(-1)  # resets reading to the first feature str(d) #> 'data.frame':\t40 obs. of  11 variables: #>  $ FID         :integer64 38 7 32 25 6 40 36 8 ...  #>  $ event_id    : chr  \"MT4471311115120070627\" \"WY4470811082119880722\" \"MT4491211108020030820\" \"WY4433011103020000816\" ... #>  $ incid_name  : chr  \"MADISON ARM\" \"NORTH FORK\" \"RATHBONE\" \"SPRUCE COMPLEX (PLATEAU)\" ... #>  $ incid_type  : chr  \"Wildfire\" \"Wildfire\" \"Wildfire\" \"Wildfire\" ... #>  $ map_id      :integer64 16113 10014217 13014 10014141 10014215 16428 15432 10014218 ...  #>  $ burn_bnd_ac :integer64 3564 563527 2701 2808 20422 2175 3745 95233 ...  #>  $ burn_bnd_lat: chr  \"44.713\" \"44.678\" \"44.912\" \"44.329\" ... #>  $ burn_bnd_lon: chr  \"-111.151\" \"-110.716\" \"-111.080\" \"-111.027\" ... #>  $ ig_date     : Date, format: \"2007-06-27\" \"1988-07-22\" ... #>  $ ig_year     : int  2007 1988 2003 2000 1988 2007 2006 1988 1988 1988 ... #>  $ geom        :List of 40 #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ... #>   ..$ : raw  01 06 00 00 ...  ## parse WKB using package wk wk_obj <- wk::wkb(d$geom, crs = lyr$getSpatialRef()) plot(wk_obj)   lyr$clearSpatialFilter() lyr$getFeatureCount() #> [1] 61  lyr$close()  ## simple example for feature write methods showing use of various data types ## create and write to a new layer in a GeoPackage data source dsn2 <- tempfile(fileext = \".gpkg\")  ## define a feature class defn <- ogr_def_layer(\"POINT\", srs = epsg_to_wkt(4326))  ## add field definitions defn$unique_int <- ogr_def_field(\"OFTInteger\", is_nullable = FALSE,                                  is_unique = TRUE) defn$bool_data <- ogr_def_field(\"OFTInteger\", fld_subtype = \"OFSTBoolean\") defn$large_ints <- ogr_def_field(\"OFTInteger64\") defn$doubles <- ogr_def_field(\"OFTReal\") defn$strings <- ogr_def_field(\"OFTString\", fld_width = 50) defn$dates <- ogr_def_field(\"OFTDate\") defn$dt_modified <- ogr_def_field(\"OFTDateTime\",                                   default_value = \"CURRENT_TIMESTAMP\") defn$blobs <- ogr_def_field(\"OFTBinary\")  ogr_ds_create(\"GPKG\", dsn2, \"test_layer\", layer_defn = defn) #> [1] TRUE  lyr <- new(GDALVector, dsn2, \"test_layer\", read_only = FALSE) # lyr$getLayerDefn() |> str()  ## define a feature to write ## the read-only field lyr$featureTemplate can be examined for structure ## fields in the template are initialized to NA (= OGR NULL) lyr$featureTemplate |> str() #> List of 10 #>  $ FID        :integer64 NA  #>  $ unique_int : int NA #>  $ bool_data  : logi NA #>  $ large_ints :integer64 NA  #>  $ doubles    : num NA #>  $ strings    : chr NA #>  $ dates      : Date[1:1], format: NA #>  $ dt_modified: POSIXct[1:1], format: NA #>  $ blobs      : raw(0)  #>  $ geom       : chr NA  ## copy the template or make a new list feat1 <- list() ## $FID is omitted since it is assigned when written (could also be NA) ## $dt_modified is omitted since the datasource sets a default timestamp feat1$unique_int <- 1001 feat1$bool_data <- TRUE ## passing a string to as.integer64() ## this value is too large to be represented exactly as R numeric (double) feat1$large_ints <- bit64::as.integer64(\"90071992547409910\") feat1$doubles <- 1.234 feat1$strings <- \"A test string\" feat1$dates <- as.Date(\"2024-01-01\") feat1$blobs <- charToRaw(\"A binary object\") feat1$geom <- \"POINT (1 1)\"  # can be a WKT string or raw vector of WKB  ## create as a new feature in the layer lyr$createFeature(feat1) #> [1] TRUE  ## the assigned FID lyr$getLastWriteFID() #> integer64 #> [1] 1  ## this fails due to the unique constraint lyr$createFeature(feat1) #> [1] FALSE  feat2 <- list() feat2$unique_int <- 1002 feat2$bool_data <- FALSE feat2$large_ints <- bit64::as.integer64(\"90071992547409920\") feat2$doubles <- 2.345 feat2$strings <- \"A test string 2\" feat2$dates <- as.Date(\"2024-01-02\") feat2$blobs <- charToRaw(\"A binary object 2\") feat2$geom <- \"POINT (2 2)\"  lyr$createFeature(feat2) #> [1] TRUE lyr$getLastWriteFID() #> integer64 #> [1] 2  ## close and re-open as a read-only layer lyr$open(read_only = TRUE)  lyr$getFeatureCount() #> [1] 2 d <- lyr$fetch(-1)  # -1 for all features reading from start str(d) #> 'data.frame':\t2 obs. of  10 variables: #>  $ FID        :integer64 1 2  #>  $ unique_int : int  1001 1002 #>  $ bool_data  : logi  TRUE FALSE #>  $ large_ints :integer64 90071992547409910 90071992547409920  #>  $ doubles    : num  1.23 2.35 #>  $ strings    : chr  \"A test string\" \"A test string 2\" #>  $ dates      : Date, format: \"2024-01-01\" \"2024-01-02\" #>  $ dt_modified: POSIXct, format: \"2024-09-10 06:18:22\" \"2024-09-10 06:18:22\" #>  $ blobs      :List of 2 #>   ..$ : raw  41 20 62 69 ... #>   ..$ : raw  41 20 62 69 ... #>  $ geom       :List of 2 #>   ..$ : raw  01 01 00 00 ... #>   ..$ : raw  01 01 00 00 ...  ## edit an existing feature, e.g., feat <- lyr$getFeature(2) ## here we copy a row of the data frame returned by lyr$fetch() above feat <- d[2,] str(feat) #> 'data.frame':\t1 obs. of  10 variables: #>  $ FID        :integer64 2  #>  $ unique_int : int 1002 #>  $ bool_data  : logi FALSE #>  $ large_ints :integer64 90071992547409920  #>  $ doubles    : num 2.35 #>  $ strings    : chr \"A test string 2\" #>  $ dates      : Date, format: \"2024-01-02\" #>  $ dt_modified: POSIXct, format: \"2024-09-10 06:18:22\" #>  $ blobs      :List of 1 #>   ..$ : raw  41 20 62 69 ... #>  $ geom       :List of 1 #>   ..$ : raw  01 01 00 00 ...  Sys.sleep(1)  # only to ensure a timestamp difference  feat$bool_data <- TRUE feat$strings <- paste(feat$strings, \"- edited\") feat$dt_modified <- Sys.time() feat$geom <- \"POINT (2.001 2.001)\"  lyr$open(read_only = FALSE)  ## lyr$setFeature() re-writes the feature identified by the $FID element ## N.B., all fields are re-written: ##   any fields omitted from the input feature, or set to NA, will be ##   re-written as OGR NULL lyr$setFeature(feat) #> [1] TRUE  lyr$open(read_only = TRUE) lyr$getFeatureCount() #> [1] 2  lyr$returnGeomAs <- \"WKT\" d <- lyr$fetch(-1) str(d) #> 'data.frame':\t2 obs. of  10 variables: #>  $ FID        :integer64 1 2  #>  $ unique_int : int  1001 1002 #>  $ bool_data  : logi  TRUE TRUE #>  $ large_ints :integer64 90071992547409910 90071992547409920  #>  $ doubles    : num  1.23 2.35 #>  $ strings    : chr  \"A test string\" \"A test string 2 - edited\" #>  $ dates      : Date, format: \"2024-01-01\" \"2024-01-02\" #>  $ dt_modified: POSIXct, format: \"2024-09-10 06:18:22\" \"2024-09-10 06:18:23\" #>  $ blobs      :List of 2 #>   ..$ : raw  41 20 62 69 ... #>   ..$ : raw  41 20 62 69 ... #>  $ geom       : chr  \"POINT (1 1)\" \"POINT (2.001 2.001)\"  lyr$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to calculate mean and variance in one pass — RunningStats-class","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"RunningStats computes summary statistics data stream efficiently. Mean variance calculated Welford's online algorithm (https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance). min, max, sum count also tracked. input data values stored memory, class can used compute statistics large data streams.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"na_rm Logical scalar. TRUE remove NA input data (default) FALSE retain NA.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"object class RunningStats. RunningStats object maintains current minimum, maximum, mean, variance, sum count values read stream. can updated repeatedly new values (.e., chunks data read input stream), memory footprint negligible. Class methods updating new values retrieving current values statistics described Details. RunningStats C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed R using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"intended use computing summary statistics specific subsets zones raster defined various ways generally contiguous. algorithm implemented incurs cost floating point division new value updated (.e., per pixel), reasonably efficient use case. Note GDAL internally uses optimized version Welford's algorithm compute raster statistics described detail Rouault, 2016 (https://github.com/OSGeo/gdal/blob/master/gcore/statistics.txt). class method GDALRaster$getStatistics() GDAL API wrapper computes statistics whole raster band.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"## Constructor rs <- new(RunningStats, na_rm)  ## Methods rs$update(newvalues) rs$get_count() rs$get_mean() rs$get_min() rs$get_max() rs$get_sum() rs$get_var() rs$get_sd() rs$reset()"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"new(RunningStats, na_rm) Returns object class RunningStats. na_rm argument defaults TRUE omitted.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"$update(newvalues) Updates RunningStats object numeric vector newvalues (.e., chunk values data stream). return value, called side effects. $get_count() Returns count values received data stream. $get_mean() Returns mean values received data stream. $get_min() Returns minimum value received data stream. $get_max() Returns maximum value received data stream. $get_sum() Returns sum values received data stream. $get_var() Returns variance values data stream (denominator n - 1). $get_sd() Returns standard deviation values data stream (denominator n - 1). $reset() Clears RunningStats object initialized state (count = 0). return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"set.seed(42)  rs <- new(RunningStats, na_rm=TRUE) chunk <- runif(1000) rs$update(chunk) object.size(rs) #> 704 bytes  rs$get_count() #> [1] 1000 length(chunk) #> [1] 1000  rs$get_mean() #> [1] 0.4882555 mean(chunk) #> [1] 0.4882555  rs$get_min() #> [1] 0.0002388966 min(chunk) #> [1] 0.0002388966  rs$get_max() #> [1] 0.9984908 max(chunk) #> [1] 0.9984908  rs$get_var() #> [1] 0.08493159 var(chunk) #> [1] 0.08493159  rs$get_sd() #> [1] 0.2914302 sd(chunk) #> [1] 0.2914302  # \\donttest{ ## 10^9 values read in 10,000 chunks ## should take under 1 minute on most PC hardware for (i in 1:1e4) {   chunk <- runif(1e5)   rs$update(chunk) } rs$get_count() #> [1] 1000001000 rs$get_mean() #> [1] 0.5000044 rs$get_var() #> [1] 0.08333479  object.size(rs) #> 704 bytes # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"VSIFile provides bindings GDAL VSIVirtualHandle API. Encapsulates VSIVirtualHandle (https://gdal.org/api/cpl_cpp.html#_CPPv416VSIVirtualHandle). API abstracts binary file /O across \"regular\" file systems, URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files. provides analogs several Standard C file /O functions, allowing virtualization disk /O non-file data sources can made appear files.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"filename Character string containing filename open. may file regular local filesystem, filename GDAL /vsiPREFIX/ (see https://gdal.org/user/virtual_file_systems.html). access Character string containing access requested (.e., \"r\", \"r+\", \"w\", \"w+). Defaults \"r\". Binary access always implied \"b\" need included access. options Optional character vector NAME=VALUE pairs specifying filesystem-dependent options (GDAL >= 3.3, see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"object class VSIFile contains pointer VSIVirtualHandle, methods operate file described Details. VSIFile C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"File offsets given R numeric (.e., double type), optionally carrying bit64::integer64 class attribute. returned numeric integer64 class attribute attached. integer64 type signed, maximum file offset supported interface 9223372036854775807 (value bit64::lim.integer64()[2]). virtual file systems allow sequential write, seeks read operations allowed (e.g., AWS S3 files /vsis3/). Starting GDAL 3.2, configuration option can set :   case random-write access possible (involves creation temporary local file, whose location controlled CPL_TMPDIR configuration option). case, setting access \"w+\" may needed writing seek read operations (creating new file, otherwise, \"r+\" open existing file), \"w\" access allow sequential write .","code":"set_config_option(\"CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE\", \"YES\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"usage-see-details-","dir":"Reference","previous_headings":"","what":"Usage (see Details)","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"","code":"## Constructors vf <- new(VSIFile, filename) # specifying access: vf <- new(VSIFile, filename, access) # specifying access and options (both required): vf <- new(VSIFile, filename, access, options)  ## Methods vf$seek(offset, origin) vf$tell() vf$rewind() vf$read(nbytes) vf$write(object) vf$eof() vf$truncate(new_size) vf$flush() vf$ingest(max_size)  vf$close() vf$open() vf$get_filename() vf$get_access() vf$set_access(access)"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"new(VSIFile, filename) Returns object class VSIFile, error raised file handle obtained. new(VSIFile, filename, access) Alternate constructor passing access character string (e.g., \"r\", \"r+\", \"w\", \"w+\"). Returns object class VSIFile open file handle, error raised file handle obtained. new(VSIFile, filename, access, options) Alternate constructor passing access character string, options character vector \"NAME=VALUE\" pairs (arguments required, GDAL >= 3.3 required options support). options argument highly file system dependent. Supported options GDAL 3.9 include: MIME headers Content-Type Content-Encoding supported /vsis3/, /vsigs/, /vsiaz/, /vsiadls/ file systems. DISABLE_READDIR_ON_OPEN=YES/(GDAL >= 3.6) /vsicurl/ network-based file systems. default, directory file listing done, unless YES specified. WRITE_THROUGH=YES (GDAL >= 3.8) Windows regular files set FILE_FLAG_WRITE_THROUGH flag CreateFile() function. mode, data written system cache flushed disk without delay.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"$seek(offset, origin) Seek requested offset file. offset given positive numeric scalar, optionally bit64::integer64 type. origin given character string, one SEEK_SET, SEEK_CUR SEEK_END. Package global constants defined convenience, can passed unquoted. Note offset unsigned type, SEEK_CUR can used positive seek. negative seek needed, use:   Returns 0 success -1 failure. $tell() Returns current file read/write offset bytes beginning file. return value numeric scalar carrying integer64 class attribute. $rewind() Rewind file pointer beginning file. equivalent vf$seek(0, SEEK_SET). return value, called side effect. $read(nbytes) Read nbytes bytes file current offset. Returns vector R raw type, NULL operation fails. $write(object) Write bytes file current offset. object raw vector. Returns number bytes successfully written, numeric scalar carrying integer64 class attribute. See also base R charToRaw() / rawToChar(), convert raw vectors, readBin() / writeBin() read binary data write binary data raw vector. $eof() Test end file. Returns TRUE end--file condition occurred previous read operation. end--file flag cleared successful call $seek(). $truncate(new_size) Truncate/expand file specified new_size, given positive numeric scalar, optionally bit64::integer64 type. Returns 0 success. $flush() Flush pending writes disk. files write update mode file system types applicable, pending output file flushed physical disk. Windows regular files, method nothing, unless VSI_FLUSH=YES configuration option set (file opened WRITE_THROUGH option). Returns 0 success -1 error. $ingest(max_size) Ingest file memory. Read whole content file raw vector. max_size maximum size file allowed, given numeric scalar, optionally bit64::integer64 type. limit, set negative value. Returns raw vector, NULL operation fails. $close() Closes file. file always closed /O completed. Returns 0 success -1 error. $open() method can used re-open file closed, using filename, options set. file opened using access currently set. $set_access() method can called change requested access file closed. return value. error raised file handle obtained. $get_filename() Returns character string containing filename associated VSIFile object (filename originally used create object). $get_access() Returns character string containing access currently set VSIFile object. $set_access(access) Sets requested read/write access VSIFile object, given character string (.e., \"r\", \"r+\", \"w\", \"w+\"). access can changed VSIFile object closed, apply re-opened call $open(). Returns 0 success -1 error.","code":"vf$seek(vf$tell() + negative_offset, SEEK_SET)"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/VSIFile-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class wrapping the GDAL VSIVirtualHandle API for binary file I/O — VSIFile-class","text":"","code":"# The examples make use of the FARSITE LCP format specification at: # https://gdal.org/drivers/raster/lcp.html # An LCP file is a raw format with a 7,316-byte header. The format # specification gives byte offets and data types for fields in the header.  lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\")  # identify a FARSITE v.4 LCP file # function to check if the first three fields have valid data # input is the first twelve raw bytes in the file is_lcp <- function(bytes) {   values <- readBin(bytes, \"integer\", n = 3)   if ((values[1] == 20 || values[1] == 21) &&       (values[2] == 20 || values[2] == 21) &&       (values[3] >= -90 && values[3] <= 90)) {      return(TRUE)   } else {     return(FALSE)   } }  vf <- new(VSIFile, lcp_file) vf$read(12) |> is_lcp() #> [1] TRUE  vf$tell() #> integer64 #> [1] 12  # read the whole file into memory bytes <- vf$ingest(-1) vf$close() #> [1] 0  # write to a VSI in-memory file mem_file <- \"/vsimem/storml_copy.lcp\" vf <- new(VSIFile, mem_file, \"w\") vf$write(bytes) #> integer64 #> [1] 252132  vf$tell() #> integer64 #> [1] 252132 vf$rewind() vf$tell() #> integer64 #> [1] 0  vf$seek(0, SEEK_END) #> [1] 0 (vf$tell() == vsi_stat(lcp_file, \"size\"))  # TRUE #> [1] TRUE  vf$rewind() vf$read(12) |> is_lcp() #> [1] TRUE  # read/write an integer field # write invalid data for the Latitude field and then set back # save the original first vf$seek(8, SEEK_SET) #> [1] 0 lat_orig <- vf$read(4) readBin(lat_orig, \"integer\")  # 46 #> [1] 46 # latitude -99 out of range vf$seek(8, SEEK_SET) #> [1] 0 writeBin(-99L, raw()) |> vf$write() #> integer64 #> [1] 4 vf$rewind() vf$read(12) |> is_lcp()  # FALSE #> [1] FALSE vf$seek(8, SEEK_SET) #> [1] 0 vf$read(4) |> readBin(\"integer\")  # -99 #> [1] -99 # set back to original vf$seek(8, SEEK_SET) #> [1] 0 vf$write(lat_orig) #> integer64 #> [1] 4 vf$rewind() vf$read(12) |> is_lcp()  # TRUE #> [1] TRUE  # read a vector of doubles - xmax, xmin, ymax, ymin # 327766.1, 323476.1, 5105082.0, 5101872.0 vf$seek(4172, SEEK_SET) #> [1] 0 vf$read(32) |> readBin(\"double\", n = 4) #> [1]  327766.1  323476.1 5105082.0 5101872.0  # read a short int, the canopy cover units vf$seek(4232, SEEK_SET) #> [1] 0 vf$read(2) |> readBin(\"integer\", size = 2)  # 1 = \"percent\" #> [1] 1  # read the Description field vf$seek(6804, SEEK_SET) #> [1] 0 bytes <- vf$read(512) rawToChar(bytes) #> [1] \"LCP file created by GDAL.\"  # edit the Description desc <- paste(rawToChar(bytes),               \"Storm Lake AOI,\",               \"Beaverhead-Deerlodge National Forest, Montana.\")  vf$seek(6804, SEEK_SET) #> [1] 0 charToRaw(desc) |> vf$write() #> integer64 #> [1] 88 vf$close() #> [1] 0  # verify the file as a raster dataset ds <- new(GDALRaster, mem_file) ds$info() #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /vsimem/storml_copy.lcp #> Size is 143, 107 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   DESCRIPTION=LCP file created by GDAL. Storm Lake AOI, Beaverhead-Deerlodge National Forest, Montana. #>   LATITUDE=46 #>   LINEAR_UNIT=Meters #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983)  #> Lower Left  (  323476.072, 5101871.983)  #> Upper Right (  327766.072, 5105081.983)  #> Lower Right (  327766.072, 5101871.983)  #> Center      (  325621.072, 5103476.983)  #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #>   Metadata: #>     ELEVATION_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ELEVATION_MAX=3046 #>     ELEVATION_MIN=-9999 #>     ELEVATION_NUM_CLASSES=-1 #>     ELEVATION_UNIT=0 #>     ELEVATION_UNIT_NAME=Meters #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #>   Metadata: #>     SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     SLOPE_MAX=54 #>     SLOPE_MIN=-9999 #>     SLOPE_NUM_CLASSES=53 #>     SLOPE_UNIT=0 #>     SLOPE_UNIT_NAME=Degrees #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #>   Metadata: #>     ASPECT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ASPECT_MAX=359 #>     ASPECT_MIN=-9999 #>     ASPECT_NUM_CLASSES=-1 #>     ASPECT_UNIT=2 #>     ASPECT_UNIT_NAME=Azimuth degrees #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #>   Metadata: #>     FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     FUEL_MODEL_MAX=183 #>     FUEL_MODEL_MIN=-9999 #>     FUEL_MODEL_NUM_CLASSES=12 #>     FUEL_MODEL_OPTION=0 #>     FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed #>     FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183 #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #>   Metadata: #>     CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_COV_MAX=75 #>     CANOPY_COV_MIN=-9999 #>     CANOPY_COV_NUM_CLASSES=8 #>     CANOPY_COV_UNIT=1 #>     CANOPY_COV_UNIT_NAME=Percent #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #>   Metadata: #>     CANOPY_HT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_HT_MAX=390 #>     CANOPY_HT_MIN=-9999 #>     CANOPY_HT_NUM_CLASSES=8 #>     CANOPY_HT_UNIT=3 #>     CANOPY_HT_UNIT_NAME=Meters x 10 #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #>   Metadata: #>     CBH_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBH_MAX=100 #>     CBH_MIN=-9999 #>     CBH_NUM_CLASSES=22 #>     CBH_UNIT=3 #>     CBH_UNIT_NAME=Meters x 10 #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density #>   Metadata: #>     CBD_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBD_MAX=34 #>     CBD_MIN=-9999 #>     CBD_NUM_CLASSES=15 #>     CBD_UNIT=3 #>     CBD_UNIT_NAME=kg/m^3 x 100  # retrieve Description from the metadata # band = 0 for dataset-level metadata, domain = \"\" for default domain ds$getMetadata(band = 0, domain = \"\") #> [1] \"DESCRIPTION=LCP file created by GDAL. Storm Lake AOI, Beaverhead-Deerlodge National Forest, Montana.\" #> [2] \"LATITUDE=46\"                                                                                          #> [3] \"LINEAR_UNIT=Meters\"                                                                                   ds$getMetadataItem(band = 0, mdi_name = \"DESCRIPTION\", domain = \"\") #> [1] \"LCP file created by GDAL. Storm Lake AOI, Beaverhead-Deerlodge National Forest, Montana.\"  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":null,"dir":"Reference","previous_headings":"","what":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"addFilesInZip() create new open existing ZIP file, add one compressed files potentially using seek optimization extension. function basically wrapper CPLAddFileInZip() GDAL Common Portability Library, optionally creates new ZIP file first (CPLCreateZip()). provides subset functionality GDAL sozip command-line utility (https://gdal.org/programs/sozip.html). Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"","code":"addFilesInZip(   zip_file,   add_files,   overwrite = FALSE,   full_paths = TRUE,   sozip_enabled = NULL,   sozip_chunk_size = NULL,   sozip_min_file_size = NULL,   num_threads = NULL,   content_type = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"zip_file Filename ZIP file. created exist overwrite = TRUE. Otherwise append existing file. add_files Character vector one input filenames add. overwrite Logical scalar. Overwrite target zip file already exists. full_paths Logical scalar. default, full path stored (relative current directory). FALSE store just name saved file (drop path). sozip_enabled String. Whether generate SOZip index file. One \"AUTO\" (default), \"YES\" \"\" (see Details). sozip_chunk_size chunk size seek-optimized file. Defaults 32768 bytes. value specified bytes, K M suffix can used respectively specify value kilo-bytes mega-bytes. coerced string. sozip_min_file_size minimum file size decide file seek-optimized, sozip_enabled=\"AUTO\" mode. Defaults 1 MB byte. value specified bytes, K, M G suffix can used respectively specify value kilo-bytes, mega-bytes giga-bytes. coerced string. num_threads Number threads used SOZip generation. Defaults \"ALL_CPUS\" specify integer value (coerced string). content_type String Content-Type value file. stored key-value pair extra field extension 'KV' (0x564b) dedicated storing key-value pair metadata. quiet Logical scalar. TRUE quiet mode, progress messages emitted. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"Seek-Optimized ZIP file (SOZip) contains one compressed files organized annotated SOZip-aware reader can perform fast random access within .zip file (see https://github.com/sozip/sozip-spec). Large compressed files can accessed directly SOZip without prior decompression. .zip file otherwise fully backward compatible. sozip_enabled=\"AUTO\" (default), file seek-optimized size values sozip_min_file_size (default 1 MB) sozip_chunk_size (default 32768). \"YES\" mode, input files seek-optimized. \"\" mode, input files seek-optimized. default can changed CPL_SOZIP_ENABLED configuration option.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"GDAL_NUM_THREADS configuration option can set ALL_CPUS integer value specify number threads use SOZip-compressed files (see set_config_option()). SOZip can validated :   zip_file uses /vsizip/ prefix.","code":"vsi_get_file_metadata(zip_file, domain=\"ZIP\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/addFilesInZip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create/append to a potentially Seek-Optimized ZIP file (SOZip) — addFilesInZip","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") zip_file <- file.path(tempdir(), \"storml_lcp.zip\")  # Requires GDAL >= 3.7 if (as.integer(gdal_version()[2]) >= 3070000) {   addFilesInZip(zip_file, lcp_file, full_paths=FALSE, sozip_enabled=\"YES\",                 num_threads=1)    print(\"Files in zip archive:\")   print(unzip(zip_file, list=TRUE))    # Open with GDAL using Virtual File System handler '/vsizip/'   # see: https://gdal.org/user/virtual_file_systems.html#vsizip-zip-archives   lcp_in_zip <- file.path(\"/vsizip\", zip_file, \"storm_lake.lcp\")   print(\"SOZip metadata:\")   print(vsi_get_file_metadata(lcp_in_zip, domain=\"ZIP\"))    ds <- new(GDALRaster, lcp_in_zip)   ds$info()   ds$close()   DONTSHOW({vsi_unlink(zip_file)}) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"apply_geotransform() applies geotransform coefficients raster coordinates pixel/line space (column/row), converting georeferenced (x/y) coordinates. Wrapper GDALApplyGeoTransform() GDAL API, operating matrix input.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"","code":"apply_geotransform(col_row, gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"col_row Numeric matrix raster column/row (pixel/line) coordinates (two-column data frame coerced numeric matrix). gt Either numeric vector length six containing affine geotransform raster, object class GDALRaster geotransform obtained.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"Numeric matrix geospatial x/y coordinates.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"Bounds checking input coordinates done gt obtained object class GDALRaster. See Note get_pixel_line().","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/apply_geotransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply geotransform (raster column/row to geospatial x/y) — apply_geotransform","text":"","code":"raster_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, raster_file)  # compute some raster coordinates in column/row space set.seed(42) col_coords <- runif(10, min = 0, max = ds$getRasterXSize() - 0.00001) row_coords <- runif(10, min = 0, max = ds$getRasterYSize() - 0.00001) col_row <- cbind(col_coords, row_coords)  # convert to geospatial x/y coordinates gt <- ds$getGeoTransform() apply_geotransform(col_row, gt) #>           [,1]    [,2] #>  [1,] 327400.6 5103613 #>  [2,] 327496.1 5102774 #>  [3,] 324703.6 5102082 #>  [4,] 327038.7 5104262 #>  [5,] 326229.2 5103598 #>  [6,] 325703.0 5102065 #>  [7,] 326636.0 5101942 #>  [8,] 324053.8 5104705 #>  [9,] 326294.6 5103557 #> [10,] 326500.8 5103283  # or, using the class method ds$apply_geotransform(col_row) #>           [,1]    [,2] #>  [1,] 327400.6 5103613 #>  [2,] 327496.1 5102774 #>  [3,] 324703.6 5102082 #>  [4,] 327038.7 5104262 #>  [5,] 326229.2 5103598 #>  [6,] 325703.0 5102065 #>  [7,] 326636.0 5101942 #>  [8,] 324053.8 5104705 #>  [9,] 326294.6 5103557 #> [10,] 326500.8 5103283  # bounds checking col_row <- rbind(col_row, c(ds$getRasterXSize(), ds$getRasterYSize())) ds$apply_geotransform(col_row) #> Warning: 1 coordinates(s) were outside the raster extent, NA returned #>           [,1]    [,2] #>  [1,] 327400.6 5103613 #>  [2,] 327496.1 5102774 #>  [3,] 324703.6 5102082 #>  [4,] 327038.7 5104262 #>  [5,] 326229.2 5103598 #>  [6,] 325703.0 5102065 #>  [7,] 326636.0 5101942 #>  [8,] 324053.8 5104705 #>  [9,] 326294.6 5103557 #> [10,] 326500.8 5103283 #> [11,]       NA      NA  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"autoCreateWarpedVRT() creates warped virtual dataset representing input raster warped target coordinate system. output virtual dataset \"north-\" target coordinate system. GDAL automatically determines bounds resolution output virtual raster large enough include input raster. Wrapper GDALAutoCreateWarpedVRT() GDAL Warper API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"","code":"autoCreateWarpedVRT(   src_ds,   dst_wkt,   resample_alg,   src_wkt = \"\",   max_err = 0,   alpha_band = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"src_ds object class GDALRaster source dataset. dst_wkt WKT string specifying coordinate system convert . empty string (\"\") change coordinate system take place. resample_alg Character string specifying sampling method use. One NearestNeighbour, Bilinear, Cubic, CubicSpline, Lanczos, Average, RMS Mode. src_wkt WKT string specifying coordinate system source raster. empty string read source raster (default). max_err Numeric scalar specifying maximum error measured input pixels allowed approximating transformation (0.0 exact calculations, default). alpha_band Logical scalar, TRUE create alpha band source dataset none. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"object class GDALRaster new virtual dataset. error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"returned dataset associated filename . want write virtual dataset VRT file, use $setFilename() method returned GDALRaster object assign filename closed.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/autoCreateWarpedVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a virtual warped dataset automatically — autoCreateWarpedVRT","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file)  ds2 <- autoCreateWarpedVRT(ds, epsg_to_wkt(5070), \"Bilinear\") ds2$info() #> Driver: VRT/Virtual Raster #> Files: /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> Size is 158, 127 #> Coordinate System is: #> PROJCRS[\"NAD83 / Conus Albers\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"unnamed\", #>         METHOD[\"Albers Equal Area\", #>             ID[\"EPSG\",9822]], #>         PARAMETER[\"Latitude of false origin\",23, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-96, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",29.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     ID[\"EPSG\",5070]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (-1332272.514894900377840,2686786.510187030304223) #> Pixel Size = (30.017093608771937,-30.017093608771937) #> Corner Coordinates: #> Upper Left  (-1332272.515, 2686786.510) (113d17'20.73\"W, 46d 4'32.57\"N) #> Lower Left  (-1332272.515, 2682974.339) (113d16'48.70\"W, 46d 2'30.94\"N) #> Upper Right (-1327529.814, 2686786.510) (113d13'44.00\"W, 46d 5' 0.36\"N) #> Lower Right (-1327529.814, 2682974.339) (113d13'12.07\"W, 46d 2'58.72\"N) #> Center      (-1329901.164, 2684880.425) (113d15'16.38\"W, 46d 3'45.66\"N) #> Band 1 Block=158x127 Type=Int32, ColorInterp=Gray #>   NoData Value=32767 #>   Metadata: #>     RepresentationType=ATHEMATIC  ## set filename before close if a VRT file is needed for the virtual dataset # ds2$setFilename(\"/path/to/file.vrt\")  ds2$close() ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a whole raster band efficiently — bandCopyWholeRaster","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"bandCopyWholeRaster() copies complete raster contents one band another similarly configured band. source destination bands must xsize ysize. bands data type. implements efficient copying, particular \"chunking\" copy substantial blocks. wrapper GDALRasterBandCopyWholeRaster() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"","code":"bandCopyWholeRaster(   src_filename,   src_band,   dst_filename,   dst_band,   options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"src_filename Filename source raster. src_band Band number source raster copied. dst_filename Filename destination raster. dst_band Band number destination raster copy . options Optional list transfer hints vector \"NAME=VALUE\" pairs. currently supported options : \"COMPRESSED=YES\" force alignment target dataset block sizes achieve best compression. \"SKIP_HOLES=YES\" skip chunks contain empty blocks. Empty blocks blocks generally physically present file, read GDAL, contain pixels whose value nodata value set, whose value 0 nodata value set. query done efficient way without reading actual pixel values (implemented raster format driver, otherwise skipped). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"","code":"## copy Landsat data from a single-band file to a new multi-band image b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") dst_file <- file.path(tempdir(), \"sr_multi.tif\") rasterFromRaster(b5_file, dst_file, nbands=7, init=0) #> initializing destination raster... #> done opt <- c(\"COMPRESSED=YES\", \"SKIP_HOLES=YES\") bandCopyWholeRaster(b5_file, 1, dst_file, 5, options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds <- new(GDALRaster, dst_file) ds$getStatistics(band=5, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  7357.000 22458.000 13527.736  2238.489 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"bbox_from_wkt() returns bounding box WKT 2D geometry (e.g., LINE, POLYGON, MULTIPOLYGON).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"","code":"bbox_from_wkt(wkt, extend_x = 0, extend_y = 0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"wkt Character. OGC WKT string simple feature 2D geometry. extend_x Numeric scalar. Distance extend output bounding box directions along x-axis (results xmin = bbox[1] - extend_x, xmax = bbox[3] + extend_x). extend_y Numeric scalar. Distance extend output bounding box directions along y-axis (results ymin = bbox[2] - extend_y, ymax = bbox[4] + extend_y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"Numeric vector length four containing xmin, ymin, xmax, ymax geometry specified wkt (possibly extended values extend_x, extend_y).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of a geometry specified in OGC WKT format — bbox_from_wkt","text":"","code":"bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2 5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5, 325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_from_wkt(bnd, 100, 100) #> [1]  323694.2 5102785.8  326520.0 5105029.4"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounding box intersection / union — bbox_intersect","title":"Bounding box intersection / union — bbox_intersect","text":"bbox_intersect() returns bounding box intersection, bbox_union() returns bounding box union, input either raster file names list bounding boxes. inputs must projected coordinate system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_intersect(x, as_wkt = FALSE)  bbox_union(x, as_wkt = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounding box intersection / union — bbox_intersect","text":"x Either character vector raster file names, list element bounding box numeric vector (xmin, ymin, xmax, ymax). as_wkt Logical. TRUE return bounding box polygon OGC WKT format, FALSE return numeric vector.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounding box intersection / union — bbox_intersect","text":"intersection (bbox_intersect()) union (bbox_union()) inputs. as_wkt = FALSE, numeric vector length four containing xmin, ymin, xmax, ymax. as_wkt = TRUE, character string containing OGC WKT bbox POLYGON.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_list <-list()  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) bbox_list[[1]] <- ds$bbox() ds$close()  b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds <- new(GDALRaster, b5_file) bbox_list[[2]] <- ds$bbox() ds$close()  bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2 5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5, 325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_list[[3]] <- bbox_from_wkt(bnd)  print(bbox_list) #> [[1]] #> [1]  323476.1 5101872.0  327766.1 5105082.0 #>  #> [[2]] #> [1]  323400.9 5101815.8  327870.9 5105175.8 #>  #> [[3]] #> [1]  323794.2 5102885.8  326420.0 5104929.4 #>  bbox_intersect(bbox_list) #> [1]  323794.2 5102885.8  326420.0 5104929.4 bbox_union(bbox_list) #> [1]  323400.9 5101815.8  327870.9 5105175.8"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"bbox_to_wkt() returns WKT POLYGON string given bounding box. Requires GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"","code":"bbox_to_wkt(bbox, extend_x = 0, extend_y = 0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"bbox Numeric vector length four containing xmin, ymin, xmax, ymax. extend_x Numeric scalar. Distance units bbox extend rectangle directions along x-axis (results xmin = bbox[1] - extend_x, xmax = bbox[3] + extend_x). extend_y Numeric scalar. Distance units bbox extend rectangle directions along y-axis (results ymin = bbox[2] - extend_y, ymax = bbox[4] + extend_y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"Character string OGC WKT polygon. NA returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a bounding box to POLYGON in OGC WKT format — bbox_to_wkt","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) bbox_to_wkt(ds$bbox()) #> [1] \"POLYGON ((323476.071970863 5101871.98303138,327766.071970863 5101871.98303138,327766.071970863 5105081.98303138,323476.071970863 5105081.98303138,323476.071970863 5101871.98303138))\" ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a bounding box to a different projection — bbox_transform","title":"Transform a bounding box to a different projection — bbox_transform","text":"bbox_transform() convenience function :","code":"bbox_to_wkt(bbox) |>   g_transform(srs_from, srs_to) |>   bbox_from_wkt()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a bounding box to a different projection — bbox_transform","text":"","code":"bbox_transform(bbox, srs_from, srs_to)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a bounding box to a different projection — bbox_transform","text":"bbox Numeric vector length four containing bounding box (xmin, ymin, xmax, ymax) transform. srs_from Character string OGC WKT format specifying spatial reference system bbox. srs_to Character string OGC WKT format specifying target spatial reference system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a bounding box to a different projection — bbox_transform","text":"Numeric vector length four containing transformed bounding box (xmin, ymin, xmax, ymax).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a bounding box to a different projection — bbox_transform","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 bbox_transform(ds$bbox(), ds$getProjection(), epsg_to_wkt(4326)) #> [1] -113.28289   46.04764 -113.22629   46.07760 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"buildRAT() reads pixels input raster obtain set unique values counts. result returned data frame suitable use class method GDALRaster$setDefaultRAT(). returned data frame might modified setting Raster Attribute Table dataset, example, adding columns containing class names, color values, information (see Details). optional input data frame containing attributes may given, case buildRAT() attempt join additional columns automatically assign appropriate metadata output data frame (.e., assign R attributes data frame columns define usage GDAL Raster Attribute Table).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"","code":"buildRAT(   raster,   band = 1L,   col_names = c(\"VALUE\", \"COUNT\"),   table_type = \"athematic\",   na_value = NULL,   join_df = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"raster Either GDALRaster object, character string containing file name raster dataset open. band Integer scalar, band number read (default 1L). col_names Character vector length two containing names use column 1 (pixel values) column 2 (pixel counts) output data frame (defaults c(\"VALUE\", \"COUNT\")). table_type Character string describing type attribute table. One either \"thematic\", \"athematic\" continuous data (default). na_value Numeric scalar. set unique pixel values NA, recoded na_value returned data frame. NULL (default), NA recoded. join_df Optional data frame joining additional attributes. Must column unique values name col_names[1] (\"VALUE\" default). quiet Logical scalar. TRUE``, progress bar displayed. Defaults FALSE“.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"data frame least two columns containing set unique pixel values counts. columns attribute \"GFU\" set \"MinMax\" values, \"PixelCount\" counts. join_df given, returned data frame additional columns result merge(). \"GFU\" attribute additional columns assigned automatically based column names (case-insensitive matching, see Details). returned data frame attribute \"GDALRATTableType\" set table_type.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"GDAL Raster Attribute Table (RAT) provides attribute information pixel values. Raster attribute tables can used represent histograms, color tables, classification information. row table applies either single pixel value range values, might attributes histogram count value (range), color pixels value (range) displayed, names classes, various information. column raster attribute table name, type (integer, double, string), GDALRATFieldUsage. usage distinguishes columns particular understood purposes (color, histogram count, class name), columns purposes understood library (long labels, ancillary attributes, etc). general case, row field indicating minimum pixel value falling category, field indicating maximum pixel value. GDAL API, indicated usage values GFU_Min GFU_Max. common case row discrete pixel value, single column usage GFU_MinMax used instead. R, table represented data frame column attribute \"GFU\" containing field usage string, e.g., \"Max\", \"Min\" \"MinMax\" (case-sensitive). full set possible field usage descriptors : buildRAT() assigns GFU \"MinMax\" column pixel values (named \"VALUE\" default) GFU \"PixelCount\" column counts (named \"COUNT\" default). join_df given, additional columns result joining GFU assigned automatically based column names (ignoring case). First, additional column names checked containing string \"name\" (e.g., \"classname\", \"TypeName\", \"EVT_NAME\", etc). first matching column () assigned GFU \"Name\" (=GFU_Name, field usage descriptor class names). Next, columns named \"R\" \"Red\" assigned GFU \"Red\", columns named \"G\" \"Green\" assigned GFU \"Green\", columns named \"B\" \"Blue\" assigned GFU \"Blue\", columns named \"\" \"Alpha\" assigned GFU \"Alpha\". Finally, remaining columns assigned GFU assigned \"Generic\". variation RAT, categories equal size regularly spaced, categorization can determined knowing value categories start size category. called \"Linear Binning\" information kept specially raster attribute table whole. R, RAT uses linear binning following attributes set data frame: attribute \"Row0Min\" = numeric lower bound (pixel value) first category, attribute \"BinSize\" = numeric width category (pixel value units). buildRAT() create tables linear binning, one created manually based specifications , applied raster class method GDALRaster$setDefaultRAT(). raster attribute table thematic athematic (continuous). R, defined attribute data frame named \"GDALRATTableType\" value either \"thematic\" \"athematic\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"full raster scanned. na_value specified, NA pixel value (present) recoded output data frame. may implications joining data (NA match), using returned data frame set default RAT dataset (NA interpreted value R uses internally represent type, e.g., -2147483648 NA_integer_). cases, removing row output data frame value NA, rather recoding, may desirable (.e., removing manually side effect joining via merge(), example). Users consider appropriate particular case.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildRAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a GDAL Raster Attribute Table with VALUE, COUNT — buildRAT","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") # make a copy to modify f <- file.path(tempdir(), \"storml_evt_tmp.tif\") file.copy(evt_file,  f) #> [1] TRUE  ds <- new(GDALRaster, f, read_only=FALSE) ds$getDefaultRAT(band=1) # NULL #> NULL  # get the full attribute table for LANDFIRE EVT from the CSV file evt_csv <- system.file(\"extdata/LF20_EVT_220.csv\", package=\"gdalraster\") evt_df <- read.csv(evt_csv) nrow(evt_df) #> [1] 860 head(evt_df) #>   VALUE                                            EVT_NAME EVT_LF EVT_PHYS   R #> 1 -9999                                         Fill-NoData   <NA>     <NA> 255 #> 2  7008                          North Pacific Oak Woodland   Tree Hardwood 203 #> 3  7009 Northwestern Great Plains Aspen Forest and Parkland   Tree Hardwood 192 #> 4  7010       Northern Rocky Mountain Western Larch Savanna   Tree  Conifer 180 #> 5  7011            Rocky Mountain Aspen Forest and Woodland   Tree Hardwood 192 #> 6  7012       Rocky Mountain Bigtooth Maple Ravine Woodland   Tree Hardwood 171 #>     G   B      RED GREEN     BLUE #> 1 255 255 1.000000     1 1.000000 #> 2 255 171 0.796078     1 0.670588 #> 3 255 138 0.752941     1 0.541176 #> 4 255 148 0.705882     1 0.580392 #> 5 255 138 0.752941     1 0.541176 #> 6 255 138 0.670588     1 0.541176 evt_df <- evt_df[,1:7]  tbl <- buildRAT(ds,                 table_type = \"thematic\",                 na_value = -9999,                 join_df = evt_df) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done.  nrow(tbl) #> [1] 24 head(tbl) #>   VALUE COUNT                                                          EVT_NAME #> 1 -9999   876                                                       Fill-NoData #> 2  7011    28                          Rocky Mountain Aspen Forest and Woodland #> 3  7046  4564           Northern Rocky Mountain Subalpine Woodland and Parkland #> 4  7050   570                              Rocky Mountain Lodgepole Pine Forest #> 5  7055   889 Rocky Mountain Subalpine Dry-Mesic Spruce-Fir Forest and Woodland #> 6  7056   304 Rocky Mountain Subalpine Mesic-Wet Spruce-Fir Forest and Woodland #>   EVT_LF EVT_PHYS   R   G   B #> 1   <NA>     <NA> 255 255 255 #> 2   Tree Hardwood 192 255 138 #> 3   Tree  Conifer 191 255 233 #> 4   Tree  Conifer 163 240 219 #> 5   Tree  Conifer 236 252 204 #> 6   Tree  Conifer 236 252 204  # attributes on the data frame and its columns define usage in a GDAL RAT attributes(tbl) #> $names #> [1] \"VALUE\"    \"COUNT\"    \"EVT_NAME\" \"EVT_LF\"   \"EVT_PHYS\" \"R\"        \"G\"        #> [8] \"B\"        #>  #> $row.names #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>  #> $class #> [1] \"data.frame\" #>  #> $GDALRATTableType #> [1] \"thematic\" #>  attributes(tbl$VALUE) #> $GFU #> [1] \"MinMax\" #>  attributes(tbl$COUNT) #> $GFU #> [1] \"PixelCount\" #>  attributes(tbl$EVT_NAME) #> $GFU #> [1] \"Name\" #>  attributes(tbl$EVT_LF) #> $GFU #> [1] \"Generic\" #>  attributes(tbl$EVT_PHYS) #> $GFU #> [1] \"Generic\" #>  attributes(tbl$R) #> $GFU #> [1] \"Red\" #>  attributes(tbl$G) #> $GFU #> [1] \"Green\" #>  attributes(tbl$B) #> $GFU #> [1] \"Blue\" #>   ds$setDefaultRAT(band=1, tbl) #> [1] TRUE ds$flushCache()  tbl2 <- ds$getDefaultRAT(band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl2) #> [1] 24 head(tbl2) #>   VALUE COUNT                                                          EVT_NAME #> 1 -9999   876                                                       Fill-NoData #> 2  7011    28                          Rocky Mountain Aspen Forest and Woodland #> 3  7046  4564           Northern Rocky Mountain Subalpine Woodland and Parkland #> 4  7050   570                              Rocky Mountain Lodgepole Pine Forest #> 5  7055   889 Rocky Mountain Subalpine Dry-Mesic Spruce-Fir Forest and Woodland #> 6  7056   304 Rocky Mountain Subalpine Mesic-Wet Spruce-Fir Forest and Woodland #>   EVT_LF EVT_PHYS   R   G   B #> 1     NA       NA 255 255 255 #> 2   Tree Hardwood 192 255 138 #> 3   Tree  Conifer 191 255 233 #> 4   Tree  Conifer 163 240 219 #> 5   Tree  Conifer 236 252 204 #> 6   Tree  Conifer 236 252 204  ds$close()  # Display evt_gt <- displayRAT(tbl2, title = \"Storm Lake EVT Raster Attribute Table\") class(evt_gt)  # an object of class \"gt_tbl\" from package gt #> [1] \"gt_tbl\" \"list\"   # To show the table: # evt_gt # or simply call `displayRAT()` as above but without assignment # `vignette(\"raster-attribute-tables\")` has example output"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a GDAL virtual raster from a list of datasets — buildVRT","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"buildVRT() wrapper gdalbuildvrt command-line utility building VRT (Virtual Dataset) mosaic list input GDAL datasets (see https://gdal.org/programs/gdalbuildvrt.html).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"","code":"buildVRT(vrt_filename, input_rasters, cl_arg = NULL, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"vrt_filename Character string. Filename output VRT. input_rasters Character vector input raster filenames. cl_arg Optional character vector command-line arguments gdalbuildvrt. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"Several command-line options described GDAL documentation URL . default, input files considered tiles larger mosaic VRT file many bands one input files. Alternatively, -separate argument can used put input raster separate band VRT dataset. amount checks done assure files put resulting VRT similar characteristics: number bands, projection, color interpretation.... , files match common characteristics skipped. (true default mode virtual mosaicing, using -separate option). virtual mosaic, spatial overlap input rasters order files appearing list sources matter: files listed end ones data fetched. Note nodata taken account potentially fetch data less priority datasets.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/buildVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a GDAL virtual raster from a list of datasets — buildVRT","text":"","code":"# build a virtual 3-band RGB raster from individual Landsat band files b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b6_file <- system.file(\"extdata/sr_b6_20200829.tif\", package=\"gdalraster\") band_files <- c(b6_file, b5_file, b4_file) vrt_file <- file.path(tempdir(), \"storml_b6_b5_b4.vrt\") buildVRT(vrt_file, band_files, cl_arg = \"-separate\") #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds <- new(GDALRaster, vrt_file) ds$getRasterCount() #> [1] 3 plot_raster(ds, nbands=3, main=\"Landsat 6-5-4 (vegetative analysis)\")  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster calculation — calc","title":"Raster calculation — calc","text":"calc() evaluates R expression pixel raster layer stack layers. layer defined raster filename, band number, variable name use R expression. specified, band defaults 1 input raster. Variable names default LETTERS specified ((layer 1), B (layer 2), ...). input layers must extent cell size. projection read first raster list inputs. Individual pixel coordinates also available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude. Multiband output supported gdalraster 1.11.0.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster calculation — calc","text":"","code":"calc(   expr,   rasterfiles,   bands = NULL,   var.names = NULL,   dstfile = tempfile(\"rastcalc\", fileext = \".tif\"),   fmt = NULL,   dtName = \"Int16\",   out_band = NULL,   options = NULL,   nodata_value = NULL,   setRasterNodataValue = FALSE,   usePixelLonLat = NULL,   write_mode = \"safe\",   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster calculation — calc","text":"expr R expression character string (e.g., \"+ B\"). rasterfiles Character vector source raster filenames. bands Integer vector band numbers use raster layer. var.names Character vector variable names use raster layer. dstfile Character filename output raster. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename specified. dtName Character name output data type (e.g., Byte, Int16, UInt16, Int32, UInt32, Float32). out_band Integer band number(s) dstfile writing output. Defaults 1. Multiband output supported gdalraster 1.11.0, case out_band vector band numbers. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). nodata_value Numeric value assign expr returns NA. setRasterNodataValue Logical. TRUE attempt set raster format nodata value nodata_value, FALSE set raster nodata value. usePixelLonLat argument deprecated removed future version. Variable names pixelLon pixelLat can used expr, pixel x/y coordinates inverse projected longitude/latitude (adds computation time). write_mode Character. Name file write mode output. One : safe - execution stops dstfile already exists (output written) overwrite - dstfile exists overwritten new file update - dstfile exists, attempt open update mode write output out_band quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster calculation — calc","text":"Returns output filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster calculation — calc","text":"variables expr vectors length raster xsize (row vectors input raster layer(s)). expression return vector also length raster xsize (output row). Four special variable names available expr: pixelX pixelY provide pixel center coordinates projection units. pixelLon pixelLat can also used, case pixel x/y coordinates inverse projected longitude/latitude (geographic coordinate system used input projection, read first input raster). Note inverse projection adds computation time. refer specific bands multi-band input file, repeat filename rasterfiles specify corresponding band numbers bands, along optional variable names var.names, example, Output written dstfile. update file already exists, set write_mode = \"update\" set out_band existing band number(s) dstfile (new bands created dstfile). write multiband output, expr must return vector values interleaved band. equivalent , can also returned , matrix m nrow(m) equal length() input vector, ncol(m) equal number output bands. matrix form, column contains vector output values band. length(m) must equal length() input vector multiplied length(out_band). dimensions described assumed read return value expr.","code":"rasterfiles = c(\"multiband.tif\", \"multiband.tif\") bands = c(4, 5) var.names = c(\"B4\", \"B5\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster calculation — calc","text":"","code":"## Using pixel longitude/latitude  # Hopkins bioclimatic index (HI) as described in: # Bechtold, 2004, West. J. Appl. For. 19(4):245-251. # Integrates elevation, latitude and longitude into an index of the # phenological occurrence of springtime. Here it is relativized to # mean values for an eight-state region in the western US. # Positive HI means spring is delayed by that number of days relative # to the reference position, while negative values indicate spring is # advanced. The original equation had elevation units as feet, so # converting m to ft in `expr`.  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  # expression to calculate HI expr <- \"round( ((ELEV_M * 3.281 - 5449) / 100) +                 ((pixelLat - 42.16) * 4) +                 ((-116.39 - pixelLon) * 1.25) )\"  # calc() writes to a tempfile by default hi_file <- calc(expr = expr,                 rasterfiles = elev_file,                 var.names = \"ELEV_M\",                 dtName = \"Int16\",                 nodata_value = -32767,                 setRasterNodataValue = TRUE) #> calculating from 1 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmprS3Ajq/rastcalc1d4e5527b72e.tif  ds <- new(GDALRaster, hi_file) # min, max, mean, sd ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 37.000000 57.000000 44.992721  4.370487 ds$close()   ## Calculate normalized difference vegetation index (NDVI)  # Landast band 4 (red) and band 5 (near infrared): b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\")  expr <- \"((B5 * 0.0000275 - 0.2) - (B4 * 0.0000275 - 0.2)) /          ((B5 * 0.0000275 - 0.2) + (B4 * 0.0000275 - 0.2))\" ndvi_file <- calc(expr = expr,                   rasterfiles = c(b4_file, b5_file),                   var.names = c(\"B4\", \"B5\"),                   dtName = \"Float32\",                   nodata_value = -32767,                   setRasterNodataValue = TRUE) #> calculating from 2 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmprS3Ajq/rastcalc1d4e61eb02c.tif  ds <- new(GDALRaster, ndvi_file) ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] -0.8182735  0.8522529  0.4707456  0.2269492 ds$close()   ## Reclassify a variable by rule set  # Combine two raster layers and look for specific combinations. Then # recode to a new value by rule set. # # Based on example in: #   Stratton, R.D. 2009. Guidebook on LANDFIRE fuels data acquisition, #   critique, modification, maintenance, and model calibration. #   Gen. Tech. Rep. RMRS-GTR-220. U.S. Department of Agriculture, #   Forest Service, Rocky Mountain Research Station. 54 p. # Context: Refine national-scale fuels data to improve fire simulation #   results in localized applications. # Issue: Areas with steep slopes (40+ degrees) were mapped as #   GR1 (101; short, sparse dry climate grass) and #   GR2 (102; low load, dry climate grass) but were not carrying fire. # Resolution: After viewing these areas in Google Earth, #   NB9 (99; bare ground) was selected as the replacement fuel model.  # look for combinations of slope >= 40 and FBFM 101 or 102 lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) var.names <- c(\"SLP\", \"FBFM\") bands <- c(2, 4) tbl <- combine(rasterfiles, var.names, bands) #> combining 2 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl) #> [1] 449 tbl_subset <- subset(tbl, SLP >= 40 & FBFM %in% c(101,102)) print(tbl_subset)       # twelve combinations meet the criteria #>     cmbid count SLP FBFM #> 8     423     2  44  102 #> 10    421     1  49  102 #> 13    409    15  41  102 #> 37    365     1  44  101 #> 45    420     3  43  102 #> 93    283    17  40  101 #> 160   417     4  42  101 #> 225   397    11  42  102 #> 338   328    16  40  102 #> 346   338    10  41  101 #> 364   418     3  47  102 #> 408   341     2  43  101 sum(tbl_subset$count)   # 85 total pixels #> [1] 85  # recode these pixels to 99 (bare ground) # the LCP driver does not support in-place write so make a copy as GTiff tif_file <- file.path(tempdir(), \"storml_lndscp.tif\") createCopy(\"GTiff\", tif_file, lcp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] TRUE  expr <- \"ifelse( SLP >= 40 & FBFM %in% c(101,102), 99, FBFM)\" calc(expr = expr,      rasterfiles = c(lcp_file, lcp_file),      bands = c(2, 4),      var.names = c(\"SLP\", \"FBFM\"),      dstfile = tif_file,      out_band = 4,      write_mode = \"update\") #> calculating from 2 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmprS3Ajq/storml_lndscp.tif  # verify the ouput rasterfiles <- c(tif_file, tif_file) tbl <- combine(rasterfiles, var.names, bands) #> combining 2 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. tbl_subset <- subset(tbl, SLP >= 40 & FBFM %in% c(101,102)) print(tbl_subset) #> [1] cmbid count SLP   FBFM  #> <0 rows> (or 0-length row.names) sum(tbl_subset$count) #> [1] 0  # if LCP file format is needed: # createCopy(\"LCP\", \"storml_edited.lcp\", tif_file)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster overlay for unique combinations — combine","title":"Raster overlay for unique combinations — combine","text":"combine() overlays multiple rasters unique ID assigned unique combination input values. input raster layers typically integer data types (floating point coerced integer truncation), must projection, extent cell size. Pixel counts unique combination obtained, combination IDs optionally written output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster overlay for unique combinations — combine","text":"","code":"combine(   rasterfiles,   var.names = NULL,   bands = NULL,   dstfile = NULL,   fmt = NULL,   dtName = \"UInt32\",   options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster overlay for unique combinations — combine","text":"rasterfiles Character vector raster filenames combine. var.names Character vector length(rasterfiles) containing variable names raster layer. Defaults assigned var.names omitted. bands Numeric vector length(rasterfiles) containing band number use raster rasterfiles. Band 1 used input raster bands specified. dstfile Character. Optional output raster filename writing per-pixel combination IDs. output raster created (overwritten already exists). fmt Character. Output raster format name (e.g., \"GTiff\" \"HFA\"). dtName Character. Output raster data type name. Combination IDs sequential integers starting 1. data type output raster large enough accommodate potential number unique combinations input values (e.g., \"UInt16\" default \"UInt32\"). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). quiet Logical scalar. TRUE, progress bar messages suppressed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster overlay for unique combinations — combine","text":"data frame column cmbid containing combination IDs, column count containing pixel counts combination, length(rasterfiles) columns named var.names containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster overlay for unique combinations — combine","text":"specify input raster layers bands multi-band raster file, repeat filename rasterfiles provide corresponding band numbers bands. example: rasterToVRT() provides options virtual clipping, resampling pixel alignment, may helpful input rasters already aligned common extent cell size. output raster combination IDs written, user verify number combinations obtained exceed range output data type. Combination IDs sequential integers starting 1. Typical output data types unsigned types: Byte (0 255), UInt16 (0 65,535) UInt32 (default, 0 4,294,967,295).","code":"rasterfiles <- c(\"multi-band.tif\", \"multi-band.tif\", \"other.tif\") bands <- c(4, 5, 1) var.names <- c(\"multi_b4\", \"multi_b5\", \"other\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster overlay for unique combinations — combine","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\") evh_file <- system.file(\"extdata/storml_evh.tif\", package=\"gdalraster\") rasterfiles <- c(evt_file, evc_file, evh_file) var.names <- c(\"veg_type\", \"veg_cov\", \"veg_ht\") tbl <- combine(rasterfiles, var.names) #> combining 3 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(tbl) #> [1] 2083 tbl <- tbl[order(-tbl$count),] head(tbl, n = 20) #>      cmbid count veg_type veg_cov veg_ht #> 1345   115  2277     9016     100    100 #> 1131    19  1213     9018     100    100 #> 1410     1   876       NA      NA     NA #> 873    429   397     7292      11     11 #> 1745   116   209     9016      31     31 #> 1181     7   142     7046     159    115 #> 1108     8   112     7046     159    116 #> 1538    26    99     7046     159    114 #> 1724    75    78     7126     243    210 #> 1132   844    67     9018      31     31 #> 779    186    54     7046     110    108 #> 823    344    53     7126     243    209 #> 1213   146    47     7046     159    117 #> 808     42    44     7050     162    116 #> 645     15    39     7046     149    114 #> 923    821    37     7046     110    107 #> 1594   603    37     7126     243    211 #> 1273     2    36     7046     110    106 #> 1305   108    36     7126     243    208 #> 1447    68    36     7046     159    113  # combine two bands from a multi-band file and write the combination IDs # to an output raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) bands <- c(4, 5) var.names <- c(\"fbfm\", \"tree_cov\") cmb_file <- file.path(tempdir(), \"fbfm_cov_cmbid.tif\") opt <- c(\"COMPRESS=LZW\") tbl <- combine(rasterfiles, var.names, bands, cmb_file, options = opt) #> combining 2 rasters... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(tbl) #>   cmbid count fbfm tree_cov #> 1    26    98  122       25 #> 2    24   397   98        0 #> 3    23    59  162       55 #> 4    25    14  183        0 #> 5    22    65  183       35 #> 6    19    34  162       75 ds <- new(GDALRaster, cmb_file) ds$info() #> Driver: GTiff/GeoTIFF #> Files: /tmp/RtmprS3Ajq/fbfm_cov_cmbid.tif #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"North America - between 114°W and 108°W - onshore and offshore. Canada - Alberta; Northwest Territories; Nunavut; Saskatchewan. United States (USA) - Arizona; Colorado; Idaho; Montana; New Mexico; Utah; Wyoming.\"], #>         BBOX[31.33,-114,84,-108]], #>     ID[\"EPSG\",26912]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   AREA_OR_POINT=Area #> Image Structure Metadata: #>   COMPRESSION=LZW #>   INTERLEAVE=BAND #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x14 Type=UInt32, ColorInterp=Gray ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy the files of a dataset — copyDatasetFiles","title":"Copy the files of a dataset — copyDatasetFiles","text":"copyDatasetFiles() copies files associated dataset. Wrapper GDALCopyDatasetFiles() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy the files of a dataset — copyDatasetFiles","text":"","code":"copyDatasetFiles(new_filename, old_filename, format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy the files of a dataset — copyDatasetFiles","text":"new_filename New name dataset (copied ). old_filename Old name dataset (copied ). format Raster format short name (e.g., \"GTiff\"). set empty string \"\" (default), attempt guess raster format old_filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy the files of a dataset — copyDatasetFiles","text":"Logical TRUE error FALSE failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Copy the files of a dataset — copyDatasetFiles","text":"format set empty string \"\" (default) function try identify driver old_filename. done internally GDAL invoking Identify method registered GDALDriver turn. first driver successful identifies file name returned. error raised format determined passed file name.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/copyDatasetFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy the files of a dataset — copyDatasetFiles","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file) ds$getFileList() #> [1] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp\" #> [2] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj\" ds$close()  lcp_tmp <- file.path(tempdir(), \"storm_lake_copy.lcp\") copyDatasetFiles(lcp_tmp, lcp_file) #> [1] TRUE ds_copy <- new(GDALRaster, lcp_tmp) ds_copy$getFileList() #> [1] \"/tmp/RtmprS3Ajq/storm_lake_copy.lcp\" \"/tmp/RtmprS3Ajq/storm_lake_copy.prj\" ds_copy$close()  deleteDataset(lcp_tmp) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new uninitialized raster — create","title":"Create a new uninitialized raster — create","text":"create() makes empty raster specified format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new uninitialized raster — create","text":"","code":"create(   format,   dst_filename,   xsize,   ysize,   nbands,   dataType,   options = NULL,   return_obj = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new uninitialized raster — create","text":"format Character string giving raster format short name (e.g., \"GTiff\"). dst_filename Character string giving filename create. xsize Integer width raster pixels. ysize Integer height raster pixels. nbands Integer number bands. dataType Character string containing data type name. (e.g., common data types include Byte, Int16, UInt16, Int32, Float32). options Optional list format-specific creation options character vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset. return_obj Logical scalar. TRUE, object class GDALRaster opened newly created dataset returned, otherwise returns logical value. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new uninitialized raster — create","text":"default, returns logical value indicating success (invisible TRUE, output written dst_filename). error raised operation fails. object class GDALRaster opened output dataset returned return_obj = TRUE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a new uninitialized raster — create","text":"dst_filename may empty string (\"\") format = \"MEM\" return_obj = TRUE create -memory Raster (https://gdal.org/drivers/raster/mem.html).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new uninitialized raster — create","text":"","code":"new_file <- file.path(tempdir(), \"newdata.tif\") ds <- create(format=\"GTiff\",              dst_filename = new_file,              xsize = 143,              ysize = 107,              nbands = 1,              dataType = \"Int16\",              return_obj=TRUE)  # EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE  gt <- c(323476, 30, 0, 5105082, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE  ds$setNoDataValue(band = 1, -9999) #> [1] TRUE ds$fillRaster(band = 1, -9999, 0)  # ...  # close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a color ramp — createColorRamp","title":"Create a color ramp — createColorRamp","text":"createColorRamp() wrapper GDALCreateColorRamp() GDAL API. automatically creates color ramp one color entry another. Output integer matrix color table format use GDALRaster$setColorTable().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a color ramp — createColorRamp","text":"","code":"createColorRamp(   start_index,   start_color,   end_index,   end_color,   palette_interp = \"RGB\" )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a color ramp — createColorRamp","text":"start_index Integer start index (raster value). start_color Integer vector length three four. color entry value start ramp (e.g., RGB values). end_index Integer end index (raster value). end_color Integer vector length three four. color entry value end ramp (e.g., RGB values). palette_interp One \"Gray\", \"RGB\" (default), \"CMYK\" \"HLS\" describing interpretation start_color end_color values (see GDAL Color Table).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a color ramp — createColorRamp","text":"Integer matrix five columns containing color ramp start_index end_index, raster index values column 1 color entries columns 2:5).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a color ramp — createColorRamp","text":"createColorRamp() called several times, using rbind() combine multiple ramps color table. Possible duplicate rows resulting table problem used GDALRaster$setColorTable() (.e., end_color one ramp start_color next ramp).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a color ramp — createColorRamp","text":"","code":"# create a color ramp for tree canopy cover percent # band 5 of an LCP file contains canopy cover lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file) ds$getDescription(band=5) #> [1] \"Canopy cover\" ds$getMetadata(band=5, domain=\"\") #> [1] \"CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"CANOPY_COV_MAX=75\"                                                                                                                          #> [3] \"CANOPY_COV_MIN=-9999\"                                                                                                                       #> [4] \"CANOPY_COV_NUM_CLASSES=8\"                                                                                                                   #> [5] \"CANOPY_COV_UNIT=1\"                                                                                                                          #> [6] \"CANOPY_COV_UNIT_NAME=Percent\"                                                                                                               ds$close()  # create a GTiff file with Byte data type for the canopy cover band # recode nodata -9999 to 255 tcc_file <- calc(expr = \"ifelse(CANCOV == -9999, 255, CANCOV)\",                  rasterfiles = lcp_file,                  bands = 5,                  var.names = \"CANCOV\",                  fmt = \"GTiff\",                  dtName = \"Byte\",                  nodata_value = 255,                  setRasterNodataValue = TRUE) #> calculating from 1 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmprS3Ajq/rastcalc1d4e6d97d494.tif  ds_tcc <- new(GDALRaster, tcc_file, read_only=FALSE)  # create a color ramp from 0 to 100 and set as the color table colors <- createColorRamp(start_index = 0,                           start_color = c(211, 211, 211),                           end_index = 100,                           end_color = c(0, 100, 0))  print(colors) #>        value red green blue alpha #>   [1,]     0 211   211  211   255 #>   [2,]     1 208   209  208   255 #>   [3,]     2 206   208  206   255 #>   [4,]     3 204   207  204   255 #>   [5,]     4 202   206  202   255 #>   [6,]     5 200   205  200   255 #>   [7,]     6 198   204  198   255 #>   [8,]     7 196   203  196   255 #>   [9,]     8 194   202  194   255 #>  [10,]     9 192   201  192   255 #>  [11,]    10 189   199  189   255 #>  [12,]    11 187   198  187   255 #>  [13,]    12 185   197  185   255 #>  [14,]    13 183   196  183   255 #>  [15,]    14 181   195  181   255 #>  [16,]    15 179   194  179   255 #>  [17,]    16 177   193  177   255 #>  [18,]    17 175   192  175   255 #>  [19,]    18 173   191  173   255 #>  [20,]    19 170   189  170   255 #>  [21,]    20 168   188  168   255 #>  [22,]    21 166   187  166   255 #>  [23,]    22 164   186  164   255 #>  [24,]    23 162   185  162   255 #>  [25,]    24 160   184  160   255 #>  [26,]    25 158   183  158   255 #>  [27,]    26 156   182  156   255 #>  [28,]    27 154   181  154   255 #>  [29,]    28 151   179  151   255 #>  [30,]    29 149   178  149   255 #>  [31,]    30 147   177  147   255 #>  [32,]    31 145   176  145   255 #>  [33,]    32 143   175  143   255 #>  [34,]    33 141   174  141   255 #>  [35,]    34 139   173  139   255 #>  [36,]    35 137   172  137   255 #>  [37,]    36 135   171  135   255 #>  [38,]    37 132   169  132   255 #>  [39,]    38 130   168  130   255 #>  [40,]    39 128   167  128   255 #>  [41,]    40 126   166  126   255 #>  [42,]    41 124   165  124   255 #>  [43,]    42 122   164  122   255 #>  [44,]    43 120   163  120   255 #>  [45,]    44 118   162  118   255 #>  [46,]    45 116   161  116   255 #>  [47,]    46 113   159  113   255 #>  [48,]    47 111   158  111   255 #>  [49,]    48 109   157  109   255 #>  [50,]    49 107   156  107   255 #>  [51,]    50 105   155  105   255 #>  [52,]    51 103   154  103   255 #>  [53,]    52 101   153  101   255 #>  [54,]    53  99   152   99   255 #>  [55,]    54  97   151   97   255 #>  [56,]    55  94   149   94   255 #>  [57,]    56  92   148   92   255 #>  [58,]    57  90   147   90   255 #>  [59,]    58  88   146   88   255 #>  [60,]    59  86   145   86   255 #>  [61,]    60  84   144   84   255 #>  [62,]    61  82   143   82   255 #>  [63,]    62  80   142   80   255 #>  [64,]    63  78   141   78   255 #>  [65,]    64  75   139   75   255 #>  [66,]    65  73   138   73   255 #>  [67,]    66  71   137   71   255 #>  [68,]    67  69   136   69   255 #>  [69,]    68  67   135   67   255 #>  [70,]    69  65   134   65   255 #>  [71,]    70  63   133   63   255 #>  [72,]    71  61   132   61   255 #>  [73,]    72  59   131   59   255 #>  [74,]    73  56   129   56   255 #>  [75,]    74  54   128   54   255 #>  [76,]    75  52   127   52   255 #>  [77,]    76  50   126   50   255 #>  [78,]    77  48   125   48   255 #>  [79,]    78  46   124   46   255 #>  [80,]    79  44   123   44   255 #>  [81,]    80  42   122   42   255 #>  [82,]    81  40   121   40   255 #>  [83,]    82  37   119   37   255 #>  [84,]    83  35   118   35   255 #>  [85,]    84  33   117   33   255 #>  [86,]    85  31   116   31   255 #>  [87,]    86  29   115   29   255 #>  [88,]    87  27   114   27   255 #>  [89,]    88  25   113   25   255 #>  [90,]    89  23   112   23   255 #>  [91,]    90  21   111   21   255 #>  [92,]    91  18   109   18   255 #>  [93,]    92  16   108   16   255 #>  [94,]    93  14   107   14   255 #>  [95,]    94  12   106   12   255 #>  [96,]    95  10   105   10   255 #>  [97,]    96   8   104    8   255 #>  [98,]    97   6   103    6   255 #>  [99,]    98   4   102    4   255 #> [100,]    99   2   101    2   255 #> [101,]   100   0   100    0   255 ds_tcc$setColorTable(band=1, col_tbl=colors, palette_interp=\"RGB\") #> [1] TRUE ds_tcc$setRasterColorInterp(band=1, col_interp=\"Palette\")  # close and re-open the dataset in read_only mode ds_tcc$open(read_only=TRUE)  plot_raster(ds_tcc, interpolate=FALSE, legend=TRUE,             main=\"Storm Lake Tree Canopy Cover (%)\")  ds_tcc$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy of a raster — createCopy","title":"Create a copy of a raster — createCopy","text":"createCopy() copies raster dataset, optionally changing format. extent, cell size, number bands, data type, projection, geotransform copied source raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy of a raster — createCopy","text":"","code":"createCopy(   format,   dst_filename,   src_filename,   strict = FALSE,   options = NULL,   quiet = FALSE,   return_obj = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy of a raster — createCopy","text":"format Character string giving format short name output raster (e.g., \"GTiff\"). dst_filename Character string giving filename create. src_filename Either character string giving filename source raster, object class GDALRaster source. strict Logical. TRUE copy must strictly equivalent, normally FALSE (default) indicating copy may adapt needed output format. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE. return_obj Logical scalar. TRUE, object class GDALRaster opened newly created dataset returned, otherwise returns logical value. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy of a raster — createCopy","text":"default, returns logical value indicating success (invisible TRUE, output written dst_filename). error raised operation fails. object class GDALRaster opened output dataset returned return_obj = TRUE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a copy of a raster — createCopy","text":"dst_filename may empty string (\"\") format = \"MEM\" return_obj = TRUE create -memory Raster (https://gdal.org/drivers/raster/mem.html).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a copy of a raster — createCopy","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- file.path(tempdir(), \"storml_lndscp.tif\") ds <- createCopy(format = \"GTiff\",                  dst_filename = tif_file,                  src_filename = lcp_file,                  options = \"COMPRESS=LZW\",                  return_obj = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds$getMetadata(band = 0, domain = \"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\"  for (band in 1:ds$getRasterCount())     ds$setNoDataValue(band, -9999) ds$getStatistics(band = 1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3046.0000 2675.9713  133.0185  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete named dataset — deleteDataset","title":"Delete named dataset — deleteDataset","text":"deleteDataset() attempt delete named dataset format specific fashion. Full featured drivers delete associated files, database objects, whatever appropriate. default behavior format specific behavior provided attempt delete files returned GDALRaster$getFileList() dataset. named dataset open existing GDALRaster objects deleteDataset() called. Wrapper GDALDeleteDataset() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete named dataset — deleteDataset","text":"","code":"deleteDataset(filename, format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete named dataset — deleteDataset","text":"filename Filename delete (open GDALRaster object). format Raster format short name (e.g., \"GTiff\"). set empty string \"\" (default), attempt guess raster format filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete named dataset — deleteDataset","text":"Logical TRUE error FALSE failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete named dataset — deleteDataset","text":"format set empty string \"\" (default) function try identify driver filename. done internally GDAL invoking Identify method registered GDALDriver turn. first driver successful identifies file name returned. error raised format determined passed file name.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/deleteDataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete named dataset — deleteDataset","text":"","code":"b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b5_tmp <- file.path(tempdir(), \"b5_tmp.tif\") file.copy(b5_file,  b5_tmp) #> [1] TRUE  ds <- new(GDALRaster, b5_tmp) ds$buildOverviews(\"BILINEAR\", levels = c(2, 4, 8), bands = c(1)) #> 0...10...20...30...40...50...60...70...80...90...100 - done. files <- ds$getFileList() print(files) #> [1] \"/tmp/RtmprS3Ajq/b5_tmp.tif\"     \"/tmp/RtmprS3Ajq/b5_tmp.tif.ovr\" ds$close() file.exists(files) #> [1] TRUE TRUE deleteDataset(b5_tmp) #> [1] TRUE file.exists(files) #> [1] FALSE FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":null,"dir":"Reference","previous_headings":"","what":"GDAL DEM processing — dem_proc","title":"GDAL DEM processing — dem_proc","text":"dem_proc() generates DEM derivatives input elevation raster. function wrapper gdaldem command-line utility. See https://gdal.org/programs/gdaldem.html details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GDAL DEM processing — dem_proc","text":"","code":"dem_proc(   mode,   srcfile,   dstfile,   mode_options = DEFAULT_DEM_PROC[[mode]],   color_file = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GDAL DEM processing — dem_proc","text":"mode Character. Name DEM processing mode. One hillshade, slope, aspect, color-relief, TRI, TPI roughness. srcfile Filename source elevation raster. dstfile Filename output raster. mode_options optional character vector command-line options (see DEFAULT_DEM_PROC default values). color_file Filename text file containing lines formatted : \"elevation_value red green blue\". used mode = \"color-relief\". quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GDAL DEM processing — dem_proc","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GDAL DEM processing — dem_proc","text":"Band 1 source elevation raster read default, can changed including -b command-line argument mode_options. See documentation gdaldem description available options processing mode.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GDAL DEM processing — dem_proc","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") slp_file <- file.path(tempdir(), \"storml_slp.tif\") dem_proc(\"slope\", elev_file, slp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a GDAL Raster Attribute Table — displayRAT","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"displayRAT() generates presentation table. Colors shown Raster Attribute Table contains RGB columns. function requires package gt.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"","code":"displayRAT(tbl, title = \"Raster Attribute Table\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"tbl data frame formatted GDAL RAT (e.g., returned buildRAT() GDALRaster$getDefaultRAT()). title Character string used table title.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"object class \"gt_tbl\" (.e., table created gt::gt()).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/displayRAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a GDAL Raster Attribute Table — displayRAT","text":"","code":"# see examples for `buildRAT()`"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Report open datasets — dump_open_datasets","title":"Report open datasets — dump_open_datasets","text":"dump_open_datasets() dumps list open datasets (shared ) console. function primarily intended assist debugging \"dataset leaks\" reference counting issues. information reported includes dataset name, referenced count, shared status, driver name, size, band count. wrapper GDALDumpOpenDatasets() output console.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report open datasets — dump_open_datasets","text":"","code":"dump_open_datasets()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report open datasets — dump_open_datasets","text":"Number open datasets.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dump_open_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report open datasets — dump_open_datasets","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) dump_open_datasets() #> Open GDAL Datasets: #>   2 S LCP    333060096 143x107x8 /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>   1 S GTiff  333060096 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 2 ds2 <- new(GDALRaster, elev_file) dump_open_datasets() #> Open GDAL Datasets: #>   2 S LCP    333060096 143x107x8 /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>   2 S GTiff  333060096 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 2 # open without using shared mode ds3 <- new(GDALRaster, elev_file, read_only = TRUE,            open_options = NULL, shared = FALSE) dump_open_datasets() #> Open GDAL Datasets: #>   1 N GTiff       -1 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #>   2 S LCP    333060096 143x107x8 /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>   2 S GTiff  333060096 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 3 ds$close() dump_open_datasets() #> Open GDAL Datasets: #>   1 N GTiff       -1 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #>   2 S LCP    333060096 143x107x8 /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>   1 S GTiff  333060096 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #> [1] 3 ds2$close() dump_open_datasets() #> Open GDAL Datasets: #>   1 N GTiff       -1 143x107x1 /home/runner/work/_temp/Library/gdalraster/extdata/storml_elev.tif #>   2 S LCP    333060096 143x107x8 /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #> [1] 2 ds3$close() dump_open_datasets() #> Open GDAL Datasets: #>   2 S LCP    333060096 143x107x8 /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #> [1] 1"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"epsg_to_wkt() exports spatial reference EPSG code WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"","code":"epsg_to_wkt(epsg, pretty = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"epsg Integer EPSG code. pretty Logical. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"","code":"epsg_to_wkt(5070) #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"5070\\\"]]\" writeLines(epsg_to_wkt(5070, pretty=TRUE)) #> PROJCS[\"NAD83 / Conus Albers\", #>     GEOGCS[\"NAD83\", #>         DATUM[\"North_American_Datum_1983\", #>             SPHEROID[\"GRS 1980\",6378137,298.257222101, #>                 AUTHORITY[\"EPSG\",\"7019\"]], #>             AUTHORITY[\"EPSG\",\"6269\"]], #>         PRIMEM[\"Greenwich\",0, #>             AUTHORITY[\"EPSG\",\"8901\"]], #>         UNIT[\"degree\",0.0174532925199433, #>             AUTHORITY[\"EPSG\",\"9122\"]], #>         AUTHORITY[\"EPSG\",\"4269\"]], #>     PROJECTION[\"Albers_Conic_Equal_Area\"], #>     PARAMETER[\"latitude_of_center\",23], #>     PARAMETER[\"longitude_of_center\",-96], #>     PARAMETER[\"standard_parallel_1\",29.5], #>     PARAMETER[\"standard_parallel_2\",45.5], #>     PARAMETER[\"false_easting\",0], #>     PARAMETER[\"false_northing\",0], #>     UNIT[\"metre\",1, #>         AUTHORITY[\"EPSG\",\"9001\"]], #>     AXIS[\"Easting\",EAST], #>     AXIS[\"Northing\",NORTH], #>     AUTHORITY[\"EPSG\",\"5070\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(epsg_to_wkt(5070, pretty=TRUE)) #> PROJCRS[\"NAD83 / Conus Albers\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"Conus Albers\", #>         METHOD[\"Albers Equal Area\", #>             ID[\"EPSG\",9822]], #>         PARAMETER[\"Latitude of false origin\",23, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-96, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",29.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Data analysis and small scale data presentation for contiguous lower 48 states.\"], #>         AREA[\"United States (USA) - CONUS onshore - Alabama; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming.\"], #>         BBOX[24.41,-124.79,49.38,-66.91]], #>     ID[\"EPSG\",5070]] set_config_option(\"OSR_WKT_FORMAT\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill selected pixels by interpolation from surrounding areas — fillNodata","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"fillNodata() wrapper GDALFillNodata() GDAL Algorithms API. algorithm interpolate values designated nodata pixels (pixels intrinsic nodata value, marked zero-valued pixels optional raster specified mask_file). nodata pixel, four direction conic search done find values interpolate (using inverse distance weighting). values interpolated, zero smoothing iterations (3x3 average filters interpolated pixels) applied smooth artifacts.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"","code":"fillNodata(   filename,   band,   mask_file = \"\",   max_dist = 100,   smooth_iterations = 0L,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"filename Filename input raster fill nodata pixels. band Integer band number modify place. mask_file Optional filename raster use validity mask (band 1 used, zero marks nodata pixels, non-zero marks valid pixels). max_dist Maximum distance (pixels) algorithm search values interpolate (100 pixels default). smooth_iterations number 3x3 average filter smoothing iterations run interpolation dampen artifacts (0 default). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"input raster modified place. open GDALRaster object processing fillNodata().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"","code":"## fill nodata edge pixels in the elevation raster elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## get count of nodata tbl <- buildRAT(elev_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(tbl) #>   VALUE COUNT #> 1  2438     9 #> 2  2439     6 #> 3  2440     5 #> 4  2441     5 #> 5  2442     5 #> 6  2443     2 tbl[is.na(tbl$VALUE),] #>     VALUE COUNT #> 601    NA   876  ## make a copy that will be modified mod_file <- file.path(tempdir(), \"storml_elev_fill.tif\") file.copy(elev_file,  mod_file) #> [1] TRUE  fillNodata(mod_file, band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  mod_tbl = buildRAT(mod_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(mod_tbl) #>   VALUE COUNT #> 1  2438     9 #> 2  2439     7 #> 3  2440     8 #> 4  2441     5 #> 5  2442     7 #> 6  2443     2 mod_tbl[is.na(mod_tbl$VALUE),] #> [1] VALUE COUNT #> <0 rows> (or 0-length row.names)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute footprint of a raster — footprint","title":"Compute footprint of a raster — footprint","text":"footprint() wrapper gdal_footprint command-line utility (see https://gdal.org/programs/gdal_footprint.html). function can used compute footprint raster file, taking account nodata values (generally mask band attached raster bands), generating polygons/multipolygons corresponding areas pixels valid, write output vector file. Refer GDAL documentation URL list command-line arguments can passed cl_arg. Requires GDAL >= 3.8.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute footprint of a raster — footprint","text":"","code":"footprint(src_filename, dst_filename, cl_arg = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute footprint of a raster — footprint","text":"src_filename Character string. Filename source raster. dst_filename Character string. Filename destination vector. file output layer exist, new footprint appended , unless -overwrite command-line argument used. cl_arg Optional character vector command-line arguments gdal_footprint.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute footprint of a raster — footprint","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute footprint of a raster — footprint","text":"Post-vectorization geometric operations applied following order: optional splitting (-split_polys) optional densification (-densify) optional reprojection (-t_srs) optional filtering minimum ring area (-min_ring_area) optional application convex hull (-convex_hull) optional simplification (-simplify) limitation number points (-max_points)","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/footprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute footprint of a raster — footprint","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") out_file <- file.path(tempdir(), \"storml.geojson\")  # Requires GDAL >= 3.8 if (as.integer(gdal_version()[2]) >= 3080000) {   # command-line arguments for gdal_footprint   args <- c(\"-t_srs\", \"EPSG:4326\")   footprint(evt_file, out_file, args)   DONTSHOW({deleteDataset(out_file)}) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the area of a geometry — g_area","title":"Compute the area of a geometry — g_area","text":"g_area() computes area LinearRing, Polygon MultiPolygon. Undefined geometry types (returns zero).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the area of a geometry — g_area","text":"","code":"g_area(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the area of a geometry — g_area","text":"wkt Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the area of a geometry — g_area","text":"Numeric scalar. Area geometry 0.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_area.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the area of a geometry — g_area","text":"LinearRing non-standard geometry type, used GDAL just geometry creation.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary operations on WKT geometries — g_binary_op","title":"Binary operations on WKT geometries — g_binary_op","text":"functions implement operations pairs geometries OGC WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary operations on WKT geometries — g_binary_op","text":"","code":"g_intersection(this_geom, other_geom)  g_union(this_geom, other_geom)  g_difference(this_geom, other_geom)  g_sym_difference(this_geom, other_geom)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary operations on WKT geometries — g_binary_op","text":"this_geom Character. OGC WKT string simple feature geometry. other_geom Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary operations on WKT geometries — g_binary_op","text":"Character string. resulting geometry OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binary operations on WKT geometries — g_binary_op","text":"functions use GEOS library via GDAL headers. g_intersection() returns new geometry region intersection two geometries operated . g_intersects() can used test two geometries intersect. g_union() returns new geometry region union two geometries operated . g_difference() returns new geometry region geometry region geometry removed. g_sym_difference() returns new geometry symmetric difference geometry geometry (union minus intersection).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Binary operations on WKT geometries — g_binary_op","text":"Geometry validity checked. case unsure validity input geometries, call g_is_valid() , otherwise result might wrong.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_op.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary operations on WKT geometries — g_binary_op","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) g1 <- ds$bbox() |> bbox_to_wkt() ds$close()  g2 <- \"POLYGON ((327381.9 5104541.2, 326824.0 5104092.5, 326708.8 5103182.9,   327885.2 5102612.9, 329334.5 5103322.4, 329304.2 5104474.5,328212.7   5104656.4, 328212.7 5104656.4, 327381.9 5104541.2))\"  # see spatial predicate defintions at https://en.wikipedia.org/wiki/DE-9IM g_intersects(g1, g2)  # TRUE #> [1] TRUE g_overlaps(g1, g2)  # TRUE #> [1] TRUE # therefore, g_contains(g1, g2)  # FALSE #> [1] FALSE  g_sym_difference(g1, g2) |> g_area() #> [1] 14834452  g3 <- g_intersection(g1, g2) g4 <- g_union(g1, g2) g_difference(g4, g3) |> g_area() #> [1] 14834452"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometry binary predicates operating on WKT — g_binary_pred","title":"Geometry binary predicates operating on WKT — g_binary_pred","text":"functions implement tests pairs geometries OGC WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometry binary predicates operating on WKT — g_binary_pred","text":"","code":"g_intersects(this_geom, other_geom)  g_disjoint(this_geom, other_geom)  g_touches(this_geom, other_geom)  g_contains(this_geom, other_geom)  g_within(this_geom, other_geom)  g_crosses(this_geom, other_geom)  g_overlaps(this_geom, other_geom)  g_equals(this_geom, other_geom)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometry binary predicates operating on WKT — g_binary_pred","text":"this_geom Character. OGC WKT string simple feature geometry. other_geom Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometry binary predicates operating on WKT — g_binary_pred","text":"Logical scalar","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometry binary predicates operating on WKT — g_binary_pred","text":"functions use GEOS library via GDAL headers. g_intersects() tests whether two geometries intersect. g_disjoint() tests geometry geometry disjoint. g_touches() tests geometry geometry touching. g_contains() tests geometry contains geometry. g_within() tests geometry within geometry. g_crosses() tests geometry geometry crossing. g_overlaps() tests geometry geometry overlap, , intersection non-zero area (points common). g_equals() tests whether two geometries equivalent. GDAL documentation says: \"operation implements SQL/MM ST_OrderingEquals() operation. comparison done structural way, say geometry types must identical, well number ordering sub-geometries vertices. equivalently, two geometries considered equal method WKT/WKB representation equal. Note: must distinguished equality spatial way.\"","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_binary_pred.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Geometry binary predicates operating on WKT — g_binary_pred","text":"Geometry validity checked. case unsure validity input geometries, call g_is_valid() , otherwise result might wrong.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute buffer of a WKT geometry — g_buffer","title":"Compute buffer of a WKT geometry — g_buffer","text":"g_buffer() builds new geometry containing buffer region around geometry invoked. buffer polygon containing region within buffer distance original geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute buffer of a WKT geometry — g_buffer","text":"","code":"g_buffer(wkt, dist, quad_segs = 30L)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute buffer of a WKT geometry — g_buffer","text":"wkt Character. OGC WKT string simple feature 2D geometry. dist Numeric buffer distance units wkt geometry. quad_segs Integer number segments used define 90 degree curve (quadrant circle). Large values result large numbers vertices resulting buffer geometry small numbers reduce accuracy result.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute buffer of a WKT geometry — g_buffer","text":"Character string OGC WKT polygon.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute buffer of a WKT geometry — g_buffer","text":"","code":"g_buffer(wkt = \"POINT (0 0)\", dist = 10) #> [1] \"POLYGON ((10 0,9.98629534754574 -0.523359562429438,9.94521895368273 -1.04528463267653,9.87688340595138 -1.56434465040231,9.78147600733806 -2.07911690817759,9.65925826289068 -2.58819045102521,9.51056516295153 -3.09016994374947,9.33580426497202 -3.583679495453,9.13545457642601 -4.067366430758,8.91006524188368 -4.53990499739547,8.66025403784439 -5,8.38670567945424 -5.44639035015027,8.09016994374947 -5.87785252292473,7.77145961456971 -6.29320391049837,7.43144825477394 -6.69130606358858,7.07106781186548 -7.07106781186547,6.69130606358858 -7.43144825477394,6.29320391049838 -7.77145961456971,5.87785252292473 -8.09016994374947,5.44639035015027 -8.38670567945424,5.0 -8.66025403784439,4.53990499739547 -8.91006524188368,4.067366430758 -9.13545457642601,3.583679495453 -9.33580426497202,3.09016994374947 -9.51056516295153,2.58819045102521 -9.65925826289068,2.07911690817759 -9.78147600733806,1.56434465040231 -9.87688340595138,1.04528463267654 -9.94521895368273,0.52335956242944 -9.98629534754574,0.0 -10,-0.523359562429436 -9.98629534754574,-1.04528463267653 -9.94521895368273,-1.56434465040231 -9.87688340595138,-2.07911690817759 -9.78147600733806,-2.58819045102521 -9.65925826289068,-3.09016994374947 -9.51056516295154,-3.583679495453 -9.33580426497202,-4.067366430758 -9.13545457642601,-4.53990499739547 -8.91006524188368,-5 -8.66025403784439,-5.44639035015027 -8.38670567945424,-5.87785252292473 -8.09016994374947,-6.29320391049837 -7.77145961456971,-6.69130606358858 -7.43144825477394,-7.07106781186547 -7.07106781186548,-7.43144825477394 -6.69130606358858,-7.77145961456971 -6.29320391049838,-8.09016994374947 -5.87785252292473,-8.38670567945424 -5.44639035015027,-8.66025403784439 -5,-8.91006524188368 -4.53990499739547,-9.13545457642601 -4.067366430758,-9.33580426497202 -3.58367949545301,-9.51056516295153 -3.09016994374947,-9.65925826289068 -2.58819045102521,-9.78147600733806 -2.0791169081776,-9.87688340595138 -1.56434465040231,-9.94521895368273 -1.04528463267654,-9.98629534754574 -0.523359562429442,-10 -0.0,-9.98629534754574 0.523359562429436,-9.94521895368273 1.04528463267653,-9.87688340595138 1.56434465040231,-9.78147600733806 2.07911690817759,-9.65925826289068 2.5881904510252,-9.51056516295154 3.09016994374947,-9.33580426497202 3.583679495453,-9.13545457642601 4.067366430758,-8.91006524188368 4.53990499739547,-8.66025403784439 5.0,-8.38670567945424 5.44639035015027,-8.09016994374948 5.87785252292473,-7.77145961456971 6.29320391049837,-7.43144825477395 6.69130606358858,-7.07106781186548 7.07106781186547,-6.69130606358858 7.43144825477394,-6.29320391049838 7.77145961456971,-5.87785252292473 8.09016994374947,-5.44639035015028 8.38670567945424,-5 8.66025403784438,-4.53990499739547 8.91006524188368,-4.06736643075801 9.135454576426,-3.58367949545301 9.33580426497202,-3.09016994374948 9.51056516295153,-2.58819045102522 9.65925826289068,-2.0791169081776 9.78147600733806,-1.56434465040231 9.87688340595138,-1.04528463267654 9.94521895368273,-0.523359562429443 9.98629534754574,-0.0 10.0,0.523359562429431 9.98629534754574,1.04528463267653 9.94521895368273,1.56434465040231 9.87688340595138,2.07911690817759 9.78147600733806,2.5881904510252 9.65925826289068,3.09016994374947 9.51056516295154,3.583679495453 9.33580426497202,4.067366430758 9.13545457642601,4.53990499739547 8.91006524188368,4.99999999999999 8.66025403784439,5.44639035015027 8.38670567945424,5.87785252292473 8.09016994374948,6.29320391049837 7.77145961456971,6.69130606358858 7.43144825477395,7.07106781186547 7.07106781186548,7.43144825477394 6.69130606358859,7.77145961456971 6.29320391049838,8.09016994374947 5.87785252292473,8.38670567945424 5.44639035015028,8.66025403784438 5.0,8.91006524188368 4.53990499739547,9.135454576426 4.06736643075801,9.33580426497202 3.58367949545301,9.51056516295153 3.09016994374948,9.65925826289068 2.58819045102522,9.78147600733806 2.0791169081776,9.87688340595138 1.56434465040231,9.94521895368273 1.04528463267654,9.98629534754574 0.523359562429444,10 0))\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_centroid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the centroid of a geometry — g_centroid","title":"Compute the centroid of a geometry — g_centroid","text":"g_centroid() returns vector point X, point Y.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_centroid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the centroid of a geometry — g_centroid","text":"","code":"g_centroid(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_centroid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the centroid of a geometry — g_centroid","text":"wkt Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_centroid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the centroid of a geometry — g_centroid","text":"Numeric vector length 2 containing centroid (X, Y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_centroid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the centroid of a geometry — g_centroid","text":"GDAL documentation states \"method relates SFCOM ISurface::get_Centroid() method however current implementation based GEOS can operate geometry types multipoint, linestring, geometrycollection multipolygons. OGC SF SQL 1.1 defines operation surfaces (polygons). SQL/MM-Part 3 defines operation surfaces multisurfaces (multipolygons).\"","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distance between two geometries — g_distance","title":"Compute the distance between two geometries — g_distance","text":"g_distance() returns distance two geometries -1 error occurs. Returns shortest distance two geometries. distance expressed unit coordinates geometries.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distance between two geometries — g_distance","text":"","code":"g_distance(this_geom, other_geom)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distance between two geometries — g_distance","text":"this_geom Character. OGC WKT string simple feature geometry. other_geom Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the distance between two geometries — g_distance","text":"Numeric. Distance '-1' error occurs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_distance.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the distance between two geometries — g_distance","text":"Geometry validity checked. case unsure validity input geometries, call g_is_valid() , otherwise result might wrong.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the distance between two geometries — g_distance","text":"","code":"g_distance(\"POINT (0 0)\", \"POINT (5 12)\") #> [1] 13"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a geometry is empty — g_is_empty","title":"Test if a geometry is empty — g_is_empty","text":"g_is_empty() tests whether geometry points.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a geometry is empty — g_is_empty","text":"","code":"g_is_empty(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a geometry is empty — g_is_empty","text":"wkt Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a geometry is empty — g_is_empty","text":"logical scalar. TRUE geometry points, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a geometry is empty — g_is_empty","text":"","code":"g1 <- \"POLYGON ((0 0, 10 10, 10 0, 0 0))\" g2 <- \"POLYGON ((5 1, 9 5, 9 1, 5 1))\" g_difference(g2, g1) |> g_is_empty() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a geometry is valid — g_is_valid","title":"Test if a geometry is valid — g_is_valid","text":"g_is_valid() tests whether geometry valid.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a geometry is valid — g_is_valid","text":"","code":"g_is_valid(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a geometry is valid — g_is_valid","text":"wkt Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a geometry is valid — g_is_valid","text":"logical scalar. TRUE geometry valid, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_is_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a geometry is valid — g_is_valid","text":"","code":"g1 <- \"POLYGON ((0 0, 10 10, 10 0, 0 0))\" g_is_valid(g1) #> [1] TRUE  g2 <- \"POLYGON ((0 0, 10 10, 10 0, 0 1))\" g_is_valid(g2) #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the length of a geometry — g_length","title":"Compute the length of a geometry — g_length","text":"g_length() computes length LineString MultiCurve objects. Undefined geometry types (returns zero).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the length of a geometry — g_length","text":"","code":"g_length(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the length of a geometry — g_length","text":"wkt Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the length of a geometry — g_length","text":"Numeric scalar. Length geometry 0.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the length of a geometry — g_length","text":"","code":"g_length(\"LINESTRING (0 0, 3 4)\") #> [1] 5"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the geometry type name from a WKT geometry — g_name","title":"Extract the geometry type name from a WKT geometry — g_name","text":"g_name() returns name geometry type well known text format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the geometry type name from a WKT geometry — g_name","text":"","code":"g_name(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the geometry type name from a WKT geometry — g_name","text":"wkt Character. OGC WKT string simple feature geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the geometry type name from a WKT geometry — g_name","text":"WKT name geometry type.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the geometry type name from a WKT geometry — g_name","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) bbox_to_wkt(ds$bbox()) |> g_name() #> [1] \"POLYGON\" ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a coordinate transformation to a WKT geometry — g_transform","title":"Apply a coordinate transformation to a WKT geometry — g_transform","text":"g_transform() transform coordinates geometry current spatial reference system new target spatial reference system. Normally means reprojecting vectors, include datum shifts, changes units.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a coordinate transformation to a WKT geometry — g_transform","text":"","code":"g_transform(   wkt,   srs_from,   srs_to,   wrap_date_line = FALSE,   date_line_offset = 10L )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a coordinate transformation to a WKT geometry — g_transform","text":"wkt Character. OGC WKT string simple feature geometry. srs_from Character string OGC WKT format specifying spatial reference system geometry given wkt. srs_to Character string OGC WKT format specifying target spatial reference system. wrap_date_line Logical scalar. TRUE correct geometries incorrectly go longitude side antimeridian side. Defaults FALSE. date_line_offset Integer scalar. Longitude gap degree. Defaults 10.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a coordinate transformation to a WKT geometry — g_transform","text":"Character string transformed OGC WKT geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply a coordinate transformation to a WKT geometry — g_transform","text":"function uses OGR_GeomTransformer_Create() OGR_GeomTransformer_Transform() functions GDAL API: \"enhanced version OGR_G_Transform(). reprojecting geometries Polar Stereographic projection projection naturally crossing antimeridian (like UTM Zone 60) geographic CRS, cut geometries along antimeridian. LineString might returned MultiLineString.\" wrap_date_line = TRUE option might specified circumstances correct geometries incorrectly go longitude side antimeridian side, e.g., LINESTRING (-179 0,179 0) transformed MULTILINESTRING ((-179 0,-180 0),(180 0,179 0)). use case, srs_to might srs_from.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a coordinate transformation to a WKT geometry — g_transform","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file)  # the convenience function bbox_transform() does this: bbox_to_wkt(ds$bbox()) |>   g_transform(ds$getProjection(), epsg_to_wkt(4326)) |>   bbox_from_wkt() #> [1] -113.28289   46.04764 -113.22629   46.07760  ds$close()  # correct geometries that incorrectly go from a longitude on a side of the # antimeridian to the other side geom <- \"LINESTRING (-179 0,179 0)\" srs <- epsg_to_wkt(4326) g_transform(geom, srs, srs, wrap_date_line = TRUE) #> [1] \"MULTILINESTRING ((-179 0,-180 0),(180 0,179 0))\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"gdal_formats() returns table supported raster vector formats, information capabilities format driver.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"","code":"gdal_formats(format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"format character string containing driver short name. default, information configured raster vector format drivers returned.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"data frame containing format short name, long name, raster (logical), vector (logical), read/write flag (ro read-, w supports CreateCopy, w+ supports Create), virtual /O supported (logical), subdatasets (logical).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"Virtual /O refers operations GDAL Virtual File Systems. See https://gdal.org/user/virtual_file_systems.html#virtual-file-systems.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information on GDAL format drivers for raster and vector — gdal_formats","text":"","code":"nrow(gdal_formats()) #> [1] 221 head(gdal_formats()) #>   short_name raster vector rw_flag virtual_io subdatasets #> 1        VRT   TRUE  FALSE     rw+       TRUE       FALSE #> 2    DERIVED   TRUE  FALSE      ro      FALSE       FALSE #> 3      GTiff   TRUE  FALSE     rw+       TRUE        TRUE #> 4        COG   TRUE  FALSE       w       TRUE       FALSE #> 5       NITF   TRUE  FALSE     rw+       TRUE        TRUE #> 6     RPFTOC   TRUE  FALSE      ro       TRUE        TRUE #>                                    long_name #> 1                             Virtual Raster #> 2 Derived datasets using VRT pixel functions #> 3                                    GeoTIFF #> 4          Cloud optimized GeoTIFF generator #> 5       National Imagery Transmission Format #> 6           Raster Product Format TOC format  gdal_formats(\"GPKG\") #>   short_name raster vector rw_flag virtual_io subdatasets  long_name #> 1       GPKG   TRUE   TRUE     rw+       TRUE        TRUE GeoPackage"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL version — gdal_version","title":"Get GDAL version — gdal_version","text":"gdal_version() returns runtime version information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL version — gdal_version","text":"Character vector length four containing: \"–version\" - one line version message, e.g., “GDAL 3.6.3, released 2023/03/12” \"GDAL_VERSION_NUM\" - formatted string, e.g., “3060300” GDAL 3.6.3.0 \"GDAL_RELEASE_DATE\" - formatted string, e.g., “20230312” \"GDAL_RELEASE_NAME\" - e.g., “3.6.3”","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version() #> [1] \"GDAL 3.4.1, released 2021/12/27\" \"3040100\"                         #> [3] \"20211227\"                        \"3.4.1\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bindings to the GDAL Raster API — gdalraster-package","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"gdalraster interface Geospatial Data Abstraction   Library (GDAL) low level raster /O. Calling signatures resemble   native C, C++ Python APIs provided GDAL project.   See https://gdal.org/api/ details GDAL Raster API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"Core functionality contained class GDALRaster several   related stand-alone functions: GDALRaster-class exposed C++ class allows   opening raster dataset calling methods GDALDataset,   GDALDriver GDALRasterBand objects underlying API   (e.g., get/set parameters, read/write pixel data). raster creation: create(),   createCopy(),   rasterFromRaster(),   translate(),   getCreationOptions() virtual raster:   autoCreateWarpedVRT(),   buildVRT(),   rasterToVRT() reproject/resample/crop/mosaic: warp() algorithms: dem_proc(),   fillNodata(),   footprint(),   polygonize(),   rasterize(),   sieveFilter(),   GDALRaster$getChecksum() raster attribute tables: buildRAT(),   displayRAT(),   GDALRaster$getDefaultRAT(),   GDALRaster$setDefaultRAT() geotransform conversion:   apply_geotransform(),   get_pixel_line(),   inv_geotransform() coordinate transformation:   transform_xy(),   inv_project() spatial reference convenience functions:   epsg_to_wkt(),   srs_to_wkt(),   srs_find_epsg(),   srs_get_name(),   srs_is_geographic(),   srs_is_projected(),   srs_is_same() geometry convenience functions:   bbox_from_wkt(),   bbox_to_wkt(),   bbox_intersect(),   bbox_union(),   bbox_transform(),   g_area(),   g_buffer(),   g_centroid(),   g_contains(),   g_crosses(),   g_difference(),   g_disjoint(),   g_distance(),   g_equals(),   g_intersection(),   g_intersects(),   g_is_empty(),   g_is_valid(),   g_length(),   g_name(),   g_overlaps(),   g_sym_difference(),   g_touches(),   g_transform(),   g_union(),   g_within(),   geos_version() data management: addFilesInZip(),   copyDatasetFiles(),   deleteDataset(),renameDataset(),   bandCopyWholeRaster() OGR vector utilities:   ogr2ogr(),   ogrinfo(),   ogr_manage,   ogr_define virtual file systems:   VSIFile,   vsi_clear_path_options(),   vsi_copy_file(),   vsi_curl_clear_cache(),   vsi_get_disk_free_space(),   vsi_get_file_metadata(),   vsi_get_fs_options(),   vsi_get_fs_prefixes(),   vsi_mkdir(),   vsi_read_dir(),   vsi_rename(),   vsi_rmdir(),   vsi_set_path_option(),   vsi_stat(),   vsi_supports_rnd_write(),   vsi_supports_seq_write(),   vsi_sync(),   vsi_unlink(),   vsi_unlink_batch() GDAL configuration:   gdal_version(),   gdal_formats(),   get_cache_used(),   get_config_option(),   set_config_option(),   get_num_cpus(),   get_usable_physical_ram(),   has_spatialite(),   http_enabled(),   push_error_handler(),   pop_error_handler(),   dump_open_datasets() PROJ configuration:   proj_version(),   proj_search_paths(),   proj_networking() Additional functionality includes: RunningStats-class calculates mean variance one   pass. min, max, sum, count also tracked (efficient summary   statistics data streams). CmbTable-class implements hash table counting   unique combinations integer values. combine() overlays multiple rasters   unique ID assigned unique combination input values. Pixel   counts unique combination obtained, combination IDs   optionally written output raster. calc() evaluates R expression pixel   raster layer stack layers. Individual pixel coordinates available   variables R expression, either x/y raster projected   coordinate system inverse projected longitude/latitude. plot_raster() displays raster data using   base R graphics. Supports single-band grayscale, RGB, color tables   color map functions (e.g., color ramp).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"GDAL : Frank Warmerdam, Even Rouault others (see https://github.com/OSGeo/gdal/graphs/contributors) R interface/additional functionality: Chris Toney Maintainer: Chris Toney <chris.toney usda.gov>","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"Documentation GDALRaster-class several wrapper functions   borrows GDAL API documentation, (c) 1998-2024, Frank Warmerdam,   Even Rouault, others, MIT license. Sample datasets included package used examples throughout   documentation. sample data include   LANDFIRE raster layers describing terrain,   vegetation wildland fuels (LF 2020 version),   Landsat C2 Analysis Ready Data   USGS Earth Explorer,   Monitoring Trends Burn Severity (MTBS)   fire perimeters 1984-2022. Metadata sample datasets   inst/extdata/metadata.zip. system.file() used examples access sample datasets.   enables code run regardless R installed. Users   normally give file names regular full path relative current   working directory. Temporary files created examples cleanup code wrapped   dontshow{}. cleanup code shown   documentation, note code runs default examples run   example().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GEOS version — geos_version","title":"Get GEOS version — geos_version","text":"geos_version() returns version information GEOS library use GDAL. Requires GDAL >= 3.4.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GEOS version — geos_version","text":"","code":"geos_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GEOS version — geos_version","text":"list length four containing: name - string formatted \"major.minor.patch\" major - major version integer minor - minor version integer patch - patch version integer List elements NA GDAL < 3.4.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/geos_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GEOS version — geos_version","text":"","code":"geos_version() #> $name #> [1] \"3.10.2\" #>  #> $major #> [1] 3 #>  #> $minor #> [1] 10 #>  #> $patch #> [1] 2 #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the list of creation options of a GDAL driver — getCreationOptions","title":"Return the list of creation options of a GDAL driver — getCreationOptions","text":"getCreationOptions() returns list creation options supported GDAL format driver XML string (invisibly). Wrapper GDALGetDriverCreationOptionList() GDAL API. Information available creation options also printed console default.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the list of creation options of a GDAL driver — getCreationOptions","text":"","code":"getCreationOptions(format, filter = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the list of creation options of a GDAL driver — getCreationOptions","text":"format Raster format short name (e.g., \"GTiff\"). filter Optional character vector creation option names. Controls amount information printed console. default, information creation options printed. Can set empty string \"\" disable printing information console.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the list of creation options of a GDAL driver — getCreationOptions","text":"Invisibly, XML string describes full list creation options empty string \"\" (full output GDALGetDriverCreationOptionList() GDAL API).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/getCreationOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the list of creation options of a GDAL driver — getCreationOptions","text":"","code":"getCreationOptions(\"GTiff\", filter=\"COMPRESS\") #> {xml_node} #> <Option name=\"COMPRESS\" type=\"string-select\"> #>  [1] <Value>NONE<\/Value> #>  [2] <Value>LZW<\/Value> #>  [3] <Value>PACKBITS<\/Value> #>  [4] <Value>JPEG<\/Value> #>  [5] <Value>CCITTRLE<\/Value> #>  [6] <Value>CCITTFAX3<\/Value> #>  [7] <Value>CCITTFAX4<\/Value> #>  [8] <Value>DEFLATE<\/Value> #>  [9] <Value>LZMA<\/Value> #> [10] <Value>ZSTD<\/Value> #> [11] <Value>WEBP<\/Value>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the size of memory in use by the GDAL block cache — get_cache_used","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"get_cache_used() returns amount memory currently use GDAL block caching. wrapper GDALGetCacheUsed64() return value MB.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"","code":"get_cache_used()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"Integer. Amount cache memory use MB.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"","code":"get_cache_used() #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL configuration option — get_config_option","title":"Get GDAL configuration option — get_config_option","text":"get_config_option() gets value GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL configuration option — get_config_option","text":"","code":"get_config_option(key)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GDAL configuration option — get_config_option","text":"key Character name configuration option.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL configuration option — get_config_option","text":"Character. value (key, value) option previously set set_config_option(). empty string (\"\") returned key found.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL configuration option — get_config_option","text":"","code":"## this option is set during initialization of the gdalraster package get_config_option(\"OGR_CT_FORCE_TRADITIONAL_GIS_ORDER\") #> [1] \"YES\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of processors detected by GDAL — get_num_cpus","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"get_num_cpus() returns number processors detected GDAL. Wrapper CPLGetNumCPUs() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"","code":"get_num_cpus()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"Integer scalar, number CPUs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_num_cpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of processors detected by GDAL — get_num_cpus","text":"","code":"get_num_cpus() #> [1] 4"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"get_pixel_line() converts geospatial coordinates pixel/line (raster column, row numbers). upper left corner pixel raster origin (0,0) column, row increasing left right, top bottom.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"get_pixel_line(xy, gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"xy Numeric matrix geospatial x,y coordinates spatial reference system gt (two-column data frame coerced numeric matrix). gt Either numeric vector length six containing affine geotransform raster, object class GDALRaster geotransform obtained (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"Integer matrix raster pixel/line.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"function applies inverse geotransform input points. gt given numeric vector, bounds checking done (.e., min pixel/line less zero max pixel/line greater raster x/y size). gt obtained object class GDALRaster, NA returned points fall outside raster extent warning emitted giving number points outside. latter case equivalent calling $get_pixel_line() class method GDALRaster object (see Examples).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") # id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901  raster_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, raster_file) gt <- ds$getGeoTransform() get_pixel_line(pts[, -1], gt) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39  # or, using the class method ds$get_pixel_line(pts[, -1]) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39  # add a point outside the raster extent pts[11, ] <- c(11, 323318, 5105104) get_pixel_line(pts[, -1], gt) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39 #> [11,]   -6   -1  # with bounds checking on the raster extent ds$get_pixel_line(pts[, -1]) #> Warning: 1 point(s) were outside the raster extent, NA returned #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39 #> [11,]   NA   NA  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":null,"dir":"Reference","previous_headings":"","what":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"get_usable_physical_ram() returns total physical RAM, usable process, bytes. limit 2 GB 32 bit processes. Starting GDAL 2.4.0, also take account resource limits (virtual memory) Posix systems. Starting GDAL 3.6.1, also take account RLIMIT_RSS Linux. Wrapper CPLGetUsablePhysicalRAM() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"","code":"get_usable_physical_ram()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"Numeric scalar, number bytes bit64::integer64 type (0 case failure).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"memory may already partly used processes.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_usable_physical_ram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get usable physical RAM reported by GDAL — get_usable_physical_ram","text":"","code":"get_usable_physical_ram() #> integer64 #> [1] 16757342208"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Is GEOS available? — has_geos","title":"Is GEOS available? — has_geos","text":"has_geos() returns logical value indicating whether GDAL built GEOS library. GDAL built GEOS system requirement gdalraster 1.10.0, function always return TRUE (may removed future version).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is GEOS available? — has_geos","text":"","code":"has_geos()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is GEOS available? — has_geos","text":"Logical. TRUE GEOS available, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is GEOS available? — has_geos","text":"","code":"has_geos() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":null,"dir":"Reference","previous_headings":"","what":"Is SpatiaLite available? — has_spatialite","title":"Is SpatiaLite available? — has_spatialite","text":"has_spatialite() returns logical value indicating whether GDAL built support SpatiaLite library. SpatiaLite extends SQLite core support full Spatial SQL capabilities.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is SpatiaLite available? — has_spatialite","text":"","code":"has_spatialite()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is SpatiaLite available? — has_spatialite","text":"Logical scalar. TRUE SpatiaLite available GDAL.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is SpatiaLite available? — has_spatialite","text":"GDAL supports executing SQL statements datasource. file formats (e.g. Shapefiles, GeoJSON, FlatGeobuf files), built-OGR SQL dialect used default. also possible request alternate \"SQLite\"  dialect, use SQLite engine evaluate commands GDAL datasets. assumes GDAL built support SQLite, preferably Spatialite support benefit spatial functions.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is SpatiaLite available? — has_spatialite","text":"GDAL/OGR drivers database systems, e.g., PostgreSQL / PostGIS, Oracle Spatial, SQLite / Spatialite RDBMS, GeoPackage, etc., override GDALDataset::ExecuteSQL() function dedicated implementation , default, pass SQL statements directly underlying RDBMS. cases SQL syntax varies particulars OGR SQL. Also, anything possible SQL can accomplished particular databases. drivers, also possible explicitly request OGRSQL SQLite dialects, although performance generally much less native SQL engine database systems.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_spatialite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is SpatiaLite available? — has_spatialite","text":"","code":"has_spatialite() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"http_enabled() returns TRUE libcurl support enabled. Wrapper CPLHTTPEnabled() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"","code":"http_enabled()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"Logical scalar, TRUE GDAL built libcurl support.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/http_enabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if GDAL CPLHTTP services can be useful (libcurl) — http_enabled","text":"","code":"http_enabled() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert geotransform — inv_geotransform","title":"Invert geotransform — inv_geotransform","text":"inv_geotransform() inverts vector geotransform coefficients. converts equation : raster pixel/line (column/row) -> geospatial x/y coordinate : geospatial x/y coordinate -> raster pixel/line (column/row)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert geotransform — inv_geotransform","text":"","code":"inv_geotransform(gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert geotransform — inv_geotransform","text":"gt Numeric vector length six containing geotransform invert.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert geotransform — inv_geotransform","text":"Numeric vector length six containing inverted geotransform. output vector contain NAs input geotransform uninvertable.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invert geotransform — inv_geotransform","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file) invgt <- ds$getGeoTransform() |> inv_geotransform() ds$close()  ptX = 324181.7 ptY = 5103901.4  ## for a point x, y in the spatial reference system of elev_file ## raster pixel (column number): pixel <- floor(invgt[1] +                invgt[2] * ptX +                invgt[3] * ptY)  ## raster line (row number): line <- floor(invgt[4] +               invgt[5] * ptX +               invgt[6] * ptY)  ## get_pixel_line() applies this conversion"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"inv_project() transforms geospatial x/y coordinates longitude/latitude geographic coordinate system used given projected spatial reference system. output long/lat can optionally set specific geographic coordinate system specifying well known name (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"inv_project(pts, srs, well_known_gcs = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"pts two-column data frame numeric matrix containing geospatial x/y coordinates. srs Character string OGC WKT format specifying projected spatial reference system pts. well_known_gcs Optional character string containing supported well known name geographic coordinate system (see Details supported values).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"Numeric array longitude, latitude. error raised transformation performed.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"default, geographic coordinate system projection specified srs used. specific geographic coordinate system desired, well_known_gcs can set one values : returned array always longitude, latitude order (traditional GIS order) regardless axis order defined names .","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") ## id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 inv_project(pts[,-1], epsg_to_wkt(26912)) #>            [,1]     [,2] #>  [1,] -113.2671 46.06118 #>  [2,] -113.2732 46.05827 #>  [3,] -113.2815 46.06076 #>  [4,] -113.2598 46.06280 #>  [5,] -113.2531 46.05276 #>  [6,] -113.2460 46.06682 #>  [7,] -113.2561 46.06862 #>  [8,] -113.2461 46.05405 #>  [9,] -113.2279 46.07214 #> [10,] -113.2733 46.06607 inv_project(pts[,-1], epsg_to_wkt(26912), \"NAD27\") #>            [,1]     [,2] #>  [1,] -113.2662 46.06126 #>  [2,] -113.2723 46.05835 #>  [3,] -113.2806 46.06084 #>  [4,] -113.2589 46.06288 #>  [5,] -113.2522 46.05283 #>  [6,] -113.2451 46.06689 #>  [7,] -113.2552 46.06869 #>  [8,] -113.2452 46.05413 #>  [9,] -113.2270 46.07222 #> [10,] -113.2724 46.06615"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vector data between different formats — ogr2ogr","title":"Convert vector data between different formats — ogr2ogr","text":"ogr2ogr() wrapper ogr2ogr command-line utility (see https://gdal.org/programs/ogr2ogr.html). function can used convert simple features data file formats. can also perform various operations process, spatial attribute selection, reducing set attributes, setting output coordinate system even reprojecting features translation. Refer GDAL documentation URL description command-line arguments can passed cl_arg.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vector data between different formats — ogr2ogr","text":"","code":"ogr2ogr(   src_dsn,   dst_dsn,   src_layers = NULL,   cl_arg = NULL,   open_options = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vector data between different formats — ogr2ogr","text":"src_dsn Character string. Data source name source vector dataset. dst_dsn Character string. Data source name destination vector dataset. src_layers Optional character vector layer names source dataset. Defaults layers. cl_arg Optional character vector command-line arguments GDAL ogr2ogr command-line utility (see URL ). open_options Optional character vector dataset open options.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vector data between different formats — ogr2ogr","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert vector data between different formats — ogr2ogr","text":"progress reporting, see command-line argument -progress: Display progress terminal. works input layers \"fast feature count\" capability.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr2ogr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vector data between different formats — ogr2ogr","text":"","code":"src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # Convert GeoPackage to Shapefile ynp_shp <- file.path(tempdir(), \"ynp_fires.shp\") ogr2ogr(src, ynp_shp, src_layers = \"mtbs_perims\")  # Reproject to WGS84 ynp_gpkg <- file.path(tempdir(), \"ynp_fires.gpkg\") args <- c(\"-t_srs\", \"EPSG:4326\", \"-nln\", \"fires_wgs84\") ogr2ogr(src, ynp_gpkg, cl_arg = args)  # Clip to a bounding box (xmin, ymin, xmax, ymax in the source SRS) # This will select features whose geometry intersects the bounding box. # The geometries themselves will not be clipped unless \"-clipsrc\" is # specified. # The source SRS can be overridden with \"-spat_srs\" \"<srs_def>\" # Using -update mode to write a new layer in the existing DSN bb <- c(469685.97, 11442.45, 544069.63, 85508.15) args <- c(\"-update\", \"-nln\", \"fires_clip\", \"-spat\", bb) ogr2ogr(src, ynp_gpkg, cl_arg = args)  # Filter features by a -where clause sql <- \"ig_year >= 2000 ORDER BY ig_year\" args <- c(\"-update\", \"-nln\", \"fires_2000-2020\", \"-where\", sql) ogr2ogr(src, ynp_gpkg, src_layers = \"mtbs_perims\", cl_arg = args)  # Dissolve features based on a shared attribute value if (has_spatialite()) {     sql <- \"SELECT ig_year, ST_Union(geom) AS geom FROM mtbs_perims GROUP BY ig_year\"     args <- c(\"-update\", \"-sql\", sql, \"-dialect\", \"SQLITE\")     args <- c(args, \"-nlt\", \"MULTIPOLYGON\", \"-nln\", \"dissolved_on_year\")     ogr2ogr(src, ynp_gpkg, cl_arg = args) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":null,"dir":"Reference","previous_headings":"","what":"OGR feature class definition for vector data — ogr_define","title":"OGR feature class definition for vector data — ogr_define","text":"topic contains documentation helper functions defining OGR feature class. ogr_def_field() creates attribute field definition, list containing field data type potentially optional field properties. ogr_def_geom_field() similarly creates geometry field definition. list containing zero attribute field definitions, along one geometry field definitions, comprise OGR feature class definition (.k.. layer definition). ogr_def_layer() initializes list geometry field. Attribute fields can added feature class definition calls ogr_def_field() examples.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OGR feature class definition for vector data — ogr_define","text":"","code":"ogr_def_field(   fld_type,   fld_subtype = NULL,   fld_width = NULL,   fld_precision = NULL,   is_nullable = NULL,   is_unique = NULL,   is_ignored = NULL,   default_value = NULL )  ogr_def_geom_field(   geom_type,   srs = NULL,   is_nullable = NULL,   is_ignored = NULL )  ogr_def_layer(geom_type, geom_fld_name = \"geom\", srs = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OGR feature class definition for vector data — ogr_define","text":"fld_type Character string containing name field data type (e.g., OFTInteger, OFTReal, OFTString). fld_subtype Character string containing name field subtype. One  OFSTNone (default), OFSTBoolean, OFSTInt16, OFSTFloat32, OFSTJSON, OFSTUUID. fld_width Optional integer scalar specifying max number characters. fld_precision Optional integer scalar specifying number digits decimal point. is_nullable Optional NULL field constraint (logical scalar). Defaults TRUE. is_unique Optional UNIQUE constraint field (logical scalar). Defaults FALSE. is_ignored Whether field ignored retrieving features (logical scalar). Defaults FALSE. default_value Optional default value field character string. geom_type Character string specifying geometry type (see Details). srs Character string containing spatial reference system definition OGC WKT well-known format (e.g., input formats usable srs_to_wkt()). geom_fld_name Character string specifying geometry field name Defaults \"geometry\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OGR feature class definition for vector data — ogr_define","text":"features OGR Layer share common schema (feature class), modeled GDAL OGR Feature Definition. feature class definition includes set attribute fields data types geometry field(s). R, feature class definition represented list, names attribute/geometry field names, list element holding field definition. attribute field definition list named elements:   OGR field type specified character string possible values: OFTInteger, OFTIntegerList, OFTReal, OFTRealList, OFTString, OFTStringList, OFTBinary,  OFTDate, OFTTime, OFTDateTime, OFTInteger64, OFTInteger64List. optional field subtype specified character string possible values: OFSTNone, OFSTBoolean, OFSTInt16, OFSTFloat32, OFSTJSON, OFSTUUID. default, fields nullable, unique constraint, ignored (.e., omitted fetching features). -null unique constraints supported format drivers. default field value taken account format drivers (generally SQL interface) support field creation time. given field definition, $default must character string. accepted values \"NULL\", numeric value (e.g., \"0\"), literal value enclosed single quote characters (e.g., \"'default value'\", inner single quote characters escaped repetition single quote character), \"CURRENT_TIMESTAMP\", \"CURRENT_TIME\", \"CURRENT_DATE\" driver-specific expression (might ignored drivers). datetime literal value, format \"'YYYY/MM/DD HH:MM:SS[.sss]'\" (considered UTC time). geometry field definition list named elements:   Typically, one geometry field layer, formats support one geometry column per table (e.g., PostGIS). Geometry types specified character string containing OGC WKT. Common types include: Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon. See GDAL documentation list supported geometry types:https://gdal.org/api/vector_c_api.html#_CPPv418OGRwkbGeometryType Format drivers may may support -null constraints attribute geometry fields. support creating fields -null constraints, generally creating features layer. cases, -null constraint may available layer creation option. example, GeoPackage format layer creation option GEOMETRY_NULLABLE=[YES/].","code":"$type       : OGR Field Type (\"OFTReal\", \"OFTString\" etc.) $subtype    : optional (\"OFSTBoolean\", ...) $width      : optional max number of characters $precision  : optional number of digits after the decimal point $is_nullable: optional NOT NULL constraint (logical scalar) $is_unique  : optional UNIQUE constraint (logical scalar) $default    : optional default value as character string $is_ignored : optionally ignored when retrieving features (logical scalar) $is_geom    : FALSE (the default) for attribute fields $type       : geom type (\"Point\", \"Polygon\", etc.) $srs        : optional spatial reference as WKT string $is_nullable: optional NOT NULL constraint (logical scalar) $is_ignored : optionally ignored when retrieving features (logical scalar) $is_geom    : TRUE (required) for geometry fields"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"OGR feature class definition for vector data — ogr_define","text":"feature id (FID) special property feature treated attribute feature. Additional information given GDAL documentation OGR SQL SQLite SQL dialects. Implications SQL statements result sets may depend dialect used. vector formats support schema definition prior creating features. example, GeoJSON Feature object member name properties. specification require Feature objects collection schema properties, require Feature objects collection geometry type (https://geojson.org/).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_define.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OGR feature class definition for vector data — ogr_define","text":"","code":"dsn <- file.path(tempdir(), \"test.sqlite\") opt <- NULL if (has_spatialite())   opt <- \"SPATIALITE=YES\" ogr_ds_create(\"SQLite\", dsn, dsco = opt) #> [1] TRUE  # define a layer defn <- ogr_def_layer(\"Point\", srs = epsg_to_wkt(4326)) defn$fld1_int64 <- ogr_def_field(\"OFTInteger64\") defn$fld2_string <- ogr_def_field(\"OFTString\")  if (ogr_ds_test_cap(dsn)$CreateLayer)   ogr_layer_create(dsn, \"layer1\", layer_defn = defn) #> [1] TRUE  ogr_ds_layer_names(dsn) #> [1] \"layer1\" ogr_layer_field_names(dsn, \"layer1\") #> [1] \"fld1_int64\"  \"fld2_string\" \"GEOMETRY\"     deleteDataset(dsn) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for managing vector data sources — ogr_manage","title":"Utility functions for managing vector data sources — ogr_manage","text":"set functions can used create new vector datasets, test existence dataset/layer/field, test dataset layer capabilities, create new layers existing dataset, delete layers, create new attribute geometry fields existing layer, rename delete fields, edit data SQL statements.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for managing vector data sources — ogr_manage","text":"","code":"ogr_ds_exists(dsn, with_update = FALSE)  ogr_ds_format(dsn)  ogr_ds_test_cap(dsn, with_update = TRUE)  ogr_ds_create(   format,   dsn,   layer = NULL,   layer_defn = NULL,   geom_type = NULL,   srs = NULL,   fld_name = NULL,   fld_type = NULL,   dsco = NULL,   lco = NULL,   overwrite = FALSE )  ogr_ds_layer_count(dsn)  ogr_ds_layer_names(dsn)  ogr_layer_exists(dsn, layer)  ogr_layer_test_cap(dsn, layer, with_update = TRUE)  ogr_layer_create(   dsn,   layer,   layer_defn = NULL,   geom_type = NULL,   srs = NULL,   lco = NULL )  ogr_layer_field_names(dsn, layer)  ogr_layer_rename(dsn, layer, new_name)  ogr_layer_delete(dsn, layer)  ogr_field_index(dsn, layer, fld_name)  ogr_field_create(   dsn,   layer,   fld_name,   fld_defn = NULL,   fld_type = \"OFTInteger\",   fld_subtype = \"OFSTNone\",   fld_width = 0L,   fld_precision = 0L,   is_nullable = TRUE,   is_ignored = FALSE,   is_unique = FALSE,   default_value = \"\" )  ogr_geom_field_create(   dsn,   layer,   fld_name,   geom_fld_defn = NULL,   geom_type = NULL,   srs = NULL,   is_nullable = TRUE,   is_ignored = FALSE )  ogr_field_rename(dsn, layer, fld_name, new_name)  ogr_field_delete(dsn, layer, fld_name)  ogr_execute_sql(dsn, sql, spatial_filter = NULL, dialect = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for managing vector data sources — ogr_manage","text":"dsn Character string. vector data source name, e.g., filename database connection string. with_update Logical scalar. TRUE request update access opening dataset, FALSE open read-. format GDAL short name vector format character string. Examples common output formats include: \"GPKG\", \"FlatGeobuf\", \"ESRI Shapefile\", \"SQLite\". layer Character string layer name vector dataset. layer_defn feature class definition layer list zero attribute field definitions, least one geometry field definition (see ogr_define). field definition list named elements containing values field $type properties. layer_defn given, used additional parameters passed relate feature class definition ignored (.e., geom_type srs, well fld_name fld_type ogr_ds_create()). first geometry field definition layer_defn defines geometry type spatial reference system layer (geom field definition must contain $type, also contain $srs creating layer feature class definition). geom_type Character string specifying geometry type (see Details). srs Character string containing spatial reference system definition OGC WKT well-known format (e.g., input formats usable srs_to_wkt()). fld_name Character string containing name attribute field layer. fld_type Character string containing name field data type (e.g., OFTInteger, OFTReal, OFTString). dsco Optional character vector format-specific creation options dsn (\"NAME=VALUE\" pairs). lco Optional character vector format-specific creation options layer (\"NAME=VALUE\" pairs). overwrite Logical scalar. TRUE overwrite dsn already exists calling ogr_ds_create(). Default FALSE. new_name Character string containing new name assign. fld_defn field definition list (see ogr_def_field()). Additional arguments ogr_field_create() ignored fld_defn given. fld_subtype Character string containing name field subtype. One  OFSTNone (default), OFSTBoolean, OFSTInt16, OFSTFloat32, OFSTJSON, OFSTUUID. fld_width Optional integer scalar specifying max number characters. fld_precision Optional integer scalar specifying number digits decimal point. is_nullable Optional NULL field constraint (logical scalar). Defaults TRUE. is_ignored Whether field ignored retrieving features (logical scalar). Defaults FALSE. is_unique Optional UNIQUE constraint field (logical scalar). Defaults FALSE. default_value Optional default value field character string. geom_fld_defn geometry field definition list (see ogr_def_geom_field()). Additional arguments ogr_geom_field_create() ignored geom_fld_defn given. sql Character string containing SQL statement (see Note). spatial_filter Either numeric vector length four containing bounding box (xmin, ymin, xmax, ymax), character string containing geometry OGC WKT, representing spatial filter. dialect Character string specifying SQL dialect use. OGR SQL engine (\"OGRSQL\") used default value given. \"SQLite\" dialect can also used (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions for managing vector data sources — ogr_manage","text":"functions complementary ogrinfo() ogr2ogr() vector data management. also intended support vector /O future release gdalraster. Bindings OGR wrap portions GDAL Vector API (ogr_core.h ogr_api.h, https://gdal.org/api/vector_c_api.html). ogr_ds_exists() tests whether vector dataset can opened given data source name (DSN), potentially testing update access. Returns logical scalar. ogr_ds_format() returns character string containing short name format driver given DSN, NULL dataset opened vector source. ogr_ds_test_cap() tests capabilities vector data source, attempting open update access default. Returns list capabilities values TRUE FALSE, NULL returned dsn opened requested access. Wrapper GDALDatasetTestCapability() GDAL API. returned list contains following named elements: CreateLayer: TRUE datasource can create new layers DeleteLayer: TRUE datasource can delete existing layers CreateGeomFieldAfterCreateLayer: TRUE layers datasource support geometry field creation just layer creation CurveGeometries: TRUE datasource supports curve geometries Transactions: TRUE datasource supports (efficient) transactions EmulatedTransactions: TRUE datasource supports transactions emulation RandomLayerRead: TRUE datasource dedicated GetNextFeature() implementation, potentially returning features layers non-sequential way RandomLayerWrite: TRUE datasource supports calling CreateFeature() layers non-sequential way ogr_ds_create() creates new vector datasource, optionally also creating layer, optionally creating one fields layer. attribute fields geometry field(s) create can specified feature class definition (layer_defn list, see ogr_define), alternatively, giving geom_type srs, optionally along one fld_name fld_type created layer. Returns logical scalar, TRUE indicating success. ogr_ds_layer_count() returns number layers vector dataset. ogr_ds_layer_names() returns character vector layer names vector dataset, NULL layers found. ogr_layer_exists() tests whether layer can accessed name given vector dataset. Returns logical scalar. ogr_layer_test_cap() tests whether layer supports named capabilities, attempting open dataset update access default. Returns list capabilities values TRUE FALSE. NULL returned dsn opened requested access, layer found. returned list contains following named elements: RandomRead, SequentialWrite, RandomWrite, UpsertFeature, FastSpatialFilter, FastFeatureCount, FastGetExtent, FastSetNextByIndex, CreateField, CreateGeomField, DeleteField, ReorderFields, AlterFieldDefn, AlterGeomFieldDefn, IgnoreFields, DeleteFeature, Rename, StringsAsUTF8, CurveGeometries. See GDAL documentation OGR_L_TestCapability(). ogr_layer_create() creates new layer existing vector data source, specified geometry type spatial reference definition. function also accepts feature class definition given list field names definitions (see ogr_define). (Note: use ogr_ds_create() create single-layer formats \"ESRI Shapefile\", \"FlatGeobuf\", \"GeoJSON\", etc.) Returns logical scalar, TRUE indicating success. ogr_layer_field_names() returns character vector field names layer, NULL fields found. ogr_layer_rename() renames layer vector dataset. operation implemented layers expose Rename capability (see ogr_layer_test_cap() ). operation fail layer new name already exists. Returns logical scalar, TRUE indicating success. Requires GDAL >= 3.5. ogr_layer_delete() deletes existing layer vector dataset. Returns logical scalar, TRUE indicating success. ogr_field_index() tests existence attribute field name. Returns field index layer (0-based), -1 field exist. ogr_field_create() creates new attribute field specified data type given DSN/layer. Several optional field properties can specified addition type. Returns logical scalar, TRUE indicating success. ogr_geom_field_create() creates new geometry field specified type given DSN/layer. Returns logical scalar, TRUE indicating success. ogr_field_rename() renames existing field vector layer. format drivers support function. drivers may support renaming field still features layer. AlterFieldDefn relevant layer capability check. Returns logical scalar, TRUE indicating success. ogr_field_delete() deletes existing field vector layer. format drivers support function. drivers may support deleting field still features layer. Returns logical scalar, TRUE indicating success. ogr_execute_sql() executes SQL statement data store. function can used modify schema edit data using SQL (e.g., ALTER TABLE, DROP TABLE, CREATE INDEX, DROP INDEX, INSERT, UPDATE, DELETE), execute query (.e., SELECT). Returns NULL (invisibly) statements error, results set, object class GDALVector representing results set query. Wrapper GDALDatasetExecuteSQL() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Utility functions for managing vector data sources — ogr_manage","text":"OGR SQL document linked See Also contains information SQL dialect supported internally GDAL/OGR. format drivers (e.g., PostGIS) pass SQL directly underlying RDBMS (unless OGRSQL explicitly passed dialect). SQLite dialect can also requested SQLite string passed dialect argument ogr_execute_sql(). assumes GDAL/OGR built support SQLite, preferably also Spatialite support benefit spatial functions. GDAL document SQLite dialect detailed information. SQL dialects may also present vector formats. example, \"INDIRECT_SQLITE\" dialect might potentially used GeoPackage format (https://gdal.org/drivers/vector/gpkg.html#sql). function ogrinfo() can also used edit data SQL statements (GDAL >= 3.7). name geometry column layer empty (\"\") formats ESRI Shapefile FlatGeobuf. Implications SQL may depend dialect used. See GDAL documentation \"OGR SQL\" \"SQLite\" dialects details.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_manage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions for managing vector data sources — ogr_manage","text":"","code":"dsn <- file.path(tempdir(), \"test1.gpkg\") ogr_ds_create(\"GPKG\", dsn) #> [1] TRUE ogr_ds_exists(dsn, with_update = TRUE) #> [1] TRUE ogr_ds_layer_count(dsn) #> [1] 0 ogr_ds_test_cap(dsn) #> $CreateLayer #> [1] TRUE #>  #> $DeleteLayer #> [1] TRUE #>  #> $CreateGeomFieldAfterCreateLayer #> [1] FALSE #>  #> $CurveGeometries #> [1] TRUE #>  #> $Transactions #> [1] TRUE #>  #> $EmulatedTransactions #> [1] FALSE #>  #> $RandomLayerRead #> [1] FALSE #>  #> $RandomLayerWrite #> [1] TRUE #>  ogr_layer_exists(dsn, \"layer1\") #> [1] FALSE if (ogr_ds_test_cap(dsn)$CreateLayer) {   opt <- c(\"GEOMETRY_NULLABLE=NO\", \"DESCRIPTION=test layer\")   ogr_layer_create(dsn, \"layer1\", geom_type = \"Polygon\", srs = \"EPSG:5070\",                    lco = opt) } #> [1] TRUE ogr_ds_layer_count(dsn) #> [1] 1 ogr_layer_exists(dsn, \"layer1\") #> [1] TRUE ogr_ds_layer_names(dsn) #> [1] \"layer1\"  ogr_layer_field_names(dsn, \"layer1\") #> [1] \"geom\" ogr_field_index(dsn, \"layer1\", \"field1\") #> [1] -1 if (ogr_layer_test_cap(dsn, \"layer1\")$CreateField) {   ogr_field_create(dsn, \"layer1\", \"field1\",                    fld_type = \"OFTInteger64\",                    is_nullable = FALSE)   ogr_field_create(dsn, \"layer1\", \"field2\",                    fld_type = \"OFTString\") } #> [1] TRUE ogr_field_index(dsn, \"layer1\", \"field1\") #> [1] 0 ogr_layer_field_names(dsn, \"layer1\") #> [1] \"field1\" \"field2\" \"geom\"    # delete a field if (ogr_layer_test_cap(dsn, \"layer1\")$DeleteField) {   ogr_field_delete(dsn, \"layer1\", \"field2\") } #> [1] TRUE ogr_layer_field_names(dsn, \"layer1\") #> [1] \"field1\" \"geom\"    # define a feature class (layer definition) defn <- ogr_def_layer(\"Point\", srs = epsg_to_wkt(4326)) # add the attribute fields defn$fld1_name <- ogr_def_field(\"OFTInteger64\",                                 is_nullable = FALSE,                                 is_unique = TRUE) defn$fld2_name <- ogr_def_field(\"OFTString\",                                 fld_width = 25,                                 is_nullable = FALSE,                                 default_value = \"'a default string'\") defn$third_field <- ogr_def_field(\"OFTReal\",                                   default_value = \"0.0\")  ogr_layer_create(dsn, \"layer2\", layer_defn = defn) #> [1] TRUE ogr_ds_layer_names(dsn) #> [1] \"layer1\" \"layer2\" ogr_layer_field_names(dsn, \"layer2\") #> [1] \"fld1_name\"   \"fld2_name\"   \"third_field\" \"geom\"         # add a field using SQL instead sql <- \"ALTER TABLE layer2 ADD field4 float\" ogr_execute_sql(dsn, sql) #> info: open dataset successful on DSN: #>   '/tmp/RtmprS3Ajq/test1.gpkg' ogr_layer_field_names(dsn, \"layer2\") #> [1] \"fld1_name\"   \"fld2_name\"   \"third_field\" \"field4\"      \"geom\"         # rename a field if (ogr_layer_test_cap(dsn, \"layer1\")$AlterFieldDefn) {   ogr_field_rename(dsn, \"layer2\", \"field4\", \"renamed_field\") } #> [1] TRUE ogr_layer_field_names(dsn, \"layer2\") #> [1] \"fld1_name\"     \"fld2_name\"     \"third_field\"   \"renamed_field\" #> [5] \"geom\"           # GDAL >= 3.7 if (as.integer(gdal_version()[2]) >= 3070000)   ogrinfo(dsn, \"layer2\")  # edit data using SQL src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") perims_shp <- file.path(tempdir(), \"mtbs_perims.shp\") ogr2ogr(src, perims_shp, src_layers = \"mtbs_perims\") ogr_ds_format(perims_shp) #> [1] \"ESRI Shapefile\" ogr_ds_layer_names(perims_shp) #> [1] \"mtbs_perims\" ogr_layer_field_names(perims_shp, \"mtbs_perims\") #>  [1] \"event_id\"   \"incid_name\" \"incid_type\" \"map_id\"     \"burn_bnd_a\" #>  [6] \"burn_bnd_l\" \"burn_bnd_1\" \"ig_date\"    \"ig_year\"    \"\"            if (ogr_layer_test_cap(perims_shp, \"mtbs_perims\")$CreateField) {   sql <- \"ALTER TABLE mtbs_perims ADD burn_bnd_ha float\"   ogr_execute_sql(perims_shp, sql)   # with GDAL >= 3.7, equivalent to:   # ogrinfo(perims_shp, cl_arg = c(\"-sql\", sql), read_only = FALSE) } #> info: open dataset successful on DSN: #>   '/tmp/RtmprS3Ajq/mtbs_perims.shp'  sql <- \"UPDATE mtbs_perims SET burn_bnd_ha = (burn_bnd_ac / 2.471)\" ogr_execute_sql(perims_shp, sql, dialect = \"SQLite\") #> info: open dataset successful on DSN: #>   '/tmp/RtmprS3Ajq/mtbs_perims.shp' ogr_layer_field_names(perims_shp, \"mtbs_perims\") #>  [1] \"event_id\"   \"incid_name\" \"incid_type\" \"map_id\"     \"burn_bnd_a\" #>  [6] \"burn_bnd_l\" \"burn_bnd_1\" \"ig_date\"    \"ig_year\"    \"burn_bnd_h\" #> [11] \"\"            # if GDAL >= 3.7: #   ogrinfo(perims_shp, \"mtbs_perims\") # or, for output incl. the feature data (omit the default \"-so\" arg): #   ogrinfo(perims_shp, \"mtbs_perims\", cl_arg = \"-nomd\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":null,"dir":"Reference","previous_headings":"","what":"GDAL OGR facilities for vector geoprocessing — ogr_proc","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"ogr_proc() performs GIS overlay operations vector layers (https://en.wikipedia.org/wiki/Vector_overlay). provides interface GDAL API methods operations (OGRLayer::Intersection(), OGRLayer::Union(), etc). Inputs given objects class GDALVector, may spatial /attribute filters applied. output layer created exist, output can also appended existing layer, written existing empty layer custom schema defined. ogr_proc() basically port ogr_layer_algebra utility GDAL Python bindings.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"","code":"ogr_proc(   mode,   input_lyr,   method_lyr,   out_dsn,   out_lyr_name = NULL,   out_geom_type = NULL,   out_fmt = NULL,   dsco = NULL,   lco = NULL,   mode_opt = NULL,   overwrite = FALSE,   quiet = FALSE,   return_lyr_obj = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"mode Character string specifying operation perform. One Intersection, Union, SymDifference, Identity, Update, Clip Erase (see Details). input_lyr object class GDALVector use input layer. overlay operations, first layer operation. method_lyr object class GDALVector use method layer. conditional layer supplied operation (e.g., Clip, Erase, Update), second layer overlay operations (e.g., Union, Intersection, SymDifference). out_dsn destination vector filename database connection string output layer written. out_lyr_name Layer name output vector written. May NULL (e.g., shapefile), typically must specified. out_geom_type Character string specifying geometry type output layer. One NONE, GEOMETRY, POINT, LINESTRING, POLYGON, GEOMETRYCOLLECTION, MULTIPOINT, MULTIPOLYGON, GEOMETRY25D, POINT25D, LINESTRING25D, POLYGON25D, GEOMETRYCOLLECTION25D, MULTIPOINT25D, MULTIPOLYGON25D. Defaults UNKNOWN specified. out_fmt GDAL short name output vector format. unspecified, function attempt guess format value out_dsn. dsco Optional character vector format-specific creation options out_dsn (\"NAME=VALUE\" pairs). lco Optional character vector format-specific creation options out_layer (\"NAME=VALUE\" pairs). mode_opt Optional character vector \"NAME=VALUE\" pairs specify processing options. Available options depend value mode (see Details). overwrite Logical scalar. TRUE overwrite output layer already exists. Defaults FALSE. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE. return_lyr_obj Logical scalar. TRUE (default), object class GDALVector opened output layer returned, otherwise returns logical value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"Upon successful completion, object class GDALVector returned default (return_lyr_obj = TRUE), logical TRUE returned (invisibly) return_lyr_obj = FALSE. Logical FALSE returned (invisibly) error occurs processing.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"Seven processing modes available: Intersection: output layer contains features whose geometries represent areas common features input layer method layer. features output layer attributes input method layers. Union: output layer contains features whose geometries represent areas either input layer, method layer, . features output layer attributes input method layers. features represent areas input layer method layer respective attributes undefined values. SymDifference: output layer contains features whose geometries represent areas either input layer method layer . features output layer attributes input method layers. features represent areas input method layer respective attributes undefined values. Identity: Identifies features input layer ones method layer. output layer contains features whose geometries represent areas input layer. features output layer attributes input method layers. Update: update method creates layer adds features input layer method layer, possibly cutting features input layer. features output layer areas features method layer areas features input layer covered method layer. features output layer get attributes input layer. Clip: clip method creates layer features input layer clipped areas features method layer. default output layer attributes input layer. Erase: erase method creates layer features input layer whose areas erased features method layer. default, output layer attributes input layer. default, ogr_proc() create output layer empty schema. initialized GDAL contain fields input layer, depending operation, fields input method layers. latter case, prefixes \"input_\" \"method_\" added output field names default. default prefixes can overridden mode_opt argument described . Alternatively, functions ogr_manage interface used create empty layer user-defined schema (e.g., ogr_ds_create(), ogr_layer_create() ogr_field_create()). schema output layer set user contains fields name field input method layers, attribute output feature get value feature method layer. Options affect processing can set NAME=VALUE pairs passed mode_opt argument. options specific certain processing modes noted : SKIP_FAILURES=YES/. Set YES go , even feature inserted GEOS call failed. PROMOTE_TO_MULTI=YES/. Set YES convert Polygons MultiPolygons, LineStrings MultiLineStrings Points MultiPoints (since GDAL 3.9.2 latter). INPUT_PREFIX=string. Set prefix field names created fields input layer. METHOD_PREFIX=string. Set prefix field names created fields method layer. USE_PREPARED_GEOMETRIES=YES/. Set use prepared geometries pretest intersection features method layer features input layer. Applies Intersection, Union, Identity. PRETEST_CONTAINMENT=YES/. Set YES pretest containment features method layer within features input layer. speed operation significantly cases. Requires prepared geometries effect. Applies Intersection. KEEP_LOWER_DIMENSION_GEOMETRIES=YES/. Set skip result features lower dimension geometry otherwise added output layer. default YES, add features lower dimension geometry, result output UNKNOWN geometry type. Applies Intersection, Union, Identity. input method layers spatial reference system. --fly reprojection done. output layer created SRS input_lyr.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"first geometry field always used. best performance use minimum amount features method layer copy memory layer.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogr_proc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GDAL OGR facilities for vector geoprocessing — ogr_proc","text":"","code":"# MTBS fires in Yellowstone National Park 1984-2022 dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # layer filtered to fires since year 2000 lyr1 <- new(GDALVector, dsn, \"mtbs_perims\") lyr1$setAttributeFilter(\"ig_year >= 2000\") lyr1$getFeatureCount() #> [1] 40  # second layer for the 1988 North Fork fire perimeter sql <- paste0(\"SELECT incid_name, ig_year, geom \",               \"FROM mtbs_perims \",               \"WHERE incid_name = 'NORTH FORK'\") lyr2 <- new(GDALVector, dsn, sql) lyr2$getFeatureCount() #> [1] 1  # intersect to obtain areas re-burned since 2000 tmp_dsn <- tempfile(fileext = \".gpkg\") opt <- c(\"INPUT_PREFIX=layer1_\",          \"METHOD_PREFIX=layer2_\",          \"PROMOTE_TO_MULTI=YES\")  lyr_out <- ogr_proc(mode = \"Intersection\",                     input_lyr = lyr1,                     method_lyr = lyr2,                     out_dsn = tmp_dsn,                     out_lyr_name = \"north_fork_reburned\",                     out_geom_type = \"MULTIPOLYGON\",                     mode_opt = opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  # the output layer has attributes of both the input and method layers lyr_out$returnGeomAs <- \"TYPE_NAME\" d <- lyr_out$fetch(-1) print(d) #>   FID       layer1_event_id layer1_incid_name layer1_incid_type layer1_map_id #> 1   1 WY4484611038620100914          ANTELOPE          Wildfire      10013735 #> 2   2 WY4466711063920120810            CYGNET          Wildfire          1961 #> 3   3 WY4474311097820160809             MAPLE          Wildfire      10005020 #> 4   4 WY4492611093820160805              FAWN          Wildfire      10005117 #> 5   5 WY4457911058620160826           CENTRAL          Wildfire      10014143 #>   layer1_burn_bnd_ac layer1_burn_bnd_lat layer1_burn_bnd_lon layer1_ig_date #> 1               4888              44.839            -110.368     2010-09-14 #> 2               3188              44.682            -110.622     2012-08-10 #> 3             103193              44.731            -110.982     2016-08-09 #> 4               3161              44.936            -110.913     2016-08-05 #> 5               2340              44.595            -110.574     2016-08-26 #>   layer1_ig_year layer2_incid_name layer2_ig_year         geom #> 1           2010        NORTH FORK           1988 MULTIPOLYGON #> 2           2012        NORTH FORK           1988 MULTIPOLYGON #> 3           2016        NORTH FORK           1988 MULTIPOLYGON #> 4           2016        NORTH FORK           1988 MULTIPOLYGON #> 5           2016        NORTH FORK           1988 MULTIPOLYGON  # clean up lyr1$close() lyr2$close() lyr_out$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about a vector data source — ogrinfo","title":"Retrieve information about a vector data source — ogrinfo","text":"ogrinfo() wrapper ogrinfo command-line utility (see https://gdal.org/programs/ogrinfo.html). function lists information OGR-supported data source. also possible edit data SQL statements. Refer GDAL documentation URL description command-line arguments can passed cl_arg. Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about a vector data source — ogrinfo","text":"","code":"ogrinfo(   dsn,   layers = NULL,   cl_arg = as.character(c(\"-so\", \"-nomd\")),   open_options = NULL,   read_only = TRUE,   cout = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information about a vector data source — ogrinfo","text":"dsn Character string. Data source name (e.g., filename, database connection string, etc.) layers Optional character vector layer names source dataset. cl_arg Optional character vector command-line arguments ogrinfo command-line utility GDAL (see URL reference). default c(\"-\", \"-nomd\") (see Note). open_options Optional character vector dataset open options. read_only Logical scalar. TRUE open data source read-(default), FALSE open write access. cout Logical scalar. TRUE write info standard C output stream (default). FALSE suppress console output.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information about a vector data source — ogrinfo","text":"Invisibly, character string containing information vector dataset, empty string (\"\") case error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve information about a vector data source — ogrinfo","text":"command-line argument -provides summary , .e., include details every single feature layer. -nomd suppresses metadata printing. datasets may contain lot metadata strings.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/ogrinfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information about a vector data source — ogrinfo","text":"","code":"src <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  # Requires GDAL >= 3.7 if (as.integer(gdal_version()[2]) >= 3070000) {   # Get the names of the layers in a GeoPackage file.   ogrinfo(src)    # Summary of a layer   ogrinfo(src, \"mtbs_perims\")    # JSON format   args <- c(\"-json\", \"-nomd\")   json <- ogrinfo(src, \"mtbs_perims\", args, cout = FALSE)   #info <- jsonlite::fromJSON(json)    # Query an attribute to restrict the output of the features in a layer   args <- c(\"-ro\", \"-nomd\", \"-where\", \"ig_year = 2020\")   ogrinfo(src, \"mtbs_perims\", args)    # Copy to a temporary in-memory file that is writeable   src_mem <- paste0(\"/vsimem/\", basename(src))   vsi_copy_file(src, src_mem)   print(src_mem)    # Add a column to a layer   args <- c(\"-sql\", \"ALTER TABLE mtbs_perims ADD burn_bnd_ha float\")   ogrinfo(src_mem, cl_arg = args, read_only = FALSE)    # Update values of the column with SQL and specify a dialect   sql <- \"UPDATE mtbs_perims SET burn_bnd_ha = (burn_bnd_ac / 2.471)\"   args <- c(\"-dialect\", \"sqlite\", \"-sql\", sql)   ogrinfo(src_mem, cl_arg = args, read_only = FALSE)   DONTSHOW({vsi_unlink(src_mem)}) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Display raster data — plot_raster","title":"Display raster data — plot_raster","text":"plot_raster() displays raster data using base graphics.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display raster data — plot_raster","text":"","code":"plot_raster(   data,   xsize = NULL,   ysize = NULL,   nbands = NULL,   max_pixels = 2.5e+07,   col_tbl = NULL,   maxColorValue = 1,   normalize = TRUE,   minmax_def = NULL,   minmax_pct_cut = NULL,   col_map_fn = NULL,   xlim = NULL,   ylim = NULL,   interpolate = TRUE,   asp = 1,   axes = TRUE,   main = \"\",   xlab = \"x\",   ylab = \"y\",   xaxs = \"i\",   yaxs = \"i\",   legend = FALSE,   digits = 2,   na_col = rgb(0, 0, 0, 0),   ... )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display raster data — plot_raster","text":"data Either GDALRaster object data read, numeric vector pixel values arranged left right, top bottom order, list band vectors. input vector list, information attribute gis used present (see read_ds()), potentially ignoring values xsize, ysize, nbands. xsize number pixels along x dimension data. data GDALRaster object, specifies size raster read (used argument out_xsize GDALRaster$read()). default, entire raster read full resolution. ysize number pixels along y dimension data. data GDALRaster object, specifies size raster read (used argument out_ysize GDALRaster$read()). default, entire raster read full resolution. nbands number bands data. Must either 1 (grayscale) 3 (RGB). RGB, data interleaved band. nbands NULL (default), nbands = 3 assumed input data contain 3 bands, otherwise band 1 used. max_pixels maximum number pixels function attempt display (per band). error raised (xsize * ysize) exceeds value. Setting NULL turns check. col_tbl color table matrix data frame four five columns. Column 1 contains numeric pixel values. Columns 2:4 contain intensities red, green blue primaries (0:1 default, use integer 0:255 setting maxColorValue = 255). optional column 5 may contain alpha transparency values, 0 fully transparent 1 (maxColorValue) opaque (default column 5 missing). data GDALRaster object, built-color table used automatically one exists dataset. maxColorValue number giving maximum color values range col_tbl (see ). default 1. normalize Logical. TRUE rescale pixel values range [0,1], normalized full range pixel data default (min(data), max(data), per band). Ignored col_tbl used. Set normalize FALSE color map function used operates raw pixel values (see col_map_fn ). minmax_def Normalize user-defined min/max values (terms pixel data, per band). single-band grayscale, numeric vector length two containing min, max. 3-band RGB, numeric vector length six containing b1_min, b2_min, b3_min, b1_max, b2_max, b3_max. minmax_pct_cut Normalize truncated range pixel data using percentile cutoffs (removes outliers). numeric vector length two giving percentiles use (e.g., c(2, 98)). Applied per band. Ignored minmax_def used. col_map_fn optional color map function (default grDevices::gray single-band data grDevices::rgb 3-band). Ignored col_tbl used. Set normalize FALSE using color map function operates raw pixel values. xlim Numeric vector length two giving x coordinate range. data GDALRaster object, default raster xmin, xmax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(0, xsize)). ylim Numeric vector length two giving y coordinate range. data GDALRaster object, default raster ymin, ymax georeferenced coordinates, otherwise default uses pixel/line coordinates (c(ysize, 0)). interpolate Logical indicating whether apply linear interpolation image drawing (default TRUE). asp Numeric. aspect ratio y/x (see ?plot.window). axes Logical. TRUE draw axes (default). main main title (top). xlab Title x axis (see ?title). ylab Title y axis (see ?title). xaxs style axis interval calculation used x axis (see ?par). yaxs style axis interval calculation used y axis (see ?par). legend Logical indicating whether include legend plot. Currently, legends supported continuous data. color table used one specified raster built-color table, otherwise value col_map_fn used. digits number digits display decimal point legend labels raster data floating point. na_col Color use NA 7- 9-character hexadecimal code. default transparent (\"#00000000\", return value rgb(0,0,0,0)). ... parameters passed plot.default().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display raster data — plot_raster","text":"default, contrast enhancement stretch min/max applied input data single-band grayscale raster data type, three-band RGB raster data type larger Byte. minimum/maximum input data used default (.e., outlier removal). stretch applied default input RGB byte raster. defaults can overridden specifying either minmax_def argument (user-defined min/max per band), minmax_pct_cut argument (ignore outlier pixels based percentile range per band). settings (normalize argument) ignored color table used.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Display raster data — plot_raster","text":"plot_raster() uses function graphics::rasterImage() plotting supported devices (see ?rasterImage). data object class GDALRaster, plot_raster() attempt read entire raster memory default (unless number pixels per band exceed max_pixels). reduced resolution overview can read setting xsize, ysize smaller raster size disk. (data instead specified vector pixel values, reduced resolution overview read setting out_xsize out_ysize smaller raster region defined xsize, ysize call GDALRaster$read()). GDAL_RASTERIO_RESAMPLING configuration option can defined override default resampling (NEAREST) one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE, example:","code":"set_config_option(\"GDAL_RASTERIO_RESAMPLING\", \"BILINEAR\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display raster data — plot_raster","text":"","code":"## Elevation elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file)  # grayscale plot_raster(ds, legend=TRUE, main=\"Storm Lake elevation (m)\")   # color ramp from user-defined palette elev_pal <- c(\"#00A60E\",\"#63C600\",\"#E6E600\",\"#E9BD3B\",               \"#ECB176\",\"#EFC2B3\",\"#F2F2F2\") ramp <- scales::colour_ramp(elev_pal, alpha=FALSE) plot_raster(ds, col_map_fn=ramp, legend=TRUE,             main=\"Storm Lake elevation (m)\")   ds$close()  ## Landsat band combination b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b6_file <- system.file(\"extdata/sr_b6_20200829.tif\", package=\"gdalraster\") band_files <- c(b6_file, b5_file, b4_file)  r <- vector(\"integer\") for (f in band_files) {   ds <- new(GDALRaster, f)   dm <- ds$dim()   r <- c(r, read_ds(ds))   ds$close() }  plot_raster(r, xsize=dm[1], ysize=dm[2], nbands=3,             main=\"Landsat 6-5-4 (vegetative analysis)\")   ## LANDFIRE Existing Vegetation Cover (EVC) with color map evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\")  # colors from the CSV attribute table distributed by LANDFIRE evc_csv <- system.file(\"extdata/LF20_EVC_220.csv\", package=\"gdalraster\") vat <- read.csv(evc_csv) head(vat) #>   VALUE                        CLASSNAMES   R   G   B      RED    GREEN #> 1 -9999                       Fill-NoData 255 255 255 1.000000 1.000000 #> 2    11                        Open Water   0   0 255 0.000000 0.000000 #> 3    12                          Snow/Ice 159 161 240 0.623529 0.631373 #> 4    13 Developed-Upland Deciduous Forest  64  61 168 0.250980 0.239216 #> 5    14 Developed-Upland Evergreen Forest  68  79 137 0.266667 0.309804 #> 6    15     Developed-Upland Mixed Forest 102 119 205 0.400000 0.466667 #>       BLUE #> 1 1.000000 #> 2 1.000000 #> 3 0.941176 #> 4 0.658824 #> 5 0.537255 #> 6 0.803922 vat <- vat[,c(1,6:8)]  ds <- new(GDALRaster, evc_file) plot_raster(ds, col_tbl=vat, interpolate=FALSE,             main=\"Storm Lake LANDFIRE EVC\")   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polygon feature layer from raster data — polygonize","title":"Create a polygon feature layer from raster data — polygonize","text":"polygonize() creates vector polygons connected regions pixels source raster sharing common pixel value. polygon created attribute indicating pixel value polygon. raster mask may also provided determine pixels eligible processing. function create output vector layer already exist, otherwise try append existing one. function wrapper GDALPolygonize GDAL Algorithms API. provides essentially functionality gdal_polygonize.py command-line program (https://gdal.org/programs/gdal_polygonize.html).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polygon feature layer from raster data — polygonize","text":"","code":"polygonize(   raster_file,   out_dsn,   out_layer,   fld_name = \"DN\",   out_fmt = NULL,   connectedness = 4,   src_band = 1,   mask_file = NULL,   nomask = FALSE,   overwrite = FALSE,   dsco = NULL,   lco = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polygon feature layer from raster data — polygonize","text":"raster_file Filename source raster. out_dsn destination vector filename polygons written (database connection string). out_layer Name layer writing polygon features. single-layer file formats \"ESRI Shapefile\", layer name filename without path extension (e.g., out_dsn = \"path_to_file/polygon_output.shp\", layer name \"polygon_output\"). fld_name Name integer attribute field out_layer pixel values written. created necessary using existing layer. out_fmt GDAL short name output vector format. unspecified, function attempt guess format filename/connection string. connectedness Integer scalar. Must either 4 8. default 4-connectedness, pixels value considered connected touch along one four sides, 8-connectedness also includes pixels touch one corners. src_band band raster_file build polygons (default 1). mask_file Use first band specified raster validity mask (zero invalid, non-zero valid). specified, default validity mask input band (nodata, alpha masks) used (unless nomask set TRUE). nomask Logical scalar. TRUE, use default validity mask input band (nodata, alpha masks). Default FALSE. overwrite Logical scalar. TRUE, overwrite out_layer already exists. Default FALSE. dsco Optional character vector format-specific creation options out_dsn (\"NAME=VALUE\" pairs). lco Optional character vector format-specific creation options out_layer (\"NAME=VALUE\" pairs). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a polygon feature layer from raster data — polygonize","text":"Polygon features created output layer, polygon geometries representing polygons. polygon geometries georeferenced coordinate system raster (based geotransform source dataset). acceptable output layer already features. output layer already exist, created coordinate system matching source raster. algorithm attempts minimize memory use large rasters can processed. However, raster many polygons large/complex polygons, memory use holding polygon enumerations active polygon geometries may grow quite large. algorithm generally produce dense polygon geometries, edges follow exactly pixel boundaries non-interior pixels. non-thematic raster data (satellite images) result essentially one small polygon per pixel, memory output layer sizes substantial. algorithm primarily intended relatively simple thematic rasters, masks, classification results.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a polygon feature layer from raster data — polygonize","text":"source pixel band values read signed 64-bit integer buffer (Int64) GDALPolygonize, floating point complex bands implicitly truncated processing. 8-connectedness used, many resulting polygons likely invalid due ring self-intersection (strict OGC definition polygon validity). may suitable -certain purposes calculating geometry attributes (area, perimeter). Package sf st_make_valid(), PostGIS ST_MakeValid(), QGIS vector processing utility \"Fix geometries\" (single polygons can become MultiPolygon case self-intersections). writing SQLite database format either GPKG (GeoPackage vector) SQLite (Spatialite vector), setting SQLITE_USE_OGR_VFS OGR_SQLITE_JOURNAL configuration options may increase performance substantially. writing PostgreSQL (PostGIS vector), setting PG_USE_COPY=YES faster:","code":"# SQLite: GPKG (.gpkg) and Spatialite (.sqlite) # enable extra buffering/caching by the GDAL/OGR I/O layer set_config_option(\"SQLITE_USE_OGR_VFS\", \"YES\") # set the journal mode for the SQLite database to MEMORY set_config_option(\"OGR_SQLITE_JOURNAL\", \"MEMORY\")  # PostgreSQL / PostGIS # use COPY for inserting data rather than INSERT set_config_option(\"PG_USE_COPY\", \"YES\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/polygonize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a polygon feature layer from raster data — polygonize","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") dsn <- file.path(tempdir(), \"storm_lake.gpkg\") layer <- \"lf_evt\" fld <- \"evt_value\" set_config_option(\"SQLITE_USE_OGR_VFS\", \"YES\") set_config_option(\"OGR_SQLITE_JOURNAL\", \"MEMORY\") polygonize(evt_file, dsn, layer, fld) #> 0...10...20...30...40...50...60...70...80...90...100 - done. set_config_option(\"SQLITE_USE_OGR_VFS\", \"\") set_config_option(\"OGR_SQLITE_JOURNAL\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Pop error handler off stack — pop_error_handler","title":"Pop error handler off stack — pop_error_handler","text":"pop_error_handler() wrapper CPLPopErrorHandler() GDAL Common Portability Library. Discards current error handler error handler stack, restores one use last push_error_handler() call. method effect error handlers current thread's error handler stack.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pop error handler off stack — pop_error_handler","text":"","code":"pop_error_handler()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pop error handler off stack — pop_error_handler","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/pop_error_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pop error handler off stack — pop_error_handler","text":"","code":"push_error_handler(\"quiet\") # ... pop_error_handler()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":null,"dir":"Reference","previous_headings":"","what":"Check, enable or disable PROJ networking capabilities — proj_networking","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"proj_networking() returns status PROJ networking capabilities, optionally enabling disabling first. Requires GDAL 3.4 later PROJ 7 later.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"","code":"proj_networking(enabled = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"enabled Optional logical scalar. Set TRUE enable networking capabilities FALSE disable.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"Logical TRUE PROJ networking capabilities enabled (indicated return value OSRGetPROJEnableNetwork() GDAL Spatial Reference System C API). Logical NA returned GDAL < 3.4.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"","code":"proj_networking() #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set search path(s) for PROJ resource files — proj_search_paths","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"proj_search_paths() returns search path(s) PROJ resource files, optionally setting first.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"","code":"proj_search_paths(paths = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"paths Optional character vector containing one directory paths set.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"character vector containing currently used search path(s) PROJ resource files. empty string (\"\") returned search paths returned function OSRGetPROJSearchPaths() GDAL Spatial Reference System C API.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"","code":"proj_search_paths() #> [1] \"/home/runner/.local/share/proj\" \"/usr/share/proj\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PROJ version — proj_version","title":"Get PROJ version — proj_version","text":"proj_version() returns version information PROJ library use GDAL.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PROJ version — proj_version","text":"","code":"proj_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PROJ version — proj_version","text":"list length four containing: name - string formatted \"major.minor.patch\" major - major version integer minor - minor version integer patch - patch version integer","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PROJ version — proj_version","text":"","code":"proj_version() #> $name #> [1] \"8.2.1\" #>  #> $major #> [1] 8 #>  #> $minor #> [1] 2 #>  #> $patch #> [1] 1 #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Push a new GDAL CPLError handler — push_error_handler","title":"Push a new GDAL CPLError handler — push_error_handler","text":"push_error_handler() wrapper CPLPushErrorHandler() GDAL Common Portability Library. pushes new error handler thread-local error handler stack. handler used removed pop_error_handler(). typical use temporarily set CPLQuietErrorHandler() make attempt report passed error warning messages, process debug messages via CPLDefaultErrorHandler.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push a new GDAL CPLError handler — push_error_handler","text":"","code":"push_error_handler(handler)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push a new GDAL CPLError handler — push_error_handler","text":"handler Character name error handler push. One quiet, logging default.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push a new GDAL CPLError handler — push_error_handler","text":"return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Push a new GDAL CPLError handler — push_error_handler","text":"Setting handler = \"logging\" use CPLLoggingErrorHandler(), error handler logs file defined CPL_LOG configuration option, stderr otherwise. affects error reporting GDAL.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/push_error_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push a new GDAL CPLError handler — push_error_handler","text":"","code":"push_error_handler(\"quiet\") # ... pop_error_handler()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a raster from an existing raster as template — rasterFromRaster","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. Optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"rasterFromRaster(   srcfile,   dstfile,   fmt = NULL,   nbands = NULL,   dtName = NULL,   options = NULL,   init = NULL,   dstnodata = init )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"srcfile Source raster filename. dstfile Output raster filename. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename fmt specified. nbands Number output bands. dtName Output raster data type name. Commonly used types include \"Byte\", \"Int16\", \"UInt16\", \"Int32\" \"Float32\". options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). init Numeric value initialize pixels output raster. dstnodata Numeric nodata value output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"Returns destination filename invisibly.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"# band 2 in a FARSITE landscape file has slope degrees # convert slope degrees to slope percent in a new raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file) ds_lcp$getMetadata(band=2, domain=\"\") #> [1] \"SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tifegrees\"                                                                                                                slpp_file <- file.path(tempdir(), \"storml_slpp.tif\") opt = c(\"COMPRESS=LZW\") rasterFromRaster(srcfile = lcp_file,                  dstfile = slpp_file,                  nbands = 1,                  dtName = \"Int16\",                  options = opt,                  init = -32767) #> initializing destination raster... #> done ds_slp <- new(GDALRaster, slpp_file, read_only=FALSE)  # slpp_file is initialized to -32767 and nodata value set ds_slp$getNoDataValue(band=1) #> [1] -32767  # extent and cell size are the same as lcp_file ds_lcp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res() #> [1] 30 30 ds_slp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_slp$res() #> [1] 30 30  # convert slope degrees in lcp_file band 2 to slope percent in slpp_file # bring through LCP nodata -9999 to the output nodata value ncols <- ds_slp$getRasterXSize() nrows <- ds_slp$getRasterYSize() for (row in 0:(nrows-1)) {     rowdata <- ds_lcp$read(band=2,                            xoff=0, yoff=row,                            xsize=ncols, ysize=1,                            out_xsize=ncols, out_ysize=1)     rowslpp <- tan(rowdata*pi/180) * 100     rowslpp[rowdata==-9999] <- -32767     dim(rowslpp) <- c(1, ncols)     ds_slp$write(band=1, xoff=0, yoff=row, xsize=ncols, ysize=1, rowslpp) }  # min, max, mean, sd ds_slp$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 138.00000  44.76464  26.79985  ds_slp$close() ds_lcp$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"rasterToVRT() creates virtual raster dataset (VRT format) derived one source dataset options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter. (See buildVRT() virtual mosaicing.)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"","code":"rasterToVRT(   srcfile,   relativeToVRT = FALSE,   vrtfile = tempfile(\"tmprast\", fileext = \".vrt\"),   resolution = NULL,   subwindow = NULL,   src_align = TRUE,   resampling = \"nearest\",   krnl = NULL,   normalized = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"srcfile Source raster filename. relativeToVRT Logical. Indicates whether source filename interpreted relative .vrt file (TRUE) relative .vrt file (FALSE, default). TRUE, .vrt file assumed directory srcfile basename(srcfile) used .vrt file. Use TRUE .vrt file always stored directory srcfile. vrtfile Output VRT filename. resolution numeric vector length two (xres, yres). pixel size must expressed georeferenced units. must positive values. source pixel size used resolution specified. subwindow numeric vector length four (xmin, ymin, xmax, ymax). Selects subwindow source raster corners given georeferenced coordinates (source CRS). given, upper left corner VRT source, VRT extent larger source depending resolution. src_align Logical. TRUE: upper left corner VRT extent set upper left corner source pixel contains subwindow xmin, ymax. VRT pixel-aligned source VRT resolution source pixel size, otherwise VRT extent minimum rectangle contains subwindow given pixel size. Often, src_align=TRUE selecting raster minimum bounding box vector polygon. FALSE: VRT upper left corner exactly subwindow xmin, ymax, VRT extent minimum rectangle contains subwindow given pixel size. subwindow given, source raster extent used case src_align=FALSE effect. Use src_align=FALSE pixel-align two rasters different sizes, .e., intent target alignment. resampling resampling method use xsize, ysize VRT different size underlying source rectangle (number pixels). values allowed nearest, bilinear, cubic, cubicspline, lanczos, average mode (character). krnl filtering kernel specified pixel coefficients. krnl array dimensions (size, size), size must odd number. krnl can also given vector length size x size. example, 3x3 average filter given : kernel applied sub-sampled -sampled data. normalized Logical. Indicates whether kernel normalized. Defaults TRUE.","code":"krnl <- c( 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"Returns VRT filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"rasterToVRT() can used virtually clip pixel-align various raster layers relation vector polygon boundaries. also supports VRT kernel filtering. VRT dataset saved plain-text file extension .vrt. file contains description dataset XML format. description includes source raster filename can full path (relativeToVRT = FALSE) relative path (relativeToVRT = TRUE). relative path, rasterToVRT() assumes .vrt file directory source file uses basename(srcfile). elements XML schema describe source data read, along algorithms potentially applied forth. Documentation XML format .vrt : https://gdal.org/drivers/raster/vrt.html. Since .vrt small plain-text file fast write requires little storage space. Read performance degraded certain simple operations (e.g., virtual clip without resampling). Reading slower virtual resampling different pixel resolution virtual kernel filtering since operations performed --fly (.vrt require front writing resampled kernel-filtered raster regular format). VRT sometimes useful intermediate raster series processing steps, e.g., tempfile (default). GDAL VRT format several capabilities uses beyond covered rasterToVRT(). See URL full discussion.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"Pixel alignment specified terms source raster pixels (.e., srcfile virtual raster). use case mind virtually clipping raster bounding box vector polygon keeping pixels aligned srcfile (src_align = TRUE). src_align set FALSE intent \"target alignment\". example, subwindow bounding box another raster different layout, also setting resolution pixel resolution target raster src_align = FALSE result virtual raster pixel-aligned target (.e., pixels virtual raster longer aligned srcfile). Resampling defaults nearest specified. Examples cases src_align given . rasterToVRT() assumes srcfile north-raster.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a GDAL virtual raster derived from one source dataset — rasterToVRT","text":"","code":"## resample  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds <- new(GDALRaster, evt_file) ds$res() #> [1] 30 30 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$close()  # table of the unique pixel values and their counts tbl <- buildRAT(evt_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(tbl) #>    VALUE COUNT #> 1   7011    28 #> 2   7046  4564 #> 3   7050   570 #> 4   7055   889 #> 5   7056   304 #> 6   7057    11 #> 7   7070   267 #> 8   7106     3 #> 9   7125     1 #> 10  7126  1082 #> 11  7140   679 #> 12  7143   199 #> 13  7144   765 #> 14  7145   681 #> 15  7166    32 #> 16  7169    60 #> 17  7292   397 #> 18  7901     2 #> 19  9016  2486 #> 20  9017    13 #> 21  9018  1280 #> 22  9021    14 #> 23  9022    98 #> 24    NA   876 sum(tbl$COUNT) #> [1] 15301  # resample at 90-m resolution # EVT is thematic vegetation type so use a majority value vrt_file <- rasterToVRT(evt_file,                         resolution=c(90,90),                         resampling=\"mode\")  # .vrt is a small xml file pointing to the source raster file.size(vrt_file) #> [1] 1635  tbl90m <- buildRAT(vrt_file) #> scanning raster... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(tbl90m) #>    VALUE COUNT #> 1   7011     1 #> 2   7046   614 #> 3   7050    59 #> 4   7055    75 #> 5   7056    27 #> 6   7057     2 #> 7   7070    27 #> 8   7126   119 #> 9   7140    59 #> 10  7143    13 #> 11  7144    75 #> 12  7145    64 #> 13  7166     2 #> 14  7169     4 #> 15  7292    48 #> 16  9016   322 #> 17  9017     1 #> 18  9018   152 #> 19  9021     1 #> 20  9022     9 #> 21    NA    54 sum(tbl90m$COUNT) #> [1] 1728  ds <- new(GDALRaster, vrt_file) ds$res() #> [1] 90 90 ds$bbox() #> [1]  323476.1 5101842.0  327796.1 5105082.0 ds$close()  ## clip  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds_evt <- new(GDALRaster, evt_file) ds_evt$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0  # WKT string for a boundary within the EVT extent bnd = \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2 5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5, 325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\"  # src_align = TRUE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=TRUE) ds_vrt <- new(GDALRaster, vrt_file)  # VRT is a virtual clip, pixel-aligned with the EVT raster bbox_from_wkt(bnd) #> [1]  323794.2 5102885.8  326420.0 5104929.4 ds_vrt$bbox() #> [1]  323776.1 5102862.0  326446.1 5104932.0 ds_vrt$res() #> [1] 30 30 ds_vrt$close()  # src_align = FALSE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=FALSE) ds_vrt_noalign <- new(GDALRaster, vrt_file)  # VRT upper left corner (xmin, ymax) is exactly bnd xmin, ymax ds_vrt_noalign$bbox() #> [1]  323794.2 5102859.4  326434.2 5104929.4 ds_vrt_noalign$res() #> [1] 30 30  ds_vrt_noalign$close() ds_evt$close()   ## subset and pixel align two rasters  # FARSITE landscape file for the Storm Lake area lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file)  # Landsat band 5 file covering the Storm Lake area b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds_b5 <- new(GDALRaster, b5_file)  ds_lcp$bbox()  # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res()   # 30 30 #> [1] 30 30  ds_b5$bbox()   # 323400.9 5101815.8  327870.9 5105175.8 #> [1]  323400.9 5101815.8  327870.9 5105175.8 ds_b5$res()    # 30 30 #> [1] 30 30  # src_align = FALSE because we need target alignment in this case: vrt_file <- rasterToVRT(b5_file,                         resolution = ds_lcp$res(),                         subwindow = ds_lcp$bbox(),                         src_align = FALSE) ds_b5vrt <- new(GDALRaster, vrt_file)  ds_b5vrt$bbox() # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_b5vrt$res()  # 30 30 #> [1] 30 30  # read the the Landsat file pixel-aligned with the LCP file # summarize band 5 reflectance where FBFM = 165 # LCP band 4 contains FBFM (a classification of fuel beds): ds_lcp$getMetadata(band=4, domain=\"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           # verify Landsat nodata (0): ds_b5vrt$getNoDataValue(band=1) #> [1] 0 # will be read as NA and omitted from stats rs <- new(RunningStats, na_rm=TRUE)  ncols <- ds_lcp$getRasterXSize() nrows <- ds_lcp$getRasterYSize() for (row in 0:(nrows-1)) {     row_fbfm <- ds_lcp$read(band=4, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)     row_b5 <- ds_b5vrt$read(band=1, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)      rs$update(row_b5[row_fbfm == 165]) } rs$get_count() #> [1] 2498 rs$get_mean() #> [1] 12992.35 rs$get_min() #> [1] 7635 rs$get_max() #> [1] 17866 rs$get_sum() #> [1] 32454886 rs$get_var() #> [1] 1214912 rs$get_sd() #> [1] 1102.23  ds_b5vrt$close() ds_lcp$close() ds_b5$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":null,"dir":"Reference","previous_headings":"","what":"Burn vector geometries into a raster — rasterize","title":"Burn vector geometries into a raster — rasterize","text":"rasterize() burns vector geometries (points, lines, polygons) band(s) raster dataset. Vectors read GDAL OGR-supported vector format. function wrapper gdal_rasterize command-line utility (https://gdal.org/programs/gdal_rasterize.html).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Burn vector geometries into a raster — rasterize","text":"","code":"rasterize(   src_dsn,   dstfile,   band = NULL,   layer = NULL,   where = NULL,   sql = NULL,   burn_value = NULL,   burn_attr = NULL,   invert = NULL,   te = NULL,   tr = NULL,   tap = NULL,   ts = NULL,   dtName = NULL,   dstnodata = NULL,   init = NULL,   fmt = NULL,   co = NULL,   add_options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Burn vector geometries into a raster — rasterize","text":"src_dsn Data source name input vector layer (filename connection string). dstfile Filename output raster. Must support update mode access. file created (overwritten already exists - see Note). band Numeric vector. band(s) burn values (existing dstfile). default burn band 1. used creating new raster. layer Character vector layer names(s) src_dsn  used input features. least one layer name sql option must specified. optional SQL style query string select features burn input layer(s). sql SQL statement evaluated src_dsn produce virtual layer features burned (alternative layer). burn_value fixed numeric value burn band features. numeric vector can supplied, one burn value per band written . burn_attr Character string. Name attribute field features used burn-value. value burned output bands. invert Logical scalar. TRUE invert rasterization. Burn fixed burn value, burn value associated first feature, parts raster inside provided polygon. te Numeric vector length four. Sets output raster extent. values must expressed georeferenced units. specified, extent output raster extent vector layer. tr Numeric vector length two. Sets target pixel resolution. values must expressed georeferenced units. must positive. tap Logical scalar. (target aligned pixels) Align coordinates extent output raster values tr, aligned extent includes minimum extent. Alignment means xmin / resx, ymin / resy, xmax / resx ymax / resy integer values. ts Numeric vector length two. Sets output raster size pixels (xsize, ysize). Note ts used tr. dtName Character name output raster data type, e.g., Byte, Int16, UInt16, Int32, UInt32, Float32, Float64. Defaults Float64. dstnodata Numeric scalar. Assign nodata value output bands. init Numeric vector. Pre-initialize output raster band(s) value(s). However, marked nodata value output file. one value given, value used bands. fmt Output raster format short name (e.g., \"GTiff\"). attempt guess output filename fmt specified. co Optional list format-specific creation options output raster vector \"NAME=VALUE\" pairs (e.g., options = c(\"TILED=YES\",\"COMPRESS=LZW\") set LZW compression creation tiled GTiff file). add_options optional character vector additional command-line options gdal_rasterize (see gdal_rasterize documentation URL available options). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Burn vector geometries into a raster — rasterize","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Burn vector geometries into a raster — rasterize","text":"function creates new target raster fmt, dstnodata, init, co, te, tr, tap, ts, dtName arguments used. resolution size must specified using tr ts argument new rasters. target raster overwritten already exists creation-related options used.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Burn vector geometries into a raster — rasterize","text":"","code":"# MTBS fire perimeters for Yellowstone National Park 1984-2022 dsn <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\") sql <- \"SELECT * FROM mtbs_perims ORDER BY mtbs_perims.ig_year\" out_file <- file.path(tempdir(), \"ynp_fires_1984_2022.tif\")  rasterize(src_dsn = dsn,           dstfile = out_file,           sql = sql,           burn_attr = \"ig_year\",           tr = c(90,90),           tap = TRUE,           dtName = \"Int16\",           dstnodata = -9999,           init = -9999,           co = c(\"TILED=YES\",\"COMPRESS=LZW\")) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, out_file) pal <- scales::viridis_pal(end = 0.8, direction = -1)(6) ramp <- scales::colour_ramp(pal) plot_raster(ds, legend = TRUE, col_map_fn = ramp, na_col = \"#d9d9d9\",             main=\"YNP Fires 1984-2022 - Most Recent Burn Year\")   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper for GDALRaster$read() — read_ds","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"read_ds() read raster dataset already open GDALRaster object. default, attempts read full raster extent bands full resolution. read_ds() sometimes convenient GDALRaster$read(), e.g., read specific multiple bands display plot_raster(), simply argument defaults read entire raster memory (see Note).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"","code":"read_ds(   ds,   bands = NULL,   xoff = 0,   yoff = 0,   xsize = ds$getRasterXSize(),   ysize = ds$getRasterYSize(),   out_xsize = xsize,   out_ysize = ysize,   as_list = FALSE,   as_raw = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"ds object class GDALRaster open state. bands Integer vector band numbers read. default bands read. xoff Integer. pixel (column) offset top left corner raster region read (zero start left side). yoff Integer. line (row) offset top left corner raster region read (zero start top). xsize Integer. width pixels region read. ysize Integer. height pixels region read. out_xsize Integer. width pixels output buffer desired region read (e.g., read reduced resolution overview). out_ysize Integer. height pixels output buffer desired region read (e.g., read reduced resolution overview). as_list Logical. TRUE, return output list band vectors. FALSE (default), output vector pixel data interleaved band. as_raw Logical. TRUE underlying data type Byte, return output R's raw vector type. maps setting $readByteAsRaw GDALRaster object, used temporarily update field function. control behaviour persistent way data set see $readByteAsRaw GDALRaster-class.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"as_list = FALSE (default), numeric complex vector containing values read. organized left right, top bottom pixel order, interleaved band. as_list = TRUE, list number elements equal number bands read. element contains numeric complex vector containing pixel data read band.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64). output object attribute gis, list containing: WKT version used projection string can overridden setting OSR_WKT_FORMAT configuration option. See srs_to_wkt() list supported values.","code":"$type = \"raster\"   $bbox = c(xmin, ymin, xmax, ymax)   $dim = c(xsize, ysize, nbands)   $srs = <projection as WKT2 string>   $datatype = <character vector of data type name by band>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"small overhead calling read_ds() compared calling GDALRaster$read() directly. matter calling function repeatedly read raster chunks. case reading large raster many chunks, optimal performance-wise call GDALRaster$read() directly. default, function attempt read full raster memory. generally called large raster datasets using default argument values. memory size bytes returned vector approximately (xsize * ysize * number bands * 4) data read integer, (xsize * ysize * number bands * 8) data read double (plus small object overhead vector).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"","code":"# read three bands from a multi-band dataset lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file)  # as a vector of pixel data interleaved by band r <- read_ds(ds, bands=c(6,5,4)) typeof(r) #> [1] \"integer\" length(r) #> [1] 45903 object.size(r) #> 185768 bytes  # as a list of band vectors r <- read_ds(ds, bands=c(6,5,4), as_list=TRUE) typeof(r) #> [1] \"list\" length(r) #> [1] 3 object.size(r) #> 185952 bytes  # gis attribute list attr(r, \"gis\") #> $type #> [1] \"raster\" #>  #> $bbox #> [1]  323476.1 5101872.0  327766.1 5105082.0 #>  #> $dim #> [1] 143 107   3 #>  #> $srs #> [1] \"PROJCRS[\\\"NAD83 / UTM zone 12N\\\",BASEGEOGCRS[\\\"NAD83\\\",DATUM[\\\"North American Datum 1983\\\",ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,LENGTHUNIT[\\\"metre\\\",1]],ID[\\\"EPSG\\\",6269]],PRIMEM[\\\"Greenwich\\\",0,ANGLEUNIT[\\\"Degree\\\",0.0174532925199433]]],CONVERSION[\\\"UTM zone 12N\\\",METHOD[\\\"Transverse Mercator\\\",ID[\\\"EPSG\\\",9807]],PARAMETER[\\\"Latitude of natural origin\\\",0,ANGLEUNIT[\\\"Degree\\\",0.0174532925199433],ID[\\\"EPSG\\\",8801]],PARAMETER[\\\"Longitude of natural origin\\\",-111,ANGLEUNIT[\\\"Degree\\\",0.0174532925199433],ID[\\\"EPSG\\\",8802]],PARAMETER[\\\"Scale factor at natural origin\\\",0.9996,SCALEUNIT[\\\"unity\\\",1],ID[\\\"EPSG\\\",8805]],PARAMETER[\\\"False easting\\\",500000,LENGTHUNIT[\\\"metre\\\",1],ID[\\\"EPSG\\\",8806]],PARAMETER[\\\"False northing\\\",0,LENGTHUNIT[\\\"metre\\\",1],ID[\\\"EPSG\\\",8807]],ID[\\\"EPSG\\\",16012]],CS[Cartesian,2],AXIS[\\\"easting\\\",east,ORDER[1],LENGTHUNIT[\\\"metre\\\",1,ID[\\\"EPSG\\\",9001]]],AXIS[\\\"northing\\\",north,ORDER[2],LENGTHUNIT[\\\"metre\\\",1,ID[\\\"EPSG\\\",9001]]]]\" #>  #> $datatype #> [1] \"Int16\" \"Int16\" \"Int16\" #>   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a dataset — renameDataset","title":"Rename a dataset — renameDataset","text":"renameDataset() renames dataset format-specific way (e.g., rename associated files appropriate). include moving dataset new directory even new filesystem. dataset open existing GDALRaster objects renameDataset() called. Wrapper GDALRenameDataset() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a dataset — renameDataset","text":"","code":"renameDataset(new_filename, old_filename, format = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a dataset — renameDataset","text":"new_filename New name dataset. old_filename Old name dataset (open GDALRaster object). format Raster format short name (e.g., \"GTiff\"). set empty string \"\" (default), attempt guess raster format old_filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a dataset — renameDataset","text":"Logical TRUE error FALSE failure.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rename a dataset — renameDataset","text":"format set empty string \"\" (default) function try identify driver old_filename. done internally GDAL invoking Identify method registered GDALDriver turn. first driver successful identifies file name returned. error raised format determined passed file name.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/renameDataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a dataset — renameDataset","text":"","code":"b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b5_tmp <- file.path(tempdir(), \"b5_tmp.tif\") file.copy(b5_file,  b5_tmp) #> [1] TRUE  ds <- new(GDALRaster, b5_tmp) ds$buildOverviews(\"BILINEAR\", levels = c(2, 4, 8), bands = c(1)) #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds$getFileList() #> [1] \"/tmp/RtmprS3Ajq/b5_tmp.tif\"     \"/tmp/RtmprS3Ajq/b5_tmp.tif.ovr\" ds$close() b5_tmp2 <- file.path(tempdir(), \"b5_tmp_renamed.tif\") renameDataset(b5_tmp2, b5_tmp) #> [1] TRUE ds <- new(GDALRaster, b5_tmp2) ds$getFileList() #> [1] \"/tmp/RtmprS3Ajq/b5_tmp_renamed.tif\"     #> [2] \"/tmp/RtmprS3Ajq/b5_tmp_renamed.tif.ovr\" ds$close()  deleteDataset(b5_tmp2) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GDAL configuration option — set_config_option","title":"Set GDAL configuration option — set_config_option","text":"set_config_option() sets GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(key, value)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GDAL configuration option — set_config_option","text":"key Character name configuration option. value Character value set option. value = \"\" (empty string) unset value previously set set_config_option().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set GDAL configuration option — set_config_option","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(\"GDAL_CACHEMAX\", \"10%\") get_config_option(\"GDAL_CACHEMAX\") #> [1] \"10%\" ## unset: set_config_option(\"GDAL_CACHEMAX\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove small raster polygons — sieveFilter","title":"Remove small raster polygons — sieveFilter","text":"sieveFilter() wrapper GDALSieveFilter() GDAL Algorithms API. removes raster polygons smaller provided threshold size (pixels) replaces pixel value largest neighbour polygon.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove small raster polygons — sieveFilter","text":"","code":"sieveFilter(   src_filename,   src_band,   dst_filename,   dst_band,   size_threshold,   connectedness,   mask_filename = \"\",   mask_band = 0L,   options = NULL,   quiet = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove small raster polygons — sieveFilter","text":"src_filename Filename source raster processed. src_band Band number source raster processed. dst_filename Filename output raster. may src_filename update source file place. dst_band Band number dst_filename write output. may src_band update source raster place. size_threshold Integer. Raster polygons sizes (pixels) smaller value merged largest neighbour. connectedness Integer. Either 4 indicating diagonal pixels considered directly adjacent polygon membership purposes, 8 indicating . mask_filename Optional filename raster use mask. mask_band Band number mask_filename use mask. pixels mask band value zero considered suitable inclusion polygons. options Algorithm options character vector name=value pairs. None currently supported. quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove small raster polygons — sieveFilter","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove small raster polygons — sieveFilter","text":"Polygons determined regions raster pixels value, contiguous (connected). Pixels determined \"nodata\" per mask band treated part polygon regardless pixel values. Nodata areas never changed affect polygon sizes. Polygons smaller threshold neighbours large threshold altered. Polygons surrounded nodata areas therefore altered. algorithm makes three passes input file enumerate polygons collect limited information . Memory use proportional number polygons (roughly 24 bytes per polygon), directly related size raster. large raster files can processed effectively many polygons. extremely noisy rasters many one pixel polygons end expensive (memory) process. input dataset read integer data means floating point values rounded integers.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove small raster polygons — sieveFilter","text":"","code":"## remove single-pixel polygons from the vegetation type layer (EVT) evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\")  # create a blank raster to hold the output evt_mmu_file <- file.path(tempdir(), \"storml_evt_mmu2.tif\") rasterFromRaster(srcfile = evt_file,                  dstfile = evt_mmu_file,                  init = 32767) #> initializing destination raster... #> done  # create a mask to exclude water pixels from the algorithm # recode water (7292) to 0 expr <- \"ifelse(EVT == 7292, 0, EVT)\" mask_file <- calc(expr = expr,                   rasterfiles = evt_file,                   var.names = \"EVT\") #> calculating from 1 input layer(s)... #> ================================================================================ #> output written to: /tmp/RtmprS3Ajq/rastcalc1d4e77386c7f.tif  # create a version of EVT with two-pixel minimum mapping unit sieveFilter(src_filename = evt_file,             src_band = 1,             dst_filename = evt_mmu_file,             dst_band = 1,             size_threshold = 2,             connectedness = 8,             mask_filename = mask_file,             mask_band = 1) #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_find_epsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","title":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","text":"srs_find_epsg() accepts spatial reference system definition various text formats tries find matching EPSG code. See srs_to_wkt() description possible input formats. function interface OSRFindMatches() GDAL Spatial Reference System API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_find_epsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","text":"","code":"srs_find_epsg(srs, all_matches = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_find_epsg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","text":"srs Character string containing SRS definition various formats (e.g., WKT, PROJ.4 string, well known name NAD27, NAD83, WGS84, etc). all_matches Logical scalar. TRUE return identified matches data frame, including confidence value (0-100) match. default FALSE returns character string form \"EPSG:<code>\" first match (highest confidence).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_find_epsg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","text":"Character string data frame, NULL matching failed.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_find_epsg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","text":"Matching may partial, may fail. Returned entries sorted decreasing match confidence (first entry highest match confidence).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_find_epsg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try to identify a matching EPSG code for a given SRS definition — srs_find_epsg","text":"","code":"srs_find_epsg(\"WGS84\") #> [1] \"EPSG:4326\"  srs_find_epsg(\"WGS84\", all_matches = TRUE) #>   authority_name authority_code confidence #> 1           EPSG           4326        100"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_get_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the spatial reference system name — srs_get_name","title":"Return the spatial reference system name — srs_get_name","text":"srs_get_name() accepts spatial reference system definition various text formats returns name. See srs_to_wkt() description possible input formats. Wrapper OSRGetName() GDAL Spatial Reference System API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_get_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the spatial reference system name — srs_get_name","text":"","code":"srs_get_name(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_get_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the spatial reference system name — srs_get_name","text":"srs Character string containing SRS definition various formats (e.g., WKT, PROJ.4 string, well known name NAD27, NAD83, WGS84, etc).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_get_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the spatial reference system name — srs_get_name","text":"Character string containing name, empty string.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_get_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the spatial reference system name — srs_get_name","text":"","code":"srs_get_name(\"EPSG:5070\") #> [1] \"NAD83 / Conus Albers\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"srs_is_geographic() attempt import given WKT string spatial reference system, returns TRUE  root GEOGCS node. wrapper OSRIsGeographic() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"","code":"srs_is_geographic(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"srs Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"Logical. TRUE srs geographic, otherwise FALSE","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"","code":"srs_is_geographic(epsg_to_wkt(5070)) #> [1] FALSE srs_is_geographic(srs_to_wkt(\"WGS84\")) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WKT definition is a projected coordinate system — srs_is_projected","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"srs_is_projected() attempt import given WKT string spatial reference system (SRS), returns TRUE SRS contains PROJCS node indicating projected coordinate system. wrapper OSRIsProjected() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"","code":"srs_is_projected(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"srs Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"Logical. TRUE srs projected, otherwise FALSE","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"","code":"srs_is_projected(epsg_to_wkt(5070)) #> [1] TRUE srs_is_projected(srs_to_wkt(\"WGS84\")) #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":null,"dir":"Reference","previous_headings":"","what":"Do these two spatial references describe the same system? — srs_is_same","title":"Do these two spatial references describe the same system? — srs_is_same","text":"srs_is_same() returns TRUE two spatial references describe system. wrapper OSRIsSame() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do these two spatial references describe the same system? — srs_is_same","text":"","code":"srs_is_same(   srs1,   srs2,   criterion = \"\",   ignore_axis_mapping = FALSE,   ignore_coord_epoch = FALSE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do these two spatial references describe the same system? — srs_is_same","text":"srs1 Character string. OGC WKT spatial reference system. srs2 Character string. OGC WKT spatial reference system. criterion Character string. One STRICT, EQUIVALENT, EQUIVALENT_EXCEPT_AXIS_ORDER_GEOGCRS. Defaults EQUIVALENT_EXCEPT_AXIS_ORDER_GEOGCRS. ignore_axis_mapping Logical scalar. TRUE, sets IGNORE_DATA_AXIS_TO_SRS_AXIS_MAPPING=YES call OSRIsSameEx() GDAL Spatial Reference System API. Defaults . ignore_coord_epoch Logical scalar. TRUE, sets IGNORE_COORDINATE_EPOCH=YES call OSRIsSameEx() GDAL Spatial Reference System API. Defaults .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do these two spatial references describe the same system? — srs_is_same","text":"Logical. TRUE two spatial references describe system, otherwise FALSE.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do these two spatial references describe the same system? — srs_is_same","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, TRUE) srs_is_same(ds$getProjectionRef(), epsg_to_wkt(26912)) #> [1] TRUE srs_is_same(ds$getProjectionRef(), epsg_to_wkt(5070)) #> [1] FALSE ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","title":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","text":"srs_to_wkt() converts spatial reference system (SRS) definition various text formats WKT. function examine input SRS, try deduce format, export WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","text":"","code":"srs_to_wkt(srs, pretty = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","text":"srs Character string containing SRS definition various formats (see Details). pretty Logical. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","text":"wrapper OSRSetFromUserInput() GDAL Spatial Reference System C API output WKT. input SRS may take following forms: WKT - convert WKT versions (see ) EPSG:n - EPSG code n AUTO:proj_id,unit_id,lon0,lat0 - WMS auto projections urn:ogc:def:crs:EPSG::n - OGC URNs PROJ.4 definitions filename - file read WKT, XML PROJ.4 definition well known name NAD27, NAD83, WGS84 WGS72 IGNF:xxxx, ESRI:xxxx - definitions PROJ database PROJJSON (PROJ >= 6.2) function intended flexible, nature imprecise must guess information format intended. epsg_to_wkt() used instead EPSG codes. GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert various spatial reference formats to Well Known Text — srs_to_wkt","text":"","code":"srs_to_wkt(\"NAD83\") #> [1] \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]]\" writeLines(srs_to_wkt(\"NAD83\", pretty=TRUE)) #> GEOGCS[\"NAD83\", #>     DATUM[\"North_American_Datum_1983\", #>         SPHEROID[\"GRS 1980\",6378137,298.257222101, #>             AUTHORITY[\"EPSG\",\"7019\"]], #>         AUTHORITY[\"EPSG\",\"6269\"]], #>     PRIMEM[\"Greenwich\",0, #>         AUTHORITY[\"EPSG\",\"8901\"]], #>     UNIT[\"degree\",0.0174532925199433, #>         AUTHORITY[\"EPSG\",\"9122\"]], #>     AXIS[\"Latitude\",NORTH], #>     AXIS[\"Longitude\",EAST], #>     AUTHORITY[\"EPSG\",\"4269\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(srs_to_wkt(\"NAD83\", pretty=TRUE)) #> GEOGCRS[\"NAD83\", #>     DATUM[\"North American Datum 1983\", #>         ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>             LENGTHUNIT[\"metre\",1]]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     ID[\"EPSG\",4269]] set_config_option(\"OSR_WKT_FORMAT\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform geospatial x/y coordinates — transform_xy","title":"Transform geospatial x/y coordinates — transform_xy","text":"transform_xy() transforms geospatial x/y coordinates new projection.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"transform_xy(pts, srs_from, srs_to)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform geospatial x/y coordinates — transform_xy","text":"pts two-column data frame numeric matrix containing geospatial x/y coordinates. srs_from Character string OGC WKT format specifying spatial reference system pts. srs_to Character string OGC WKT format specifying output spatial reference system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform geospatial x/y coordinates — transform_xy","text":"Numeric array geospatial x/y coordinates projection specified srs_to.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 ## id, x, y in NAD83 / UTM zone 12N ## transform to NAD83 / CONUS Albers transform_xy(pts = pts[,-1],              srs_from = epsg_to_wkt(26912),              srs_to = epsg_to_wkt(5070)) #>           [,1]    [,2] #>  [1,] -1330885 2684892 #>  [2,] -1331408 2684660 #>  [3,] -1331994 2685048 #>  [4,] -1330297 2684967 #>  [5,] -1329991 2683777 #>  [6,] -1329167 2685212 #>  [7,] -1329903 2685550 #>  [8,] -1329432 2683821 #>  [9,] -1327683 2685541 #> [10,] -1331265 2685514"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raster data between different formats — translate","title":"Convert raster data between different formats — translate","text":"translate() wrapper gdal_translate command-line utility (see https://gdal.org/programs/gdal_translate.html). function can used convert raster data different formats, potentially performing operations like subsetting, resampling, rescaling pixels process. Refer GDAL documentation URL list command-line arguments can passed cl_arg.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raster data between different formats — translate","text":"","code":"translate(src_filename, dst_filename, cl_arg = NULL, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raster data between different formats — translate","text":"src_filename Either character string giving filename source raster, object class GDALRaster source. dst_filename Character string. Filename output raster. cl_arg Optional character vector command-line arguments gdal_translate (see URL ). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raster data between different formats — translate","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raster data between different formats — translate","text":"","code":"# convert the elevation raster to Erdas Imagine format and resample to 90m elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") img_file <- file.path(tempdir(), \"storml_elev_90m.img\")  # command-line arguments for gdal_translate args <- c(\"-tr\", \"90\", \"90\", \"-r\", \"average\") args <- c(args, \"-of\", \"HFA\", \"-co\", \"COMPRESSED=YES\")  translate(elev_file, img_file, args) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, img_file) ds$info() #> Driver: HFA/Erdas Imagine Images (.img) #> Files: /tmp/RtmprS3Ajq/storml_elev_90m.img #>        /tmp/RtmprS3Ajq/storml_elev_90m.img.aux.xml #> Size is 48, 36 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"meters\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"meters\",1]], #>     ID[\"EPSG\",26912]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (90.000000000000000,-90.000000000000000) #> Metadata: #>   AREA_OR_POINT=Area #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101841.983) (113d16'54.08\"W, 46d 2'50.54\"N) #> Upper Right (  327796.072, 5105081.983) (113d13'37.43\"W, 46d 4'39.40\"N) #> Lower Right (  327796.072, 5101841.983) (113d13'33.21\"W, 46d 2'54.50\"N) #> Center      (  325636.072, 5103461.983) (113d15'15.78\"W, 46d 3'44.98\"N) #> Band 1 Block=64x64 Type=Int16, ColorInterp=Undefined #>   Description = Layer_1 #>   NoData Value=32767 #>   Metadata: #>     LAYER_TYPE=athematic #>     RepresentationType=ATHEMATIC #>   Image Structure Metadata: #>     COMPRESSION=RLE #>   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear path specific configuration options — vsi_clear_path_options","title":"Clear path specific configuration options — vsi_clear_path_options","text":"vsi_clear_path_options() clears path specific options previously set vsi_set_path_option(). Wrapper VSIClearPathSpecificOptions() GDAL Common Portability Library. Requires GDAL >= 3.6.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear path specific configuration options — vsi_clear_path_options","text":"","code":"vsi_clear_path_options(path_prefix)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear path specific configuration options — vsi_clear_path_options","text":"path_prefix Character string. set \"\" (empty string), path specific options cleared. set path prefix, options set vsi_set_path_option(path_prefix, ...) cleared.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear path specific configuration options — vsi_clear_path_options","text":"return value, called side effect.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_clear_path_options.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Clear path specific configuration options — vsi_clear_path_options","text":"particular care taken remove options RAM secure way.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for VSIFile$seek() — vsi_constants","title":"Constants for VSIFile$seek() — vsi_constants","text":"package global constants convenience calling VSIFile$seek().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for VSIFile$seek() — vsi_constants","text":"","code":"SEEK_SET  SEEK_CUR  SEEK_END"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for VSIFile$seek() — vsi_constants","text":"object class character length 1. object class character length 1. object class character length 1.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a source file to a target filename — vsi_copy_file","title":"Copy a source file to a target filename — vsi_copy_file","text":"vsi_copy_file() wrapper VSICopyFile() GDAL Common Portability Library. GDAL VSI functions allow virtualization disk /O non file data sources can made appear files. See https://gdal.org/user/virtual_file_systems.html. Requires GDAL >= 3.7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a source file to a target filename — vsi_copy_file","text":"","code":"vsi_copy_file(src_file, target_file, show_progress = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a source file to a target filename — vsi_copy_file","text":"src_file Character string. Filename source file. target_file Character string. Filename target file. show_progress Logical scalar. TRUE, progress bar displayed (size src_file retrieved GDAL VSIStatL()). Default FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a source file to a target filename — vsi_copy_file","text":"0 success -1 error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy a source file to a target filename — vsi_copy_file","text":"following copies made fully target server, without local download source upload target: /vsis3/ -> /vsis3/ /vsigs/ -> /vsigs/ /vsiaz/ -> /vsiaz/ /vsiadls/ -> /vsiadls/ /vsicurl/ -> /vsiaz/ (starting GDAL 3.8)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Copy a source file to a target filename — vsi_copy_file","text":"target_file form /vsizip/foo.zip/bar, default options described function addFilesInZip() effect.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_copy_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a source file to a target filename — vsi_copy_file","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tmp_file <- \"/vsimem/elev_temp.tif\"  # Requires GDAL >= 3.7 if (as.integer(gdal_version()[2]) >= 3070000) {   result <- vsi_copy_file(elev_file, tmp_file)   print(result)   print(vsi_stat(tmp_file, \"size\"))    vsi_unlink(tmp_file) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"vsi_curl_clear_cache() cleans local cache associated /vsicurl/ (related file systems). function wrapper VSICurlClearCache() VSICurlPartialClearCache() GDAL Common Portability Library. See Details GDAL documentation.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"","code":"vsi_curl_clear_cache(partial = FALSE, file_prefix = \"\", quiet = TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"partial Logical scalar. Whether clear cache given filename (see Details). file_prefix Character string. Filename prefix use partial = TRUE. quiet Logical scalar. TRUE (default) wrap API call quiet error handler, FALSE print potential error messages console.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"/vsicurl/ (related file systems like /vsis3/, /vsigs/, /vsiaz/, /vsioss/, /vsiswift/) cache number metadata data faster execution read-scenarios. content server-side may change process, mechanisms can prevent opening new files, give outdated version . partial = TRUE, cleans local cache associated given filename (subfiles subdirectories directory).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_curl_clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean cache associated with /vsicurl/ and related file systems — vsi_curl_clear_cache","text":"","code":"vsi_curl_clear_cache()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"vsi_get_actual_url() returns actual URL supplied filename. Currently returns non-NULL value network-based virtual file systems. example \"/vsis3/bucket/filename\" expanded \"https://bucket.s3.amazon.com/filename\". Wrapper VSIGetActualURL() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"","code":"vsi_get_actual_url(filename)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"filename Character string containing /vsiPREFIX/ filename.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"Character string containing actual URL, NULL filename network-based virtual file system.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_actual_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the actual URL of a supplied VSI filename — vsi_get_actual_url","text":"","code":"if (FALSE) { # \\dontrun{ f <- \"/vsiaz/items/io-lulc-9-class.parquet\" set_config_option(\"AZURE_STORAGE_ACCOUNT\", \"pcstacitems\") # token obtained from: # https://planetarycomputer.microsoft.com/api/sas/v1/token/pcstacitems/items set_config_option(\"AZURE_STORAGE_SAS_TOKEN\",\"<token>\") vsi_get_actual_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet\" vsi_get_signed_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet?<token>\" } # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Return free disk space available on the filesystem — vsi_get_disk_free_space","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"vsi_get_disk_free_space() returns free disk space available filesystem. Wrapper VSIGetDiskFreeSpace() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"","code":"vsi_get_disk_free_space(path)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"path Character string. directory filesystem query.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"Numeric scalar. free space bytes (bit64::integer64 type), -1 case error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_disk_free_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return free disk space available on the filesystem — vsi_get_disk_free_space","text":"","code":"tmp_dir <- file.path(\"/vsimem\", \"tmpdir\") vsi_mkdir(tmp_dir) #> [1] 0 vsi_get_disk_free_space(tmp_dir) #> integer64 #> [1] 16757342208 vsi_rmdir(tmp_dir) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata on files — vsi_get_file_metadata","title":"Get metadata on files — vsi_get_file_metadata","text":"vsi_get_file_metadata() returns metadata file system objects. Implemented network-like filesystems. Starting GDAL 3.7, implemented /vsizip/ SOZip metadata. Wrapper VSIGetFileMetadata() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata on files — vsi_get_file_metadata","text":"","code":"vsi_get_file_metadata(filename, domain)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata on files — vsi_get_file_metadata","text":"filename Character string. path file system object queried. domain Character string. Metadata domain query. Depends file system, see Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata on files — vsi_get_file_metadata","text":"named list values, NULL case error empty list.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metadata on files — vsi_get_file_metadata","text":"metadata available depends file system. following supported GDAL 3.9: HEADERS: get HTTP headers network-like filesystems (/vsicurl/, /vsis3/, /vsgis/, etc). TAGS: /vsis3/, get S3 Object tagging information. /vsiaz/, get blob tags. STATUS: specific /vsiadls/: returns system-defined properties path (seems practice subset HEADERS). ACL: specific /vsiadls/ /vsigs/: returns access control list path. /vsigs/, single XML=xml_content string returned. METADATA: specific /vsiaz/: blob metadata (subset domain=HEADERS returns). ZIP: specific /vsizip/: obtain ZIP specific metadata, particular file SOZIP-enabled (SOZIP_VALID=YES).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_file_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata on files — vsi_get_file_metadata","text":"","code":"# create an SOZip-enabled file and validate # Requires GDAL >= 3.7 f <- system.file(\"extdata/ynp_fires_1984_2022.gpkg\", package=\"gdalraster\")  if (as.integer(gdal_version()[2]) >= 3070000) {   zip_file <- tempfile(fileext=\".zip\")   addFilesInZip(zip_file, f, full_paths=FALSE, sozip_enabled=\"YES\")   zip_vsi <- file.path(\"/vsizip\", zip_file)   print(\"Files in zip archive:\")   print(vsi_read_dir(zip_vsi))   print(\"SOZip metadata:\")   print(vsi_get_file_metadata(zip_vsi, domain=\"ZIP\"))    vsi_unlink(zip_file) }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"vsi_get_fs_options() returns list options associated virtual file system handler. options may set configuration options set_config_option(). Wrapper VSIGetFileSystemOptions() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"","code":"vsi_get_fs_options(filename, as_list = TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"filename Filename, prefix virtual file system handler. as_list Logical scalar. TRUE (default), XML string returned GDAL coerced list. FALSE return configuration options serialized XML string.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"XML string, empty string (\"\") options declared. as_list = TRUE (default), XML string coerced list xml2::as_list().","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the list of options associated with a virtual file system handler — vsi_get_fs_options","text":"","code":"vsi_get_fs_options(\"/vsimem/\") #> [1] \"\"  vsi_get_fs_options(\"/vsizip/\") #> $Options #> $Options$Option #> list() #> attr(,\"name\") #> [1] \"GDAL_NUM_THREADS\" #> attr(,\"type\") #> [1] \"string\" #> attr(,\"description\") #> [1] \"Number of threads for compression. Either a integer or ALL_CPUS\" #>  #> $Options$Option #> list() #> attr(,\"name\") #> [1] \"CPL_VSIL_DEFLATE_CHUNK_SIZE\" #> attr(,\"type\") #> [1] \"string\" #> attr(,\"description\") #> [1] \"Chunk of uncompressed data for parallelization. Use K(ilobytes) or M(egabytes) suffix\" #> attr(,\"default\") #> [1] \"1M\" #>  #>   vsi_get_fs_options(\"/vsizip/\", as_list = FALSE) #> [1] \"<Options>  <Option name='GDAL_NUM_THREADS' type='string' description='Number of threads for compression. Either a integer or ALL_CPUS'/>  <Option name='CPL_VSIL_DEFLATE_CHUNK_SIZE' type='string' description='Chunk of uncompressed data for parallelization. Use K(ilobytes) or M(egabytes) suffix' default='1M'/><\/Options>\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"vsi_get_fs_prefixes() returns list prefixes virtual file system handlers currently registered (e.g., \"/vsimem/\", \"/vsicurl/\", etc). Wrapper VSIGetFileSystemsPrefixes() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"","code":"vsi_get_fs_prefixes()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"Character vector containing prefixes virtual file system handlers.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_fs_prefixes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the list of virtual file system handlers currently registered — vsi_get_fs_prefixes","text":"","code":"vsi_get_fs_prefixes() #>  [1] \"/vsiadls/\"            \"/vsiaz/\"              \"/vsiaz_streaming/\"    #>  [4] \"/vsicrypt/\"           \"/vsicurl/\"            \"/vsicurl_streaming/\"  #>  [7] \"/vsigs/\"              \"/vsigs_streaming/\"    \"/vsigzip/\"            #> [10] \"/vsimem/\"             \"/vsioss/\"             \"/vsioss_streaming/\"   #> [13] \"/vsis3/\"              \"/vsis3_streaming/\"    \"/vsisparse/\"          #> [16] \"/vsistdin/\"           \"/vsistdout/\"          \"/vsistdout_redirect/\" #> [19] \"/vsisubfile/\"         \"/vsiswift/\"           \"/vsiswift_streaming/\" #> [22] \"/vsitar/\"             \"/vsiwebhdfs/\"         \"/vsizip/\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"vsi_get_signed_url() Returns signed URL supplied filename. Currently returns non-NULL value /vsis3/, /vsigs/, /vsiaz/ /vsioss/ example \"/vsis3/bucket/filename\" expanded \"https://bucket.s3.amazon.com/filename?X-Amz-Algorithm=AWS4-HMAC-SHA256...\" Configuration options apply file opening (typically provide credentials), returned vsi_get_fs_options(), also valid context. Wrapper VSIGetSignedURL() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"","code":"vsi_get_signed_url(filename, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"filename Character string containing /vsiPREFIX/ filename. options Character vector NAME=VALUE pairs (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"Character string containing signed URL, NULL filename network-based virtual file system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"options argument accepts character vector name=value pairs. /vsis3/, /vsigs/, /vsiaz/ /vsioss/, following options supported: START_DATE=YYMMDDTHHMMSSZ: date time UTC following ISO 8601 standard, corresponding start validity URL. specified, current date time. EXPIRATION_DELAY=number_of_seconds: number 1 604800 (seven days) validity signed URL. Defaults 3600 (one hour). VERB=GET/HEAD/DELETE/PUT/POST: HTTP VERB request used. Defaults GET. /vsiaz/ supports additional options: SIGNEDIDENTIFIER=value: relate given shared access signature corresponding stored access policy. SIGNEDPERMISSIONS=r|w: permissions associated shared access signature. Normally deduced VERB.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_get_signed_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a signed URL for a supplied VSI filename — vsi_get_signed_url","text":"","code":"if (FALSE) { # \\dontrun{ f <- \"/vsiaz/items/io-lulc-9-class.parquet\" set_config_option(\"AZURE_STORAGE_ACCOUNT\", \"pcstacitems\") # token obtained from: # https://planetarycomputer.microsoft.com/api/sas/v1/token/pcstacitems/items set_config_option(\"AZURE_STORAGE_SAS_TOKEN\", \"<token>\") vsi_get_actual_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet\" vsi_get_signed_url(f) #> [1] \"https://pcstacitems.blob.core.windows.net/items/io-lulc-9-class.parquet?<token>\" } # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directory — vsi_mkdir","title":"Create a directory — vsi_mkdir","text":"vsi_mkdir() creates new directory indicated mode. POSIX-style systems, mode modified file creation mask (umask). However, file systems platforms may use umask, may ignore mode completely. reasonable cross-platform default mode value 0755. recursive = TRUE, creates directory ancestors. function wrapper VSIMkdir() VSIMkdirRecursive() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directory — vsi_mkdir","text":"","code":"vsi_mkdir(path, mode = \"0755\", recursive = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directory — vsi_mkdir","text":"path Character string. path directory create. mode Character string. permissions mode octal prefix 0, e.g., \"0755\" (default). recursive Logical scalar. TRUE create directory ancestors. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directory — vsi_mkdir","text":"0 success -1 error.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_mkdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directory — vsi_mkdir","text":"","code":"new_dir <- file.path(tempdir(), \"newdir\") vsi_mkdir(new_dir) #> [1] 0 vsi_stat(new_dir, \"type\") #> [1] \"dir\" vsi_rmdir(new_dir) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Read names in a directory — vsi_read_dir","title":"Read names in a directory — vsi_read_dir","text":"vsi_read_dir() abstracts access directory contents. returns character vector containing names files directories directory. recursive = TRUE, reads list entries directory subdirectories. function wrapper VSIReadDirEx() VSIReadDirRecursive() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read names in a directory — vsi_read_dir","text":"","code":"vsi_read_dir(path, max_files = 0L, recursive = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read names in a directory — vsi_read_dir","text":"path Character string. relative absolute path directory read. max_files Integer scalar. maximum number files stop, 0 limit (see Note). Ignored recursive = TRUE. recursive Logical scalar. TRUE read directory subdirectories. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read names in a directory — vsi_read_dir","text":"character vector containing names files directories directory given path. empty string (\"\") returned path exist.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read names in a directory — vsi_read_dir","text":"max_files set positive number, directory listing stop limit reached. Note indicate truncation, least one element max_files limit returned. length returned character vector lesser equal max_files, truncation occurred. max_files parameter ignored recursive = TRUE.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_read_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read names in a directory — vsi_read_dir","text":"","code":"# regular file system for illustration data_dir <- system.file(\"extdata\", package=\"gdalraster\") vsi_read_dir(data_dir) #>  [1] \"storml_evc.tif\"           \"LF20_EVH_220.csv\"         #>  [3] \".\"                        \"poly_multipoly.prj\"       #>  [5] \"storml_pts.csv\"           \"..\"                       #>  [7] \"storml_evh.tif\"           \"storml_evt.tif\"           #>  [9] \"test.geojson\"             \"sr_b4_20200829.tif\"       #> [11] \"poly_multipoly.dbf\"       \"storml_tcc.tif\"           #> [13] \"int64.tif\"                \"storml_elev.tif\"          #> [15] \"LF20_EVT_220.csv\"         \"sr_b5_20200829.tif\"       #> [17] \"metadata.zip\"             \"LF20_EVC_220.csv\"         #> [19] \"ynp_fires_1984_2022.gpkg\" \"poly_multipoly.shx\"       #> [21] \"storm_lake.lcp\"           \"LF20_F40_220.csv\"         #> [23] \"storm_lake.prj\"           \"sr_b6_20200829.tif\"       #> [25] \"poly_multipoly.shp\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a file — vsi_rename","title":"Rename a file — vsi_rename","text":"vsi_rename() renames file object file system. GDAL documentation states possible rename file onto new filesystem, safest function used rename files remain directory. function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIRename() GDAL Common Portability Library. Analog POSIX rename() function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a file — vsi_rename","text":"","code":"vsi_rename(oldpath, newpath)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a file — vsi_rename","text":"oldpath Character string. name file renamed. newpath Character string. name file given.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a file — vsi_rename","text":"0 success -1 error.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a file — vsi_rename","text":"","code":"# regular file system for illustration elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tmp_file <- tempfile(fileext = \".tif\") file.copy(elev_file, tmp_file) #> [1] TRUE new_file <- file.path(dirname(tmp_file), \"storml_elev_copy.tif\") vsi_rename(tmp_file, new_file) #> [1] 0 vsi_stat(new_file) #> [1] TRUE vsi_unlink(new_file) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a directory — vsi_rmdir","title":"Delete a directory — vsi_rmdir","text":"vsi_rmdir() deletes directory object file system. systems directory must empty can deleted. recursive = TRUE, deletes directory object content file system. function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIRmdir() VSIRmdirRecursive() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a directory — vsi_rmdir","text":"","code":"vsi_rmdir(path, recursive = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a directory — vsi_rmdir","text":"path Character string. path directory deleted. recursive Logical scalar. TRUE delete directory content. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a directory — vsi_rmdir","text":"0 success -1 error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Delete a directory — vsi_rmdir","text":"/vsis3/ efficient implementation deleting recursively. Starting GDAL 3.4, /vsigs/ efficient implementation deleting recursively, provided OAuth2 authentication used.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_rmdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a directory — vsi_rmdir","text":"","code":"new_dir <- file.path(tempdir(), \"newdir\") vsi_mkdir(new_dir) #> [1] 0 vsi_rmdir(new_dir) #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a path specific option for a given path prefix — vsi_set_path_option","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"vsi_set_path_option() sets path specific option given path prefix. option typically, limited , setting credentials virtual file system. Wrapper VSISetPathSpecificOption() GDAL Common Portability Library. Requires GDAL >= 3.6.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"","code":"vsi_set_path_option(path_prefix, key, value)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"path_prefix Character string. path prefix virtual file system handler. Typically form /vsiXXX/bucket. key Character string. Option key. value Character string. Option value. Passing value = \"\" (empty string) unset value previously set vsi_set_path_option().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"return value, called side effect.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"Options may also set set_config_option(), vsi_set_path_option() allows specifying granularity level file path. makes easier using virtual file system different credentials (e.g., different credentials buckets \"/vsis3/foo\" \"/vsis3/bar\"). supported following virtual file systems: /vsis3/, /vsigs/, /vsiaz/, /vsioss/, /vsiwebhdfs, /vsiswift.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_set_path_option.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set a path specific option for a given path prefix — vsi_set_path_option","text":"Setting options path starting /vsiXXX/ also apply /vsiXXX_streaming/ requests. particular care taken store options RAM secure way. might accidentally hit persistent storage swapping occurs, someone access memory allocated process may able read .","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get filesystem object info — vsi_stat","title":"Get filesystem object info — vsi_stat","text":"vsi_stat() fetches status information filesystem object (file, directory, etc). function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIStatExL() GDAL Common Portability Library. Analog POSIX stat() function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get filesystem object info — vsi_stat","text":"","code":"vsi_stat(filename, info = \"exists\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get filesystem object info — vsi_stat","text":"filename Character string. path filesystem object queried. info Character string. type information fetch, one \"exists\" (default), \"type\" \"size\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get filesystem object info — vsi_stat","text":"info = \"exists\", returns logical TRUE file system object exists, otherwise FALSE. info = \"type\", returns character string one \"file\" (regular file), \"dir\" (directory), \"symlink\" (symbolic link), empty string (\"\"). info = \"size\", returns file size bytes (bit64::integer64 type), -1 error occurs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get filesystem object info — vsi_stat","text":"portability, vsi_stat() supports subset stat()-type information filesystem objects. function primarily intended use GDAL virtual file systems (e.g., URLs, cloud storage systems, ZIP/GZip/7z/RAR archives, -memory files). base R function utils::file_test() used instead file tests regular local filesystems.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get filesystem object info — vsi_stat","text":"","code":"data_dir <- system.file(\"extdata\", package=\"gdalraster\") vsi_stat(data_dir) #> [1] TRUE vsi_stat(data_dir, \"type\") #> [1] \"dir\" # stat() on a directory doesn't return the sum of the file sizes in it, # but rather how much space is used by the directory entry vsi_stat(data_dir, \"size\") #> integer64 #> [1] 4096  elev_file <- file.path(data_dir, \"storml_elev.tif\") vsi_stat(elev_file) #> [1] TRUE vsi_stat(elev_file, \"type\") #> [1] \"file\" vsi_stat(elev_file, \"size\") #> integer64 #> [1] 31152  nonexistent <- file.path(data_dir, \"nonexistent.tif\") vsi_stat(nonexistent) #> [1] FALSE vsi_stat(nonexistent, \"type\") #> [1] \"\" vsi_stat(nonexistent, \"size\") #> integer64 #> [1] -1  # /vsicurl/ file system handler base_url <- \"https://raw.githubusercontent.com/usdaforestservice/\" f <- \"gdalraster/main/sample-data/landsat_c2ard_sr_mt_hood_jul2022_utm.tif\" url_file <- paste0(\"/vsicurl/\", base_url, f)  vsi_stat(url_file) #> [1] TRUE vsi_stat(url_file, \"type\") #> [1] \"file\" vsi_stat(url_file, \"size\") #> integer64 #> [1] 13067777"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Return whether the filesystem supports random write — vsi_supports_rnd_write","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"vsi_supports_rnd_write() returns whether filesystem supports random write. Wrapper VSISupportsRandomWrite() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"","code":"vsi_supports_rnd_write(filename, allow_local_tmpfile)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"filename Character string. path filesystem object tested. allow_local_tmpfile Logical scalar. TRUE filesystem allowed use local temporary file uploading target location.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"Logical scalar. TRUE random write supported.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"location GDAL uses temporary files can forced via CPL_TMPDIR configuration option.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_rnd_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return whether the filesystem supports random write — vsi_supports_rnd_write","text":"","code":"# Requires GDAL >= 3.6 if (as.integer(gdal_version()[2]) >= 3060000)   vsi_supports_rnd_write(\"/vsimem/test-mem-file.gpkg\", TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"vsi_supports_seq_write() returns whether filesystem supports sequential write. Wrapper VSISupportsSequentialWrite() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"","code":"vsi_supports_seq_write(filename, allow_local_tmpfile)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"filename Character string. path filesystem object tested. allow_local_tmpfile Logical scalar. TRUE filesystem allowed use local temporary file uploading target location.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"Logical scalar. TRUE sequential write supported.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"location GDAL uses temporary files can forced via CPL_TMPDIR configuration option.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_supports_seq_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return whether the filesystem supports sequential write — vsi_supports_seq_write","text":"","code":"# Requires GDAL >= 3.6 if (as.integer(gdal_version()[2]) >= 3060000)   vsi_supports_seq_write(\"/vsimem/test-mem-file.gpkg\", TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronize a source file/directory with a target file/directory — vsi_sync","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"vsi_sync() wrapper VSISync() GDAL Common Portability Library. GDAL documentation given Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"","code":"vsi_sync(src, target, show_progress = FALSE, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"src Character string. Source file directory. target Character string. Target file directory. show_progress Logical scalar. TRUE, progress bar displayed. Defaults FALSE. options Character vector NAME=VALUE pairs (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"Logical scalar, TRUE success FALSE error.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"VSISync() analog Linux rsync utility. current implementation, rsync efficient local file copying, VSISync() main interest source target remote file system like /vsis3/ /vsigs/, case can take account timestamps files (optionally ETag/MD5Sum) avoid unneeded copy operations. implemented efficiently : local filesystem <–> remote filesystem remote filesystem <–> remote filesystem (starting GDAL 3.1) source target remote filesystems one /vsis3/, /vsigs/ /vsiaz/. target /vsiaz/ source /vsis3/, /vsigs/, /vsiadls/ /vsicurl/ (starting GDAL 3.8) Similarly rsync behavior, source filename ends slash, means content directory must copied, directory name. example, assuming \"/home/even/foo\" contains file \"bar\", VSISync(\"/home/even/foo/\", \"/mnt/media\", ...) create \"/mnt/media/bar\" file. Whereas VSISync(\"/home/even/foo\", \"/mnt/media\", ...) create \"/mnt/media/foo\" directory contains bar file. options argument accepts character vector name=value pairs. Currently accepted options : RECURSIVE=(default YES) SYNC_STRATEGY=TIMESTAMP/ETAG/OVERWRITE. Determines criterion used determine target file must replaced already exists file size source. applies source target network filesystem. default TIMESTAMP (similarly 'aws s3 sync' works), say upload operation, remote file replaced different size older source. download operation, local file replaced different size newer remote file. ETAG strategy assumes ETag metadata remote file MD5Sum file content, true case /vsis3/ files using KMS server side encryption uploaded single PUT operation (smaller 50 MB given default used GDAL). used /vsis3/, /vsigs/ filesystems using MD5Sum ETAG. OVERWRITE strategy (GDAL >= 3.2) always overwrite target file source one. NUM_THREADS=integer. Number threads use parallel file copying. use /vsis3/, /vsigs/, /vsiaz/ /vsiadls/ source target. default 10 since GDAL 3.3. CHUNK_SIZE=integer. Maximum size chunk (bytes) use split large objects downloading /vsis3/, /vsigs/, /vsiaz/ /vsiadls/ local file system, upload /vsis3/, /vsiaz/ /vsiadls/ local file system. used NUM_THREADS > 1. upload /vsis3/, chunk size must set least 5 MB. default 8 MB since GDAL 3.3. x-amz-KEY=value. (GDAL >= 3.5) MIME header pass creation /vsis3/ object. x-goog-KEY=value. (GDAL >= 3.5) MIME header pass creation /vsigs/ object. x-ms-KEY=value. (GDAL >= 3.5) MIME header pass creation /vsiaz/ /vsiadls/ object.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_sync.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synchronize a source file/directory with a target file/directory — vsi_sync","text":"","code":"if (FALSE) { # \\dontrun{ # sample-data is a directory in the git repository for gdalraster that is # not included in the R package: # https://github.com/USDAForestService/gdalraster/tree/main/sample-data # A copy of sample-data in an AWS S3 bucket, and a partial copy in an # Azure Blob container, were used to generate the example below.  src <- \"/vsis3/gdalraster-sample-data/\" # s3://gdalraster-sample-data is not public, set credentials set_config_option(\"AWS_ACCESS_KEY_ID\", \"xxxxxxxxxxxxxx\") set_config_option(\"AWS_SECRET_ACCESS_KEY\", \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\") vsi_read_dir(src) #> [1] \"README.md\" #> [2] \"bl_mrbl_ng_jul2004_rgb_720x360.tif\" #> [3] \"blue_marble_ng_neo_metadata.xml\" #> [4] \"landsat_c2ard_sr_mt_hood_jul2022_utm.json\" #> [5] \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\" #> [6] \"lf_elev_220_metadata.html\" #> [7] \"lf_elev_220_mt_hood_utm.tif\" #> [8] \"lf_fbfm40_220_metadata.html\" #> [9] \"lf_fbfm40_220_mt_hood_utm.tif\"  dst <- \"/vsiaz/sampledata\" set_config_option(\"AZURE_STORAGE_CONNECTION_STRING\",                   \"<connection_string_for_gdalraster_account>\") vsi_read_dir(dst) #> [1] \"lf_elev_220_metadata.html\"   \"lf_elev_220_mt_hood_utm.tif\"  # GDAL VSISync() supports direct copy for /vsis3/ -> /vsiaz/ (GDAL >= 3.8) result <- vsi_sync(src, dst, show_progress = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(result) #> [1] TRUE vsi_read_dir(dst) #> [1] \"README.md\" #> [2] \"bl_mrbl_ng_jul2004_rgb_720x360.tif\" #> [3] \"blue_marble_ng_neo_metadata.xml\" #> [4] \"landsat_c2ard_sr_mt_hood_jul2022_utm.json\" #> [5] \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\" #> [6] \"lf_elev_220_metadata.html\" #> [7] \"lf_elev_220_mt_hood_utm.tif\" #> [8] \"lf_fbfm40_220_metadata.html\" #> [9] \"lf_fbfm40_220_mt_hood_utm.tif\" } # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a file — vsi_unlink","title":"Delete a file — vsi_unlink","text":"vsi_unlink() deletes file object file system. function goes GDAL VSIFileHandler virtualization may work unusual filesystems memory. wrapper VSIUnlink() GDAL Common Portability Library. Analog POSIX unlink() function.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a file — vsi_unlink","text":"","code":"vsi_unlink(filename)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a file — vsi_unlink","text":"filename Character string. path file deleted.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a file — vsi_unlink","text":"0 success -1 error.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a file — vsi_unlink","text":"","code":"# regular file system for illustration elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tmp_file <- file.path(tempdir(), \"tmp.tif\") file.copy(elev_file,  tmp_file) #> [1] TRUE vsi_stat(tmp_file) #> [1] TRUE vsi_unlink(tmp_file) #> [1] 0 vsi_stat(tmp_file) #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete several files in a batch — vsi_unlink_batch","title":"Delete several files in a batch — vsi_unlink_batch","text":"vsi_unlink_batch() deletes list files passed character vector. files belong file system handler. implemented efficiently /vsis3/ /vsigs/ (provided /vsigs/ OAuth2 authentication used). function wrapper VSIUnlinkBatch() GDAL Common Portability Library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete several files in a batch — vsi_unlink_batch","text":"","code":"vsi_unlink_batch(filenames)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete several files in a batch — vsi_unlink_batch","text":"filenames Character vector. list files delete.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete several files in a batch — vsi_unlink_batch","text":"Logical vector length(filenames) values depending success deletion corresponding file. NULL might returned case general error (example, files belonging different file system handlers).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/vsi_unlink_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete several files in a batch — vsi_unlink_batch","text":"","code":"# regular file system for illustration elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") tcc_file <- system.file(\"extdata/storml_tcc.tif\", package=\"gdalraster\")  tmp_elev <- file.path(tempdir(), \"tmp_elev.tif\") file.copy(elev_file,  tmp_elev) #> [1] TRUE tmp_tcc <- file.path(tempdir(), \"tmp_tcc.tif\") file.copy(tcc_file,  tmp_tcc) #> [1] TRUE vsi_unlink_batch(c(tmp_elev, tmp_tcc)) #> [1] TRUE TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster reprojection and mosaicing — warp","title":"Raster reprojection and mosaicing — warp","text":"warp() wrapper gdalwarp command-line utility raster reprojection warping (see https://gdal.org/programs/gdalwarp.html). function can reproject supported spatial reference system (SRS). can also used crop, mosaic, resample, optionally write output different raster format. See Details list commonly used processing options can passed arguments warp().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster reprojection and mosaicing — warp","text":"","code":"warp(src_files, dst_filename, t_srs, cl_arg = NULL, quiet = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster reprojection and mosaicing — warp","text":"src_files Either character vector source filenames(s) reprojected, GDALRaster object list GDALRaster objects source data. dst_filename Either character string giving filename output dataset, object class GDALRaster output. t_srs Character string. Target spatial reference system. Usually EPSG code (\"EPSG:#####\") well known text (WKT) SRS definition. Can set empty string \"\" spatial reference src_files[1] used unless destination raster already exists (see Note). cl_arg Optional character vector command-line arguments gdalwarp addition -t_srs (see Details). quiet Logical scalar. TRUE, progress bar displayed. Defaults FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster reprojection and mosaicing — warp","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster reprojection and mosaicing — warp","text":"Several processing options can performed one call warp() passing necessary command-line arguments. following list describes several commonly used arguments. Note gdalwarp supports large number arguments enable variety different processing options. Users encouraged review original source documentation provided GDAL project URL full list. -te <xmin> <ymin> <xmax> <ymax> Georeferenced extents output file created (target SRS default). -te_srs <srs_def> SRS interpret coordinates given -te (different t_srs). -tr <xres> <yres> Output pixel resolution (target georeferenced units). -tap (target aligned pixels) align coordinates extent output file values -tr, aligned extent includes minimum extent. Alignment means xmin / resx, ymin / resy, xmax / resx ymax / resy integer values. -ovr <level>|AUTO|AUTO-<n>|NONE Specify overview level source files must used. default choice, AUTO, select overview level whose resolution closest target resolution. Specify integer value (0-based, .e., 0=1st overview level) select particular level. Specify AUTO-n n integer greater equal 1, select overview level AUTO one. specify NONE force base resolution used (can useful overviews generated low quality resampling method, warping done using higher quality resampling method). -wo <NAME>=<VALUE> Set warp option described GDAL documentation GDALWarpOptions Multiple -wo may given. See also -multi . -ot <type> Force output raster bands specific data type supported format, may one following: Byte, Int8, UInt16, Int16, UInt32, Int32, UInt64, Int64, Float32, Float64, CInt16, CInt32, CFloat32 CFloat64. -r <resampling_method> Resampling method use. Available methods : near (nearest neighbour, default), bilinear, cubic, cubicspline, lanczos, average, rms (root mean square, GDAL >= 3.3), mode, max, min, med, q1 (first quartile), q3 (third quartile), sum (GDAL >= 3.1). -srcnodata \"<value>[ <value>]...\" Set nodata masking values input bands (different values can supplied band). one value supplied values quoted keep together single operating system argument. Masked values used interpolation. Use value None ignore intrinsic nodata settings source dataset. -srcnodata explicitly set, source dataset nodata values, taken account default. -dstnodata \"<value>[ <value>]...\" Set nodata values output bands (different values can supplied band). one value supplied values quoted keep together single operating system argument. New files initialized value possible nodata value recorded output file. Use value \"None\" ensure nodata defined. argument used nodata values copied source dataset. -srcband <n> (GDAL >= 3.7) Specify input band number warp (1 number bands source dataset). option used warp subset input bands. input bands used specified. option may repeated multiple times select several input bands. order bands specified order appear output dataset (unless -dstband specified). alpha band specified list, automatically retrieved (unless -nosrcalpha specified). -dstband <n> (GDAL >= 3.7) Specify output band number warp. practice, option useful updating existing dataset, e.g warp one band time. -srcband specified, must many occurrences -dstband -srcband. -dstband specified, :c(\"-dstband\", \"1\", \"-dstband\", \"2\", ... \"-dstband\", \"N\") assumed N number input bands (implicitly, specified explicitly -srcband). alpha band specified list, automatically retrieved (unless -nosrcalpha specified). -wm <memory_in_mb> Set amount memory warp API allowed use caching. value interpreted megabytes value <10000. values >=10000, interpreted bytes. warper total memory required hold input output image arrays auxiliary masking arrays larger \"warp memory\" allowed subdivide chunk smaller chunks try . -wm value small extra overhead many small chunks setting larger better matter diminishing returns. -multi Use multithreaded warping implementation. Two threads used process chunks image perform input/output operation simultaneously. Note computation multithreaded . , can use -wo NUM_THREADS=val/ALL_CPUS option, can combined -multi. -<format> Set output raster format. guessed extension specified. Use short format name (e.g., \"GTiff\"). -co <NAME>=<VALUE> Set one format specific creation options output dataset. example, GeoTIFF driver supports creation options control compression, whether file tiled. getCreationOptions() can used look available creation options, GDAL Raster drivers documentation definitive reference format specific options. Multiple -co may given, e.g., -overwrite Overwrite target dataset already exists. Overwriting means deleting recreating file scratch. Note option specified output file already exists, updated place. documentation gdalwarp describes additional command-line options related spatial reference systems, alpha bands, masking polygon cutlines including blending, . Mosaicing existing output file supported output file already exists. spatial extent existing file modified accommodate new data, may remove case, use -overwrite option. Command-line options passed warp() character vector. elements vector individual options followed individual values, e.g., set target pixel resolution 30 x 30 target georeferenced units use bilinear resampling.","code":"c(\"-co\", \"COMPRESS=LZW\", \"-co\", \"BIGTIFF=YES\") cl_arg = c(\"-tr\", \"30\", \"30\", \"-r\", \"bilinear\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raster reprojection and mosaicing — warp","text":"warp() can used reproject also perform processing crop, resample, mosaic. processing generally done single function call passing arguments output (\"target\") pixel resolution, extent, resampling method, nodata value, format, forth. warp() called t_srs = \"\" output raster already exist, target spatial reference set src_files[1]. case, processing options given cl_arg performed without reprojecting (one source raster multiple sources use spatial reference system, otherwise reproject inputs SRS src_files[1] different). t_srs = \"\" destination raster already exists, output SRS projection destination dataset.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster reprojection and mosaicing — warp","text":"","code":"# reproject the elevation raster to NAD83 / CONUS Albers (EPSG:5070) elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  # command-line arguments for gdalwarp # resample to 90-m resolution and keep pixels aligned: args <- c(\"-tr\", \"90\", \"90\", \"-r\", \"cubic\", \"-tap\") # write to Erdas Imagine format (HFA) with compression: args <- c(args, \"-of\", \"HFA\", \"-co\", \"COMPRESSED=YES\")  alb83_file <- file.path(tempdir(), \"storml_elev_alb83.img\") warp(elev_file, alb83_file, t_srs=\"EPSG:5070\", cl_arg = args) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, alb83_file) ds$getDriverLongName() #> [1] \"Erdas Imagine Images (.img)\" ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$res() #> [1] 90 90 ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3044.0000 2676.0243  132.9744 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-11119403-dev","dir":"Changelog","previous_headings":"","what":"gdalraster 1.11.1.9403 (dev)","title":"gdalraster 1.11.1.9403 (dev)","text":"(internal) GDALVector: use $setIgnoredFields() $returnGeomAs set NONE (2024-09-09) GDALVector: add SUMMARY option per-object setting $returnGeomAs (2024-09-09) GDALVector: add $promoteToMulti per-object setting (2024-09-09) GDALVector: add class methods writing features layer: $createFeature(), $setFeature(), $upsertFeature() (2024-09-08) fix input validation ogr_def_geom_field(): srs NULL set empty string, avoids exception ogr_layer_create() SRS given using layer definition created ogr_def_layer() (2024-09-07) add ogr_layer_rename(): rename existing layer vector dataset (GDAL >= 3.5) (2024-09-04) (internal) add header src/gdal_vsi.h minor code cleanups src/gdal_vsi.cpp (2024-09-02) (internal) use consistent naming convention C++ class member variables (2024-08-31) (internal) pass const reference srs geom functions (2024-08-31) (internal) class GDALVector: add get/set methods dataset layer handles internal use (2024-08-18) (internal) try/catch potentially large allocation std::vector (2024-08-18) add GDALRaster::getMaskBand(): return mask filename band number associated given band dataset (2024-08-15) add GDALRaster::getMaskFlags(): return status flags mask band associated given band dataset (2024-08-14) createCopy(): fix check CreateCopy() availability driver testing GDAL_DCAP_CREATECOPY GDAL_DCAP_CREATE, previously tested GDAL_DCAP_CREATECOPY (2024-08-12) add srs_get_name(): return spatial reference system name (2024-08-12) add srs_find_epsg(): try identify matching EPSG code given SRS definition (2024-08-11) translate(): source raster can GDALRaster object (2024-08-11) add autoCreateWarpedVRT(): create warped virtual dataset representing input raster warped target coordinate system, wrapper GDALAutoCreateWarpedVRT() (2024-08-10) GDALRaster::setDescription(): support band = 0 set dataset-level description (2024-08-10) warp(): source destination rasters may objects class GDALRaster (#469) (2024-08-10) add GDALRaster::addBand(): add band dataset underlying format supports action, e.g., MEM VRT (2024-08-09) createCopy(): add argument return_obj, TRUE return object class GDALRaster created dataset; object class GDALRaster can given argument src_filename specify source dataset (2024-08-07) create(): add argument return_obj, TRUE return object class GDALRaster created dataset (2024-08-07) add GDALRaster::setMetadata(): set dataset band-level metadata character vector NAME=VALUE pairs (instead per metadata item existing $setMetadataItem()) (2024-08-07) add transactions support class GDALVector ($startTransaction(), $commitTransaction(), $rollbackTransaction()) (2024-08-03) add GDALVector::deleteFeature(): delete feature layer (2024-08-03) add featureTemplate read-field class GDALVector (2024-08-03) add GDALVector::setNextByIndex(): move read cursor ith feature current result set (2024-08-02) add GDALVector::setIgnoredFields(): set fields can omitted retrieving features layer (2024-08-01) add GDALVector class methods: getAttributeFilter(), setSpatialFilter(), getSpatialFilter() (2024-07-30) add ogr_proc(): GDAL OGR facilities vector geoprocessing (2024-07-28) ogr_execute_sql(): now returns object class GDALVector SQL SELECT statements (2024-07-24) add class GDALVector, initial implementation / WIP (2024-07-22) add package wk Suggests (2024-07-22) plot_raster(): default stretch input RGB Byte raster, addresses #429 (2024-07-10) add GDALRaster$clearColorTable(): clear color table associated raster band (2024-07-10) fix mode name color-relief DEFAULT_DEM_PROC (\"color-relief\" instead \"color_relief\", fixes #428) (2024-07-09) vsi_read_dir(): add parameter recursive, TRUE read list entries directory subdirectories (2024-07-01) avoid data copy GDALRaster::getDefaultRAT() better performance case large attribute tables (2024-06-24) add vsi_get_actual_url(): return actual URL supplied VSI filename, wrapper VSIGetActualURL() GDAL API (2024-06-20) add vsi_get_signed_url(): return signed URL supplied VSI filename, wrapper VSIGetSignedURL() GDAL API (2024-06-20) Documentation: additions section Azure (/vsiaz/) GDAL Config Quick Reference; update Raster API Tutorial use argument return_obj create() createCopy(); document $fillRaster() method GDALRaster-class; add -srcband -dstband command-line options documentation warp(); add Development practices CONTRIBUTING.md; add OpenSSF best practices badge README; add fig.alt text articles web accessibility; add OpenSSF Scorecard badge README; add example ogr2ogr() dissolve features based attribute value; cleanup code removes temp files examples wrapped \\dontshow{}","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1111","dir":"Changelog","previous_headings":"","what":"gdalraster 1.11.1","title":"gdalraster 1.11.1","text":"CRAN release: 2024-06-13 fix test test-ogr_manage.R: test GeoJSON layer need check existence using with_update = TRUE file extdata (#410) add apply_geotransform(): convert raster column/row geospatial x/y coordinates, wrapper GDALApplyGeoTransform() GDAL API, operating matrix input col/row coordinates (internal wrapper .apply_geotransform() unchanged) add GDALRaster$apply_geotransform(): class method alternative calling stand-alone function apply_geotransform() object class GDALRaster vsi_curl_clear_cache(): add parameter quiet wrap API call quiet error handler, TRUE default Documentation: document w+ access flag class VSIFile; add CPL_VSIL_USE_TEMP_FILE_FOR_RANDOM_WRITE configuration option vignette GDAL Config Quick Reference; replace paste0() file.path() examples throughout code linting","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1110","dir":"Changelog","previous_headings":"","what":"gdalraster 1.11.0","title":"gdalraster 1.11.0","text":"CRAN release: 2024-06-03","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"system-requirements-1-11-0","dir":"Changelog","previous_headings":"","what":"System requirements","title":"gdalraster 1.11.0","text":"GDAL >= 3.1.0 now required (previously >= 2.4.0) package bit64 added Imports package RcppInt64 added LinkingTo","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"new-utility-functions-for-managing-vector-data-sources-1-11-0","dir":"Changelog","previous_headings":"","what":"New utility functions for managing vector data sources","title":"gdalraster 1.11.0","text":"initial bindings GDAL/OGR Vector API supporting data source management: ogr_ds_exists(), ogr_ds_format(), ogr_ds_test_cap(), ogr_ds_create(), ogr_ds_layer_count(), ogr_ds_layer_names(), ogr_layer_exists(), ogr_layer_test_cap(), ogr_layer_create(), ogr_layer_field_names(), ogr_layer_delete(), ogr_field_index(), ogr_field_create(), ogr_geom_field_create(), ogr_field_rename(), ogr_field_delete(), ogr_execute_sql() documentation helper functions feature class definition: ogr_def_field(), ogr_def_geom_field(), ogr_def_layer()","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"new-bindings-to-the-gdal-vsivirtualhandle-api-1-11-0","dir":"Changelog","previous_headings":"","what":"New bindings to the GDAL VSIVirtualHandle API","title":"gdalraster 1.11.0","text":"class VSIFile wraps VSIVirtualHandle Standard C binary file /O regular file systems, URLs, cloud storage services, Zip/GZip/7z/RAR, -memory files","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-bug-fix--enhancements-1-11-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems (bug fix / enhancements)","title":"gdalraster 1.11.0","text":"bug fix vsi_mkdir(): file mode set incorrectly mode passed correctly octal literal. mode now passed character string containing file mode octal. add vsi_get_file_metadata(): returns metadata network filesystem objects (/vsicurl/, /vsis3/, /vsiaz/, etc.), GDAL >= 3.7, /vsizip/ SOZip metadata add vsi_set_path_option(): set path specific option given path prefix, e.g., credential setting virtual file system (GDAL >= 3.6) add vsi_clear_path_options(): clear path specific configuration options previously set vsi_set_path_option() (GDAL >= 3.6) vsi_rmdir(): add argument recursive, TRUE delete directory content vsi_mkdir(): add argument recursive, TRUE create directory ancestors several VSI functions returned 0 -1 invisibly indicating success/failure, consistent GDAL return values. return values now visible consistent return values VSIFile class methods. vsi_stat() info = \"size\", vsi_get_disk_free_space() now return bit64::integer64 type","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-11-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.11.0","text":"behavior change: class methods $info() $infoAsJSON() now use default command-line arguments underlying gdalinfo utility. Arguments configurable new read/write $infoOptions field, empty vector default (character(0)). add support /O Byte raster R raw type, add setting $readByteAsRaw class field (#314, thanks @mdsumner) add read/write fields $infoOptions $quiet applying per-object settings add optional constructor allow specifying whether dataset opened shared mode, TRUE default add method $getActualBlockSize(): retrieve actual block size given block offset add method $get_pixel_line(): class method alternative calling stand-alone function get_pixel_line() object class GDALRaster(#339) add method $getProjection(): equivalent $getProjectionRef() (consistent osgeo.gdal.Dataset.getProjection() / osgeo.gdal.Dataset.getProjectionRef() GDAL Python API) method $getDefaultRAT(): add progress bar since retrieving large raster attribute tables take >30 sec","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"stand-alone-processing-functions-1-11-0","dir":"Changelog","previous_headings":"","what":"Stand-alone processing functions","title":"gdalraster 1.11.0","text":"calc(): add support multiband output (#319) calc(): add input validation var.names, must expr get_pixel_line(): object class GDALRaster can now passed gt parameter, case geotransform obtained object bounds checking raster extent done (original behavior gt numeric vector unchanged) (#339) ogr2ogr(): add parameter open_options support options source dataset read_ds(): add parameter as_raw read Byte raster R raw type (#314, thanks @mdsumner)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-configuration-1-11-0","dir":"Changelog","previous_headings":"","what":"GDAL configuration","title":"gdalraster 1.11.0","text":"add dump_open_datasets(): dump list open datasets (shared ) console add get_num_cpus(): get number processors detected GDAL add get_usable_physical_ram(): get usable physical RAM reported GDAL add has_spatialite(): returns TRUE GDAL built SpatiaLite support add http_enabled(): returns TRUE GDAL built libcurl support add .cpl_http_cleanup(): wrapper CPLHTTPCleanup() internal use (2024-05-29)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"geometry-functions-1-11-0","dir":"Changelog","previous_headings":"","what":"Geometry functions","title":"gdalraster 1.11.0","text":"new additional geometry functions operating WKT (GEOS via GDAL headers): g_is_empty(), g_is_valid(), g_name(), g_intersects(), g_equals(), g_disjoint(), g_touches(), g_contains(), g_within(), g_crosses(),g_overlaps(), g_intersection(), g_union(), g_difference(), g_sym_difference(), g_distance(), g_length(), g_area(), g_centroid() add bbox_transform(): transform bounding box different projection g_transform(): now uses OGR_GeomTransformer_Create() OGR_GeomTransformer_Transform() GDAL API, enhanced version OGR_G_Transform(); add arguments wrap_date_line date_line_offset","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-11-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.11.0","text":"add Discussions GitHub repository add section HTTP/HTTPS (/vsicurl/) vignette GDAL Config Quick Reference DESCRIPTION file: add Michael D. Sumner Authors@R","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-internal-changes-and-fixes-1-11-0","dir":"Changelog","previous_headings":"","what":"Other internal changes and fixes","title":"gdalraster 1.11.0","text":"fix memory leaks detected Valgrind GDALRaster class methods $info(), $infoAsJSON() $getDefaultRAT() register finalizer call CPLHTTPCleanup() upon R session exit add GDALRaster class method $setFilename(): set filename uninitialized GDALRaster object, currently undocumented / internal use add GDALRaster class method _getGDALDatasetH(): get GDAL dataset handle internal use buildRAT(): input raster object class GDALRaster, use reference rather instantiating another GDALRaster object internally calc(): close input raster dataset exit differing extent detected add missing null checks, object destruction error conditions, src/geos_wkt.cpp improve check \"-json\" cl_arg ogrinfo() code linting","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-1100","dir":"Changelog","previous_headings":"","what":"gdalraster 1.10.0","title":"gdalraster 1.10.0","text":"CRAN release: 2024-03-26","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"system-requirements-1-10-0","dir":"Changelog","previous_headings":"","what":"System requirements","title":"gdalraster 1.10.0","text":"GDAL built GEOS now required","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-1-10-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems","title":"gdalraster 1.10.0","text":"add vsi_get_fs_prefixes(): get list prefixes virtual file system handlers currently registered add vsi_get_fs_options(): get list options associated virtual file system handler (setting set_config_option()) add vsi_supports_rnd_write() vsi_supports_seq_write(): test whether filesystem supports random write sequential write, conditional whether local temp file allowed uploading target location add vsi_get_disk_free_space(): return free disk space available filesystem fixed misspelled argument vsi_copy_file() vsi_sync() (#233)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-stand-alone-functions-1-10-0","dir":"Changelog","previous_headings":"","what":"Other stand-alone functions","title":"gdalraster 1.10.0","text":"add ogrinfo(): wrapper ogrinfo command-line utility, retrieve information vector data source potentially edit data SQL statements (GDAL >= 3.7) add ogr2ogr(): wrapper ogr2ogr command-line utility, convert vector data different formats add g_transform(): apply coordinate transformation WKT geometry add geos_version(): get version information GEOS library use GDAL add push_error_handler(): wrapper CPLPushErrorHandler() GDAL Common Portability Library add pop_error_handler(): wrapper CPLPopErrorHandler() GDAL Common Portability Library calc(): argument usePixelLonLat deprecated unnecessary, variables pixelLon / pixelLat now auto-detected used calc expression; small performance improvement computing pixelY needed add optional argument quiet several functions configure progress reporting (#237) make dataset management functions quieter (#282) gdal_formats() now returns data frame supported raster vector formats, information capabilities format driver","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"cmbtable-class-1-10-0","dir":"Changelog","previous_headings":"","what":"CmbTable-class","title":"gdalraster 1.10.0","text":"new(): assign default variable names constructor names given","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-10-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.10.0","text":"src/geos_wkt.cpp, src/transform.cpp, src/wkt_conv.cpp: deallocate OGR geometry OSR spatial ref objects fix memory leaks add unit tests geometry operations using GEOS via GDAL headers GDALRaster::getMetadataDomainList(): deallocate returned string list avoid memory leak GDALRaster::close(): clear cache needed, check return values GDALClose() GDALFlushCache() GDAL >= 3.7 configure.ac: add back proj-include proj-lib, latter needed cases source install macOS; rework system requirement GDAL built GEOS remove internal has_geos() checks update documentation, since GDAL GEOS now required add .editorconfig file bulk reformat code style fix R code lintr add .lintr file mass replace NULL -> nullptr C++ code format diagnostic messages throughout consistency follow guidelines given “Writing R Extensions” clean temp files examples throughout","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-190","dir":"Changelog","previous_headings":"","what":"gdalraster 1.9.0","title":"gdalraster 1.9.0","text":"CRAN release: 2024-02-25","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"behavior-change-1-9-0","dir":"Changelog","previous_headings":"","what":"Behavior change","title":"gdalraster 1.9.0","text":"remove OSR_DEFAULT_AXIS_MAPPING_STRATEGY=TRADITIONAL_GIS_ORDER _gdal_init() (#209), since give different SRS comparison result depending GDAL version cases axis mapping matters default options OSRIsSameEx() used","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-vsi-for-operations-on-virtual-file-systems-1-9-0","dir":"Changelog","previous_headings":"","what":"GDAL VSI for operations on virtual file systems","title":"gdalraster 1.9.0","text":"add vsi_copy_file(): wrapper VSICopyFile() add vsi_curl_clear_cache(): wrapper VSICurlClearCache() VSICurlPartialClearCache() add vsi_mkdir(): wrapper VSIMkdir() add vsi_read_dir(): wrapper VSIReadDirEx() add vsi_rename(): wrapper VSIRename() add vsi_rmdir(): wrapper VSIRmdir() add vsi_stat(): wrapper VSIStatExL() add vsi_sync(): wrapper VSISync() add vsi_unlink(): wrapper VSIUnlink() add vsi_unlink_batch(): wrapper VSIUnlinkBatch()","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-9-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.9.0","text":"GDALRaster$new(): add constructor passing dataset open options","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"stand-alone-functions-1-9-0","dir":"Changelog","previous_headings":"","what":"Stand-alone functions","title":"gdalraster 1.9.0","text":"add footprint(): wrapper gdal_footprint command-line utility, compute footprint raster (GDAL >= 3.8) read_ds(): add as_list argument option return multi-band output list form; attach attribute gis output, list containing bbox, dimension spatial reference (thanks input @mdsumner #185) plot_raster(): accept pixel data list form (band vectors list elements), make use gis attribute present (thanks input @mdsumner #185) srs_is_same(): add arguments criterion, ignore_axis_mapping ignore_coord_epoch","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-9-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.9.0","text":"organize website reference index add Microsoft Azure information GDAL Config Quick Reference update DESCRIPTION","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-9-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.9.0","text":"add _check_gdal_filename(): minimal filename check UTF-8 add _get_physical_RAM(): wrapper CPLGetUsablePhysicalRAM() internal use set test coverage target minimum 90%, codecov range: 70..90 (previously 80%, 60..80)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-180","dir":"Changelog","previous_headings":"","what":"gdalraster 1.8.0","title":"gdalraster 1.8.0","text":"CRAN release: 2024-01-27","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"dependencies-1-8-0","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"gdalraster 1.8.0","text":"libxml2 listed SystemRequirements since required imported package xml2","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-8-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.8.0","text":"read_only=TRUE now optional default class constructor add clearStatistics(): clear statistics PAM supported datasets (GDAL >= 3.2)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"stand-alone-functions-1-8-0","dir":"Changelog","previous_headings":"","what":"Stand-alone functions","title":"gdalraster 1.8.0","text":"add addFilesInZip(): create/append Seek-Optimized ZIP files (GDAL >= 3.7) plot_raster(): now uses georeferenced coordinates default instead pixel/line (#184 thanks @mdsumner)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-8-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.8.0","text":"example code calc() using Landsat bands applied scale/offset given .json metadata - corrected add AWS_REGION, section SOZip GDAL Config Quick Ref update documentation examples throughout default read_only=TRUE constructor GDALRaster add translate() warp() Raster API Tutorial","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-8-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.8.0","text":"configure.ac: remove parts PROJ config unneeded since gdalraster uses PROJ via GDAL headers; use autoconf macros compiler invocations; get PROJ data directory pkg-config possible; add action--cross-compiling argument (#190 #197; thanks Simon Urbanek debugging initial issue providing helpful feedback) get GDAL libs pkg-config Windows possible (#125 thanks @kalibera) translate() warp(): close output dataset closing source dataset(s) case output VRT switch using R convention x.x.x.9000 development versioning","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-170","dir":"Changelog","previous_headings":"","what":"gdalraster 1.7.0","title":"gdalraster 1.7.0","text":"CRAN release: 2023-11-29","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-api-stand-alone-functions-1-7-0","dir":"Changelog","previous_headings":"","what":"GDAL API stand-alone functions","title":"gdalraster 1.7.0","text":"add polygonize(): create polygon feature layer raster data, wrapper GDALPolygonize GDAL Algorithms API. add rasterize(): burn vector geometries (points, lines, polygons) raster, wrapper gdal_rasterize command-line utility add buildVRT(): build GDAL virtual raster mosaic list datasets, wrapper gdalbuildvrt command-line utility add translate(): convert raster data different formats, wrapper gdal_translate command-line utility make t_srs optional warp() GDAL configuration option TRADITIONAL_GIS_ORDER=OSR_DEFAULT_AXIS_MAPPING_STRATEGY now set package load","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-7-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.7.0","text":"add GDAL Config Quick Reference vignettes warp() additional documentation covering several processing options add COMPRESS_OVERVIEW configuration option documentation GDALRaster::buildOverviews() add str() GDALRaster object Raster API Tutorial add display EVT raster along attribute table Raster Attribute Tables","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"internal-1-7-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"gdalraster 1.7.0","text":"add src/ogr_util.cpp src/ogr_util.h: OGR utility functions vector data sources src/gdal_exp.cpp: additional error handling several wrapper functions, increased test coverage","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-160","dir":"Changelog","previous_headings":"","what":"gdalraster 1.6.0","title":"gdalraster 1.6.0","text":"CRAN release: 2023-10-27","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"dependencies-1-6-0","dir":"Changelog","previous_headings":"","what":"Dependencies","title":"gdalraster 1.6.0","text":"GDAL >= 2.4.0 (previously >= 2.3.0) package xml2 now required (previously Suggests) package gt added Suggests (required displayRAT())","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-6-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.6.0","text":"add methods Raster Attribute Tables: getDefaultRAT(), setDefaultRAT() add getDefaultHistogram(): fetch default raster histogram band add getHistogram(): compute raster histogram band add getMinMax(): compute min/max raster band add getMetadataDomainList(): get list metadata domains dataset raster band fix getMetadataItem() specific domain dataset level (#109)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-api-stand-alone-functions-1-6-0","dir":"Changelog","previous_headings":"","what":"GDAL API stand-alone functions","title":"gdalraster 1.6.0","text":"add buildRAT(): compute raster band set unique pixel values counts, build GDAL Raster Attribute Table data frame add displayRAT(): generate presentation Raster Attribute Table, showing colors table contains RGB columns add gdal_formats(): report supported raster formats add getCreationOptions(): get list creation options raster format add copyDatasetFiles(): copy files associated dataset add deleteDataset(): delete dataset format-specific way add renameDataset(): rename dataset format-specific way add missing error checks src/gdal_exp.cpp (#104)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"cmbtable-class-1-6-0","dir":"Changelog","previous_headings":"","what":"CmbTable-class","title":"gdalraster 1.6.0","text":"argument incr count increment CmbTable::update() can zero","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"runningstats-class-1-6-0","dir":"Changelog","previous_headings":"","what":"RunningStats-class","title":"gdalraster 1.6.0","text":"use uint64_t count accumulator (previously long long) make explicit return cast get_count() (user-visible changes) slightly faster update","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-miscellaneous-1-6-0","dir":"Changelog","previous_headings":"","what":"Other miscellaneous","title":"gdalraster 1.6.0","text":"plot_raster(): normalize legend correctly minmax_def minmax_pct_cut (#131)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"documentation-1-6-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"gdalraster 1.6.0","text":"add vignette Raster Attribute Tables add notes RunningStats-class update vignette Raster API Tutorial gdal_formats() getCreationOptions() update installation instructions README","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-150","dir":"Changelog","previous_headings":"","what":"gdalraster 1.5.0","title":"gdalraster 1.5.0","text":"CRAN release: 2023-09-25","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-class-1-5-0","dir":"Changelog","previous_headings":"","what":"GDALRaster-class","title":"gdalraster 1.5.0","text":"add methods color tables: getColorTable(), getPaletteInterp(), setColorTable() add getRasterColorInterp(), setRasterColorInterp(): get/set color interpretation raster bands add getDescription(), setDescription(): get/set description raster band objects add flushCache(): flush write cached data disk add getFileList(): returns list files forming dataset add infoAsJSON(): returns output gdalinfo command-line utility JSON-formatted string new(): add warning class constructor raster int64 data type (handled double now)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdal-api-stand-alone-functions-1-5-0","dir":"Changelog","previous_headings":"","what":"GDAL API stand-alone functions","title":"gdalraster 1.5.0","text":"add bandCopyWholeRaster(): wrapper GDALRasterBandCopyWholeRaster(), efficiently copy whole raster band add createColorRamp(): wrapper GDALCreateColorRamp(), automatically create ramp one color another add sieveFilter(): wrapper GDALSieveFilter() Algorithms API, remove small raster polygons add PROJ utility functions: proj_version(), proj_search_paths(), proj_networking() (via GDAL headers) add g_buffer(): compute buffer WKT geometry (GEOS convenience function via GDAL headers)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"cmbtable-class-1-5-0","dir":"Changelog","previous_headings":"","what":"CmbTable-class","title":"gdalraster 1.5.0","text":"add updateFromMatrixByRow(): update hash table matrix integer combinations arranged rows add asMatrix(): return combinations table numeric matrix (alternative asDataFrame())","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"bug-fix-1-5-0","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"gdalraster 1.5.0","text":"warp() caused segfault proj.db found (#96)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"other-miscellaneous-1-5-0","dir":"Changelog","previous_headings":"","what":"Other miscellaneous","title":"gdalraster 1.5.0","text":"plot_raster(): default value legend argument changed FALSE; legend can now use color table continuous data; add argument maxColorValue (e.g., use RGB 0:255 instead 0:1 col_tbl) bbox_from_wkt(), bbox_to_wkt(): add arguments extend_x, extend_y Windows, reset GDAL environment variables package unload previously set load add inst/extdata/storml_tcc.tif: example dataset NLCD Tree Canopy Cover update package vignette color tables raster display","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-140","dir":"Changelog","previous_headings":"","what":"gdalraster 1.4.0","title":"gdalraster 1.4.0","text":"CRAN release: 2023-08-29 add dem_proc(): wrapper gdaldem command-line utility generate DEM derivatives add following set methods class GDALRaster: setMetadataItem(), setUnitType(), setScale(), setOffset() add GDALRaster$buildOverviews(): build raster overviews add GDALRaster$dim(): returns vector xsize, ysize, nbands transform_xy() inv_project(): pts can data frame matrix plot_raster() now accepts GDALRaster object data argument plot_raster(): make legend narrower add argument digits format legend labels raster data floating point add test suite code coverage report","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-130","dir":"Changelog","previous_headings":"","what":"gdalraster 1.3.0","title":"gdalraster 1.3.0","text":"CRAN release: 2023-06-29 GDALRaster::read(): data now read R integer type possible raster data type (#23) add fillNodata(): wrapper GDALFillNodata() GDAL Algorithms API add read_ds(): convenience wrapper GDALRaster$read() add plot_raster(): display raster data using base R graphics add get_cache_used(): wrapper GDALGetCacheUsed64() return value MB add GDALRaster$getOverviewCount(): return number overview layers available GDALRaster$info(): drop -nomd argument internal call bbox_from_wkt(): return NA creation geometry object fails (#27) fix GDALRaster$getMetadata(): requesting band-level metadata domain default metadata domain returning dataset-level metadata instead add vignette containing R port GDAL Raster API tutorial add description GDAL_RASTERIO_RESAMPLING configuration option documentation GDALRaster$read() add web article GDAL block cache configuration GDAL_CACHEMAX","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-120","dir":"Changelog","previous_headings":"","what":"gdalraster 1.2.0","title":"gdalraster 1.2.0","text":"CRAN release: 2023-05-28 starting v. 1.2.0, gdalraster require R >= 4.2.0 fix: check GEOS availability bbox geometry functions fix: wrong array dimensions read() (#5). Starting v. 1.2.0, read() return vector instead matrix better matches concept native GDAL-like interface (thanks Michael Sumner). add: has_geos() exported R add: srs_is_same() - wrapper OSRIsSame() GDAL Spatial Reference System C API documentation - minor edits throughout improve clarity","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-111","dir":"Changelog","previous_headings":"","what":"gdalraster 1.1.1","title":"gdalraster 1.1.1","text":"CRAN release: 2023-05-24 Initial public release.","code":""}]
