[{"path":"https://usdaforestservice.github.io/gdalraster/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"See General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Welcome","title":"Welcome","text":"’re glad ’re thinking contributing open source project USDA Forest Service, Rocky Montain Research Station. ’re unsure anything, just ask – submit issue pull request anyway. worst can happen ’ll politely asked change something. welcome friendly contributions.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"policies","dir":"","previous_headings":"","what":"Policies","title":"Welcome","text":"want ensure welcoming environment projects. staff follow General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct contributors .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"public-domain","dir":"","previous_headings":"","what":"Public domain","title":"Welcome","text":"project released MIT license. Portions project public domain within United States, copyright related rights waived worldwide CC0 1.0 Universal public domain dedication. See file inst/COPYRIGHTS details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 gdalraster authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/SECURITY.html","id":null,"dir":"","previous_headings":"","what":"Security Policy","title":"Security Policy","text":"Private vulnerability reporting enabled repository. package provides API bindings GDAL, large software library dealing hundreds file formats protocols. Please see GDAL security policy additional information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GDAL Block Cache","text":"GDAL implements read/write memory caching raster /O. Caching operates raster blocks may provide considerable improvement /O performance accessing pixel data across block boundaries. analytical context processing often row-oriented, means access efficient even rows intersect many tiles raster arranged square rectangular blocks (opposed blocks arranged one whole row). Consideration caching mechanism helpful scaling /O large datasets need processed many chunks. article describe operation caching mechanism, relative performance accessing data row tile relation different raster block arrangements. Implications configuring cache memory size GDAL_CACHEMAX setting described. Focus reading pixel data (analytical context), similar concepts apply writing well.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"relative-performance","dir":"Articles","previous_headings":"","what":"Relative performance","title":"GDAL Block Cache","text":"dataset containing 16-bit integer elevation values 30-m pixel resolution conterminous US obtained LANDFIRE. version “LF 2020 [LF 2.2.0]” available 8.4 GB download. download includes raster overviews, elevation raster 6.8 GB GeoTIFF file using LZW compression 128 x 128 tiles. direct download link LF 2020 elevation :https://landfire.gov/bulk/downloadfile.php?FNAME=US_Topo_2020-LF2020_Elev_220_CONUS.zip&TYPE=landfire Tests run laptop Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, 8 GB RAM SSD, Ubuntu 22.04.2, R 4.3.0, gdalraster 1.2.1 (dev), GDAL 3.6.2. Open elevation dataset get parameters: first test reads pixels raster row. tile size 128 x 128 pixels, row intersects 1222 raster blocks (156335 / 128 = 1221.4, last block incomplete). test reflects performance implications GDAL read-ahead caching: comparison, read data raster arranged blocks whole rows (efficient row-level access). gdalraster::createCopy() copies raster dataset optional changes format. extent, number bands, data type, projection, geotransform copied source raster: creates “striped” tif raster blocks arranged row-level access (TILED=default creation option GTiff format driver). resulting file larger 10.6 GB vs. 6.8 GB, since compression efficient strips vs. tiles. Substituting new file (f2) test gives following time read pixels row: final test reads block original tiled raster distributed LANDFIRE. read square blocks need calculate row/column offsets x/y sizes tile, including incomplete tiles along right bottom edges. Package stars provides helper function use . stars represents raster data using R’s 1-based indexing column-major array order (raster rows array columns R). Accounting differences native GDAL indexing, get matrix block boundaries using: terms expected efficiency, reading tiled raster block similar reading striped raster row (reading block boundaries, retrieval cache). difference striped tif contains fewer larger blocks (101538 blocks, 156335 pixels per block), tiled tif contains order magnitude blocks smaller (970268 blocks, 16384 pixels per block). test uses original LANDFIRE elevation file (f) read pixels tile:","code":"library(gdalraster)  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize() print(paste(\"Size is\", ncols, \"x\",  nrows))  # 1.587394e+10 pixels #> [1] \"Size is 156335 x 101538\"  ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\" \"INTERLEAVE=BAND\"  ds$getBlockSize(band=1) #> [1] 128 128  ds$getDataTypeName(band=1) #> [1] \"Int16\" process_row = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   ## process pixels, possibly write output...   return() }  ## Test 1 ## original tiled raster, reading by row (across block boundaries)  system.time( lapply(0:(nrows-1), process_row) ) #>    user  system elapsed  #> 228.269  11.319 242.195  ds$close() f2 = \"LC20_Elev_220_striped.tif\" opt = c(\"COMPRESS=LZW\", \"TILED=NO\", \"BLOCKYSIZE=1\", \"BIGTIFF=YES\") gdalraster::createCopy(format=\"GTiff\", dst_filename=f2, src_filename=f,                        options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds2 = new(GDALRaster, f2, read_only = TRUE) ds2$getBlockSize(band=1) #> [1] 156335      1  ds2$close() ## Test 2 ## striped tif, reading on block boundaries (rows) ## cache retrieval not involved  system.time( lapply(0:(nrows-1), process_row) ) #>    user  system elapsed #> 230.650   5.112 236.370 library(stars)  r = read_stars(f, proxy = TRUE) nrows = nrow(r) ncols = ncol(r) blocks = st_tile(nrows, ncols, 128, 128) blocks[, 1:2] = blocks[, 1:2] - 1L  nrow(blocks) #> [1] 970268 ## Test 3 ## original tiled raster, reading on block boundaries (tiles) ## cache retrieval not involved  system.time({   for (i in seq_len(nrow(blocks))) {     ds$read(1, blocks[i, 1], blocks[i, 2], blocks[i, 3], blocks[i, 4],         blocks[i, 3], blocks[i, 4])     }   }) #>    user  system elapsed  #> 237.920   7.165 251.200"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"description-of-cache-operation","dir":"Articles","previous_headings":"","what":"Description of cache operation","title":"GDAL Block Cache","text":"GDAL block caching enables reading large tiled raster efficiently row (1.59e+10 total pixels test dataset). default maximum size memory cache 5% usable physical RAM. row LANDFIRE tiled raster intersects 1222 blocks size 128 x 128. intersected block read file, decoded LZW compression, placed cache memory. data successive read() intersects block retrieved cache. Caching intersected blocks requires 128 x 128 x 2 bytes = 32768 bytes per block, 32768 x 1222 = 40042496 bytes, approximately 40 MB. decoded block data row can held cache case, meaning 1 every 128 row-level read() involves retrieval file decoding compressed blocks. 127/128 provided cache. Memory recovered request new cache block put cache memory use established limit (least recently used blocks flushed cache accommodate adding new blocks). code uses function gdalraster::get_cache_used() demonstrate behavior:","code":"## run in a new R session library(gdalraster)  f = \"LC20_Elev_220.tif\" ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize()  ## Default cache size is approximately 400 MB in this case (5% of 8 GB RAM) ## Read enough data to require cache max rows_read = 0 cache_use = get_cache_used() for (row in 0:1536) {   rowdata = ds$read(1, 0, row, ncols, 1, ncols, 1)   rows_read = c(rows_read, row+1)   cache_use = c(cache_use, get_cache_used()) }  get_cache_used() #> [1] 401 ds$close() get_cache_used() #> [1] 0  plot(rows_read, cache_use, type=\"S\",       xlab=\"rows read\", ylab=\"cache in use (MB)\",       col=\"blue\", lwd=2, xaxt=\"n\") axis(1, at = seq(0, 1536, by = 128), las=2)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"configuring-cache-size","dir":"Articles","previous_headings":"","what":"Configuring cache size","title":"GDAL Block Cache","text":"cache size limit can set GDAL_CACHEMAX configuration option, e.g., Note size limit block cache set upon first use (first /O). Setting GDAL_CACHEMAX point resize cache. per-session setting. GDAL_CACHEMAX configured upon first use cache, default cache size effect current session. /O involves block caching large datasets may require setting GDAL_CACHEMAX larger default. LANDFIRE elevation raster tiled 256 x 256, block require 65536 x 2 = 131072 bytes 16-bit data. cache size needed hold intersected blocks row approximately 160 MB (likewise, 640 MB 512 x 512 tiles). Similarly, cache size configured case multiple large rasters need read (written) simultaneously processing. cache flushed dataset closing recover memory. behavior described assumes GDAL dataset opened , required /O completed closing dataset. normally case using GDAL API via gdalraster (object class gdalraster::GDALRaster encapsulates GDALDataset object associated GDALRasterBand objects underlying API). also worth noting without block caching mechanism, possible read tiled elevation raster row reasonable time. can checked repeating Test 1 cache disabled:","code":"## in MB gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"800\")  ## or percent of physical RAM gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"10%\") ## Test 4 ## original tiled raster, reading by row (across block boundaries) ## cache disabled for testing ## run in a new R session  library(gdalraster)  ## for testing only set_config_option(\"GDAL_CACHEMAX\", \"0\")  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize()  process_row = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   return() }  system.time( lapply(0:(nrows-1), process_row) ) #> ^C #> Timing stopped at: 3650 42.97 3694  # killed with ctrl-c  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"GDAL Block Cache","text":"RFC 26: GDAL Block Cache Improvements Configuration options GDAL GDALRasterBlock Class Reference gcore/gdalrasterblock.cpp","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"opening-the-file","dir":"Articles","previous_headings":"","what":"Opening the file","title":"Raster API Tutorial","text":"opening GDAL-supported data store necessary register drivers. driver supported raster format. gdalraster automatically registers drivers package loaded. raster dataset opened creating new instance class GDALRaster passing name file access desired (read_only = TRUE, read_only = FALSE open update access): error returned dataset opened (creation GDALRaster object fails). Also, note filename may actually name physical file (though usually ). interpretation driver dependent, might URL, database connection string, filename additional parameters, etc. GDALRaster C++ class exposed directly R (via RCPP_EXPOSED_CLASS) encapsulates GDAL dataset object associated raster band objects. Methods class accessed R using $ operator.","code":"library(gdalraster) #> GDAL 3.4.1, released 2021/12/27, PROJ 8.2.1  tcc_file <- system.file(\"extdata/storml_tcc.tif\", package=\"gdalraster\") ds <- new(GDALRaster, tcc_file, read_only=TRUE)"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"getting-dataset-information","dir":"Articles","previous_headings":"","what":"Getting dataset information","title":"Raster API Tutorial","text":"described GDAL Raster Data Model, GDAL dataset contains list raster bands, pertaining area resolution. also metadata, coordinate system, georeferencing transform, size raster various information. particular common case “north ” raster without rotation shearing, georeferencing transform (see Geotransform Tutorial) takes following form 1-based indexing R: general case, affine transform. Class GDALRaster also provides convenience methods case north-raster: following code retrieves additional information dataset:","code":"gt <- ds$getGeoTransform() gt[1]  # x-coordinate of upper-left corner of the upper-left pixel #> [1] 323476.1 gt[2]  # pixel width (w-e resolution) #> [1] 30 gt[3]  # 0 for north-up #> [1] 0 gt[4]  # y-coordinate of upper-left corner of the upper-left pixel #> [1] 5105082 gt[5]  # 0 for north-up #> [1] 0 gt[6]  # pixel height (n-s resolution, negative value) #> [1] -30 ds$bbox()  # xmin, ymin, xmax, ymax #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res()   # pixel width, pixel height as positive values #> [1] 30 30 # GDAL format driver ds$getDriverShortName() #> [1] \"GTiff\" ds$getDriverLongName() #> [1] \"GeoTIFF\"  # raster size in pixels, number of bands ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getRasterCount() #> [1] 1 ds$dim() #> [1] 143 107   1  # coordinate reference system as WKT string ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"26912\\\"]]\"  # origin and pixel size from the geotransform print(paste(\"Origin:\", gt[1], gt[4])) #> [1] \"Origin: 323476.1 5105082\" print(paste(\"Pixel size:\", gt[2], gt[6])) #> [1] \"Pixel size: 30 -30\""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"fetching-a-raster-band","dir":"Articles","previous_headings":"","what":"Fetching a raster band","title":"Raster API Tutorial","text":"time access raster data via GDAL done one band time. Also, metadata, block sizes, nodata values various information available per-band basis. Class GDALRaster provides methods access raster band objects dataset (numbered 1 ds$getRasterCount()), specifying band number first argument:","code":"# block size ds$getBlockSize(band=1) #> [1] 143  57  # data type ds$getDataTypeName(band=1) #> [1] \"Byte\"  # nodata value ds$getNoDataValue(band=1) #> [1] 255  # min, max, mean, sd of pixel values in the band ds$getStatistics(band=1, approx_ok = FALSE, force = TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  0.00000 71.00000 23.69950 23.17744  # does this band have overviews? (aka \"pyramids\") ds$getOverviewCount(band=1) #> [1] 0  # does this band have a color table? col_tbl <- ds$getColorTable(band=1) if (!is.null(col_tbl))   head(col_tbl) #>      value red green blue alpha #> [1,]     0 255   255  255   255 #> [2,]     1 252   254  252   255 #> [3,]     2 250   253  250   255 #> [4,]     3 248   252  247   255 #> [5,]     4 245   251  245   255 #> [6,]     5 243   250  242   255"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"reading-raster-data","dir":"Articles","previous_headings":"","what":"Reading raster data","title":"Raster API Tutorial","text":"GDALRaster$read() wrapper GDALRasterBand::RasterIO() method underlying API. method automatically take care data type conversion, /sampling windowing. following code read first row data similarly sized vector. GDALRaster$read() return data R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise returned vector type double (UInt32, Float32, Float64) complex (CInt16, CInt32, CFloat32, CFloat64). returned data organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band: Writing data GDALRaster$write() similar $read() additional argument specifying vector pixel data write (arranged left right, top bottom pixel order). xoff, yoff, xsize, ysize arguments describe window raster data disk read (write). doesn’t fall tile boundaries, though access may efficient cases . Note GDAL uses memory caching algorithms raster /O improve performance. operation caching mechanism configuration cache memory size might considered scaling /O large datasets (see GDAL Block Cache). values out_xsize out_ysize describe size output buffer (R vector length out_xsize * out_ysize data read ). reading data full resolution window size (xsize, ysize). However, load reduced resolution overview, out_xsize, out_ysize set smaller window disk. $read() method perform automatic resampling necessary specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, overviews (.k.. “pyramids”) utilized /O efficiently overviews available suitable resolution. gdalraster::plot_raster() uses base R graphics display raster data read open dataset (options display subwindow, read reduced resolution overview, read multiple bands RGB data):","code":"# read the first row of pixel values ncols <- ds$getRasterXSize() rowdata <- ds$read(band = 1,                     xoff = 0,                    yoff = 0,                    xsize = ncols,                    ysize = 1,                    out_xsize = ncols,                    out_ysize = 1)  length(rowdata) #> [1] 143 typeof(rowdata) #> [1] \"integer\" head(rowdata) #> [1] 59 63 64 51 25 20 plot_raster(ds, legend=TRUE, main=\"Storm Lake Tree Canopy Cover (%)\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"closing-the-dataset","dir":"Articles","previous_headings":"","what":"Closing the dataset","title":"Raster API Tutorial","text":"Calling GDALRaster$close() result proper cleanup, flushing pending writes. Forgetting close dataset opened update mode popular format like GTiff likely result unable open afterwards.","code":"# close the dataset for proper cleanup ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"techniques-for-creating-files","dir":"Articles","previous_headings":"","what":"Techniques for creating files","title":"Raster API Tutorial","text":"New files GDAL-supported formats may created format driver supports creation. two general techniques creating files GDAL API, using CreateCopy() Create(). CreateCopy method R involves calling gdalraster::createCopy(), passing source raster file copied. Create method involves calling gdalraster::create(), explicitly writing metadata raster data separate calls. drivers support creating new files support CreateCopy method, support Create method. Consult table GDAL raster format drivers determine particular driver supports Create CreateCopy. Note number drivers read-won’t support either creation method.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"using-createcopy","dir":"Articles","previous_headings":"","what":"Using createCopy()","title":"Raster API Tutorial","text":"gdalraster::createCopy() simple use information collected source file. includes argument passing list format specific creation options. can used copy raster different format, /change options block size arrangement, compression, various metadata, etc. following code copies multi-band raster FARSITE v.4 LCP format (basically raw format without support compression nodata values) LZW-compressed GeoTiff:","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- paste0(tempdir(), \"/\", \"storml_lndscp.tif\") opt <- c(\"COMPRESS=LZW\") createCopy(format = \"GTiff\",            dst_filename = tif_file,            src_filename = lcp_file,             options = opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  file.size(lcp_file) #> [1] 252132 file.size(tif_file) #> [1] 108510  ds <- new(GDALRaster, tif_file, read_only=FALSE)  # band=0 for dataset-level metadata: ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\"  # set nodata value for all bands for (band in 1:ds$getRasterCount())   ds$setNoDataValue(band, -9999)  # band 2 of an LCP file is slope degrees ds$getStatistics(band=2, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  0.00000 54.00000 22.93012 12.51330 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"using-create","dir":"Articles","previous_headings":"","what":"Using create()","title":"Raster API Tutorial","text":"gdalraster::create() can used create new raster dataset manually. function takes list creation options like createCopy(), raster size, number bands band type must provided explicitly: dataset successfully created, appropriate metadata raster data must written file. includes vary according usage, simple case projection, geotransform raster data covered :","code":"new_file <- paste0(tempdir(), \"/\", \"newdata.tif\") create(format = \"GTiff\",        dst_filename = new_file,        xsize = 143,        ysize = 107,        nbands = 1,         dataType = \"Int16\") ds <- new(GDALRaster, new_file, read_only=FALSE)  # EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE  gt <- c(323476.1, 30, 0, 5105082.0, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE  ds$setNoDataValue(band=1, -9999) #> [1] TRUE ds$fillRaster(band=1, -9999, 0)  # ...  # close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Raster API Tutorial","text":"gdalraster provides two additional functions creating raster datasets: rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value. rasterToVRT() creates virtual raster dataset (VRT) derived source raster options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-api-tutorial.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Raster API Tutorial","text":"example datasets National Land Cover Database (NLCD) Tree Canopy Cover (TCC v2021.4) USDA Forest Service (https://data.fs.usda.gov/geodata/rastergateway/treecanopycover/), multi-band FARSITE landscape file describing terrain, vegetation wildland fuels LANDFIRE Program (LF 2020 version, https://landfire.gov/).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"single-band-grayscale-or-color-ramp","dir":"Articles","previous_headings":"","what":"Single-band grayscale or color ramp","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"lf_elev_220_mt_hood_utm.tif\") ds <- new(GDALRaster, f, read_only=TRUE)  # gray plot_raster(ds, legend=TRUE, main=\"Mount Hood elevation (m)\") # color ramp elev_pal <- c(\"#00A60E\",\"#63C600\",\"#E6E600\",\"#E9BD3B\",\"#ECB176\",\"#EFC2B3\",\"#F2F2F2\") ramp <- scales::colour_ramp(elev_pal, alpha=FALSE)  plot_raster(ds, legend=TRUE, col_map_fn=ramp, main=\"Mount Hood elevation (m)\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"rgb","dir":"Articles","previous_headings":"","what":"RGB","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"landsat_c2ard_sr_mt_hood_jul2022_utm.tif\") ds <- new(GDALRaster, f, read_only=TRUE) dm <- ds$dim()  # passing a vector of pixel values rather than the open dataset r <- read_ds(ds, bands=c(7,5,4)) ds$close()  # normalizing to ranges derived from the full Landsat scene (2-98 percentiles) plot_raster(r, xsize=dm[1], ysize=dm[2], nbands=3,             minmax_def=c(7551,7679,7585,14842,24997,12451),             main=\"Mount Hood July 2022 Landsat 7-5-4 (SWIR)\")"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"color-table","dir":"Articles","previous_headings":"","what":"Color table","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"lf_fbfm40_220_mt_hood_utm.tif\") ds <- new(GDALRaster, f, read_only=TRUE) dm <- ds$dim() print(paste(\"Size is\", dm[1], \"x\",  dm[2], \"x\", dm[3])) #> [1] \"Size is 1013 x 799 x 1\"  # using the CSV attribute table distributed by LANDFIRE fbfm_csv <- system.file(\"extdata/LF20_F40_220.csv\", package=\"gdalraster\") vat <- read.csv(fbfm_csv) head(vat) #>   VALUE FBFM40   R   G   B      RED    GREEN     BLUE #> 1    91    NB1 104 104 104 0.407843 0.407843 0.407843 #> 2    92    NB2 225 225 225 0.882353 0.882353 0.882353 #> 3    93    NB3 255 237 237 1.000000 0.929412 0.929412 #> 4    98    NB8   0  14 214 0.000000 0.054902 0.839216 #> 5    99    NB9  77 110 112 0.301961 0.431373 0.439216 #> 6   101    GR1 255 235 190 1.000000 0.921569 0.745098 vat <- vat[,c(1,6:8)]  # read at reduced resolution for display plot_raster(ds, xsize=dm[1] / 2, ysize=dm[2] / 2,             col_tbl=vat, interpolate=FALSE,             main=\"LANDFIRE surface fuel class (FBFM40)\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/raster-display.html","id":"label-with-geospatial-coordinates","dir":"Articles","previous_headings":"","what":"Label with geospatial coordinates","title":"Raster Display","text":"","code":"f <- paste0(base_url, \"bl_mrbl_ng_jul2004_rgb_720x360.tif\")  ds <- new(GDALRaster, f, read_only=TRUE) dm <- ds$dim() print(paste(\"Size is\", dm[1], \"x\",  dm[2], \"x\", dm[3])) #> [1] \"Size is 720 x 360 x 3\"  srs_is_projected(ds$getProjectionRef()) #> [1] FALSE bb <- ds$bbox()  plot_raster(ds, nbands=3, xlim=c(bb[1],bb[3]), ylim=c(bb[2],bb[4]),             xlab=\"longitude\", ylab=\"latitude\",             main=\"NASA Earth Observatory Blue Marble July 2004\") ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"GDAL see: https://github.com/OSGeo/gdal/graphs/contributors Chris Toney. Author, maintainer. Frank Warmerdam. Contributor, copyright holder.            GDAL API/documentation; src/progress_r.cpp /gdal/port/cpl_progress.cpp Even Rouault. Contributor, copyright holder.            GDAL API/documentation Marius Appel. Contributor, copyright holder.            configure.ac based https://github.com/appelmar/gdalcubes Daniel James. Contributor, copyright holder.            Boost combine hashes method Peter Dimov. Contributor, copyright holder.            Boost combine hashes method","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Toney C (2023). gdalraster: R Bindings 'Geospatial Data Abstraction Library' Raster API. USDA Forest Service, Rocky Mountain Research Station, Missoula, MT, USA. https://usdaforestservice.github.io/gdalraster/.","code":"@Manual{,   title = {gdalraster: R Bindings to the 'Geospatial Data Abstraction Library' Raster API},   author = {Chris Toney},   year = {2023},   organization = {USDA Forest Service, Rocky Mountain Research Station},   address = {Missoula, MT, USA},   url = {https://usdaforestservice.github.io/gdalraster/}, }"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R Bindings to the GDAL Raster API","text":"gdalraster R interface Raster API Geospatial Data Abstraction Library (GDAL). Calling signatures resemble native C, C++ Python APIs provided GDAL project. Bindings GDAL implemented exposed C++ class GDALRaster along several related stand-alone functions, together supporting: manual creation uninitialized raster datasets creation existing raster template read/set raster dataset parameters low-level /O virtual raster (VRT) virtual subsetting, resampling kernel filtering access gdalwarp utility reprojection coordinate transformation spatial reference convenience functions several GDAL algorithms Additional functionality includes: class RunningStats calculates mean variance one pass, tracks min, max, sum, count (.e., summary statistics data stream). input data values stored memory, class can used compute statistics large data streams. class CmbTable identifies counts unique combinations integer values using hash table. combine() overlays multiple rasters unique ID assigned unique combination input values. Pixel counts unique combination obtained, combination IDs optionally written output raster. calc() evaluates R expression pixel raster layer stack layers. Individual pixel coordinates available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude. plot_raster() displays raster data using base R graphics. gdalraster may suitable applications primarily need low-level raster /O prefer direct GDAL API. additional functionality somewhat aimed thematic data analysis may utility.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Bindings to the GDAL Raster API","text":"","code":"# Install the released version from CRAN install.packages(\"gdalraster\")  # Or the development version from GitHub: remotes::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R Bindings to the GDAL Raster API","text":"Reference manual Raster API tutorial Raster display GDAL block caching","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for counting unique combinations of integers — CmbTable-class","title":"Class for counting unique combinations of integers — CmbTable-class","text":"CmbTable implements hash table vector integers key, count occurrences unique integer combination value. unique ID assigned unique combination input values.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for counting unique combinations of integers — CmbTable-class","text":"keyLen number integer values comprising combination. varNames Character vector names variables combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for counting unique combinations of integers — CmbTable-class","text":"object class CmbTable. Contains hash table vector keyLen integers key count occurrences unique integer combination value, along methods operate table described Details. CmbTable C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed R using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"cmb <- new(CmbTable, keyLen, varNames)  ## Methods (see Details) cmb$update(int_cmb, incr) cmb$updateFromMatrix(int_cmbs, incr) cmb$updateFromMatrixByRow(int_cmbs, incr) cmb$asDataFrame() cmb$asMatrix()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for counting unique combinations of integers — CmbTable-class","text":"new(CmbTable, keyLen, varNames) Constructor. Returns object class CmbTable. $update(int_cmb, incr) Updates hash table integer combination numeric vector int_cmb (coerced integer truncation). combination exists table, count incremented incr. combination found table, inserted count set incr. Returns unique ID assigned combination. Combination IDs sequential integers starting 1. $updateFromMatrix(int_cmbs, incr) method $update() numeric matrix integer combinations int_cmbs (coerced integer truncation). matrix arranged column vector forming integer combination. example, rows matrix one row set keyLen rasters read extent pixel resolution (.e., row--row raster overlay). method calls $update() combination (column int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length ncol(int_cmbs) containing IDs assigned combinations. $updateFromMatrixByRow(int_cmbs, incr) method $updateFromMatrix() except integer combinations rows matrix int_cmbs (columns variables). method calls $update() combination (row int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length nrow(int_cmbs) containing IDs assigned combinations. $asDataFrame() Returns CmbTable data frame column \"cmbid\" containing unique combination IDs, column \"count\" containing counts occurrences, keyLen columns named varNames containing integer values comprising unique combination. $asMatrix() Returns CmbTable matrix column 1 (\"cmbid\") containing unique combination IDs, column 2 (\"count\") containing counts occurrences, columns 3:keyLen+2 named varNames containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 3, 6, byrow=FALSE) rownames(m) <- c(\"layer1\",\"layer2\",\"layer3\") print(m) #>        [,1] [,2] [,3] [,4] [,5] [,6] #> layer1    1    1    4    1    4    1 #> layer2    2    2    5    3    5    1 #> layer3    3    3    6    2    6    1 cmb <- new(CmbTable, 3, rownames(m)) cmb$updateFromMatrix(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count layer1 layer2 layer3 #> 1     4     1      1      1      1 #> 2     3     1      1      3      2 #> 3     2     2      4      5      6 #> 4     1     2      1      2      3 cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count layer1 layer2 layer3 #> 1     5     1      1      3      5 #> 2     4     1      1      1      1 #> 3     3     1      1      3      2 #> 4     2     3      4      5      6 #> 5     1     2      1      2      3  # same as above but matrix arranged with integer combinations in the rows m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 6, 3, byrow=TRUE) colnames(m) <- c(\"v1\",\"v2\",\"v3\") print(m) #>      v1 v2 v3 #> [1,]  1  2  3 #> [2,]  1  2  3 #> [3,]  4  5  6 #> [4,]  1  3  2 #> [5,]  4  5  6 #> [6,]  1  1  1 cmb <- new(CmbTable, 3, colnames(m)) cmb$updateFromMatrixByRow(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count v1 v2 v3 #> 1     4     1  1  1  1 #> 2     3     1  1  3  2 #> 3     2     2  4  5  6 #> 4     1     2  1  2  3 cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count v1 v2 v3 #> 1     5     1  1  3  5 #> 2     4     1  1  1  1 #> 3     3     1  1  3  2 #> 4     2     3  4  5  6 #> 5     1     2  1  2  3"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default DEM processing options — DEFAULT_DEM_PROC","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"values used dem_proc() default processing options:","code":"list(hillshade = c(\"-z\", \"1\", \"-s\", \"1\", \"-az\", \"315\",                        \"-alt\", \"45\", \"-alg\", \"Horn\",                        \"-combined\", \"-compute_edges\"),          slope = c(\"-s\", \"1\", \"-alg\", \"Horn\", \"-compute_edges\"),          aspect = c(\"-alg\", \"Horn\", \"-compute_edges\"),          color_relief = character(),          TRI = c(\"-alg\", \"Riley\", \"-compute_edges\"),          TPI = c(\"-compute_edges\"),          roughness = c(\"-compute_edges\"))"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"","code":"DEFAULT_DEM_PROC"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_DEM_PROC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default DEM processing options — DEFAULT_DEM_PROC","text":"object class list length 7.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default nodata values by raster data type — DEFAULT_NODATA","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"values currently used gdalraster nodata value needed specified:","code":"list(\"Byte\" = 255, \"Int8\" = -128,          \"UInt16\" = 65535, \"Int16\" = -32767,          \"UInt32\" = 4294967293, \"Int32\" = -2147483647,           \"Float32\" = -99999.0, \"Float64\" = -99999.0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"","code":"DEFAULT_NODATA"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"object class list length 8.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"GDALRaster provides interface accessing raster dataset via GDAL calling methods underlying GDALDataset, GDALDriver GDALRasterBand objects. See https://gdal.org/api/index.html details GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"filename Character string containing file name raster dataset open, full path relative current working directory. cases, filename may refer physical file, instead contain format-specific information access dataset (GDAL raster format descriptions: https://gdal.org/drivers/raster/index.html). read_only Logical. TRUE open dataset read-, FALSE open write access.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"object class GDALRaster contains pointer opened dataset, methods operate dataset described Details. GDALRaster C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed R using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"$read() method perform automatic resampling specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, GDAL_RASTERIO_RESAMPLING configuration option also defined override default resampling one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE (see set_config_option()).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"","code":"ds <- new(GDALRaster, filename, read_only)  ## Methods (see Details) ds$getFilename() ds$open(read_only) ds$isOpen() ds$getFileList()  ds$info() ds$infoAsJSON()  ds$getDriverShortName() ds$getDriverLongName()  ds$getRasterXSize() ds$getRasterYSize() ds$getGeoTransform() ds$setGeoTransform(transform) ds$getProjectionRef() ds$setProjection(projection) ds$bbox() ds$res() ds$dim()  ds$getRasterCount() ds$getDescription(band) ds$setDescription(band) ds$getBlockSize(band) ds$getOverviewCount(band) ds$buildOverviews(resampling, levels, bands) ds$getDataTypeName(band) ds$getStatistics(band, approx_ok, force) ds$getNoDataValue(band) ds$setNoDataValue(band, nodata_value) ds$deleteNoDataValue(band) ds$getUnitType(band) ds$setUnitType(band, unit_type) ds$getScale(band) ds$setScale(band, scale) ds$getOffset(band) ds$setOffset(band, offset) ds$getRasterColorInterp(band) ds$setRasterColorInterp(band, col_interp)  ds$getMetadata(band, domain) ds$getMetadataItem(band, mdi_name, domain) ds$setMetadataItem(band, mdi_name, mdi_value, domain)  ds$read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) ds$write(band, xoff, yoff, xsize, ysize, rasterData) ds$fillRaster(value, ivalue)  ds$getColorTable(band) ds$getPaletteInterp(band) ds$setColorTable(band, col_tbl, palette_interp)  ds$flushCache()  ds$getChecksum(band, xoff, yoff, xsize, ysize)  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"new(GDALRaster, filename, read_only) Constructor. Returns object class GDALRaster. $getFilename() Returns character string containing filename associated GDALRaster object (filename originally used open dataset). $open(read_only) (Re-)opens raster dataset existing filename. Use method open dataset closed using $close(). May used re-open dataset different read/write access (read_only set TRUE FALSE). method first close open dataset, required call $close() explicitly case. return value, called side effects. $isOpen() Returns logical indicating whether associated raster dataset open. $getFileList() Returns character vector files believed part dataset. returns empty string (\"\") means believed local file system files associated dataset (e.g., virtual file system). returned filenames normally relative absolute paths depending path used originally open dataset. $info() Prints various information raster dataset console (return value, called side effect ). Equivalent output gdalinfo command-line utility (gdalinfo -norat -noct filename). Intended informational convenience function. $infoAsJSON() Returns information raster dataset JSON-formatted string. Contains full output gdalinfo command-line utility (gdalinfo -json -stats -hist filename). $getDriverShortName() Returns short name raster format driver (e.g., \"HFA\"). $getDriverLongName() Returns long name raster format driver (e.g., \"Erdas Imagine Images (.img)\"). $getRasterXSize() Returns number pixels along x dimension. $getRasterYSize() Returns number pixels along y dimension. $getGeoTransform() Returns affine transformation coefficients transforming pixel/line raster space (column/row) projection coordinate space (geospatial x/y). return value numeric vector length six. See https://gdal.org/tutorials/geotransforms_tut.html details affine transformation. 1-based indexing R, geotransform vector contains (map units raster spatial reference system): $setGeoTransform(transform) Sets affine transformation coefficients dataset. transform numeric vector length six. Returns logical TRUE success FALSE geotransform set. $getProjectionRef() Returns coordinate reference system raster OpenGIS WKT format string. empty string returned projection definition available. $setProjection(projection) Sets projection reference dataset. projection string OGC WKT format. Returns logical TRUE success FALSE projection set. $bbox() Returns numeric vector length four containing bounding box (xmin, ymin, xmax, ymax) assuming north-raster. $res() Returns numeric vector length two containing resolution (pixel width, pixel height positive values) assuming north-raster. $dim() Returns integer vector length three containing raster dimensions. Equivalent : c(ds$getRasterXSize(), ds$getRasterYSize(), ds$getRasterCount()) $getRasterCount() Returns number raster bands dataset. methods described operate individual bands, band argument integer band number (1-based). $getDescription(band) Returns string containing description band. empty string returned description set band. $setDescription(band, desc) Sets description band. desc character string set. $getBlockSize(band) Returns integer vector length two (Xsize, Ysize) containing \"natural\" block size band. GDAL concept natural block size rasters applications can organize data access efficiently file formats. natural block size block size efficient accessing format. many formats simply whole row case block Xsize $getRasterXSize() block Ysize 1. However, tiled images block size typically tile size. Note X Y block sizes divide image size evenly, meaning right bottom edge blocks may incomplete. $getOverviewCount(band) Returns number overview layers (pyramids) available band. $buildOverviews(resampling, levels, bands) Build one raster overview images using specified downsampling algorithm. resampling one \"AVERAGE\", \"AVERAGE_MAGPHASE\", \"RMS\", \"BILINEAR\", \"CUBIC\", \"CUBICSPLINE\", \"GAUSS\", \"LANCZOS\", \"MODE\", \"NEAREST\", \"NONE\". levels integer vector giving list overview decimation factors build (e.g., c(2, 4, 8)), 0 delete overviews (least external overviews (.ovr) GTiff internal overviews). bands integer vector giving list band numbers build overviews , 0 build bands. Note GTiff, overviews created internally dataset open update mode, external overviews (.ovr) created dataset open read-. Starting GDAL 3.2, GDAL_NUM_THREADS configuration option can set \"ALL_CPUS\" integer value specify number threads use overview computation (see set_config_option()). return value, called side effects. $getDataTypeName(band) Returns name pixel data type band. possible data types : raster formats including GeoTIFF (\"GTiff\") Erdas Imagine .img (\"HFA\") support sub-byte data types. Rasters can created data types specifying \"NBITS=n\" creation option n=1...7 GTiff n=1/2/4 HFA. cases, $getDataTypeName() reports apparent type \"Byte\". GTiff also supports n=9...15 (UInt16 type) n=17...31 (UInt32 type), n=16 accepted Float32 generate half-precision floating point values. $getStatistics(band, approx_ok, force) Returns numeric vector length four containing minimum, maximum, mean standard deviation pixel values band (excluding nodata pixels). raster formats cache statistics allowing fast retrieval first request. approx_ok: TRUE: Approximate statistics sufficient, case overviews subset raster tiles may used computing statistics. FALSE: pixels read used compute statistics (computation forced). force: TRUE: raster scanned compute statistics. computed, statistics generally “set” back raster band format supports caching statistics. (Note: ComputeStatistics() GDAL API called automatically . change behavior GetStatistics() API, definitive force.) FALSE: Results returned can done quickly (.e., without scanning raster, typically using pre-existing STATISTICS_xxx metadata items). NAs returned statistics obtained quickly. $getNoDataValue(band) Returns nodata value band one exists. generally special value defined mark pixels valid data. NA returned nodata value defined band. raster formats support designated nodata value. $setNoDataValue(band, nodata_value) Sets nodata value band. nodata_value numeric value defined nodata marker. Depending format, changing nodata value may may effect pixel values raster just created (often ). thus advised call $fillRaster() explicitly intent initialize raster nodata value. case, changing existing nodata value, one already exists initialized dataset, effect pixels whose values matched previous nodata value. Returns logical TRUE success FALSE nodata value set. $deleteNoDataValue(band) Removes nodata value band. affects definition nodata value raster formats support one (modify pixel values). return value, called side effects. error raised nodata value removed. $getUnitType(band) Returns name unit type pixel values band (e.g., \"m\" \"ft\"). empty string \"\" returned units available. $setUnitType(band, unit_type) Sets name unit type pixel values band. unit_type one \"\" (default indicating unknown), \"m\" indicating meters, \"ft\" indicating feet, though nonstandard values allowed. Returns logical TRUE success FALSE unit type set. $getScale(band) Returns pixel value scale (units value = (raw value * scale) + offset) band. value (combination getOffset() value) can used transform raw pixel values units returned getUnitType(). Returns NA scale value defined band. $setScale(band, scale) Sets pixel value scale (units value = (raw value * scale) + offset) band. Many raster formats implement method. Returns logical TRUE success FALSE scale set. $getOffset(band) Returns pixel value offset (units value = (raw value * scale) + offset) band. value (combination getScale() value) can used transform raw pixel values units returned getUnitType(). Returns NA offset value defined band. $setOffset(band, offset) Sets pixel value offset (units value = (raw value * scale) + offset) band. Many raster formats implement method. Returns logical TRUE success FALSE offset set. $getRasterColorInterp(band) Returns string describing color interpretation band. color interpretation values meanings : $setRasterColorInterp(band, col_interp) Sets color interpretation band. See list valid values col_interp. $getMetadata(band, domain) Returns character vector metadata name=value pairs exist specified domain, \"\" (empty string) metadata items domain (metadata context GDAL Raster Data Model: https://gdal.org/user/raster_data_model.html). Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve metadata default domain. $getMetadataItem(band, mdi_name, domain) Returns value specific metadata item named mdi_name specified domain, \"\" (empty string) matching item found. Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve item default domain. $setMetadataItem(band, mdi_name, mdi_value, domain) Sets value (mdi_value) specific metadata item named mdi_name specified domain. Set band = 0 set dataset-level metadata, integer band number set band-level metadata. Set domain = \"\" (empty string) set item default domain. $read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) Reads region raster data band. method takes care pixel decimation / replication output size (out_xsize * out_ysize) different size region accessed (xsize * ysize). xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region accessed. ysize height pixels region accessed. out_xsize width output array desired region read (typically value xsize). out_ysize height output array desired region read (typically value ysize). Returns numeric complex vector containing values read. organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64). rescaling data performed (see $getScale() $getOffset() ). error raised read operation fails. $write(band, xoff, yoff, xsize, ysize, rasterData) Writes region raster data band. xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region write. ysize height pixels region write. rasterData numeric complex vector containing values write. organized left right, top bottom pixel order. NA rasterData replaced suitable nodata value prior writing (see $getNoDataValue() $setNoDataValue() ). error raised operation fails (return value). $getColorTable(band) Returns color table associated band, NULL associated color table. color table returned integer matrix five columns. associate color raster pixel, pixel value used subscript color table. means colors always applied starting zero ascending (see GDAL Color Table). Column 1 contains pixel values. Interpretation columns 2:5 depends value $getPaletteInterp() (see ). \"RGB\", columns 2:5 contain red, green, blue, alpha 0-255 integer values. $getPaletteInterp(band) band associated color table, method returns character string palette interpretation columns 2:5 table. empty string (\"\") returned band associated color table. palette interpretation values meanings : $setColorTable(band, col_tbl, palette_interp) Sets raster color table band (see GDAL Color Table). col_tbl integer matrix data frame either four five columns (see $getColorTable() ). Column 1 contains pixel values. Valid values integers 0 larger (note GTiff format supports color tables Byte UInt16 bands). Negative values skipped warning emitted. Interpretation columns 2:5 depends value $getPaletteInterp() (see ). \"RGB\", columns 2:4 contain red, green, blue 0-255 integer values, optional column 5 contains alpha transparency values (defaults 255 opaque). palette_interp one \"Gray\", \"RGB\", \"CMYK\" \"HLS\" (see $getPaletteInterp() ). Returns logical TRUE success FALSE color table set. $flushCache() Flush write cached data disk. raster data written via GDAL calls, buffered internally written disk. Using method preclude calling $close() properly close dataset ensure important data addressed $flushCache() written file (see also $open() ). return value, called side effect. $getChecksum(band, xoff, yoff, xsize, ysize) Returns 16-bit integer (0-65535) checksum region raster data band. Floating point data converted 32-bit integer decimal portions raster data affect checksum. Real imaginary components complex bands influence result. xoff pixel (column) offset window read. yoff line (row) offset window read. Raster row/column offsets use 0-based indexing. xsize width pixels window read. ysize height pixels window read. $close() Closes GDAL dataset (return value, called side effects). Calling $close() results proper cleanup, flushing pending writes. Forgetting close dataset opened update mode formats GTiff result unable open afterwards. GDALRaster object still available calling $close(). dataset can re-opened existing filename $open(read_only=TRUE) $open(read_only=FALSE).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file, read_only=TRUE)  ## print information about the dataset to the console ds$info() #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>        /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6269]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]], #>         ID[\"EPSG\",16012]], #>     CS[Cartesian,2], #>         AXIS[\"easting\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"northing\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   DESCRIPTION=LCP file created by GDAL. #>   LATITUDE=46 #>   LINEAR_UNIT=Meters #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #>   Metadata: #>     ELEVATION_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ELEVATION_MAX=3046 #>     ELEVATION_MIN=-9999 #>     ELEVATION_NUM_CLASSES=-1 #>     ELEVATION_UNIT=0 #>     ELEVATION_UNIT_NAME=Meters #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #>   Metadata: #>     SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     SLOPE_MAX=54 #>     SLOPE_MIN=-9999 #>     SLOPE_NUM_CLASSES=53 #>     SLOPE_UNIT=0 #>     SLOPE_UNIT_NAME=Degrees #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #>   Metadata: #>     ASPECT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     ASPECT_MAX=359 #>     ASPECT_MIN=-9999 #>     ASPECT_NUM_CLASSES=-1 #>     ASPECT_UNIT=2 #>     ASPECT_UNIT_NAME=Azimuth degrees #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #>   Metadata: #>     FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     FUEL_MODEL_MAX=183 #>     FUEL_MODEL_MIN=-9999 #>     FUEL_MODEL_NUM_CLASSES=12 #>     FUEL_MODEL_OPTION=0 #>     FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed #>     FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183 #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #>   Metadata: #>     CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_COV_MAX=75 #>     CANOPY_COV_MIN=-9999 #>     CANOPY_COV_NUM_CLASSES=8 #>     CANOPY_COV_UNIT=1 #>     CANOPY_COV_UNIT_NAME=Percent #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #>   Metadata: #>     CANOPY_HT_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CANOPY_HT_MAX=390 #>     CANOPY_HT_MIN=-9999 #>     CANOPY_HT_NUM_CLASSES=8 #>     CANOPY_HT_UNIT=3 #>     CANOPY_HT_UNIT_NAME=Meters x 10 #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #>   Metadata: #>     CBH_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBH_MAX=100 #>     CBH_MIN=-9999 #>     CBH_NUM_CLASSES=22 #>     CBH_UNIT=3 #>     CBH_UNIT_NAME=Meters x 10 #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density #>   Metadata: #>     CBD_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif #>     CBD_MAX=34 #>     CBD_MIN=-9999 #>     CBD_NUM_CLASSES=15 #>     CBD_UNIT=3 #>     CBD_UNIT_NAME=kg/m^3 x 100  ## retrieve the raster format name ds$getDriverShortName() #> [1] \"LCP\" ds$getDriverLongName() #> [1] \"FARSITE v.4 Landscape File (.lcp)\"  ## retrieve a list of files composing the dataset ds$getFileList() #> [1] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp\" #> [2] \"/home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj\"  ## retrieve dataset parameters ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getGeoTransform() #> [1]  323476.1      30.0       0.0 5105082.0       0.0     -30.0 ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$getRasterCount() #> [1] 8 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res() #> [1] 30 30 ds$dim() #> [1] 143 107   8  ## retrieve some band-level parameters ds$getDescription(band=1) #> [1] \"Elevation\" ds$getBlockSize(band=1) #> [1] 143   1 ds$getOverviewCount(band=1) #> [1] 0 ds$getDataTypeName(band=1) #> [1] \"Int16\" # LCP format does not support an intrinsic nodata value so this returns NA: ds$getNoDataValue(band=1) #> [1] NA  ## LCP driver reports several dataset- and band-level metadata ## see the format description at https://gdal.org/drivers/raster/lcp.html ## set band=0 to retrieve dataset-level metadata ## set domain=\"\" (empty string) for the default metadata domain ds$getMetadata(band=0, domain=\"\") #> [1] \"DESCRIPTION=LCP file created by GDAL.\" #> [2] \"LATITUDE=46\"                           #> [3] \"LINEAR_UNIT=Meters\"                     ## retrieve metadata for a band as a vector of name=value pairs ds$getMetadata(band=4, domain=\"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           ## retrieve the value of a specific metadata item ds$getMetadataItem(band=2, mdi_name=\"SLOPE_UNIT_NAME\", domain=\"\") #> [1] \"Degrees\"  ## read one row of pixel values from band 1 (elevation) ## raster row/column index are 0-based ## the upper left corner is the origin ## read the tenth row: ncols <- ds$getRasterXSize() rowdata <- ds$read(band=1, xoff=0, yoff=9,                      xsize=ncols, ysize=1,                      out_xsize=ncols, out_ysize=1) head(rowdata) #> [1] -9999 -9999 -9999  2456  2466  2479  ds$close()  ## create a new raster using lcp_file as a template new_file <- paste0(tempdir(), \"/\", \"storml_newdata.tif\") rasterFromRaster(srcfile = lcp_file,                  dstfile = new_file,                  nbands = 1,                  dtName = \"Byte\",                  init = -9999) #> Initializing destination raster... #> Done. ds_new <- new(GDALRaster, new_file, read_only=FALSE)  ## write random values to all pixels set.seed(42) ncols <- ds_new$getRasterXSize() nrows <- ds_new$getRasterYSize() for (row in 0:(nrows-1)) {     rowdata <- round(runif(ncols, 0, 100))     ds_new$write(band=1, xoff=0, yoff=row, xsize=ncols, ysize=1, rowdata) }  ## re-open in read-only mode when done writing ## this will ensure flushing of any pending writes (implicit $close) ds_new$open(read_only=TRUE)  ## getStatistics returns min, max, mean, sd, and sets stats in the metadata ds_new$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 100.00000  49.90667  29.05491 ds_new$getMetadataItem(band=1, \"STATISTICS_MEAN\", \"\") #> [1] \"49.906672766486\"  ## close the dataset for proper cleanup ds_new$close()  # \\donttest{ ## using a GDAL Virtual File System handler '/vsicurl/' ## see: https://gdal.org/user/virtual_file_systems.html url <- \"/vsicurl/https://raw.githubusercontent.com/\" url <- paste0(url, \"usdaforestservice/gdalraster/main/sample-data/\") url <- paste0(url, \"lf_elev_220_mt_hood_utm.tif\")  ds <- new(GDALRaster, url, read_only=TRUE) plot_raster(ds, legend=TRUE, main=\"Mount Hood elevation (m)\")  ds$close() # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to calculate mean and variance in one pass — RunningStats-class","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"RunningStats computes summary statistics data stream efficiently. Mean variance calculated Welford's online algorithm (https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance). min, max, sum count also tracked. input data values stored memory, class can used compute statistics large data streams.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"na_rm Logical scalar. TRUE remove NA input data FALSE retain NA (defaults TRUE).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"object class RunningStats. RunningStats object maintains current minimum, maximum, mean, variance, sum count values read stream. can updated repeatedly new values (.e., chunks data read input stream), memory footprint negligible. Class methods updating new values retrieving current values statistics described Details. RunningStats C++ class exposed directly R (via RCPP_EXPOSED_CLASS). Methods class accessed R using $ operator.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"rs <- new(RunningStats, na_rm)  ## Methods (see Details) rs$update(newvalues) rs$get_count() rs$get_mean() rs$get_min() rs$get_max() rs$get_sum() rs$get_var() rs$get_sd() rs$reset()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"new(RunningStats, na_rm) Constructor. Returns object class RunningStats. $update(newvalues) Updates RunningStats object numeric vector newvalues (.e., chunk values data stream). return value, called side effects. $get_count() Returns count values received data stream. $get_mean() Returns mean values received data stream. $get_min() Returns minimum value received data stream. $get_max() Returns maximum value received data stream. $get_sum() Returns sum values received data stream. $get_var() Returns variance values data stream (denominator n - 1). $get_sd() Returns standard deviation values data stream (denominator n - 1). $reset() Clears RunningStats object initialized state (count = 0). return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"set.seed(42)  rs <- new(RunningStats, na_rm=TRUE) chunk <- runif(1000) rs$update(chunk) object.size(rs) #> 704 bytes  rs$get_count() #> [1] 1000 length(chunk) #> [1] 1000  rs$get_mean() #> [1] 0.4882555 mean(chunk) #> [1] 0.4882555  rs$get_min() #> [1] 0.0002388966 min(chunk) #> [1] 0.0002388966  rs$get_max() #> [1] 0.9984908 max(chunk) #> [1] 0.9984908  rs$get_var() #> [1] 0.08493159 var(chunk) #> [1] 0.08493159  rs$get_sd() #> [1] 0.2914302 sd(chunk) #> [1] 0.2914302  # \\donttest{ ## 10^9 values read in 10,000 chunks ## should take under 2 minutes on typical PC hardware for (i in 1:1e4) {   chunk <- runif(1e5)   rs$update(chunk) } rs$get_count() #> [1] 1000001000 rs$get_mean() #> [1] 0.5000044 rs$get_var() #> [1] 0.08333479  object.size(rs) #> 704 bytes # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a whole raster band efficiently — bandCopyWholeRaster","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"bandCopyWholeRaster() copies complete raster contents one band another similarly configured band. source destination bands must xsize ysize. bands data type. implements efficient copying, particular \"chunking\" copy substantial blocks. wrapper GDALRasterBandCopyWholeRaster() GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"","code":"bandCopyWholeRaster(   src_filename,   src_band,   dst_filename,   dst_band,   options = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"src_filename Filename source raster. src_band Band number source raster copied. dst_filename Filename destination raster. dst_band Band number destination raster copy . options Optional list transfer hints vector \"NAME=VALUE\" pairs. currently supported options : \"COMPRESSED=YES\" force alignment target dataset block sizes achieve best compression. \"SKIP_HOLES=YES\" skip chunks contain empty blocks. Empty blocks blocks generally physically present file, read GDAL, contain pixels whose value nodata value set, whose value 0 nodata value set. query done efficient way without reading actual pixel values (implemented raster format driver, otherwise skipped).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bandCopyWholeRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy a whole raster band efficiently — bandCopyWholeRaster","text":"","code":"## copy Landsat data from a single-band file to a new multi-band image b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") dst_file <- paste0(tempdir(), \"/\", \"sr_multi.tif\") rasterFromRaster(b5_file, dst_file, nbands=7, init=0) #> Initializing destination raster... #> Done. opt <- c(\"COMPRESSED=YES\", \"SKIP_HOLES=YES\") bandCopyWholeRaster(b5_file, 1, dst_file, 5, options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done. ds <- new(GDALRaster, dst_file, read_only=TRUE) ds$getStatistics(band=5, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]  7357.000 22458.000 13527.736  2238.489 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"bbox_from_wkt() returns bounding box WKT 2D geometry (e.g., LINE, POLYGON, MULTIPOLYGON).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"","code":"bbox_from_wkt(wkt, extend_x = 0, extend_y = 0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"wkt Character. OGC WKT string simple feature 2D geometry. extend_x Numeric scalar. Distance extend output bounding box directions along x-axis (results xmin = bbox[1] - extend_x, xmax = bbox[3] + extend_x). extend_y Numeric scalar. Distance extend output bounding box directions along y-axis (results ymin = bbox[2] - extend_y, ymax = bbox[4] + extend_y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"Numeric vector length four containing xmin, ymin, xmax, ymax geometry specified wkt (possibly extended values extend_x, extend_y).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"","code":"bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2  5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5,  325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_from_wkt(bnd, 100, 100) #> [1]  323694.2 5102785.8  326520.0 5105029.4"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounding box intersection / union — bbox_intersect","title":"Bounding box intersection / union — bbox_intersect","text":"bbox_intersect() returns bounding box intersection, bbox_union() returns bounding box union, input either raster file names list bounding boxes. inputs must projected coordinate system. functions require GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_intersect(x, as_wkt = FALSE)  bbox_union(x, as_wkt = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounding box intersection / union — bbox_intersect","text":"x Either character vector raster file names, list element bounding box numeric vector (xmin, ymin, xmax, ymax). as_wkt Logical. TRUE return bounding box polygon OGC WKT format, FALSE return numeric vector.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounding box intersection / union — bbox_intersect","text":"intersection (bbox_intersect()) union (bbox_union()) inputs. as_wkt = FALSE, numeric vector length four containing xmin, ymin, xmax, ymax. as_wkt = TRUE, character string containing OGC WKT bbox POLYGON. NA returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_list <-list()  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) bbox_list[[1]] <- ds$bbox() ds$close()  b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds <- new(GDALRaster, b5_file, read_only=TRUE) bbox_list[[2]] <- ds$bbox() ds$close()  bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2  5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5,  325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_list[[3]] <- bbox_from_wkt(bnd)  print(bbox_list) #> [[1]] #> [1]  323476.1 5101872.0  327766.1 5105082.0 #>  #> [[2]] #> [1]  323400.9 5101815.8  327870.9 5105175.8 #>  #> [[3]] #> [1]  323794.2 5102885.8  326420.0 5104929.4 #>  bbox_intersect(bbox_list) #> [1]  323794.2 5102885.8  326420.0 5104929.4 bbox_union(bbox_list) #> [1]  323400.9 5101815.8  327870.9 5105175.8"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"bbox_to_wkt() returns WKT POLYGON string given bounding box. Requires GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"","code":"bbox_to_wkt(bbox, extend_x = 0, extend_y = 0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"bbox Numeric vector length four containing xmin, ymin, xmax, ymax. extend_x Numeric scalar. Distance units bbox extend rectangle directions along x-axis (results xmin = bbox[1] - extend_x, xmax = bbox[3] + extend_x). extend_y Numeric scalar. Distance units bbox extend rectangle directions along y-axis (results ymin = bbox[2] - extend_y, ymax = bbox[4] + extend_y).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"Character string OGC WKT polygon. NA returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) bbox_to_wkt(ds$bbox()) #> [1] \"POLYGON ((323476.071970863 5105081.98303138,327766.071970863 5105081.98303138,327766.071970863 5101871.98303138,323476.071970863 5101871.98303138,323476.071970863 5105081.98303138))\" ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster calculation — calc","title":"Raster calculation — calc","text":"calc() evaluates R expression pixel raster layer stack layers. layer defined raster filename, band number, variable name use R expression. specified, band defaults 1 input raster. Variable names default LETTERS specified ((layer 1), B (layer 2), ...). input layers must extent cell size. projection read first raster list inputs. Individual pixel coordinates also available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster calculation — calc","text":"","code":"calc(   expr,   rasterfiles,   bands = NULL,   var.names = NULL,   dstfile = tempfile(\"rastcalc\", fileext = \".tif\"),   fmt = NULL,   dtName = \"Int16\",   out_band = NULL,   options = NULL,   nodata_value = NULL,   setRasterNodataValue = FALSE,   usePixelLonLat = FALSE,   write_mode = \"safe\" )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster calculation — calc","text":"expr R expression character string (e.g., \"+ B\"). rasterfiles Character vector source raster filenames. bands Integer vector band numbers use raster layer. var.names Character vector variable names use raster layer. dstfile Character filename output raster. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename specified. dtName Character name output data type (e.g., Byte, Int16, UInt16, Int32, UInt32, Float32). out_band Integer band number dstfile writing output. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). nodata_value Numeric value assign expr returns NA. setRasterNodataValue Logical. TRUE attempt set raster format nodata value nodata_value, FALSE set raster nodata value. usePixelLonLat Logical. TRUE, pixelX pixelY inverse projected geographic coordinates available pixelLon pixelLat expr (adds computation time). write_mode Character. Name file write mode output. One : safe - execution stops dstfile already exists (output written) overwrite - dstfile exists overwritten new file update - dstfile exists, attempt open update mode write output out_band","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster calculation — calc","text":"Returns output filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster calculation — calc","text":"variables expr vectors length raster Xsize (rows raster layers). expression return vector also length raster Xsize (output row). Two special variable names available expr default: pixelX pixelY provide pixel center coordinate projection units. usePixelLonLat = TRUE, pixel x/y coordinates also inverse projected longitude/latitude available expr pixelLon pixelLat (geographic coordinate system used input projection, read first input raster). refer specific bands multi-band file, repeat filename rasterfiles specify corresponding band numbers bands, along optional variable names var.names, example, Output written dstfile. update file already exists, set write_mode = \"update\" set out_band existing band number dstfile (new bands created dstfile).","code":"rasterfiles = c(\"multiband.tif\", \"multiband.tif\") bands = c(4, 5) var.names = c(\"B4\", \"B5\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster calculation — calc","text":"","code":"### Using pixel longitude/latitude  ## Hopkins bioclimatic index (HI) as described in: ## Bechtold, 2004, West. J. Appl. For. 19(4):245-251. ## Integrates elevation, latitude and longitude into an index of the  ## phenological occurrence of springtime. Here it is relativized to  ## mean values for an eight-state region in the western US. ## Positive HI means spring is delayed by that number of days relative  ## to the reference position, while negative values indicate spring is ## advanced. The original equation had elevation units as feet, so  ## converting m to ft in `expr`.  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## expression to calculate HI expr <- \"round( ((ELEV_M * 3.281 - 5449) / 100) +                  ((pixelLat - 42.16) * 4) +                  ((-116.39 - pixelLon) * 1.25) )\"  ## calc() writes to a tempfile by default hi_file <- calc(expr = expr,                  rasterfiles = elev_file,                  var.names = \"ELEV_M\",                  dtName = \"Int16\",                 nodata_value = -32767,                  setRasterNodataValue = TRUE,                 usePixelLonLat = TRUE) #> Calculating from 1 input layer(s)... #> ================================================================================ #> Output written to: /tmp/RtmpiFPJP1/rastcalc1f76464ef1c5.tif  ds <- new(GDALRaster, hi_file, read_only=TRUE) ## min, max, mean, sd ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 37.000000 57.000000 44.992721  4.370487 ds$close()   ### Calculate normalized difference vegetation index (NDVI)  ## Landast band 4 (red) and band 5 (near infrared): b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\")  ## is nodata value set ds <- new(GDALRaster, b4_file, read_only=TRUE) ds$getNoDataValue(band=1)   # 0 #> [1] 0 ds$close() ds <- new(GDALRaster, b5_file, read_only=TRUE) ds$getNoDataValue(band=1)   # 0 #> [1] 0 ds$close()  ## 0 will be read as NA so don't need to handle zeros in expr expr <- \"(B5-B4)/(B5+B4)\" ndvi_file <- calc(expr = expr,                   rasterfiles = c(b4_file, b5_file),                   var.names = c(\"B4\", \"B5\"),                   dtName = \"Float32\",                   nodata_value = -32767,                   setRasterNodataValue = TRUE) #> Calculating from 2 input layer(s)... #> ================================================================================ #> Output written to: /tmp/RtmpiFPJP1/rastcalc1f762a2957b4.tif  ds <- new(GDALRaster, ndvi_file, read_only=TRUE) ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] -0.05663275  0.40972668  0.16745979  0.08068390 ds$close()   ### Reclassify a variable by rule set  ## Combine two raster layers and look for specific combinations. Then  ## recode to a new value by rule set. ## ## Based on example in: ##   Stratton, R.D. 2009. Guidebook on LANDFIRE fuels data acquisition,  ##   critique, modification, maintenance, and model calibration. ##   Gen. Tech. Rep. RMRS-GTR-220. U.S. Department of Agriculture,  ##   Forest Service, Rocky Mountain Research Station. 54 p. ## Context: Refine national-scale fuels data to improve fire simulation ##   results in localized applications. ## Issue: Areas with steep slopes (40+ degrees) were mapped as ##   GR1 (101; short, sparse dry climate grass) and  ##   GR2 (102; low load, dry climate grass) but were not carrying fire. ## Resolution: After viewing these areas in Google Earth, ##   NB9 (99; bare ground) was selected as the replacement fuel model.  ## look for combinations of slope >= 40 and FBFM 101 or 102 lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) var.names <- c(\"SLP\", \"FBFM\") bands <- c(2, 4) df <- combine(rasterfiles, var.names, bands) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(df) #> [1] 449 df_subset <- subset(df, SLP >= 40 & FBFM %in% c(101,102)) print(df_subset)       # twelve combinations meet the criteria #>     cmbid count SLP FBFM #> 8     423     2  44  102 #> 10    421     1  49  102 #> 13    409    15  41  102 #> 37    365     1  44  101 #> 45    420     3  43  102 #> 93    283    17  40  101 #> 160   417     4  42  101 #> 225   397    11  42  102 #> 338   328    16  40  102 #> 346   338    10  41  101 #> 364   418     3  47  102 #> 408   341     2  43  101 sum(df_subset$count)   # 85 total pixels #> [1] 85  ## recode these pixels to 99 (bare ground) ## the LCP driver does not support in-place write so make a copy as GTiff tif_file <- paste0(tempdir(), \"/\", \"storml_lndscp.tif\") createCopy(\"GTiff\", tif_file, lcp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  expr <- \"ifelse( SLP >= 40 & FBFM %in% c(101,102), 99, FBFM)\" calc(expr = expr,      rasterfiles = c(lcp_file, lcp_file),      bands = c(2, 4),      var.names = c(\"SLP\", \"FBFM\"),      dstfile = tif_file,      out_band = 4,      write_mode = \"update\") #> Calculating from 2 input layer(s)... #> ================================================================================ #> Output written to: /tmp/RtmpiFPJP1/storml_lndscp.tif  ## verify the ouput rasterfiles <- c(tif_file, tif_file) df <- combine(rasterfiles, var.names, bands) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. df_subset <- subset(df, SLP >= 40 & FBFM %in% c(101,102)) print(df_subset) #> [1] cmbid count SLP   FBFM  #> <0 rows> (or 0-length row.names) sum(df_subset$count) #> [1] 0  ## if LCP file format is needed: createCopy(tif_file, <new_lcp_file>)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster overlay for unique combinations — combine","title":"Raster overlay for unique combinations — combine","text":"combine() overlays multiple rasters unique ID assigned unique combination input values. input raster layers typically integer data types (floating point coerced integer truncation), must projection, extent cell size. Pixel counts unique combination obtained, combination IDs optionally written output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster overlay for unique combinations — combine","text":"","code":"combine(   rasterfiles,   var.names = NULL,   bands = NULL,   dstfile = NULL,   fmt = NULL,   dtName = \"UInt32\",   options = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster overlay for unique combinations — combine","text":"rasterfiles Character vector raster filenames combine. var.names Character vector length(rasterfiles) containing variable names raster layer. Defaults assigned var.names omitted. bands Numeric vector length(rasterfiles) containing band number use raster rasterfiles. Band 1 used input raster bands specified. dstfile Character. Optional output raster filename writing per-pixel combination IDs. output raster created (overwritten already exists). fmt Character. Output raster format name (e.g., \"GTiff\" \"HFA\"). dtName Character. Output raster data type name. Combination IDs sequential integers starting 1. data type output raster large enough accommodate potential number unique combinations input values (e.g., \"UInt16\" default \"UInt32\"). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs. (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster overlay for unique combinations — combine","text":"data frame column cmbid containing combination IDs, column count containing pixel counts combination, length(rasterfiles) columns named var.names containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster overlay for unique combinations — combine","text":"specify input raster layers bands multi-band raster file, repeat filename rasterfiles provide corresponding band numbers bands. example: rasterToVRT() provides options virtual clipping, resampling pixel alignment, may helpful input rasters already aligned common extent cell size. output raster combination IDs written, user verify number combinations obtained exceed range output data type. Combination IDs sequential integers starting 1. Typical output data types unsigned types: Byte (0 255), UInt16 (0 65,535) UInt32 (default, 0 4,294,967,295). combine() can also run single raster layer obtain table pixel values counts.","code":"rasterfiles <- c(\"multi-band.tif\", \"multi-band.tif\", \"other.tif\") bands <- c(4, 5, 1) var.names <- c(\"multi_b4\", \"multi_b5\", \"other\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster overlay for unique combinations — combine","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\") evh_file <- system.file(\"extdata/storml_evh.tif\", package=\"gdalraster\") rasterfiles <- c(evt_file, evc_file, evh_file) var.names <- c(\"veg_type\", \"veg_cov\", \"veg_ht\") df <- combine(rasterfiles, var.names) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(df) #> [1] 2083 df <- df[order(-df$count),] head(df, n = 20) #>      cmbid count veg_type veg_cov veg_ht #> 1345   115  2277     9016     100    100 #> 1131    19  1213     9018     100    100 #> 1410     1   876       NA      NA     NA #> 873    429   397     7292      11     11 #> 1745   116   209     9016      31     31 #> 1181     7   142     7046     159    115 #> 1108     8   112     7046     159    116 #> 1538    26    99     7046     159    114 #> 1724    75    78     7126     243    210 #> 1132   844    67     9018      31     31 #> 779    186    54     7046     110    108 #> 823    344    53     7126     243    209 #> 1213   146    47     7046     159    117 #> 808     42    44     7050     162    116 #> 645     15    39     7046     149    114 #> 923    821    37     7046     110    107 #> 1594   603    37     7126     243    211 #> 1273     2    36     7046     110    106 #> 1305   108    36     7126     243    208 #> 1447    68    36     7046     159    113  ## combine two bands from a multi-band file and write the combination IDs  ## to an output raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) bands <- c(4, 5) var.names <- c(\"fbfm\", \"tree_cov\") cmb_file <- paste0(tempdir(), \"/\", \"fbfm_cov_cmbid.tif\") opt <- c(\"COMPRESS=LZW\") df <- combine(rasterfiles, var.names, bands, cmb_file, options = opt) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(df) #>   cmbid count fbfm tree_cov #> 1    26    98  122       25 #> 2    24   397   98        0 #> 3    23    59  162       55 #> 4    25    14  183        0 #> 5    22    65  183       35 #> 6    19    34  162       75 ds <- new(GDALRaster, cmb_file, TRUE) ds$info() #> Driver: GTiff/GeoTIFF #> Files: /tmp/RtmpiFPJP1/fbfm_cov_cmbid.tif #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"North America - between 114°W and 108°W - onshore and offshore. Canada - Alberta; Northwest Territories; Nunavut; Saskatchewan. United States (USA) - Arizona; Colorado; Idaho; Montana; New Mexico; Utah; Wyoming.\"], #>         BBOX[31.33,-114,84,-108]], #>     ID[\"EPSG\",26912]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Metadata: #>   AREA_OR_POINT=Area #> Image Structure Metadata: #>   COMPRESSION=LZW #>   INTERLEAVE=BAND #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x14 Type=UInt32, ColorInterp=Gray ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new uninitialized raster — create","title":"Create a new uninitialized raster — create","text":"create() makes empty raster specified format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new uninitialized raster — create","text":"","code":"create(format, dst_filename, xsize, ysize, nbands, dataType, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new uninitialized raster — create","text":"format Raster format short name (e.g., \"GTiff\" \"HFA\"). dst_filename Filename create. xsize Integer width raster pixels. ysize Integer height raster pixels. nbands Integer number bands. dataType Character data type name. (e.g., common data types include Byte, Int16, UInt16, Int32, Float32). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new uninitialized raster — create","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new uninitialized raster — create","text":"","code":"new_file <- paste0(tempdir(), \"/\", \"newdata.tif\") create(format=\"GTiff\", dst_filename=new_file, xsize=143, ysize=107,        nbands=1, dataType=\"Int16\") ds <- new(GDALRaster, new_file, read_only=FALSE) ## EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE gt <- c(323476.1, 30, 0, 5105082.0, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE ds$setNoDataValue(band = 1, -9999) #> [1] TRUE ds$fillRaster(band = 1, -9999, 0) ## ... ## close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a color ramp — createColorRamp","title":"Create a color ramp — createColorRamp","text":"createColorRamp() wrapper GDALCreateColorRamp() GDAL API. automatically creates color ramp one color entry another. Output integer matrix color table format use GDALRaster$setColorTable().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a color ramp — createColorRamp","text":"","code":"createColorRamp(   start_index,   start_color,   end_index,   end_color,   palette_interp = \"RGB\" )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a color ramp — createColorRamp","text":"start_index Integer start index (raster value). start_color Integer vector length three four. color entry value start ramp (e.g., RGB values). end_index Integer end index (raster value). end_color Integer vector length three four. color entry value end ramp (e.g., RGB values). palette_interp One \"Gray\", \"RGB\" (default), \"CMYK\" \"HLS\" descibing interpretation start_color end_color values (see GDAL Color Table).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a color ramp — createColorRamp","text":"Intger matrix five columns containing color ramp start_index end_index, raster index values column 1 color entries columns 2:5).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a color ramp — createColorRamp","text":"createColorRamp() called several times, using rbind() combine multiple ramps color table. Possible duplicate rows resulting table problem used GDALRaster$setColorTable() (.e., end_color one ramp start_color next ramp).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createColorRamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a color ramp — createColorRamp","text":"","code":"# create a color ramp for tree canopy cover percent # band 5 of an LCP file contains canopy cover lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file, read_only=TRUE) ds$getDescription(band=5) #> [1] \"Canopy cover\" ds$getMetadata(band=5, domain=\"\") #> [1] \"CANOPY_COV_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"CANOPY_COV_MAX=75\"                                                                                                                          #> [3] \"CANOPY_COV_MIN=-9999\"                                                                                                                       #> [4] \"CANOPY_COV_NUM_CLASSES=8\"                                                                                                                   #> [5] \"CANOPY_COV_UNIT=1\"                                                                                                                          #> [6] \"CANOPY_COV_UNIT_NAME=Percent\"                                                                                                               ds$close()  # create a GTiff file with Byte data type for the canopy cover band # recode nodata -9999 to 255 tcc_file <- calc(expr = \"ifelse(CANCOV == -9999, 255, CANCOV)\",                  rasterfiles = lcp_file,                  bands = 5,                  var.names = \"CANCOV\",                  fmt = \"GTiff\",                  dtName = \"Byte\",                  nodata_value = 255,                  setRasterNodataValue = TRUE) #> Calculating from 1 input layer(s)... #> ================================================================================ #> Output written to: /tmp/RtmpiFPJP1/rastcalc1f766cabc6c2.tif  ds_tcc <- new(GDALRaster, tcc_file, read_only=FALSE)  # create a color ramp from 0 to 100 and set as the color table colors <- createColorRamp(start_index = 0,                           start_color = c(211, 211, 211),                           end_index = 100,                           end_color = c(0, 100, 0))  print(colors) #>        value red green blue alpha #>   [1,]     0 211   211  211   255 #>   [2,]     1 208   209  208   255 #>   [3,]     2 206   208  206   255 #>   [4,]     3 204   207  204   255 #>   [5,]     4 202   206  202   255 #>   [6,]     5 200   205  200   255 #>   [7,]     6 198   204  198   255 #>   [8,]     7 196   203  196   255 #>   [9,]     8 194   202  194   255 #>  [10,]     9 192   201  192   255 #>  [11,]    10 189   199  189   255 #>  [12,]    11 187   198  187   255 #>  [13,]    12 185   197  185   255 #>  [14,]    13 183   196  183   255 #>  [15,]    14 181   195  181   255 #>  [16,]    15 179   194  179   255 #>  [17,]    16 177   193  177   255 #>  [18,]    17 175   192  175   255 #>  [19,]    18 173   191  173   255 #>  [20,]    19 170   189  170   255 #>  [21,]    20 168   188  168   255 #>  [22,]    21 166   187  166   255 #>  [23,]    22 164   186  164   255 #>  [24,]    23 162   185  162   255 #>  [25,]    24 160   184  160   255 #>  [26,]    25 158   183  158   255 #>  [27,]    26 156   182  156   255 #>  [28,]    27 154   181  154   255 #>  [29,]    28 151   179  151   255 #>  [30,]    29 149   178  149   255 #>  [31,]    30 147   177  147   255 #>  [32,]    31 145   176  145   255 #>  [33,]    32 143   175  143   255 #>  [34,]    33 141   174  141   255 #>  [35,]    34 139   173  139   255 #>  [36,]    35 137   172  137   255 #>  [37,]    36 135   171  135   255 #>  [38,]    37 132   169  132   255 #>  [39,]    38 130   168  130   255 #>  [40,]    39 128   167  128   255 #>  [41,]    40 126   166  126   255 #>  [42,]    41 124   165  124   255 #>  [43,]    42 122   164  122   255 #>  [44,]    43 120   163  120   255 #>  [45,]    44 118   162  118   255 #>  [46,]    45 116   161  116   255 #>  [47,]    46 113   159  113   255 #>  [48,]    47 111   158  111   255 #>  [49,]    48 109   157  109   255 #>  [50,]    49 107   156  107   255 #>  [51,]    50 105   155  105   255 #>  [52,]    51 103   154  103   255 #>  [53,]    52 101   153  101   255 #>  [54,]    53  99   152   99   255 #>  [55,]    54  97   151   97   255 #>  [56,]    55  94   149   94   255 #>  [57,]    56  92   148   92   255 #>  [58,]    57  90   147   90   255 #>  [59,]    58  88   146   88   255 #>  [60,]    59  86   145   86   255 #>  [61,]    60  84   144   84   255 #>  [62,]    61  82   143   82   255 #>  [63,]    62  80   142   80   255 #>  [64,]    63  78   141   78   255 #>  [65,]    64  75   139   75   255 #>  [66,]    65  73   138   73   255 #>  [67,]    66  71   137   71   255 #>  [68,]    67  69   136   69   255 #>  [69,]    68  67   135   67   255 #>  [70,]    69  65   134   65   255 #>  [71,]    70  63   133   63   255 #>  [72,]    71  61   132   61   255 #>  [73,]    72  59   131   59   255 #>  [74,]    73  56   129   56   255 #>  [75,]    74  54   128   54   255 #>  [76,]    75  52   127   52   255 #>  [77,]    76  50   126   50   255 #>  [78,]    77  48   125   48   255 #>  [79,]    78  46   124   46   255 #>  [80,]    79  44   123   44   255 #>  [81,]    80  42   122   42   255 #>  [82,]    81  40   121   40   255 #>  [83,]    82  37   119   37   255 #>  [84,]    83  35   118   35   255 #>  [85,]    84  33   117   33   255 #>  [86,]    85  31   116   31   255 #>  [87,]    86  29   115   29   255 #>  [88,]    87  27   114   27   255 #>  [89,]    88  25   113   25   255 #>  [90,]    89  23   112   23   255 #>  [91,]    90  21   111   21   255 #>  [92,]    91  18   109   18   255 #>  [93,]    92  16   108   16   255 #>  [94,]    93  14   107   14   255 #>  [95,]    94  12   106   12   255 #>  [96,]    95  10   105   10   255 #>  [97,]    96   8   104    8   255 #>  [98,]    97   6   103    6   255 #>  [99,]    98   4   102    4   255 #> [100,]    99   2   101    2   255 #> [101,]   100   0   100    0   255 ds_tcc$setColorTable(band=1, col_tbl=colors, palette_interp=\"RGB\") #> [1] TRUE ds_tcc$setRasterColorInterp(band=1, col_interp=\"Palette\")  # close and re-open the dataset in read_only mode ds_tcc$open(read_only=TRUE)  plot_raster(ds_tcc, interpolate=FALSE, main=\"Storm Lake Tree Canopy Cover\")  ds_tcc$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy of a raster — createCopy","title":"Create a copy of a raster — createCopy","text":"createCopy() copies raster dataset, optionally changing format. extent, cell size, number bands, data type, projection, geotransform copied source raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy of a raster — createCopy","text":"","code":"createCopy(format, dst_filename, src_filename, strict = FALSE, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy of a raster — createCopy","text":"format Format short name output raster (e.g., \"GTiff\" \"HFA\"). dst_filename Filename create. src_filename Filename source raster. strict Logical. TRUE copy must strictly equivalent, normally FALSE indicating copy may adapt needed output format. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy of a raster — createCopy","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a copy of a raster — createCopy","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- paste0(tempdir(), \"/\", \"storml_lndscp.tif\") opt <- c(\"COMPRESS=LZW\") createCopy(format=\"GTiff\", dst_filename=tif_file, src_filename=lcp_file,            options=opt) #> 0...10...20...30...40...50...60...70...80...90...100 - done. file.size(lcp_file) #> [1] 252132 file.size(tif_file) #> [1] 108510 ds <- new(GDALRaster, tif_file, read_only=FALSE) ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\" for (band in 1:ds$getRasterCount())     ds$setNoDataValue(band, -9999) ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3046.0000 2675.9713  133.0185 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":null,"dir":"Reference","previous_headings":"","what":"GDAL DEM processing — dem_proc","title":"GDAL DEM processing — dem_proc","text":"dem_proc() generates DEM derivatives input elevation raster. function wrapper gdaldem command-line utility. See https://gdal.org/programs/gdaldem.html details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GDAL DEM processing — dem_proc","text":"","code":"dem_proc(   mode,   srcfile,   dstfile,   mode_options = DEFAULT_DEM_PROC[[mode]],   color_file = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GDAL DEM processing — dem_proc","text":"mode Character. Name DEM processing mode. One hillshade, slope, aspect, color-relief, TRI, TPI roughness. srcfile Filename source elevation raster. dstfile Filename output raster. mode_options optional character vector command-line options (see DEFAULT_DEM_PROC default values). color_file Filename text file containing lines formatted : \"elevation_value red green blue\". used mode = \"color-relief\".","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GDAL DEM processing — dem_proc","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GDAL DEM processing — dem_proc","text":"Band 1 source elevation raster read default, can changed including -b command-line argument mode_options. See documentation gdaldem description available options processing mode.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/dem_proc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GDAL DEM processing — dem_proc","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") slp_file <- paste0(tempdir(), \"/\", \"storml_slp.tif\") dem_proc(\"slope\", elev_file, slp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"epsg_to_wkt() exports spatial reference EPSG code WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"","code":"epsg_to_wkt(epsg, pretty = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"epsg Integer EPSG code. pretty Logical. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"","code":"epsg_to_wkt(5070) #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"5070\\\"]]\" writeLines(epsg_to_wkt(5070, pretty=TRUE)) #> PROJCS[\"NAD83 / Conus Albers\", #>     GEOGCS[\"NAD83\", #>         DATUM[\"North_American_Datum_1983\", #>             SPHEROID[\"GRS 1980\",6378137,298.257222101, #>                 AUTHORITY[\"EPSG\",\"7019\"]], #>             AUTHORITY[\"EPSG\",\"6269\"]], #>         PRIMEM[\"Greenwich\",0, #>             AUTHORITY[\"EPSG\",\"8901\"]], #>         UNIT[\"degree\",0.0174532925199433, #>             AUTHORITY[\"EPSG\",\"9122\"]], #>         AUTHORITY[\"EPSG\",\"4269\"]], #>     PROJECTION[\"Albers_Conic_Equal_Area\"], #>     PARAMETER[\"latitude_of_center\",23], #>     PARAMETER[\"longitude_of_center\",-96], #>     PARAMETER[\"standard_parallel_1\",29.5], #>     PARAMETER[\"standard_parallel_2\",45.5], #>     PARAMETER[\"false_easting\",0], #>     PARAMETER[\"false_northing\",0], #>     UNIT[\"metre\",1, #>         AUTHORITY[\"EPSG\",\"9001\"]], #>     AXIS[\"Easting\",EAST], #>     AXIS[\"Northing\",NORTH], #>     AUTHORITY[\"EPSG\",\"5070\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(epsg_to_wkt(5070, pretty=TRUE)) #> PROJCRS[\"NAD83 / Conus Albers\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"Conus Albers\", #>         METHOD[\"Albers Equal Area\", #>             ID[\"EPSG\",9822]], #>         PARAMETER[\"Latitude of false origin\",23, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-96, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",29.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Data analysis and small scale data presentation for contiguous lower 48 states.\"], #>         AREA[\"United States (USA) - CONUS onshore - Alabama; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming.\"], #>         BBOX[24.41,-124.79,49.38,-66.91]], #>     ID[\"EPSG\",5070]] set_config_option(\"OSR_WKT_FORMAT\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill selected pixels by interpolation from surrounding areas — fillNodata","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"fillNodata() wrapper GDALFillNodata() GDAL Algorithms API. algorithm interpolate values designated nodata pixels (pixels intrinsic nodata value, marked zero-valued pixels optional raster specified mask_file). nodata pixel, four direction conic search done find values interpolate (using inverse distance weighting). values interpolated, zero smoothing iterations (3x3 average filters interpolated pixels) applied smooth artifacts.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"","code":"fillNodata(   filename,   band,   mask_file = \"\",   max_dist = 100,   smooth_iterations = 0L )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"filename Filename input raster fill nodata pixels. band Integer band number modify place. mask_file Optional filename raster use validity mask (band 1 used, zero marks nodata pixels, non-zero marks valid pixels). max_dist Maximum distance (pixels) algorithm search values interpolate (100 pixels default). smooth_iterations number 3x3 average filter smoothing iterations run interpolation dampen artifacts (0 default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"input raster modified place. open GDALRaster object processing fillNodata().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/fillNodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill selected pixels by interpolation from surrounding areas — fillNodata","text":"","code":"## fill nodata edge pixels in the elevation raster elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## get count of nodata df = combine(elev_file) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(df) #>   cmbid count storml_elev #> 1   601     1        2949 #> 2   600     1        2993 #> 3   599     1        2972 #> 4   598     1        3008 #> 5   597     1        3022 #> 6   596     1        3024 df[is.na(df$storml_elev),] #>     cmbid count storml_elev #> 323     1   876          NA  ## make a copy that will be modified mod_file <- paste0(tempdir(), \"/\", \"storml_elev_fill.tif\") file.copy(elev_file,  mod_file) #> [1] TRUE  fillNodata(mod_file, band=1) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  df_mod = combine(mod_file) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(df_mod) #>   cmbid count storml_elev_fill #> 1   600     1             2949 #> 2   599     1             2993 #> 3   598     1             2972 #> 4   597     1             3008 #> 5   596     1             3022 #> 6   595     1             3024 df_mod[is.na(df_mod$storml_elev_fill),] #> [1] cmbid            count            storml_elev_fill #> <0 rows> (or 0-length row.names)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute buffer of a WKT geometry — g_buffer","title":"Compute buffer of a WKT geometry — g_buffer","text":"g_buffer() builds new geometry containing buffer region around geometry invoked. buffer polygon containing region within buffer distance original geometry. Requires GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute buffer of a WKT geometry — g_buffer","text":"","code":"g_buffer(wkt, dist, quad_segs = 30)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute buffer of a WKT geometry — g_buffer","text":"wkt Character. OGC WKT string simple feature 2D geometry. dist Numeric buffer distance units wkt geometry. quad_segs Integer number segments used define 90 degree curve (quadrant circle). Large values result large numbers vertices resulting buffer geometry small numbers reduce accuracy result.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute buffer of a WKT geometry — g_buffer","text":"Character string OGC WKT polygon. NA returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/g_buffer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute buffer of a WKT geometry — g_buffer","text":"","code":"g_buffer(wkt = \"POINT (0 0)\", dist = 10) #> [1] \"POLYGON ((10 0,9.98629534754574 -0.523359562429438,9.94521895368273 -1.04528463267653,9.87688340595138 -1.56434465040231,9.78147600733806 -2.07911690817759,9.65925826289068 -2.58819045102521,9.51056516295153 -3.09016994374947,9.33580426497202 -3.583679495453,9.13545457642601 -4.067366430758,8.91006524188368 -4.53990499739547,8.66025403784439 -5,8.38670567945424 -5.44639035015027,8.09016994374947 -5.87785252292473,7.77145961456971 -6.29320391049837,7.43144825477394 -6.69130606358858,7.07106781186548 -7.07106781186547,6.69130606358858 -7.43144825477394,6.29320391049838 -7.77145961456971,5.87785252292473 -8.09016994374947,5.44639035015027 -8.38670567945424,5.0 -8.66025403784439,4.53990499739547 -8.91006524188368,4.067366430758 -9.13545457642601,3.583679495453 -9.33580426497202,3.09016994374947 -9.51056516295153,2.58819045102521 -9.65925826289068,2.07911690817759 -9.78147600733806,1.56434465040231 -9.87688340595138,1.04528463267654 -9.94521895368273,0.52335956242944 -9.98629534754574,0.0 -10,-0.523359562429436 -9.98629534754574,-1.04528463267653 -9.94521895368273,-1.56434465040231 -9.87688340595138,-2.07911690817759 -9.78147600733806,-2.58819045102521 -9.65925826289068,-3.09016994374947 -9.51056516295154,-3.583679495453 -9.33580426497202,-4.067366430758 -9.13545457642601,-4.53990499739547 -8.91006524188368,-5 -8.66025403784439,-5.44639035015027 -8.38670567945424,-5.87785252292473 -8.09016994374947,-6.29320391049837 -7.77145961456971,-6.69130606358858 -7.43144825477394,-7.07106781186547 -7.07106781186548,-7.43144825477394 -6.69130606358858,-7.77145961456971 -6.29320391049838,-8.09016994374947 -5.87785252292473,-8.38670567945424 -5.44639035015027,-8.66025403784439 -5,-8.91006524188368 -4.53990499739547,-9.13545457642601 -4.067366430758,-9.33580426497202 -3.58367949545301,-9.51056516295153 -3.09016994374947,-9.65925826289068 -2.58819045102521,-9.78147600733806 -2.0791169081776,-9.87688340595138 -1.56434465040231,-9.94521895368273 -1.04528463267654,-9.98629534754574 -0.523359562429442,-10 -0.0,-9.98629534754574 0.523359562429436,-9.94521895368273 1.04528463267653,-9.87688340595138 1.56434465040231,-9.78147600733806 2.07911690817759,-9.65925826289068 2.5881904510252,-9.51056516295154 3.09016994374947,-9.33580426497202 3.583679495453,-9.13545457642601 4.067366430758,-8.91006524188368 4.53990499739547,-8.66025403784439 5.0,-8.38670567945424 5.44639035015027,-8.09016994374948 5.87785252292473,-7.77145961456971 6.29320391049837,-7.43144825477395 6.69130606358858,-7.07106781186548 7.07106781186547,-6.69130606358858 7.43144825477394,-6.29320391049838 7.77145961456971,-5.87785252292473 8.09016994374947,-5.44639035015028 8.38670567945424,-5 8.66025403784438,-4.53990499739547 8.91006524188368,-4.06736643075801 9.135454576426,-3.58367949545301 9.33580426497202,-3.09016994374948 9.51056516295153,-2.58819045102522 9.65925826289068,-2.0791169081776 9.78147600733806,-1.56434465040231 9.87688340595138,-1.04528463267654 9.94521895368273,-0.523359562429443 9.98629534754574,-0.0 10.0,0.523359562429431 9.98629534754574,1.04528463267653 9.94521895368273,1.56434465040231 9.87688340595138,2.07911690817759 9.78147600733806,2.5881904510252 9.65925826289068,3.09016994374947 9.51056516295154,3.583679495453 9.33580426497202,4.067366430758 9.13545457642601,4.53990499739547 8.91006524188368,4.99999999999999 8.66025403784439,5.44639035015027 8.38670567945424,5.87785252292473 8.09016994374948,6.29320391049837 7.77145961456971,6.69130606358858 7.43144825477395,7.07106781186547 7.07106781186548,7.43144825477394 6.69130606358859,7.77145961456971 6.29320391049838,8.09016994374947 5.87785252292473,8.38670567945424 5.44639035015028,8.66025403784438 5.0,8.91006524188368 4.53990499739547,9.135454576426 4.06736643075801,9.33580426497202 3.58367949545301,9.51056516295153 3.09016994374948,9.65925826289068 2.58819045102522,9.78147600733806 2.0791169081776,9.87688340595138 1.56434465040231,9.94521895368273 1.04528463267654,9.98629534754574 0.523359562429444,10 0))\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL version — gdal_version","title":"Get GDAL version — gdal_version","text":"gdal_version() returns runtime version information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL version — gdal_version","text":"Character vector length four containing: \"–version\" - one line version message, e.g., “GDAL 3.6.3, released 2023/03/12” \"GDAL_VERSION_NUM\" - formatted string, e.g., “30603000” GDAL 3.6.3.0 \"GDAL_RELEASE_DATE\" - formatted string, e.g., “20230312” \"GDAL_RELEASE_NAME\" - e.g., “3.6.3”","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version() #> [1] \"GDAL 3.4.1, released 2021/12/27\" \"3040100\"                         #> [3] \"20211227\"                        \"3.4.1\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bindings to the GDAL Raster API — gdalraster-package","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"gdalraster interface Geospatial Data Abstraction   Library (GDAL) low level raster /O. Calling signatures resemble   native C, C++ Python APIs provided GDAL project.   See https://gdal.org/api/ details GDAL Raster API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"Core functionality contained class GDALRaster several   GDAL related stand-alone functions: GDALRaster-class exposed C++ class allows   opening raster dataset calling methods Dataset, Driver   RasterBand objects underlying API (get/set parameters, read/write   pixel data). raster creation: create(),   createCopy(),   rasterFromRaster(),   bandCopyWholeRaster() virtual raster: rasterToVRT() reproject: warp() algorithms: dem_proc(),   fillNodata(),   sieveFilter(),   GDALRaster$getChecksum() geotransform conversion:   inv_geotransform(),    get_pixel_line() coordinate transformation:   transform_xy(),    inv_project() spatial reference convenience functions:   epsg_to_wkt(),   srs_to_wkt(),srs_is_geographic(),   srs_is_projected(),   srs_is_same() geometry convenience functions:   bbox_from_wkt(),    bbox_to_wkt(),   bbox_intersect(),   bbox_union(),    g_buffer(),   has_geos() GDAL configuration:   gdal_version(),   get_cache_used(),   get_config_option(),set_config_option() PROJ configuration:   proj_version(),   proj_search_paths(),   proj_networking() Additional functionality includes: RunningStats-class calculates mean variance one   pass. min, max, sum, count also tracked (.e., summary   statistics data stream). CmbTable-class implements hash table counting   unique combinations integer values. combine() overlays multiple rasters   unique ID assigned unique combination input values. Pixel   counts unique combination obtained, combination IDs   optionally written output raster. calc() evaluates R expression pixel   raster layer stack layers. Individual pixel coordinates available   variables R expression, either x/y raster projected   coordinate system inverse projected longitude/latitude. plot_raster() displays raster data using   base R graphics. Supports single-band grayscale, RGB, color tables   color map functions (e.g., color ramp).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"GDAL: https://github.com/OSGeo/gdal/graphs/contributors R interface/additional functionality: Chris Toney Maintainer: Chris Toney <chris.toney usda.gov>","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"Documentation several wrapper functions borrows GDAL API    documentation, (c) 1998-2023, Frank Warmerdam, Even Rouault,    others, MIT license. Sample datasets included package used examples    throughout documentation. sample data include   LANDFIRE raster layers describing terrain,   vegetation wildland fuels (LF 2020 version),   Landsat C2 Analysis Ready Data downloaded   USGS Earth Explorer. system.file() used examples access sample datasets.    enables code run regardless R installed. Users    normally give file names regular full path relative current    working directory.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the size of memory in use by the GDAL block cache — get_cache_used","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"get_cache_used() returns amount memory currently use GDAL block caching. wrapper GDALGetCacheUsed64() return value MB.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"","code":"get_cache_used()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"Integer. Amount cache memory use MB.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_cache_used.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the size of memory in use by the GDAL block cache — get_cache_used","text":"","code":"get_cache_used() #> [1] 0"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL configuration option — get_config_option","title":"Get GDAL configuration option — get_config_option","text":"get_config_option() gets value GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL configuration option — get_config_option","text":"","code":"get_config_option(key)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GDAL configuration option — get_config_option","text":"key Character name configuration option.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL configuration option — get_config_option","text":"Character. value (key, value) option previously set set_config_option(). empty string (\"\") returned key found.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL configuration option — get_config_option","text":"","code":"## this option is set during initialization of the gdalraster package get_config_option(\"OGR_CT_FORCE_TRADITIONAL_GIS_ORDER\") #> [1] \"YES\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"get_pixel_line() converts geospatial coordinates pixel/line (raster column, row numbers). upper left corner pixel raster origin (0,0) column, row increasing left right, top bottom.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"get_pixel_line(xy, gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"xy Numeric array geospatial x,y coordinates spatial reference system gt. gt Numeric vector length six. affine geotransform raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"Integer array raster pixel/line.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") ## id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 raster_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, raster_file, read_only=TRUE) gt <- ds$getGeoTransform() get_pixel_line(as.matrix(pts[,-1]), gt) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Is GEOS available? — has_geos","title":"Is GEOS available? — has_geos","text":"has_geos() returns logical value indicating whether GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is GEOS available? — has_geos","text":"","code":"has_geos()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is GEOS available? — has_geos","text":"Logical. TRUE GEOS available, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is GEOS available? — has_geos","text":"","code":"has_geos() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert geotransform — inv_geotransform","title":"Invert geotransform — inv_geotransform","text":"inv_geotransform() inverts vector geotransform coefficients. converts equation : raster pixel/line (column/row) -> geospatial x/y coordinate : geospatial x/y coordinate -> raster pixel/line (column/row)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert geotransform — inv_geotransform","text":"","code":"inv_geotransform(gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert geotransform — inv_geotransform","text":"gt Numeric vector length six containing geotransform invert.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert geotransform — inv_geotransform","text":"Numeric vector length six containing inverted geotransform. output vector contain NAs input geotransform uninvertable.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invert geotransform — inv_geotransform","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) gt <- ds$getGeoTransform() ds$close() invgt <- inv_geotransform(gt)  ptX = 324181.7 ptY = 5103901.4  ## for a point x, y in the spatial reference system of elev_file ## raster pixel (column number): pixel <- floor(invgt[1] +                invgt[2] * ptX +                invgt[3] * ptY)  ## raster line (row number): line <- floor(invgt[4] +               invgt[5] * ptX +               invgt[6] * ptY)  ## get_pixel_line() applies this conversion"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"inv_project() transforms geospatial x/y coordinates longitude/latitude geographic coordinate system used given projected spatial reference system. output long/lat can optionally set specific geographic coordinate system specifying well known name (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"inv_project(pts, srs, well_known_gcs = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"pts two-column data frame numeric matrix containing geospatial x/y coordinates. srs Character string OGC WKT format specifying projected spatial reference system pts. well_known_gcs Optional character string containing supported well known name geographic coordinate system (see Details supported values).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"Numeric array longitude, latitude. error raised transformation performed.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"default, geographic coordinate system projection specified srs used. specific geographic coordinate system desired, well_known_gcs can set one values : returned array always longitude, latitude order (traditional GIS order) regardless axis order defined names .","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") ## id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 inv_project(pts[,-1], epsg_to_wkt(26912)) #>            [,1]     [,2] #>  [1,] -113.2671 46.06118 #>  [2,] -113.2732 46.05827 #>  [3,] -113.2815 46.06076 #>  [4,] -113.2598 46.06280 #>  [5,] -113.2531 46.05276 #>  [6,] -113.2460 46.06682 #>  [7,] -113.2561 46.06862 #>  [8,] -113.2461 46.05405 #>  [9,] -113.2279 46.07214 #> [10,] -113.2733 46.06607 inv_project(pts[,-1], epsg_to_wkt(26912), \"NAD27\") #>            [,1]     [,2] #>  [1,] -113.2662 46.06126 #>  [2,] -113.2723 46.05835 #>  [3,] -113.2806 46.06084 #>  [4,] -113.2589 46.06288 #>  [5,] -113.2522 46.05283 #>  [6,] -113.2451 46.06689 #>  [7,] -113.2552 46.06869 #>  [8,] -113.2452 46.05413 #>  [9,] -113.2270 46.07222 #> [10,] -113.2724 46.06615"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Display raster data — plot_raster","title":"Display raster data — plot_raster","text":"plot_raster() displays raster data using base graphics.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display raster data — plot_raster","text":"","code":"plot_raster(   data,   xsize = NULL,   ysize = NULL,   nbands = 1,   max_pixels = 2.5e+07,   col_tbl = NULL,   maxColorValue = 1,   normalize = TRUE,   minmax_def = NULL,   minmax_pct_cut = NULL,   col_map_fn = NULL,   xlim = c(0, xsize),   ylim = c(ysize, 0),   interpolate = TRUE,   asp = 1,   axes = TRUE,   main = \"\",   xlab = \"x\",   ylab = \"y\",   xaxs = \"i\",   yaxs = \"i\",   legend = FALSE,   digits = 2,   na_col = rgb(0, 0, 0, 0),   ... )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display raster data — plot_raster","text":"data Either GDALRaster object data read, numeric vector pixel values arranged left right, top bottom order. xsize number pixels along x dimension data. data GDALRaster object, specifies size raster read (used argument out_xsize GDALRaster$read()). default, entire raster read full resolution. ysize number pixels along y dimension data. data GDALRaster object, specifies size raster read (used argument out_ysize GDALRaster$read()). default, entire raster read full resolution. nbands number bands data. Must either 1 (grayscale) 3 (RGB). RGB, data interleaved band. max_pixels maximum number pixels function attempt display (per band). error raised (xsize * ysize) exceeds value. Setting NULL turns check. col_tbl color table matrix data frame four five columns. Column 1 contains numeric pixel values. Columns 2:4 contain intensities red, green blue primaries (0:1 default, use integer 0:255 setting maxColorValue = 255). optional column 5 may contain alpha transparency values, 0 fully transparent 1 (maxColorValue) opaque (default column 5 missing). data GDALRaster object, built-color table used automatically one exists dataset. maxColorValue number giving maximum color values range col_tbl (see ). default 1. normalize Logical. TRUE rescale pixel values range [0,1], normalized full range pixel data default (min(data), max(data), per band). Ignored col_tbl used. Set normalize FALSE color map function used operates raw pixel values (see col_map_fn ). minmax_def Normalize user-defined min/max values (terms pixel data, per band). single-band grayscale, numeric vector length two containing min, max. 3-band RGB, numeric vector length six containing b1_min, b2_min, b3_min, b1_max, b2_max, b3_max. minmax_pct_cut Normalize truncated range pixel data using percentile cutoffs (removes outliers). numeric vector length two giving percentiles use (e.g., c(2, 98)). Applied per band. Ignored minmax_def used. col_map_fn optional color map function (default grDevices::gray single-band data grDevices::rgb 3-band). Ignored col_tbl used. Set normalize FALSE using color map function operates raw pixel values. xlim Numeric vector length two giving x coordinate range. default uses pixel/line coordinates (c(0, xsize)). ylim Numeric vector length two giving y coordinate range. default uses pixel/line coordinates (c(ysize, 0)). interpolate Logical indicating whether apply linear interpolation image drawing (default TRUE). asp Numeric. aspect ratio y/x (see ?plot.window). axes Logical. TRUE draw axes (default). main main title (top). xlab Title x axis (see ?title). ylab Title y axis (see ?title). xaxs style axis interval calculation used x axis (see ?par). yaxs style axis interval calculation used y axis (see ?par). legend Logical indicating whether include legend plot. Currently, legends supported continuous data. color table used one specified raster built-color table, otherwise value col_map_fn used. digits number digits display decimal point legend labels raster data floating point. na_col Color use NA 7- 9-character hexadecimal code. default transparent (\"#00000000\", return value rgb(0,0,0,0)). ... parameters passed plot.default().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Display raster data — plot_raster","text":"plot_raster() uses function graphics::rasterImage() plotting supported devices (see ?rasterImage). data object class GDALRaster, plot_raster() attempt read entire raster memory default (unless number pixels per band exceed max_pixels). reduced resolution overview can read setting xsize, ysize smaller raster size disk. (data instead specified vector pixel values, reduced resolution overview read setting out_xsize out_ysize smaller raster region defined xsize, ysize call GDALRaster$read()). GDAL_RASTERIO_RESAMPLING configuration option can defined override default resampling (NEAREST) one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE, example:","code":"set_config_option(\"GDAL_RASTERIO_RESAMPLING\", \"BILINEAR\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/plot_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display raster data — plot_raster","text":"","code":"## Elevation elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE)  # grayscale plot_raster(ds, legend=TRUE, main=\"Storm Lake elevation (m)\")   # color ramp from user-defined palette elev_pal <- c(\"#00A60E\",\"#63C600\",\"#E6E600\",\"#E9BD3B\",               \"#ECB176\",\"#EFC2B3\",\"#F2F2F2\") ramp <- scales::colour_ramp(elev_pal, alpha=FALSE) plot_raster(ds, col_map_fn=ramp, legend=TRUE,             main=\"Storm Lake elevation (m)\")   ds$close()  ## Landsat band combination b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") b6_file <- system.file(\"extdata/sr_b6_20200829.tif\", package=\"gdalraster\") band_files <- c(b6_file, b5_file, b4_file)  r <- vector(\"integer\") for (f in band_files) {   ds <- new(GDALRaster, f, read_only=TRUE)   dm <- ds$dim()   r <- c(r, read_ds(ds))   ds$close() }  plot_raster(r, xsize=dm[1], ysize=dm[2], nbands=3,             main=\"Landsat 6-5-4 (vegetative analysis)\")   ## LANDFIRE Existing Vegetation Cover (EVC) with color map evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\")  # colors from the CSV attribute table distributed by LANDFIRE evc_csv <- system.file(\"extdata/LF20_EVC_220.csv\", package=\"gdalraster\") vat <- read.csv(evc_csv) head(vat) #>   VALUE                        CLASSNAMES   R   G   B      RED    GREEN #> 1 -9999                       Fill-NoData 255 255 255 1.000000 1.000000 #> 2    11                        Open Water   0   0 255 0.000000 0.000000 #> 3    12                          Snow/Ice 159 161 240 0.623529 0.631373 #> 4    13 Developed-Upland Deciduous Forest  64  61 168 0.250980 0.239216 #> 5    14 Developed-Upland Evergreen Forest  68  79 137 0.266667 0.309804 #> 6    15     Developed-Upland Mixed Forest 102 119 205 0.400000 0.466667 #>       BLUE #> 1 1.000000 #> 2 1.000000 #> 3 0.941176 #> 4 0.658824 #> 5 0.537255 #> 6 0.803922 vat <- vat[,c(1,6:8)]  ds <- new(GDALRaster, evc_file, read_only=TRUE) plot_raster(ds, col_tbl=vat, interpolate=FALSE,             main=\"Storm Lake LANDFIRE EVC\")   ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":null,"dir":"Reference","previous_headings":"","what":"Check, enable or disable PROJ networking capabilities — proj_networking","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"proj_networking() returns status PROJ networking capabilities, optionally enabling disabling first. Requires GDAL 3.4 later PROJ 7 later.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"","code":"proj_networking(enabled = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"enabled Optional logical scalar. Set TRUE enable networking capabilities FALSE disable.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"Logical TRUE PROJ networking capabilities enabled (indicated return value OSRGetPROJEnableNetwork() GDAL Spatial Reference System C API). Logical NA returned GDAL < 3.4.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_networking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check, enable or disable PROJ networking capabilities — proj_networking","text":"","code":"proj_networking() #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set search path(s) for PROJ resource files — proj_search_paths","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"proj_search_paths() returns search path(s) PROJ resource files, optionally setting first. Requires GDAL 3.0.3 later.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"","code":"proj_search_paths(paths = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"paths Optional character vector containing one directory paths set.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"character vector containing currently used search path(s) PROJ resource files. empty string (\"\") returned search paths returned function OSRGetPROJSearchPaths() GDAL Spatial Reference System C API. NA returned GDAL < 3.0.3.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_search_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set search path(s) for PROJ resource files — proj_search_paths","text":"","code":"proj_search_paths() #> [1] \"/home/runner/.local/share/proj\" \"/usr/share/proj\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PROJ version — proj_version","title":"Get PROJ version — proj_version","text":"proj_version() returns version information PROJ library use GDAL. Requires GDAL >= 3.0.1.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PROJ version — proj_version","text":"","code":"proj_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PROJ version — proj_version","text":"list length four containing: name - string formatted \"major.minor.patch\" major - major version integer minor - minor version integer patch - patch version integer List elements NA GDAL < 3.0.1.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/proj_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PROJ version — proj_version","text":"","code":"proj_version() #> $name #> [1] \"8.2.1\" #>  #> $major #> [1] 8 #>  #> $minor #> [1] 2 #>  #> $patch #> [1] 1 #>"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a raster from an existing raster as template — rasterFromRaster","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. Optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"rasterFromRaster(   srcfile,   dstfile,   fmt = NULL,   nbands = NULL,   dtName = NULL,   options = NULL,   init = NULL,   dstnodata = init )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"srcfile Source raster filename. dstfile Output raster filename. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename fmt specified. nbands Number output bands. dtName Output raster data type name. (e.g., \"Byte\", \"Int16\", \"UInt16\", \"Int32\" \"Float32\"). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs. (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). init Numeric value initialize pixels output raster. dstnodata Numeric nodata value output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"Returns destination filename invisibly.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"## band 2 in a FARSITE landscape file has slope degrees ## convert slope degrees to slope percent in a new raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file, read_only=TRUE) ds_lcp$getMetadata(band=2, domain=\"\") #> [1] \"SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"SLOPE_MAX=54\"                                                                                                                          #> [3] \"SLOPE_MIN=-9999\"                                                                                                                       #> [4] \"SLOPE_NUM_CLASSES=53\"                                                                                                                  #> [5] \"SLOPE_UNIT=0\"                                                                                                                          #> [6] \"SLOPE_UNIT_NAME=Degrees\"                                                                                                                slpp_file <- paste0(tempdir(), \"/\", \"storml_slpp.tif\") opt = c(\"COMPRESS=LZW\") rasterFromRaster(srcfile = lcp_file,                  dstfile = slpp_file,                  nbands = 1,                  dtName = \"Int16\",                  options = opt,                  init = -32767) #> Initializing destination raster... #> Done. ds_slp <- new(GDALRaster, slpp_file, read_only=FALSE)  ## slpp_file is initialized to -32767 and nodata value set ds_slp$getNoDataValue(band=1) #> [1] -32767  ## extent and cell size are the same as lcp_file ds_lcp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res() #> [1] 30 30 ds_slp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_slp$res() #> [1] 30 30  ## convert slope degrees in lcp_file band 2 to slope percent in slpp_file ## bring through LCP nodata -9999 to the output nodata value ncols <- ds_slp$getRasterXSize() nrows <- ds_slp$getRasterYSize() for (row in 0:(nrows-1)) {     rowdata <- ds_lcp$read(band=2,                             xoff=0, yoff=row,                            xsize=ncols, ysize=1,                            out_xsize=ncols, out_ysize=1)     rowslpp <- tan(rowdata*pi/180) * 100     rowslpp[rowdata==-9999] <- -32767     dim(rowslpp) <- c(1, ncols)     ds_slp$write(band=1, xoff=0, yoff=row, xsize=ncols, ysize=1, rowslpp) }  ## min, max, mean, sd ds_slp$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 138.00000  44.76464  26.79985  ds_slp$close() ds_lcp$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GDAL virtual raster — rasterToVRT","title":"Create a GDAL virtual raster — rasterToVRT","text":"rasterToVRT() creates virtual raster dataset (VRT format) derived source raster options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GDAL virtual raster — rasterToVRT","text":"","code":"rasterToVRT(   srcfile,   relativeToVRT = FALSE,   vrtfile = tempfile(\"tmprast\", fileext = \".vrt\"),   resolution = NULL,   subwindow = NULL,   src_align = TRUE,   resampling = \"nearest\",   krnl = NULL,   normalized = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GDAL virtual raster — rasterToVRT","text":"srcfile Source raster filename. relativeToVRT Logical. Indicates whether source filename interpreted relative .vrt file (TRUE) relative .vrt file (FALSE, default). TRUE, .vrt file assumed directory srcfile basename(srcfile) used .vrt file. Use TRUE .vrt file always stored directory srcfile. vrtfile Output VRT filename. resolution numeric vector length two (xres, yres). pixel size must expressed georeferenced units. must positive values. source pixel size used resolution specified. subwindow numeric vector length four (xmin, ymin, xmax, ymax). Selects subwindow source raster corners given georeferenced coordinates (source CRS). given, upper left corner VRT source, VRT extent larger source depending resolution. src_align Logical. TRUE: upper left corner VRT extent set upper left corner source pixel contains subwindow xmin, ymax. VRT pixel-aligned source VRT resolution source pixel size, otherwise VRT extent minimum rectangle contains subwindow given pixel size. Often, src_align=TRUE selecting raster minimum bounding box vector polygon. FALSE: VRT upper left corner exactly subwindow xmin, ymax, VRT extent minimum rectangle contains subwindow given pixel size. subwindow given, source raster extent used case src_align=FALSE effect. Use src_align=FALSE pixel-align two rasters different sizes, .e., intent target alignment. resampling resampling method use xsize, ysize VRT different size underlying source rectangle (number pixels). values allowed nearest, bilinear, cubic, cubicspline, lanczos, average mode (character). krnl filtering kernel specified pixel coefficients. krnl array dimensions (size, size), size must odd number. krnl can also given vector length size x size. example, 3x3 average filter given : kernel applied sub-sampled -sampled data. normalized Logical. Indicates whether kernel normalized. Defaults TRUE.","code":"krnl <- c( 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GDAL virtual raster — rasterToVRT","text":"Returns VRT filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a GDAL virtual raster — rasterToVRT","text":"rasterToVRT() similarities command-line utility gdalbuildvrt (https://gdal.org/programs/gdalbuildvrt.html) wrapper build mosaics. rasterToVRT() somewhat tailored clipping pixel-aligning various raster data relation vector polygon boundaries. also supports VRT kernel filtering. VRT dataset saved plain-text file extension .vrt. file contains description dataset XML format. description includes source raster filename can full path (relativeToVRT = FALSE) relative path (relativeToVRT = TRUE). relative path, rasterToVRT() assumes .vrt file directory source file uses basename(srcfile). elements XML schema describe source data read, along algorithms potentially applied forth. Documentation XML format .vrt : https://gdal.org/drivers/raster/vrt.html. Since .vrt small plain-text file fast write requires little storage space. Read performance degraded certain simple operations (e.g., virtual clip without resampling). Reading slower virtual resampling different pixel resolution virtual kernel filtering since operations performed --fly (.vrt require front writing resampled kernel-filtered raster regular format). VRT sometimes useful intermediate raster series processing steps, e.g., tempfile (default). GDAL VRT format several capabilities uses beyond covered rasterToVRT(). See URLs full discussion.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a GDAL virtual raster — rasterToVRT","text":"Pixel alignment specified terms source raster pixels (.e., srcfile virtual raster). use case mind virtually clipping raster bounding box vector polygon keeping pixels aligned srcfile (src_align = TRUE). src_align set FALSE intent \"target alignment\". example, subwindow bounding box another raster different layout, also setting resolution pixel resolution target raster src_align = FALSE result virtual raster pixel-aligned target (.e., pixels virtual raster longer aligned srcfile). Resampling defaults nearest specified. Examples cases src_align given . rasterToVRT() assumes srcfile north-raster. Requires package xml2.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a GDAL virtual raster — rasterToVRT","text":"","code":"### resample  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds <- new(GDALRaster, evt_file, TRUE) ds$res() #> [1] 30 30 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$close()  ## use combine() with one input to get a table of pixel counts for   ## the raster values vat <- combine(evt_file) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(vat[-1]) # drop the cmbid in this case #>    count storml_evt #> 1      1       7125 #> 2     13       9017 #> 3      3       7106 #> 4     14       9021 #> 5    397       7292 #> 6      2       7901 #> 7    681       7145 #> 8    876         NA #> 9   1082       7126 #> 10    32       7166 #> 11    98       9022 #> 12   570       7050 #> 13    28       7011 #> 14   889       7055 #> 15  4564       7046 #> 16  1280       9018 #> 17   679       7140 #> 18    60       7169 #> 19   199       7143 #> 20   304       7056 #> 21   267       7070 #> 22  2486       9016 #> 23    11       7057 #> 24   765       7144 sum(vat$count) #> [1] 15301  ## resample at 90-m resolution ## EVT is thematic vegetation type so use a majority value vrt_file <- rasterToVRT(evt_file,                         resolution=c(90,90),                         resampling=\"mode\")  ## .vrt is a small xml file pointing to the source raster file.size(vrt_file) #> [1] 1635  vat90m <- combine(vrt_file, var.names=c(\"evt90m\")) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(vat90m[-1]) #>    count evt90m #> 1      1   9017 #> 2      1   9021 #> 3      1   7011 #> 4     48   7292 #> 5     54     NA #> 6    119   7126 #> 7     75   7055 #> 8    614   7046 #> 9    152   9018 #> 10     2   7166 #> 11     9   9022 #> 12    59   7050 #> 13    59   7140 #> 14     4   7169 #> 15    13   7143 #> 16    27   7056 #> 17    27   7070 #> 18   322   9016 #> 19     2   7057 #> 20    75   7144 #> 21    64   7145 sum(vat90m$count) #> [1] 1728  ds <- new(GDALRaster, vrt_file, TRUE) ds$res() #> [1] 90 90 ds$bbox() #> [1]  323476.1 5101842.0  327796.1 5105082.0 ds$close()   ### clip  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds_evt <- new(GDALRaster, evt_file, TRUE) ds_evt$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0  ## WKT string for a boundary within the EVT extent bnd = \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2  5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5,  325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\"  ## src_align = TRUE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=TRUE) ds_vrt <- new(GDALRaster, vrt_file, TRUE)  ## VRT is a virtual clip, pixel-aligned with the EVT raster bbox_from_wkt(bnd) #> [1]  323794.2 5102885.8  326420.0 5104929.4 ds_vrt$bbox() #> [1]  323776.1 5102862.0  326446.1 5104932.0 ds_vrt$res() #> [1] 30 30  ## src_align = FALSE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=FALSE) ds_vrt_noalign <- new(GDALRaster, vrt_file, TRUE)  ## VRT upper left corner (xmin, ymax) is exactly bnd xmin, ymax ds_vrt_noalign$bbox() #> [1]  323794.2 5102859.4  326434.2 5104929.4 ds_vrt_noalign$res() #> [1] 30 30  ds_vrt$close() ds_vrt_noalign$close() ds_evt$close()   ### subset and pixel align two rasters  ## FARSITE landscape file for the Storm Lake area lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file, read_only=TRUE)  ## Landsat band 5 file covering the Storm Lake area b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds_b5 <- new(GDALRaster, b5_file, read_only=TRUE)  ds_lcp$bbox()  # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res()   # 30 30 #> [1] 30 30  ds_b5$bbox()   # 323400.9 5101815.8  327870.9 5105175.8 #> [1]  323400.9 5101815.8  327870.9 5105175.8 ds_b5$res()    # 30 30 #> [1] 30 30  ## src_align = FALSE because we need target alignment in this case: vrt_file <- rasterToVRT(b5_file,                         resolution = ds_lcp$res(),                         subwindow = ds_lcp$bbox(),                         src_align = FALSE) ds_b5vrt <- new(GDALRaster, vrt_file, TRUE)  ds_b5vrt$bbox() # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_b5vrt$res()  # 30 30 #> [1] 30 30  ## read the the Landsat file pixel-aligned with the LCP file  ## summarize band 5 reflectance where FBFM = 165  ## LCP band 4 contains FBFM (a classification of fuel beds): ds_lcp$getMetadata(band=4, domain=\"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           ## verify Landsat nodata (0): ds_b5vrt$getNoDataValue(band=1) #> [1] 0 ## will be read as NA and omitted from stats rs <- new(RunningStats, na_rm=TRUE)  ncols <- ds_lcp$getRasterXSize() nrows <- ds_lcp$getRasterYSize() for (row in 0:(nrows-1)) {     row_fbfm <- ds_lcp$read(band=4, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)     row_b5 <- ds_b5vrt$read(band=1, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)      rs$update(row_b5[row_fbfm == 165]) } rs$get_count() #> [1] 2498 rs$get_mean() #> [1] 12992.35 rs$get_min() #> [1] 7635 rs$get_max() #> [1] 17866 rs$get_sum() #> [1] 32454886 rs$get_var() #> [1] 1214912 rs$get_sd() #> [1] 1102.23  ds_b5vrt$close() ds_lcp$close() ds_b5$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper for GDALRaster$read() — read_ds","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"read_ds() read raster dataset already opened GDALRaster object. default, attempt read full raster extent bands full resolution.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"","code":"read_ds(   ds,   bands = NULL,   xoff = 0,   yoff = 0,   xsize = ds$getRasterXSize(),   ysize = ds$getRasterYSize(),   out_xsize = xsize,   out_ysize = ysize )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"ds object class GDALRaster open state. bands Integer vector band numbers read. default bands read. xoff Integer. pixel (column) offset top left corner raster region read (zero start left side). yoff Integer. line (row) offset top left corner raster region read (zero start top). xsize Integer. width pixels region read. ysize Integer. height pixels region read. out_xsize Integer. width output buffer desired region read. out_ysize Integer. height output buffer desired region read.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"Returns numeric complex vector containing values read. organized left right, top bottom pixel order, interleaved band. NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"small overhead calling read_ds() compared calling GDALRaster$read() directly. matter calling function repeatedly read raster chunks. case reading large raster many chunks (e.g., row), efficient performance-wise call GDALRaster$read() directly. default, function attempt read full raster memory. generally called large raster datasets using default argument values. memory size bytes returned vector approximately (xsize * ysize * number bands * 4) data read integer, (xsize * ysize * number bands * 8) data read double (plus small object overhead vector).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/read_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience wrapper for GDALRaster$read() — read_ds","text":"","code":"## read elevation, slope, and aspect from a multiband LCP file lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file, read_only=TRUE)  r <- read_ds(ds, bands=c(1:3)) typeof(r) #> [1] \"integer\" length(r) #> [1] 45903 object.size(r) #> 183664 bytes  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GDAL configuration option — set_config_option","title":"Set GDAL configuration option — set_config_option","text":"set_config_option() sets GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(key, value)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GDAL configuration option — set_config_option","text":"key Character name configuration option. value Character value set option. value = \"\" (empty string) unset value previously set set_config_option().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set GDAL configuration option — set_config_option","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(\"GDAL_CACHEMAX\", \"64\") get_config_option(\"GDAL_CACHEMAX\") #> [1] \"64\" ## unset: set_config_option(\"GDAL_CACHEMAX\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove small raster polygons — sieveFilter","title":"Remove small raster polygons — sieveFilter","text":"sieveFilter() wrapper GDALSieveFilter() GDAL Algorithms API. removes raster polygons smaller provided threshold size (pixels) replaces pixel value largest neighbour polygon.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove small raster polygons — sieveFilter","text":"","code":"sieveFilter(   src_filename,   src_band,   dst_filename,   dst_band,   size_threshold,   connectedness,   mask_filename = \"\",   mask_band = 0L,   options = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove small raster polygons — sieveFilter","text":"src_filename Filename source raster processed. src_band Band number source raster processed. dst_filename Filename output raster. may src_filename update source file place. dst_band Band number dst_filename write output. may src_band update source raster place. size_threshold Integer. Raster polygons sizes (pixels) smaller value merged largest neighbour. connectedness Integer. Either 4 indicating diagonal pixels considered directly adjacent polygon membership purposes, 8 indicating . mask_filename Optional filename raster use mask. mask_band Band number mask_filename use mask. pixels mask band value zero considered suitable inclusion polygons. options Algorithm options character vector name=value pairs. None currently supported.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove small raster polygons — sieveFilter","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove small raster polygons — sieveFilter","text":"Polygons determined regions raster pixels value, contiguous (connected). Pixels determined \"nodata\" per mask band treated part polygon regardless pixel values. Nodata areas never changed affect polygon sizes. Polygons smaller threshold neighbours large threshold altered. Polygons surrounded nodata areas therefore altered. algorithm makes three passes input file enumerate polygons collect limited information . Memory use proportional number polygons (roughly 24 bytes per polygon), directly related size raster. large raster files can processed effectively many polygons. extremely noisy rasters many one pixel polygons end expensive (memory) process. input dataset read integer data means floating point values rounded integers.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/sieveFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove small raster polygons — sieveFilter","text":"","code":"## remove single-pixel polygons from the vegetation type layer (EVT) evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\")  # create a blank raster to hold the output evt_mmu_file <- paste0(tempdir(), \"/\", \"storml_evt_mmu2.tif\") rasterFromRaster(srcfile = evt_file,                  dstfile = evt_mmu_file,                  init = 32767) #> Initializing destination raster... #> Done.  # create a mask to exclude water pixels from the algorithm # recode water (7292) to 0 expr <- \"ifelse(EVT == 7292, 0, EVT)\" mask_file <- calc(expr = expr,                   rasterfiles = evt_file,                   var.names = \"EVT\") #> Calculating from 1 input layer(s)... #> ================================================================================ #> Output written to: /tmp/RtmpiFPJP1/rastcalc1f762adc66bf.tif  # create a version of EVT with two-pixel minimum mapping unit sieveFilter(src_filename = evt_file,             src_band = 1,             dst_filename = evt_mmu_file,             dst_band = 1,             size_threshold = 2,             connectedness = 8,             mask_filename = mask_file,             mask_band = 1) #> 0...10...20...30...40...50...60...70...80...90...100 - done."},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"srs_is_geographic() attempt import given WKT string spatial reference system, returns TRUE  root GEOGCS node. wrapper OSRIsGeographic() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"","code":"srs_is_geographic(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"srs Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"Logical. TRUE srs geographic, otherwise FALSE","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"","code":"srs_is_geographic(epsg_to_wkt(5070)) #> [1] FALSE srs_is_geographic(srs_to_wkt(\"WGS84\")) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WKT definition is a projected coordinate system — srs_is_projected","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"srs_is_projected() attempt import given WKT string spatial reference system (SRS), returns TRUE SRS contains PROJCS node indicating projected coordinate system. wrapper OSRIsProjected() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"","code":"srs_is_projected(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"srs Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"Logical. TRUE srs projected, otherwise FALSE","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"","code":"srs_is_projected(epsg_to_wkt(5070)) #> [1] TRUE srs_is_projected(srs_to_wkt(\"WGS84\")) #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":null,"dir":"Reference","previous_headings":"","what":"Do these two spatial references describe the same system? — srs_is_same","title":"Do these two spatial references describe the same system? — srs_is_same","text":"srs_is_same() returns TRUE two spatial references describe system. wrapper OSRIsSame() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do these two spatial references describe the same system? — srs_is_same","text":"","code":"srs_is_same(srs1, srs2)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do these two spatial references describe the same system? — srs_is_same","text":"srs1 Character OGC WKT string spatial reference system srs2 Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do these two spatial references describe the same system? — srs_is_same","text":"Logical. TRUE two spatial references describe system, otherwise FALSE.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do these two spatial references describe the same system? — srs_is_same","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, TRUE) srs_is_same(ds$getProjectionRef(), epsg_to_wkt(26912)) #> [1] TRUE srs_is_same(ds$getProjectionRef(), epsg_to_wkt(5070)) #> [1] FALSE ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"srs_to_wkt() converts spatial reference system (SRS) definition various text formats WKT. function examine input SRS, try deduce format, export WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"","code":"srs_to_wkt(srs, pretty = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"srs Character string containing SRS definition various formats (see Details). pretty Logical. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"wrapper OSRSetFromUserInput() GDAL Spatial Reference System C API output WKT. input SRS may take following forms: WKT - convert WKT versions (see ) EPSG:n - EPSG code n AUTO:proj_id,unit_id,lon0,lat0 - WMS auto projections urn:ogc:def:crs:EPSG::n - OGC URNs PROJ.4 definitions filename - file read WKT, XML PROJ.4 definition well known name NAD27, NAD83, WGS84 WGS72 IGNF:xxxx, ESRI:xxxx - definitions PROJ database PROJJSON (PROJ >= 6.2) function intended flexible, nature imprecise must guess information format intended. epsg_to_wkt() used instead EPSG codes. GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"","code":"srs_to_wkt(\"NAD83\") #> [1] \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]]\" writeLines(srs_to_wkt(\"NAD83\", pretty=TRUE)) #> GEOGCS[\"NAD83\", #>     DATUM[\"North_American_Datum_1983\", #>         SPHEROID[\"GRS 1980\",6378137,298.257222101, #>             AUTHORITY[\"EPSG\",\"7019\"]], #>         AUTHORITY[\"EPSG\",\"6269\"]], #>     PRIMEM[\"Greenwich\",0, #>         AUTHORITY[\"EPSG\",\"8901\"]], #>     UNIT[\"degree\",0.0174532925199433, #>         AUTHORITY[\"EPSG\",\"9122\"]], #>     AXIS[\"Latitude\",NORTH], #>     AXIS[\"Longitude\",EAST], #>     AUTHORITY[\"EPSG\",\"4269\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(srs_to_wkt(\"NAD83\", pretty=TRUE)) #> GEOGCRS[\"NAD83\", #>     DATUM[\"North American Datum 1983\", #>         ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>             LENGTHUNIT[\"metre\",1]]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     ID[\"EPSG\",4269]] set_config_option(\"OSR_WKT_FORMAT\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform geospatial x/y coordinates — transform_xy","title":"Transform geospatial x/y coordinates — transform_xy","text":"transform_xy() transforms geospatial x/y coordinates new projection.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"transform_xy(pts, srs_from, srs_to)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform geospatial x/y coordinates — transform_xy","text":"pts two-column data frame numeric matrix containing geospatial x/y coordinates. srs_from Character string OGC WKT format specifying spatial reference system pts. srs_to Character string OGC WKT format specifying output spatial reference system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform geospatial x/y coordinates — transform_xy","text":"Numeric array geospatial x/y coordinates projection specified srs_to.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 ## id, x, y in NAD83 / UTM zone 12N ## transform to NAD83 / CONUS Albers transform_xy(pts = pts[,-1],               srs_from = epsg_to_wkt(26912),               srs_to = epsg_to_wkt(5070)) #>           [,1]    [,2] #>  [1,] -1330885 2684892 #>  [2,] -1331408 2684660 #>  [3,] -1331994 2685048 #>  [4,] -1330297 2684967 #>  [5,] -1329991 2683777 #>  [6,] -1329167 2685212 #>  [7,] -1329903 2685550 #>  [8,] -1329432 2683821 #>  [9,] -1327683 2685541 #> [10,] -1331265 2685514"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster reprojection — warp","title":"Raster reprojection — warp","text":"warp() wrapper gdalwarp command-line utility. See https://gdal.org/programs/gdalwarp.html details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster reprojection — warp","text":"","code":"warp(src_files, dst_filename, t_srs, cl_arg = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster reprojection — warp","text":"src_files Character vector source file(s) reprojected. dst_filename Filename output raster. t_srs Character. Target spatial reference system. Usually EPSG code (\"EPSG:#####\") well known text (WKT) SRS definition. cl_arg Optional character vector command-line arguments gdalwarp addition -t_srs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster reprojection — warp","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster reprojection — warp","text":"","code":"## reproject the elevation raster to NAD83 / CONUS Albers (EPSG:5070) elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## command-line arguments for gdalwarp ## resample to 90-m resolution using average and keep pixels aligned: args = c(\"-tr\", \"90\", \"90\", \"-r\", \"average\", \"-tap\") ## output to Erdas Imagine format (HFA), creation option for compression: args = c(args, \"-of\", \"HFA\", \"-co\", \"COMPRESSED=YES\")  alb83_file <- paste0(tempdir(), \"/\", \"storml_elev_alb83.img\") warp(elev_file, alb83_file, t_srs=\"EPSG:5070\", cl_arg = args) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, alb83_file, read_only=TRUE) ds$getDriverLongName() #> [1] \"Erdas Imagine Images (.img)\" ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$res() #> [1] 90 90 ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3042.0000 2674.9397  132.3393 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-141-dev","dir":"Changelog","previous_headings":"","what":"gdalraster 1.4.1 (dev)","title":"gdalraster 1.4.1 (dev)","text":"plot_raster(): legend can now used color table continuous data. Default value legend argument changed FALSE (2023-09-17) add CmbTable$asMatrix(): returns table combinations numeric matrix named columns (alternative $asDataFrame()) (2023-09-15) add CmbTable$updateFromMatrixByRow(): class method update hash table matrix combinations arranged rows (2023-09-15) add bandCopyWholeRaster(): efficiently copy whole raster band, wrapper GDALRasterBandCopyWholeRaster() GDAL API (2023-09-14) add GDALRaster$flushCache(): flush write cached data disk (2023-09-13) add GDALRaster$infoAsJSON(): returns output gdalinfo command-line utility JSON-formatted string (2023-09-13) add createColorRamp(): wrapper GDALCreateColorRamp() GDAL Raster API. Automatically creates ramp one color another (2023-09-13) add GDALRaster$getRasterColorInterp() GDALRaster$setRasterColorInterp(): get/set color interpretation raster bands (2023-09-11) add support color tables class GDALRaster: GDALRaster$getColorTable(), GDALRaster$getPaletteInterp(), GDALRaster$setColorTable() (2023-09-10) plot_raster(): col_tbl can optional alpha channel; add argument maxColorValue (2023-09-09) bbox_from_wkt(), bbox_to_wkt(): add arguments extend_x, extend_y (2023-09-07) add GDALRaster$getDescription() GDALRaster$setDescription(): get/set description raster band objects (2023-09-06) add g_buffer(): compute buffer WKT geometry (2023-09-05) add sieveFilter(): wrapper GDALSieveFilter() GDAL Algorithms API (2023-09-04) add PROJ utility functions: proj_version(), proj_search_paths(), proj_networking() (2023-09-03) add GDALRaster$getFileList(): returns list files forming dataset (2023-09-01) Windows, reset environment variables package unload (2023-08-31)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-140","dir":"Changelog","previous_headings":"","what":"gdalraster 1.4.0","title":"gdalraster 1.4.0","text":"CRAN release: 2023-08-29 add dem_proc(): wrapper gdaldem command-line utility generate DEM derivatives add following set methods class GDALRaster: setMetadataItem(), setUnitType(), setScale(), setOffset() add GDALRaster$buildOverviews(): build raster overviews add GDALRaster$dim(): returns vector xsize, ysize, nbands transform_xy() inv_project(): pts can data frame matrix plot_raster() now accepts GDALRaster object data argument plot_raster(): make legend narrower add argument digits format legend labels raster data floating point add test suite code coverage report","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-130","dir":"Changelog","previous_headings":"","what":"gdalraster 1.3.0","title":"gdalraster 1.3.0","text":"CRAN release: 2023-06-29 GDALRaster::read(): data now read R integer type possible raster data type (#23) add fillNodata(): wrapper GDALFillNodata() GDAL Algorithms API add read_ds(): convenience wrapper GDALRaster$read() add plot_raster(): display raster data using base R graphics add get_cache_used(): wrapper GDALGetCacheUsed64() return value MB add GDALRaster$getOverviewCount(): return number overview layers available GDALRaster$info(): drop -nomd argument internal call bbox_from_wkt(): return NA creation geometry object fails (#27) fix GDALRaster$getMetadata(): requesting band-level metadata domain default metadata domain returning dataset-level metadata instead add vignette containing R port GDAL Raster API tutorial add description GDAL_RASTERIO_RESAMPLING configuration option documentation GDALRaster$read() add web article GDAL block cache configuration GDAL_CACHEMAX","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-120","dir":"Changelog","previous_headings":"","what":"gdalraster 1.2.0","title":"gdalraster 1.2.0","text":"CRAN release: 2023-05-28 starting v. 1.2.0, gdalraster require R >= 4.2.0 fix: check GEOS availability bbox geometry functions fix: wrong array dimensions read() (#5). Starting v. 1.2.0, read() return vector instead matrix better matches concept native GDAL-like interface (thanks Michael Sumner). add: has_geos() exported R add: srs_is_same() - wrapper OSRIsSame() GDAL Spatial Reference System C API documentation - minor edits throughout improve clarity","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-111","dir":"Changelog","previous_headings":"","what":"gdalraster 1.1.1","title":"gdalraster 1.1.1","text":"CRAN release: 2023-05-24 Initial public release.","code":""}]
