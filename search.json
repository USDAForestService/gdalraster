[{"path":"https://usdaforestservice.github.io/gdalraster/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"See General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Welcome","title":"Welcome","text":"’re glad ’re thinking contributing open source project USDA Forest Service, Rocky Montain Research Station. ’re unsure anything, just ask – submit issue pull request anyway. worst can happen ’ll politely asked change something. welcome friendly contributions.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"policies","dir":"","previous_headings":"","what":"Policies","title":"Welcome","text":"want ensure welcoming environment projects. staff follow General Services Administration (GSA)’s Technology Transformation Services (TTS) Code Conduct contributors .","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/CONTRIBUTING.html","id":"public-domain","dir":"","previous_headings":"","what":"Public domain","title":"Welcome","text":"project released MIT license. Portions project public domain within United States, copyright related rights waived worldwide CC0 1.0 Universal public domain dedication. See file inst/COPYRIGHTS details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 gdalraster authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/SECURITY.html","id":null,"dir":"","previous_headings":"","what":"Security Policy","title":"Security Policy","text":"Private vulnerability reporting enabled repository. package provides API bindings GDAL, large software library dealing hundreds file formats protocols. Please see GDAL security policy additional information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GDAL Block Cache","text":"GDAL implements read/write memory caching raster /O. Caching operates raster blocks may provide considerable improvement /O performance accessing pixel data across block boundaries. analytical context processing often row-oriented, means access relatively efficient even rows intersect many tiles raster arranged square blocks (opposed blocks arranged rows). Consideration caching mechanism helpful scaling /O large datasets need processed many chunks. article describe operation caching mechanism, relative performance accessing data row tile relation different raster block arrangements. Implications configuring cache memory size GDAL_CACHEMAX setting described. Focus reading pixel data (analytical context), similar concepts apply writing well.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"relative-performance","dir":"Articles","previous_headings":"","what":"Relative performance","title":"GDAL Block Cache","text":"test dataset contains 16-bit integer elevation values 30-m pixel resolution conterminous US (LANDFIRE Program, https://www.landfire.gov/). version “LF 2020 [LF 2.2.0]” available 8.4 GB download. download includes raster overviews, elevation raster 6.8 GB GeoTIFF file using LZW compression 128 x 128 tiles. direct download link LF 2020 elevation : https://landfire.gov/bulk/downloadfile.php?FNAME=US_Topo_2020-LF2020_Elev_220_CONUS.zip&TYPE=landfire Tests run Dell XPS 13 laptop Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz SSD, Ubuntu 20.04.6, R 4.3.0, gdalraster 1.2.1 (dev), GDAL 3.4.3. Open elevation dataset get parameters: first test reads pixels raster row. tile size 128 x 128 pixels, row intersects 1222 raster blocks (156335 / 128 = 1221.4, last block incomplete). test reflects performance implications GDAL read-ahead caching: comparison, read data raster arranged blocks whole rows (efficient row-level access). gdalraster::createCopy() copies raster dataset optional changes format. extent, number bands, data type, projection, geotransform copied source raster: creates “striped” tif raster blocks arranged row-level access (TILED=default creation option GTiff format driver, https://gdal.org/drivers/raster/gtiff.html#creation-issues). resulting file larger 10.6 GB vs. 6.8 GB, since compression efficient strips vs. tiles. Substituting new file (f2) test gives following time read pixels row: final test reads block original tiled raster distributed LANDFIRE. read square blocks need calculate row/column offsets x/y sizes tile, including incomplete tiles along right bottom edges. Package stars provides helper function use . stars represents raster data using R’s 1-based indexing column-major array order (raster rows array columns R). Accounting differences native GDAL indexing, get matrix block boundaries using: terms expected efficiency, reading tiled raster block similar reading striped raster row (reading block boundaries, block caching involved). difference striped tif contains fewer larger blocks (101538 blocks, 156335 pixels per block), tiled tif contains order magnitude blocks smaller (970268 blocks, 16384 pixels per block). test uses original LANDFIRE elevation file (f) read pixels tile:","code":"library(gdalraster)  f = \"LC20_Elev_220.tif\"   ds = new(GDALRaster, f, read_only = TRUE) ncols = ds$getRasterXSize() nrows = ds$getRasterYSize() print(paste(\"Size is\", ncols, \"x\",  nrows))  # 1.587394e+10 pixels #> [1] \"Size is 156335 x 101538\"  ds$getMetadata(band=0, domain=\"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\" \"INTERLEAVE=BAND\"  ds$getBlockSize(band=1) #> [1] 128 128  ds$getDataTypeName(band=1) #> [1] \"Int16\" gdalraster_read = function(row) {   r = ds$read(band=1, xoff=0, yoff=row,                xsize=ncols, ysize=1,                out_xsize=ncols, out_ysize=1)   ## process pixels, possibly write output...   return() }  ## Test 1 ## original tiled raster, reading by row (across block boundaries)  system.time( lapply(0:(nrows-1), gdalraster_read) ) #>    user  system elapsed  #> 239.546  14.152 256.908  ds$close() f2 = \"LC20_Elev_220_striped.tif\" options = c(\"COMPRESS=LZW\", \"TILED=NO\", \"BLOCKYSIZE=1\", \"BIGTIFF=YES\") gdalraster::createCopy(\"GTiff\", f2, f, options=options)  ds2 = new(GDALRaster, f2, read_only = TRUE) ds2$getBlockSize(band=1) #> [1] 156335      1  ds2$close() ## Test 2 ## striped tif, reading on block boundaries (cache not involved)  system.time( lapply(0:(nrows-1), gdalraster_read) ) #>    user  system elapsed #> 241.329   6.061 247.892 library(stars)  r = read_stars(f, proxy = TRUE) nrows = nrow(r) ncols = ncol(r) blocks = st_tile(nrows, ncols, 128, 128) blocks[, 1:2] = blocks[, 1:2] - 1L  nrow(blocks) #> [1] 970268 ## Test 3 ## original tiled raster, reading on block boundaries (cache not involved)  system.time({   for (i in seq_len(nrow(blocks))) {     ds$read(1, blocks[i, 1], blocks[i, 2], blocks[i, 3], blocks[i, 4],         blocks[i, 3], blocks[i, 4])     }   }) #>    user  system elapsed  #> 244.919   7.818 258.616"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"GDAL Block Cache","text":"GDAL block caching enables reading large tiled raster efficiently row (1.59e+10 total pixels test dataset). row LANDFIRE tiled raster intersects 1222 blocks size 128 x 128. intersected block read file, decoded LZW compression, placed cache memory. Data successive read() intersects block retrieved cache. Caching intersected blocks case requires 128 x 128 x 2 bytes = 32768 bytes per block, 32768 x 1222 = 40042496 bytes, approximately 40 MB happens default cache size. decoded block data row can held cache case, meaning 1 every 128 row-level read() involves retrieval file decoding compressed blocks. 127/128 provided cache.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"configuring-cache-size","dir":"Articles","previous_headings":"","what":"Configuring cache size","title":"GDAL Block Cache","text":"Size block cache can set GDAL_CACHEMAX configuration option, e.g., /O involves block caching large datasets may require setting GDAL_CACHEMAX larger default 40 MB. LANDFIRE elevation raster tiled 256 x 256, block require 65536 x 2 = 131072 bytes 16-bit data. cache size needed hold intersected blocks row approximately 160.2 MB. Similarly, cache size configured case multiple large rasters need read simultaneously processing. Note cache memory generally flushed dataset closing. behavior described assumes GDAL dataset opened , required /O completed closing dataset. normally case using GDAL API via gdalraster bindings (object class gdalraster::GDALRaster encapsulates GDALDataset object associated GDALRasterBand objects underlying API). also worth noting without block caching mechanism, possible read tiled elevation raster row reasonable time. can checked repeating Test 1 cache disabled:","code":"gdalraster::set_config_option(\"GDAL_CACHEMAX\", \"200\") ## Test 4 ## original tiled raster, reading by row (across block boundaries) ## cache disabled only for testing  set_config_option(\"GDAL_CACHEMAX\", \"0\")  system.time( lapply(0:(nrows-1), gdalraster_read) ) #> ^C #> Timing stopped at: 3650 42.97 3694  # killed with ctrl-c  ## reset to default set_config_option(\"GDAL_CACHEMAX\", \"40\")  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/articles/gdal-block-cache.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"GDAL Block Cache","text":"https://gdal.org/development/rfc/rfc26_blockcache.htmlhttps://gdal.org/user/configoptions.htmlhttps://gdal.org/doxygen/classGDALRasterBlock.html","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"GDAL see: https://github.com/OSGeo/gdal/graphs/contributors Chris Toney. Author, maintainer. Frank Warmerdam. Contributor, copyright holder.            GDAL API/documentation; src/progress_r.cpp /gdal/port/cpl_progress.cpp Even Rouault. Contributor, copyright holder.            GDAL API/documentation Marius Appel. Contributor, copyright holder.            configure.ac based https://github.com/appelmar/gdalcubes Daniel James. Contributor, copyright holder.            Boost combine hashes method Peter Dimov. Contributor, copyright holder.            Boost combine hashes method","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Toney C (2023). gdalraster: R Bindings 'Geospatial Data Abstraction Library' Raster API. USDA Forest Service, Rocky Mountain Research Station, Missoula, MT, USA. https://usdaforestservice.github.io/gdalraster/.","code":"@Manual{,   title = {gdalraster: R Bindings to the 'Geospatial Data Abstraction Library' Raster API},   author = {Chris Toney},   year = {2023},   organization = {USDA Forest Service, Rocky Mountain Research Station},   address = {Missoula, MT, USA},   url = {https://usdaforestservice.github.io/gdalraster/}, }"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bindings to the Geospatial Data Abstraction Library Raster API","text":"gdalraster R interface Raster API Geospatial Data Abstraction Library (GDAL). Calling signatures resemble native C, C++ Python APIs provided GDAL project. Bindings GDAL implemented class GDALRaster along several related stand-alone functions. support: manual creation uninitialized raster datasets creation existing raster template read/set raster dataset parameters low-level /O virtual raster (VRT) virtual subsetting, resampling kernel filtering access gdalwarp utility reprojection coordinate transformation spatial reference convenience functions Additional functionality includes: class RunningStats calculates mean variance one pass, tracks min, max, sum, count (.e., summary statistics data stream). input data values stored memory, class can used compute statistics large data streams. class CmbTable identifies counts unique combinations integer values using hash table. combine() overlays multiple rasters unique ID assigned unique combination input values. Pixel counts unique combination obtained, combination IDs optionally written output raster. calc() evaluates R expression pixel raster layer stack layers. Individual pixel coordinates available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude. gdalraster may suitable applications primarily need low-level raster /O prefer native GDAL-like calling. additional functionality somewhat aimed thematic data analysis may utility.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bindings to the Geospatial Data Abstraction Library Raster API","text":"Install stable version CRAN: install development version GitHub:","code":"install.packages(\"gdalraster\") ## install.packages(\"devtools\") devtools::install_github(\"USDAForestService/gdalraster\")"},{"path":"https://usdaforestservice.github.io/gdalraster/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bindings to the Geospatial Data Abstraction Library Raster API","text":"https://usdaforestservice.github.io/gdalraster/reference/","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for counting unique combinations of integers — CmbTable-class","title":"Class for counting unique combinations of integers — CmbTable-class","text":"CmbTable implements hash table vector integers key, count occurrences unique integer combination value. unique ID assigned unique combination input values.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for counting unique combinations of integers — CmbTable-class","text":"keyLen number integer values comprising combination. varNames Character vector names variables combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class for counting unique combinations of integers — CmbTable-class","text":"object class CmbTable. Contains hash table vector keyLen integers key count occurrences unique integer combination value, along methods operate table described Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"cmb <- new(CmbTable, keyLen, varNames)  ## Methods (see Details) cmb$update(int_cmb, incr) cmb$updateFromMatrix(int_cmbs, incr) cmb$asDataFrame()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for counting unique combinations of integers — CmbTable-class","text":"new(CmbTable, keyLen, varNames) Constructor. Returns object class CmbTable. $update(int_cmb, incr) Updates hash table integer combination numeric vector int_cmb (coerced integer truncation). combination exists table, count incremented incr. combination found table, inserted count set incr. Returns unique ID assigned combination. Combination IDs sequential integers starting 1. $updateFromMatrix(int_cmbs, incr) method $update() numeric matrix integer combinations int_cmbs (coerced integer truncation). matrix arranged column vector forming integer combination. example, rows matrix one row set keyLen rasters read extent pixel resolution (.e., row--row raster overlay). method calls $update() combination (column int_cmbs), incrementing count incr existing combinations, inserting new combinations count set incr. Returns numeric vector length ncol(int_cmbs) containing IDs assigned combinations. $asDataFrame() Returns CmbTable data frame column cmbid containing unique combination IDs, column count containing counts occurrences, keyLen columns named varNames containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/CmbTable-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for counting unique combinations of integers — CmbTable-class","text":"","code":"m <- matrix(c(1,2,3,1,2,3,4,5,6,1,3,2,4,5,6,1,1,1), 3, 6, byrow=FALSE) row.names(m) <- c(\"v1\",\"v2\",\"v3\") print(m) #>    [,1] [,2] [,3] [,4] [,5] [,6] #> v1    1    1    4    1    4    1 #> v2    2    2    5    3    5    1 #> v3    3    3    6    2    6    1 cmb <- new(CmbTable, 3, row.names(m)) cmb$updateFromMatrix(m, 1) #> [1] 1 1 2 3 2 4 cmb$asDataFrame() #>   cmbid count v1 v2 v3 #> 1     4     1  1  1  1 #> 2     3     1  1  3  2 #> 3     2     2  4  5  6 #> 4     1     2  1  2  3 cmb$update(c(4,5,6), 1) #> [1] 2 cmb$update(c(1,3,5), 1) #> [1] 5 cmb$asDataFrame() #>   cmbid count v1 v2 v3 #> 1     5     1  1  3  5 #> 2     4     1  1  1  1 #> 3     3     1  1  3  2 #> 4     2     3  4  5  6 #> 5     1     2  1  2  3"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":null,"dir":"Reference","previous_headings":"","what":"List of default nodata values by raster data type — DEFAULT_NODATA","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"values currently used gdalraster nodata value needed specified:","code":"list(\"Byte\"= 255, \"UInt16\"= 65535, \"Int16\"= -32767,          \"UInt32\"= 4294967293, \"Int32\"= -2147483647,           \"Float32\"= -99999.0,           \"Float64\"= -99999.0)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"","code":"DEFAULT_NODATA"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/DEFAULT_NODATA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of default nodata values by raster data type — DEFAULT_NODATA","text":"object class list length 7.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"GDALRaster provides interface accessing raster dataset via GDAL calling methods underlying GDALDataset, GDALDriver GDALRasterBand objects. See https://gdal.org/api/index.html details GDAL API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"filename Character string containing file name raster dataset open, full path relative current working directory. cases, filename may refer physical file, instead contain format-specific information access dataset (GDAL raster format descriptions: https://gdal.org/drivers/raster/index.html). read_only Logical. TRUE open dataset read-, FALSE open write access.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"object class GDALRaster contains pointer opened dataset, methods operate dataset described Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"described , $read() method perform automatic resampling specified output size (out_xsize * out_ysize) different size region read (xsize * ysize). case, GDAL_RASTERIO_RESAMPLING configuration option also defined override default resampling one BILINEAR, CUBIC, CUBICSPLINE, LANCZOS, AVERAGE MODE (see set_config_option()).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"","code":"ds <- new(GDALRaster, filename, read_only)  ## Methods (see Details) ds$getFilename() ds$open(read_only) ds$isOpen()  ds$info()  ds$getDriverShortName() ds$getDriverLongName()  ds$getRasterXSize() ds$getRasterYSize() ds$getGeoTransform() ds$setGeoTransform(transform) ds$getProjectionRef() ds$setProjection(projection) ds$bbox() ds$res()  ds$getRasterCount() ds$getBlockSize(band) ds$getDataTypeName(band) ds$getStatistics(band, approx_ok, force) ds$getNoDataValue(band) ds$setNoDataValue(band, nodata_value) ds$deleteNoDataValue(band) ds$getUnitType(band) ds$getScale(band) ds$getOffset(band)  ds$getMetadata(band, domain) ds$getMetadataItem(band, mdi_name, domain)  ds$read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) ds$write(band, xoff, yoff, xsize, ysize, rasterData) ds$fillRaster(value, ivalue)  ds$getChecksum(band, xoff, yoff, xsize, ysize)  ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"new(GDALRaster, filename, read_only) Constructor. Returns object class GDALRaster. $getFilename() Returns character string containing filename associated GDALRaster object. $open(read_only) (Re-)opens raster dataset existing filename. Use method open dataset closed using $close(). May used re-open dataset different read/write access (read_only set TRUE FALSE). method first close open dataset, required call $close() explicitly case. return value, called side effects. $isOpen() Returns logical indicating whether associated raster dataset open. $info() Prints various information raster dataset console (return value, called side effect ). Equivalent output gdalinfo command-line utility (gdalinfo -nomd -norat -noct filename). Intended informational convenience function. $getDriverShortName() Returns short name raster format driver (e.g., \"HFA\"). $getDriverLongName() Returns long name raster format driver (e.g., \"Erdas Imagine Images (.img)\"). $getRasterXSize() Returns number pixels along x dimension. $getRasterYSize() Returns number pixels along y dimension. $getGeoTransform() Returns affine transformation coefficients transforming pixel/line raster space (column/row) projection coordinate space (geospatial x/y). return value numeric vector length six. See https://gdal.org/tutorials/geotransforms_tut.html details affine transformation. 1-based indexing R, geotransform vector contains (map units raster spatial reference system): $setGeoTransform(transform) Sets affine transformation coefficients dataset. transform numeric vector length six. Returns logical TRUE success FALSE geotransform set. $getProjectionRef() Returns coordinate reference system raster OpenGIS WKT format string. empty string returned projection definition available. $setProjection(projection) Sets projection reference dataset. projection string OGC WKT format. Returns logical TRUE success FALSE projection set. $bbox() Returns numeric vector length four containing bounding box (xmin, ymin, xmax, ymax) assuming north-raster. $res() Returns numeric vector length two containing resolution (pixel width, pixel height positive values) assuming north-raster. $getRasterCount() Returns number raster bands dataset. methods described operate individual bands, band argument integer band number (1-based). $getBlockSize(band) Returns integer vector length two (Xsize, Ysize) containing \"natural\" block size band. GDAL concept natural block size rasters applications can organize data access efficiently file formats. natural block size block size efficient accessing format. many formats simply whole row case block Xsize $getRasterXSize() block Ysize 1. However, tiled images block size typically tile size. Note X Y block sizes divide image size evenly, meaning right bottom edge blocks may incomplete. $getDataTypeName(band) Returns name pixel data type band. possible data types : raster formats including GeoTIFF (GTiff) Erdas Imagine .img (HFA) support sub-byte data types. Rasters can created data types specifying NBITS=n creation option n=1...7 GTiff n=1/2/4 HFA. cases, $getDataTypeName() reports apparent type Byte. GTiff also supports n=9...15 (UInt16 type) n=17...31 (UInt32 type), n=16 accepted Float32 generate half-precision floating point values. $getStatistics(band, approx_ok, force) Returns numeric vector length four containing minimum, maximum, mean standard deviation pixel values band (excluding nodata pixels). raster formats cache statistics allowing fast retrieval first request. approx_ok: TRUE: Approximate statistics sufficient, case overviews subset raster tiles may used computing statistics. FALSE: pixels read used compute statistics (computation forced). force: TRUE: raster scanned compute statistics. computed, statistics generally “set” back raster band format supports caching statistics. (Note: ComputeStatistics() GDAL API called automatically . change behavior GetStatistics() API, definitive force.) FALSE: Results returned can done quickly (.e., without scanning raster, typically using pre-existing STATISTICS_xxx metadata items). NAs returned statistics obtained quickly. $getNoDataValue(band) Returns nodata value band one exists. generally special value defined mark pixels valid data. NA returned nodata value defined band. raster formats support designated nodata value. $setNoDataValue(band, nodata_value) Sets nodata value band. nodata_value numeric value defined nodata marker. Depending format, changing nodata value may may effect pixel values raster just created (often ). thus advised call $fillRaster() explicitly intent initialize raster nodata value. case, changing existing nodata value, one already exists initialized dataset, effect pixels whose values matched previous nodata value. Returns logical TRUE success FALSE nodata value set. $deleteNoDataValue(band) Removes nodata value band. affects definition nodata value raster formats support one (modify pixel values). return value, called side effects. error raised nodata value removed. $getUnitType(band) Returns name unit type pixel values band (e.g., \"m\" \"ft\"). empty string \"\" returned units available. $getScale(band) Returns pixel value scale (units value = (raw value * scale) + offset) band. value (combination getOffset() value) can used transform raw pixel values units returned getUnitType(). Returns NA scale value defined band. $getOffset(band) Returns pixel value offset (units value = (raw value * scale) + offset) band. value (combination getScale() value) can used transform raw pixel values units returned getUnitType(). Returns NA offset value defined band. $getMetadata(band, domain) Returns character vector metadata name=value pairs exist specified domain, \"\" (empty string) metadata items domain (metadata context GDAL Raster Data Model: https://gdal.org/user/raster_data_model.html). Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve metadata default domain. $getMetadataItem(band, mdi_name, domain) Returns value specific metadata item named mdi_name specified domain, \"\" (empty string) matching item found. Set band = 0 retrieve dataset-level metadata, integer band number retrieve band-level metadata. Set domain = \"\" (empty string) retrieve item default domain. $read(band, xoff, yoff, xsize, ysize, out_xsize, out_ysize) Reads region raster data band. method takes care pixel decimation / replication output size (out_xsize * out_ysize) different size region accessed (xsize * ysize). xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region accessed. ysize height pixels region accessed. out_xsize width output array desired region read (typically value xsize). out_ysize height output array desired region read (typically value ysize). Returns numeric complex vector containing values read. organized left right, top bottom pixel order. NA returned place nodata value raster dataset nodata value defined band. Data read R integer type possible raster data type (Byte, Int8, Int16, UInt16, Int32), otherwise type double (UInt32, Float32, Float64). rescaling data performed (see $getScale() $getOffset() ). error raised read operation fails. $write(band, xoff, yoff, xsize, ysize, rasterData) Writes region raster data band. xoff pixel (column) offset top left corner region band accessed (zero start left side). yoff line (row) offset top left corner region band accessed (zero start top). Note raster row/column offsets use 0-based indexing. xsize width pixels region write. ysize height pixels region write. rasterData numeric complex vector containing values write. organized left right, top bottom pixel order. NA rasterData replaced suitable nodata value prior writing (see $getNoDataValue() $setNoDataValue() ). error raised operation fails (return value). $fillRaster(band, value, ivalue) Fills band constant value. Used clear band specified default value. value fill value (real component). ivalue imaginary component fill value raster complex data type. Set ivalue = 0 real data types. return value, called side effects. $getChecksum(band, xoff, yoff, xsize, ysize) Returns 16-bit integer (0-65535) checksum region raster data band. Floating point data converted 32-bit integer decimal portions raster data affect checksum. Real imaginary components complex bands influence result. xoff pixel (column) offset window read. yoff line (row) offset window read. Raster row/column offsets use 0-based indexing. xsize width pixels window read. ysize height pixels window read. $close() Closes GDAL dataset (return value, called side effects). Calling $close() results proper cleanup, flushing pending writes. Forgetting close dataset opened update mode formats GTiff result unable open afterwards. GDALRaster object still available calling $close(). dataset can re-opened existing filename $open(read_only=TRUE) $open(read_only=FALSE).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/GDALRaster-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class encapsulating a subset of the GDAL Raster C API — GDALRaster-class","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, lcp_file, read_only=TRUE)  ## print information about the dataset to the console ds$info() #> Driver: LCP/FARSITE v.4 Landscape File (.lcp) #> Files: /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.lcp #>        /home/runner/work/_temp/Library/gdalraster/extdata/storm_lake.prj #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]], #>             ID[\"EPSG\",6269]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433]]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"Degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]], #>         ID[\"EPSG\",16012]], #>     CS[Cartesian,2], #>         AXIS[\"easting\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]], #>         AXIS[\"northing\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1, #>                 ID[\"EPSG\",9001]]]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Elevation #> Band 2 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Slope #> Band 3 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Aspect #> Band 4 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Fuel models #> Band 5 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy cover #> Band 6 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy height #> Band 7 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy base height #> Band 8 Block=143x1 Type=Int16, ColorInterp=Undefined #>   Description = Canopy bulk density  ## retrieve the raster format name ds$getDriverShortName() #> [1] \"LCP\" ds$getDriverLongName() #> [1] \"FARSITE v.4 Landscape File (.lcp)\"  ## retrieve dataset parameters ds$getRasterXSize() #> [1] 143 ds$getRasterYSize() #> [1] 107 ds$getGeoTransform() #> [1]  323476.1      30.0       0.0 5105082.0       0.0     -30.0 ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / UTM zone 12N\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-111],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$res() #> [1] 30 30  ## retrieve the number of bands and some band-level parameters ds$getRasterCount() #> [1] 8 ds$getBlockSize(band=1) #> [1] 143   1 ds$getDataTypeName(band=1) #> [1] \"Int16\" ds$getNoDataValue(band=1) #> [1] NA  ## LCP driver reports several dataset- and band-level metadata ## see the format description at https://gdal.org/drivers/raster/lcp.html ## set band=0 to retrieve dataset-level metadata ## set domain=\"\" (empty string) for the default metadata domain ds$getMetadata(band=0, domain=\"\") #> [1] \"DESCRIPTION=LCP file created by GDAL.\" #> [2] \"LATITUDE=46\"                           #> [3] \"LINEAR_UNIT=Meters\"                     ## retrieve metadata for a band as a vector of name=value pairs ds$getMetadata(band=4, domain=\"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           ## retrieve the value of a specific metadata item ds$getMetadataItem(band=2, mdi_name=\"SLOPE_UNIT_NAME\", domain=\"\") #> [1] \"Degrees\"  ## read one row of pixel values from band 1 (elevation) ## raster row/column index are 0-based ## the upper left corner is the origin ## read the tenth row: ncols <- ds$getRasterXSize() rowdata <- ds$read(band=1, xoff=0, yoff=9,                      xsize=ncols, ysize=1,                      out_xsize=ncols, out_ysize=1) dim(rowdata) #> NULL head(rowdata) #> [1] -9999 -9999 -9999  2456  2466  2479  ds$close()  ## create a new raster using lcp_file as a template new_file <- paste0(tempdir(), \"/\", \"storml_newdata.tif\") rasterFromRaster(srcfile = lcp_file,                  dstfile = new_file,                  nbands = 1,                  dtName = \"Byte\",                  init = -9999) #> Initializing destination raster... #> Done. ds_new <- new(GDALRaster, new_file, read_only=FALSE)  ## write random values to all pixels set.seed(42) ncols <- ds_new$getRasterXSize() nrows <- ds_new$getRasterYSize() for (row in 0:(nrows-1)) {     rowdata <- round(runif(ncols, 0, 100))     dim(rowdata) <- c(1, ncols)     ds_new$write(band=1, xoff=0, yoff=row, xsize=ncols, ysize=1, rowdata) }  ## re-open in read-only mode when done writing ## this will ensure flushing of any pending writes (implicit $close) ds_new$open(read_only=TRUE)  ## getStatistics returns min, max, mean, sd, and sets stats in the metadata ds_new$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 100.00000  49.90667  29.05491 ds_new$getMetadataItem(band=1, \"STATISTICS_MEAN\", \"\") #> [1] \"49.906672766486\"  ## close the dataset for proper cleanup ds_new$close()  ## checksum LCP band 1 ds$open(read_only=TRUE) ncols <- ds$getRasterXSize() nrows <- ds$getRasterYSize() ds$getChecksum(band=1, xoff=0, yoff=0, xsize=ncols, ysize=nrows)   # 28017 #> [1] 28017 ds$close()  # \\donttest{ ## using a GDAL Virtual File System handler '/vsicurl/' ## see: https://gdal.org/user/virtual_file_systems.html  web_file <- \"/vsicurl/https://raw.githubusercontent.com\" web_file <- paste0(web_file, \"/django/django/main/tests/gis_tests/\") web_file <- paste0(web_file, \"data/rasters/raster.tif\")  ds_url <- new(GDALRaster, web_file, read_only=TRUE) ds_url$info() #> Driver: GTiff/GeoTIFF #> Files: /vsicurl/https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/rasters/raster.tif #> Size is 163, 174 #> Coordinate System is: #> PROJCRS[\"NAD83 / Florida GDL Albers\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"Florida GDL Albers (meters)\", #>         METHOD[\"Albers Equal Area\", #>             ID[\"EPSG\",9822]], #>         PARAMETER[\"Latitude of false origin\",24, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-84, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",24, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",31.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",400000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"State-wide spatial data management.\"], #>         AREA[\"United States (USA) - Florida.\"], #>         BBOX[24.41,-87.63,31.01,-79.97]], #>     ID[\"EPSG\",3086]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (511700.468070655711927,435103.377123198588379) #> Pixel Size = (100.000000000000000,-100.000000000000000) #> Corner Coordinates: #> Upper Left  (  511700.468,  435103.377) ( 82d51'46.16\"W, 27d55' 1.53\"N) #> Lower Left  (  511700.468,  417703.377) ( 82d51'52.04\"W, 27d45'37.50\"N) #> Upper Right (  528000.468,  435103.377) ( 82d41'48.81\"W, 27d54'56.30\"N) #> Lower Right (  528000.468,  417703.377) ( 82d41'55.54\"W, 27d45'32.28\"N) #> Center      (  519850.468,  426403.377) ( 82d46'50.64\"W, 27d50'16.99\"N) #> Band 1 Block=163x50 Type=Byte, ColorInterp=Gray #>   NoData Value=15 ds_url$close() # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to calculate mean and variance in one pass — RunningStats-class","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"RunningStats computes summary statistics data stream efficiently. Mean variance calculated Welford's online algorithm (https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance). min, max, sum count also tracked. input data values stored memory, class can used compute statistics large data streams.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"na_rm Logical. TRUE remove NA input data FALSE retain NA.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"object class RunningStats. RunningStats object maintains current minimum, maximum, mean, variance, sum count values read stream. can updated repeatedly new values (.e., chunks data read input stream), memory footprint negligible. Class methods updating new values retrieving current values statistics described Details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"rs <- new(RunningStats, na_rm)  ## Methods (see Details) rs$update(newvalues) rs$get_count() rs$get_mean() rs$get_min() rs$get_max() rs$get_sum() rs$get_var() rs$get_sd() rs$reset()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"new(RunningStats, na_rm) Constructor. Returns object class RunningStats. $update(newvalues) Updates RunningStats object numeric vector newvalues (.e., chunk values data stream). return value, called side effects. $get_count() Returns count values received data stream. $get_mean() Returns mean values received data stream. $get_min() Returns minimum value received data stream. $get_max() Returns maximum value received data stream. $get_sum() Returns sum values received data stream. $get_var() Returns variance values data stream (denominator n - 1). $get_sd() Returns standard deviation values data stream (denominator n - 1). $reset() Clears RunningStats object initialized state (count = 0). return value, called side effects.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/RunningStats-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class to calculate mean and variance in one pass — RunningStats-class","text":"","code":"set.seed(42)  rs <- new(RunningStats, na_rm=TRUE) chunk <- runif(1000) rs$update(chunk) object.size(rs) #> 704 bytes  rs$get_count() #> [1] 1000 length(chunk) #> [1] 1000  rs$get_mean() #> [1] 0.4882555 mean(chunk) #> [1] 0.4882555  rs$get_min() #> [1] 0.0002388966 min(chunk) #> [1] 0.0002388966  rs$get_max() #> [1] 0.9984908 max(chunk) #> [1] 0.9984908  rs$get_var() #> [1] 0.08493159 var(chunk) #> [1] 0.08493159  rs$get_sd() #> [1] 0.2914302 sd(chunk) #> [1] 0.2914302  # \\donttest{ ## 10^9 values read in 10,000 chunks ## should take under 2 minutes on typical PC hardware for (i in 1:1e4) {   chunk <- runif(1e5)   rs$update(chunk) } rs$get_count() #> [1] 1000001000 rs$get_mean() #> [1] 0.5000044 rs$get_var() #> [1] 0.08333479  object.size(rs) #> 704 bytes # }"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"bbox_from_wkt() returns bounding box WKT 2D geometry (e.g., LINE, POLYGON, MULTIPOLYGON).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"","code":"bbox_from_wkt(wkt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"wkt Character. OGC WKT string simple feature 2D geometry.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"Numeric vector length four containing xmin, ymin, xmax, ymax geometry specified wkt.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_from_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the bounding box of a geometry specified in OGC WKT format. — bbox_from_wkt","text":"","code":"bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2  5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5,  325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_from_wkt(bnd) #> [1]  323794.2 5102885.8  326420.0 5104929.4"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounding box intersection / union — bbox_intersect","title":"Bounding box intersection / union — bbox_intersect","text":"bbox_intersect() returns bounding box intersection, bbox_union() returns bounding box union, input either raster file names list bounding boxes. inputs must projected coordinate system. functions require GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_intersect(x, as_wkt = FALSE)  bbox_union(x, as_wkt = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounding box intersection / union — bbox_intersect","text":"x Either character vector raster file names, list element bounding box numeric vector (xmin, ymin, xmax, ymax). as_wkt Logical. TRUE return bounding box polygon OGC WKT format, FALSE return numeric vector.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounding box intersection / union — bbox_intersect","text":"intersection (bbox_intersect()) union (bbox_union()) inputs. as_wkt = FALSE, numeric vector length four containing xmin, ymin, xmax, ymax. as_wkt = TRUE, character string containing OGC WKT bbox POLYGON. NA returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounding box intersection / union — bbox_intersect","text":"","code":"bbox_list <-list()  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) bbox_list[[1]] <- ds$bbox() ds$close()  b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds <- new(GDALRaster, b5_file, read_only=TRUE) bbox_list[[2]] <- ds$bbox() ds$close()  bnd <- \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2  5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5,  325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\" bbox_list[[3]] <- bbox_from_wkt(bnd)  print(bbox_list) #> [[1]] #> [1]  323476.1 5101872.0  327766.1 5105082.0 #>  #> [[2]] #> [1]  323400.9 5101815.8  327870.9 5105175.8 #>  #> [[3]] #> [1]  323794.2 5102885.8  326420.0 5104929.4 #>  bbox_intersect(bbox_list) #> [1]  323794.2 5102885.8  326420.0 5104929.4 bbox_union(bbox_list) #> [1]  323400.9 5101815.8  327870.9 5105175.8"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"bbox_to_wkt() returns WKT POLYGON string given bounding box. function requires GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"","code":"bbox_to_wkt(bbox)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"bbox Numeric vector length four containing xmin, ymin, xmax, ymax.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"Character string OGC WKT polygon. empty string returned GDAL built without GEOS library.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/bbox_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a bounding box to POLYGON in OGC WKT format. — bbox_to_wkt","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) bbox_to_wkt(ds$bbox()) #> [1] \"POLYGON ((323476.071970863 5105081.98303138,327766.071970863 5105081.98303138,327766.071970863 5101871.98303138,323476.071970863 5101871.98303138,323476.071970863 5105081.98303138))\" ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster calculation — calc","title":"Raster calculation — calc","text":"calc() evaluates R expression pixel raster layer stack layers. layer defined raster filename, band number, variable name use R expression. specified, band defaults 1 input raster. Variable names default LETTERS specified ((layer 1), B (layer 2), ...). input layers must extent cell size. projection read first raster list inputs. Individual pixel coordinates also available variables R expression, either x/y raster projected coordinate system inverse projected longitude/latitude.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster calculation — calc","text":"","code":"calc(   expr,   rasterfiles,   bands = NULL,   var.names = NULL,   dstfile = tempfile(\"rastcalc\", fileext = \".tif\"),   fmt = NULL,   dtName = \"Int16\",   out_band = NULL,   options = NULL,   nodata_value = NULL,   setRasterNodataValue = FALSE,   usePixelLonLat = FALSE,   write_mode = \"safe\" )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster calculation — calc","text":"expr R expression character string (e.g., \"+ B\"). rasterfiles Character vector source raster filenames. bands Integer vector band numbers use raster layer. var.names Character vector variable names use raster layer. dstfile Character filename output raster. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename specified. dtName Character name output data type (e.g., Byte, Int16, UInt16, Int32, UInt32, Float32). out_band Integer band number dstfile writing output. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). nodata_value Numeric value assign expr returns NA. setRasterNodataValue Logical. TRUE attempt set raster format nodata value nodata_value, FALSE set raster nodata value. usePixelLonLat Logical. TRUE, pixelX pixelY inverse projected geographic coordinates available pixelLon pixelLat expr (adds computation time). write_mode Character. Name file write mode output. One : safe - execution stops dstfile already exists (output written) overwrite - dstfile exists overwritten new file update - dstfile exists, attempt open update mode write output out_band","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster calculation — calc","text":"Returns output filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster calculation — calc","text":"variables expr vectors length raster Xsize (rows raster layers). expression return vector also length raster Xsize (output row). Two special variable names available expr default: pixelX pixelY provide pixel center coordinate projection units. usePixelLonLat = TRUE, pixel x/y coordinates also inverse projected longitude/latitude available expr pixelLon pixelLat (geographic coordinate system used input projection, read first input raster). refer specific bands multi-band file, repeat filename rasterfiles specify corresponding band numbers bands, along optional variable names var.names, example, Output written dstfile. update file already exists, set write_mode = \"update\" set out_band existing band number dstfile (new bands created dstfile).","code":"rasterfiles = c(\"multiband.tif\", \"multiband.tif\") bands = c(4, 5) var.names = c(\"B4\", \"B5\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster calculation — calc","text":"","code":"### Using pixel longitude/latitude  ## Hopkins bioclimatic index (HI) as described in: ## Bechtold, 2004, West. J. Appl. For. 19(4):245-251. ## Integrates elevation, latitude and longitude into an index of the  ## phenological occurrence of springtime. Here it is relativized to  ## mean values for an eight-state region in the western US. ## Positive HI means spring is delayed by that number of days relative  ## to the reference position, while negative values indicate spring is ## advanced. The original equation had elevation units as feet, so  ## converting m to ft in `expr`.  elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## expression to calculate HI expr <- \"round( ((ELEV_M * 3.281 - 5449) / 100) +                  ((pixelLat - 42.16) * 4) +                  ((-116.39 - pixelLon) * 1.25) )\"  ## calc() writes to a tempfile by default hi_file <- calc(expr = expr,                  rasterfiles = elev_file,                  var.names = \"ELEV_M\",                  dtName = \"Int16\",                 nodata_value = -32767,                  setRasterNodataValue = TRUE,                 usePixelLonLat = TRUE) #> Calculating from 1 input layer(s)... #> ================================================================================ #> Output written to: /tmp/Rtmp62AKat/rastcalc1c5e22c2dbdb.tif  ds <- new(GDALRaster, hi_file, read_only=TRUE) ## min, max, mean, sd ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 37.000000 57.000000 44.992721  4.370487 ds$close()   ### Calculate normalized difference vegetation index (NDVI)  ## Landast band 4 (red) and band 5 (near infrared): b4_file <- system.file(\"extdata/sr_b4_20200829.tif\", package=\"gdalraster\") b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\")  ## is nodata value set ds <- new(GDALRaster, b4_file, read_only=TRUE) ds$getNoDataValue(band=1)   # 0 #> [1] 0 ds$close() ds <- new(GDALRaster, b5_file, read_only=TRUE) ds$getNoDataValue(band=1)   # 0 #> [1] 0 ds$close()  ## 0 will be read as NA so don't need to handle zeros in expr expr <- \"(B5-B4)/(B5+B4)\" ndvi_file <- calc(expr = expr,                   rasterfiles = c(b4_file, b5_file),                   var.names = c(\"B4\", \"B5\"),                   dtName = \"Float32\",                   nodata_value = -32767,                   setRasterNodataValue = TRUE) #> Calculating from 2 input layer(s)... #> ================================================================================ #> Output written to: /tmp/Rtmp62AKat/rastcalc1c5e15a49d29.tif  ds <- new(GDALRaster, ndvi_file, read_only=TRUE) ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] -0.05663275  0.40972668  0.16745979  0.08068390 ds$close()   ### Reclassify a variable by rule set  ## Combine two raster layers and look for specific combinations. Then  ## recode to a new value by rule set. ## ## Based on example in: ##   Stratton, R.D. 2009. Guidebook on LANDFIRE fuels data acquisition,  ##   critique, modification, maintenance, and model calibration. ##   Gen. Tech. Rep. RMRS-GTR-220. U.S. Department of Agriculture,  ##   Forest Service, Rocky Mountain Research Station. 54 p. ## Context: Refine national-scale fuels data to improve fire simulation ##   results in localized applications. ## Issue: Areas with steep slopes (40+ degrees) were mapped as ##   GR1 (101; short, sparse dry climate grass) and  ##   GR2 (102; low load, dry climate grass) but were not carrying fire. ## Resolution: After viewing these areas in Google Earth, ##   NB9 (99; bare ground) was selected as the replacement fuel model.  ## look for combinations of slope >= 40 and FBFM 101 or 102 lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) var.names <- c(\"SLP\", \"FBFM\") bands <- c(2, 4) df <- combine(rasterfiles, var.names, bands) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(df) #> [1] 449 df_subset <- subset(df, SLP >= 40 & FBFM %in% c(101,102)) print(df_subset)       # twelve combinations meet the criteria #>     cmbid count SLP FBFM #> 8     423     2  44  102 #> 10    421     1  49  102 #> 13    409    15  41  102 #> 37    365     1  44  101 #> 45    420     3  43  102 #> 93    283    17  40  101 #> 160   417     4  42  101 #> 225   397    11  42  102 #> 338   328    16  40  102 #> 346   338    10  41  101 #> 364   418     3  47  102 #> 408   341     2  43  101 sum(df_subset$count)   # 85 total pixels #> [1] 85  ## recode these pixels to 99 (bare ground) ## the LCP driver does not support in-place write so make a copy as GTiff tif_file <- paste0(tempdir(), \"/\", \"storml_lndscp.tif\") createCopy(\"GTiff\", tif_file, lcp_file) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  expr <- \"ifelse( SLP >= 40 & FBFM %in% c(101,102), 99, FBFM)\" calc(expr = expr,      rasterfiles = c(lcp_file, lcp_file),      bands = c(2, 4),      var.names = c(\"SLP\", \"FBFM\"),      dstfile = tif_file,      out_band = 4,      write_mode = \"update\") #> Calculating from 2 input layer(s)... #> ================================================================================ #> Output written to: /tmp/Rtmp62AKat/storml_lndscp.tif  ## verify the ouput rasterfiles <- c(tif_file, tif_file) df <- combine(rasterfiles, var.names, bands) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. df_subset <- subset(df, SLP >= 40 & FBFM %in% c(101,102)) print(df_subset) #> [1] cmbid count SLP   FBFM  #> <0 rows> (or 0-length row.names) sum(df_subset$count) #> [1] 0  ## if LCP file format is needed: createCopy(tif_file, <new_lcp_file>)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster overlay for unique combinations — combine","title":"Raster overlay for unique combinations — combine","text":"combine() overlays multiple rasters unique ID assigned unique combination input values. input raster layers typically integer data types (floating point coerced integer truncation), must projection, extent cell size. Pixel counts unique combination obtained, combination IDs optionally written output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster overlay for unique combinations — combine","text":"","code":"combine(   rasterfiles,   var.names = NULL,   bands = NULL,   dstfile = NULL,   fmt = NULL,   dtName = \"UInt32\",   options = NULL )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster overlay for unique combinations — combine","text":"rasterfiles Character vector raster filenames combine. var.names Character vector length(rasterfiles) containing variable names raster layer. Defaults assigned var.names omitted. bands Numeric vector length(rasterfiles) containing band number use raster rasterfiles. Band 1 used input raster bands specified. dstfile Character. Optional output raster filename writing per-pixel combination IDs. output raster created (overwritten already exists). fmt Character. Output raster format name (e.g., \"GTiff\" \"HFA\"). dtName Character. Output raster data type name. Combination IDs sequential integers starting 1. data type output raster large enough accommodate potential number unique combinations input values (e.g., \"UInt16\" default \"UInt32\"). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs. (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster overlay for unique combinations — combine","text":"data frame column cmbid containing combination IDs, column count containing pixel counts combination, length(rasterfiles) columns named var.names containing integer values comprising unique combination.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raster overlay for unique combinations — combine","text":"specify input raster layers bands multi-band raster file, repeat filename rasterfiles provide corresponding band numbers bands. example: rasterToVRT() provides options virtual clipping, resampling pixel alignment, may helpful input rasters already aligned common extent cell size. output raster combination IDs written, user verify number combinations obtained exceed range output data type. Combination IDs sequential integers starting 1. Typical output data types unsigned types: Byte (0 255), UInt16 (0 65,535) UInt32 (default, 0 4,294,967,295). combine() can also run single raster layer obtain table pixel values counts.","code":"rasterfiles <- c(\"multi-band.tif\", \"multi-band.tif\", \"other.tif\") bands <- c(4, 5, 1) var.names <- c(\"multi_b4\", \"multi_b5\", \"other\")"},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster overlay for unique combinations — combine","text":"","code":"evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") evc_file <- system.file(\"extdata/storml_evc.tif\", package=\"gdalraster\") evh_file <- system.file(\"extdata/storml_evh.tif\", package=\"gdalraster\") rasterfiles <- c(evt_file, evc_file, evh_file) var.names <- c(\"veg_type\", \"veg_cov\", \"veg_ht\") df <- combine(rasterfiles, var.names) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. nrow(df) #> [1] 2083 df <- df[order(-df$count),] head(df, n = 20) #>      cmbid count veg_type veg_cov veg_ht #> 1345   115  2277     9016     100    100 #> 1131    19  1213     9018     100    100 #> 1410     1   876       NA      NA     NA #> 873    429   397     7292      11     11 #> 1745   116   209     9016      31     31 #> 1181     7   142     7046     159    115 #> 1108     8   112     7046     159    116 #> 1538    26    99     7046     159    114 #> 1724    75    78     7126     243    210 #> 1132   844    67     9018      31     31 #> 779    186    54     7046     110    108 #> 823    344    53     7126     243    209 #> 1213   146    47     7046     159    117 #> 808     42    44     7050     162    116 #> 645     15    39     7046     149    114 #> 923    821    37     7046     110    107 #> 1594   603    37     7126     243    211 #> 1273     2    36     7046     110    106 #> 1305   108    36     7126     243    208 #> 1447    68    36     7046     159    113  ## combine two bands from a multi-band file and write the combination IDs  ## to an output raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") rasterfiles <- c(lcp_file, lcp_file) bands <- c(4, 5) var.names <- c(\"fbfm\", \"tree_cov\") cmb_file <- paste0(tempdir(), \"/\", \"fbfm_cov_cmbid.tif\") options <- c(\"COMPRESS=LZW\") df <- combine(rasterfiles, var.names, bands, cmb_file, options = options) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. head(df) #>   cmbid count fbfm tree_cov #> 1    26    98  122       25 #> 2    24   397   98        0 #> 3    23    59  162       55 #> 4    25    14  183        0 #> 5    22    65  183       35 #> 6    19    34  162       75 ds <- new(GDALRaster, cmb_file, TRUE) ds$info() #> Driver: GTiff/GeoTIFF #> Files: /tmp/Rtmp62AKat/fbfm_cov_cmbid.tif #> Size is 143, 107 #> Coordinate System is: #> PROJCRS[\"NAD83 / UTM zone 12N\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"UTM zone 12N\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-111, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"North America - between 114°W and 108°W - onshore and offshore. Canada - Alberta; Northwest Territories; Nunavut; Saskatchewan. United States (USA) - Arizona; Colorado; Idaho; Montana; New Mexico; Utah; Wyoming.\"], #>         BBOX[31.33,-114,84,-108]], #>     ID[\"EPSG\",26912]] #> Data axis to CRS axis mapping: 1,2 #> Origin = (323476.071970863151364,5105081.983031376264989) #> Pixel Size = (30.000000000000000,-30.000000000000000) #> Corner Coordinates: #> Upper Left  (  323476.072, 5105081.983) (113d16'58.40\"W, 46d 4'35.44\"N) #> Lower Left  (  323476.072, 5101871.983) (113d16'54.12\"W, 46d 2'51.51\"N) #> Upper Right (  327766.072, 5105081.983) (113d13'38.83\"W, 46d 4'39.38\"N) #> Lower Right (  327766.072, 5101871.983) (113d13'34.65\"W, 46d 2'55.45\"N) #> Center      (  325621.072, 5103476.983) (113d15'16.50\"W, 46d 3'45.46\"N) #> Band 1 Block=143x14 Type=UInt32, ColorInterp=Gray ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new uninitialized raster — create","title":"Create a new uninitialized raster — create","text":"create() makes empty raster specified format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new uninitialized raster — create","text":"","code":"create(format, dst_filename, xsize, ysize, nbands, dataType, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new uninitialized raster — create","text":"format Raster format short name (e.g., \"GTiff\" \"HFA\"). dst_filename Filename create. xsize Integer width raster pixels. ysize Integer height raster pixels. nbands Integer number bands. dataType Character data type name. (e.g., common data types include Byte, Int16, UInt16, Int32, Float32). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new uninitialized raster — create","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new uninitialized raster — create","text":"","code":"new_file <- paste0(tempdir(), \"/\", \"newdata.tif\") create(\"GTiff\", new_file, 143, 107, 1, \"Int16\") ds <- new(GDALRaster, new_file, read_only=FALSE) ## EPSG:26912 - NAD83 / UTM zone 12N ds$setProjection(epsg_to_wkt(26912)) #> [1] TRUE gt <- c(323476.1, 30, 0, 5105082.0, 0, -30) ds$setGeoTransform(gt) #> [1] TRUE ds$setNoDataValue(band = 1, -9999) #> [1] TRUE ds$fillRaster(band = 1, -9999, 0) ## ... ## close the dataset when done ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy of a raster — createCopy","title":"Create a copy of a raster — createCopy","text":"createCopy() copies raster dataset, optionally changing format. extent, cell size, number bands, data type, projection, geotransform copied source raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy of a raster — createCopy","text":"","code":"createCopy(format, dst_filename, src_filename, strict = FALSE, options = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy of a raster — createCopy","text":"format Format short name output raster (e.g., \"GTiff\" \"HFA\"). dst_filename Filename create. src_filename Filename source raster. strict Logical. TRUE copy must strictly equivalent, normally FALSE indicating copy may adapt needed output format. options Optional list format-specific creation options vector \"NAME=VALUE\" pairs (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). APPEND_SUBDATASET=YES option can specified avoid prior destruction existing dataset.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy of a raster — createCopy","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/createCopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a copy of a raster — createCopy","text":"","code":"lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") tif_file <- paste0(tempdir(), \"/\", \"storml_lndscp.tif\") options <- c(\"COMPRESS=LZW\") createCopy(\"GTiff\", tif_file, lcp_file, options=options) #> 0...10...20...30...40...50...60...70...80...90...100 - done. file.size(lcp_file) #> [1] 252132 file.size(tif_file) #> [1] 108510 ds <- new(GDALRaster, tif_file, read_only=FALSE) ds$getMetadata(0, \"IMAGE_STRUCTURE\") #> [1] \"COMPRESSION=LZW\"  \"INTERLEAVE=PIXEL\" for (band in 1:ds$getRasterCount())     ds$setNoDataValue(band, -9999) ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3046.0000 2675.9713  133.0185 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"epsg_to_wkt() exports spatial reference EPSG code WKT format.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"","code":"epsg_to_wkt(epsg, pretty = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"epsg Integer EPSG code. pretty Logical. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/epsg_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spatial reference from EPSG code to OGC Well Known Text — epsg_to_wkt","text":"","code":"epsg_to_wkt(5070) #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"5070\\\"]]\" writeLines(epsg_to_wkt(5070, pretty=TRUE)) #> PROJCS[\"NAD83 / Conus Albers\", #>     GEOGCS[\"NAD83\", #>         DATUM[\"North_American_Datum_1983\", #>             SPHEROID[\"GRS 1980\",6378137,298.257222101, #>                 AUTHORITY[\"EPSG\",\"7019\"]], #>             AUTHORITY[\"EPSG\",\"6269\"]], #>         PRIMEM[\"Greenwich\",0, #>             AUTHORITY[\"EPSG\",\"8901\"]], #>         UNIT[\"degree\",0.0174532925199433, #>             AUTHORITY[\"EPSG\",\"9122\"]], #>         AUTHORITY[\"EPSG\",\"4269\"]], #>     PROJECTION[\"Albers_Conic_Equal_Area\"], #>     PARAMETER[\"latitude_of_center\",23], #>     PARAMETER[\"longitude_of_center\",-96], #>     PARAMETER[\"standard_parallel_1\",29.5], #>     PARAMETER[\"standard_parallel_2\",45.5], #>     PARAMETER[\"false_easting\",0], #>     PARAMETER[\"false_northing\",0], #>     UNIT[\"metre\",1, #>         AUTHORITY[\"EPSG\",\"9001\"]], #>     AXIS[\"Easting\",EAST], #>     AXIS[\"Northing\",NORTH], #>     AUTHORITY[\"EPSG\",\"5070\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(epsg_to_wkt(5070, pretty=TRUE)) #> PROJCRS[\"NAD83 / Conus Albers\", #>     BASEGEOGCRS[\"NAD83\", #>         DATUM[\"North American Datum 1983\", #>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>                 LENGTHUNIT[\"metre\",1]]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4269]], #>     CONVERSION[\"Conus Albers\", #>         METHOD[\"Albers Equal Area\", #>             ID[\"EPSG\",9822]], #>         PARAMETER[\"Latitude of false origin\",23, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8821]], #>         PARAMETER[\"Longitude of false origin\",-96, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8822]], #>         PARAMETER[\"Latitude of 1st standard parallel\",29.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8823]], #>         PARAMETER[\"Latitude of 2nd standard parallel\",45.5, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8824]], #>         PARAMETER[\"Easting at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8826]], #>         PARAMETER[\"Northing at false origin\",0, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8827]]], #>     CS[Cartesian,2], #>         AXIS[\"easting (X)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"northing (Y)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Data analysis and small scale data presentation for contiguous lower 48 states.\"], #>         AREA[\"United States (USA) - CONUS onshore - Alabama; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming.\"], #>         BBOX[24.41,-124.79,49.38,-66.91]], #>     ID[\"EPSG\",5070]] set_config_option(\"OSR_WKT_FORMAT\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL version — gdal_version","title":"Get GDAL version — gdal_version","text":"gdal_version() returns runtime version information.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL version — gdal_version","text":"Character vector length four containing: \"–version\" - one line version message, e.g., “GDAL 3.6.3, released 2023/03/12” \"GDAL_VERSION_NUM\" - formatted string, e.g., “30603000” GDAL 3.6.3.0 \"GDAL_RELEASE_DATE\" - formatted string, e.g., “20230312” \"GDAL_RELEASE_NAME\" - e.g., “3.6.3”","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdal_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL version — gdal_version","text":"","code":"gdal_version() #> [1] \"GDAL 3.4.1, released 2021/12/27\" \"3040100\"                         #> [3] \"20211227\"                        \"3.4.1\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bindings to the GDAL Raster API — gdalraster-package","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"gdalraster interface Geospatial Data Abstraction    Library (GDAL) low level raster /O. Calling signatures resemble    native C, C++ Python APIs provided GDAL project.   See https://gdal.org/api/index.html details GDAL Raster API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"Core functionality contained GDALRaster class several    GDAL related stand-alone functions: class GDALRaster allows opening raster dataset    calling methods Dataset, Driver RasterBand objects    underlying API (get/set parameters, read/write pixel data). raster creation: create, createCopy,    rasterFromRaster virtual raster: rasterToVRT reproject: warp geotransform conversion: inv_geotransform,    get_pixel_line coordinate transformation: transform_xy,    inv_project spatial reference convenience functions: epsg_to_wkt,    srs_to_wkt,srs_is_geographic, srs_is_projected geometry convenience functions: bbox_from_wkt,    bbox_to_wkt,bbox_intersect, bbox_union,    has_geos GDAL configuration: gdal_version,    get_config_option, set_config_option Additional functionality includes: class RunningStats calculates mean variance one    pass. min, max, sum, count also tracked (.e., summary    statistics data stream). class CmbTable implements hash table counting    unique combinations integer values. combine overlays multiple rasters unique ID    assigned unique combination input values. Pixel counts    unique combination obtained, combination IDs optionally    written output raster. calc evaluates R expression pixel    raster layer stack layers. Individual pixel coordinates available    variables R expression, either x/y raster projected    coordinate system inverse projected longitude/latitude.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"GDAL: https://github.com/OSGeo/gdal/graphs/contributors R interface/additional functionality: Chris Toney Maintainer: Chris Toney <chris.toney usda.gov>","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/gdalraster-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bindings to the GDAL Raster API — gdalraster-package","text":"Documentation several wrapper functions borrows GDAL API    documentation, Copyright 1998-2023, Frank Warmerdam, Even Rouault,    others, https://gdal.org/license.html. Sample datasets included package used examples    throughout documentation. sample data include LANDFIRE raster layers    describing terrain, vegetation wildland fuels (LF 2020 version,    https://landfire.gov/). Landsat C2 Analysis Ready Data    downloaded USGS Earth Explorer (https://earthexplorer.usgs.gov/). system.file() used examples access sample datasets.    enables code run regardless R installed. Users    normally give file names regular full path relative current    working directory.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GDAL configuration option — get_config_option","title":"Get GDAL configuration option — get_config_option","text":"get_config_option() gets value GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GDAL configuration option — get_config_option","text":"","code":"get_config_option(key)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GDAL configuration option — get_config_option","text":"key Character name configuration option.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GDAL configuration option — get_config_option","text":"Character. value (key, value) option previously set set_config_option(). empty string (\"\") returned key found.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GDAL configuration option — get_config_option","text":"","code":"## this option is set during initialization of the gdalraster package get_config_option(\"OGR_CT_FORCE_TRADITIONAL_GIS_ORDER\") #> [1] \"YES\""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"get_pixel_line() converts geospatial coordinates pixel/line (raster column, row numbers). upper left corner pixel raster origin (0,0) column, row increasing left right, top bottom.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"get_pixel_line(xy, gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"xy Numeric array geospatial x,y coordinates spatial reference system gt. gt Numeric vector length six. affine geotransform raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"Integer array raster pixel/line.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/get_pixel_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster pixel/line from geospatial x,y coordinates — get_pixel_line","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") ## id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 raster_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds <- new(GDALRaster, raster_file, TRUE) gt <- ds$getGeoTransform() get_pixel_line(as.matrix(pts[,-1]), gt) #>       [,1] [,2] #>  [1,]   39   57 #>  [2,]   23   68 #>  [3,]    1   58 #>  [4,]   58   52 #>  [5,]   74   90 #>  [6,]   94   38 #>  [7,]   68   31 #>  [8,]   92   85 #>  [9,]  141   20 #> [10,]   23   39 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Is GEOS available? — has_geos","title":"Is GEOS available? — has_geos","text":"has_geos() returns logical value indicating whether GDAL built GEOS library.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is GEOS available? — has_geos","text":"","code":"has_geos()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is GEOS available? — has_geos","text":"Logical. TRUE GEOS available, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/has_geos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is GEOS available? — has_geos","text":"","code":"has_geos() #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert geotransform — inv_geotransform","title":"Invert geotransform — inv_geotransform","text":"inv_geotransform() inverts vector geotransform coefficients. converts equation : raster pixel/line (column/row) -> geospatial x/y coordinate : geospatial x/y coordinate -> raster pixel/line (column/row)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert geotransform — inv_geotransform","text":"","code":"inv_geotransform(gt)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert geotransform — inv_geotransform","text":"gt Numeric vector length six containing geotransform invert.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert geotransform — inv_geotransform","text":"Numeric vector length six containing inverted geotransform. output vector contain NAs input geotransform uninvertable.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_geotransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invert geotransform — inv_geotransform","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, read_only=TRUE) gt <- ds$getGeoTransform() ds$close() invgt <- inv_geotransform(gt)  ptX = 324181.7 ptY = 5103901.4  ## for a point x, y in the spatial reference system of elev_file ## raster pixel (column number): pixel <- floor(invgt[1] +                invgt[2] * ptX +                invgt[3] * ptY)  ## raster line (row number): line <- floor(invgt[4] +               invgt[5] * ptX +               invgt[6] * ptY)  ## get_pixel_line() applies this conversion"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"inv_project() transforms geospatial x/y coordinates longitude/latitude geographic coordinate system used given projected spatial reference system. output long/lat can optionally set specific geographic coordinate system specifying well known name (see Details).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"inv_project(pts, srs, well_known_gcs = \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"pts Numeric array geospatial x/y coordinates srs Character string OGC WKT format specifying projected spatial reference system pts. well_known_gcs Optional character string containing supported well known name geographic coordinate system (see Details supported values).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"Numeric array longitude, latitude. error raised transformation performed.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"default, geographic coordinate system projection specified srs used. specific geographic coordinate system desired, well_known_gcs can set one values : returned array always longitude, latitude order (traditional GIS order) regardless axis order defined names . inv_project() included convenience function mainly internal use. See package sf full-featured coordinate transformation (https://r-spatial.github.io/sf/).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/inv_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse project geospatial x/y coordinates to longitude/latitude — inv_project","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") ## id, x, y in NAD83 / UTM zone 12N pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 inv_project(as.matrix(pts[,-1]), epsg_to_wkt(26912)) #>            [,1]     [,2] #>  [1,] -113.2671 46.06118 #>  [2,] -113.2732 46.05827 #>  [3,] -113.2815 46.06076 #>  [4,] -113.2598 46.06280 #>  [5,] -113.2531 46.05276 #>  [6,] -113.2460 46.06682 #>  [7,] -113.2561 46.06862 #>  [8,] -113.2461 46.05405 #>  [9,] -113.2279 46.07214 #> [10,] -113.2733 46.06607 inv_project(as.matrix(pts[,-1]), epsg_to_wkt(26912), \"NAD27\") #>            [,1]     [,2] #>  [1,] -113.2662 46.06126 #>  [2,] -113.2723 46.05835 #>  [3,] -113.2806 46.06084 #>  [4,] -113.2589 46.06288 #>  [5,] -113.2522 46.05283 #>  [6,] -113.2451 46.06689 #>  [7,] -113.2552 46.06869 #>  [8,] -113.2452 46.05413 #>  [9,] -113.2270 46.07222 #> [10,] -113.2724 46.06615"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a raster from an existing raster as template — rasterFromRaster","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"rasterFromRaster() creates new raster spatial reference, extent resolution taken template raster, without copying data. Optionally changes format, number bands, data type nodata value, sets driver-specific dataset creation options, initializes value.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"rasterFromRaster(   srcfile,   dstfile,   fmt = NULL,   nbands = NULL,   dtName = NULL,   options = NULL,   init = NULL,   dstnodata = init )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"srcfile Source raster filename. dstfile Output raster filename. fmt Output raster format name (e.g., \"GTiff\" \"HFA\"). attempt guess output filename fmt specified. nbands Number output bands. dtName Output raster data type name. (e.g., \"Byte\", \"Int16\", \"UInt16\", \"Int32\" \"Float32\"). options Optional list format-specific creation options vector \"NAME=VALUE\" pairs. (e.g., options = c(\"COMPRESS=LZW\") set LZW compression creation GTiff file). init Numeric value initialize pixels output raster. dstnodata Numeric nodata value output raster.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"Returns destination filename invisibly.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterFromRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a raster from an existing raster as template — rasterFromRaster","text":"","code":"## band 2 in a FARSITE landscape file has slope degrees ## convert slope degrees to slope percent in a new raster lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file, read_only=TRUE) ds_lcp$getMetadata(band=2, domain=\"\") #> [1] \"SLOPE_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tifegrees\"                                                                                                                slpp_file <- paste0(tempdir(), \"/\", \"storml_slpp.tif\") options = c(\"COMPRESS=LZW\") rasterFromRaster(srcfile = lcp_file,                  dstfile = slpp_file,                  nbands = 1,                  dtName = \"Int16\",                  options = options,                  init = -32767) #> Initializing destination raster... #> Done. ds_slp <- new(GDALRaster, slpp_file, read_only=FALSE)  ## slpp_file is initialized to -32767 and nodata value set ds_slp$getNoDataValue(band=1) #> [1] -32767  ## extent and cell size are the same as lcp_file ds_lcp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res() #> [1] 30 30 ds_slp$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_slp$res() #> [1] 30 30  ## convert slope degrees in lcp_file band 2 to slope percent in slpp_file ## bring through LCP nodata -9999 to the output nodata value ncols <- ds_slp$getRasterXSize() nrows <- ds_slp$getRasterYSize() for (row in 0:(nrows-1)) {     rowdata <- ds_lcp$read(band=2,                             xoff=0, yoff=row,                            xsize=ncols, ysize=1,                            out_xsize=ncols, out_ysize=1)     rowslpp <- tan(rowdata*pi/180) * 100     rowslpp[rowdata==-9999] <- -32767     dim(rowslpp) <- c(1, ncols)     ds_slp$write(band=1, xoff=0, yoff=row, xsize=ncols, ysize=1, rowslpp) }  ## min, max, mean, sd ds_slp$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1]   0.00000 138.00000  44.76464  26.79985  ds_slp$close() ds_lcp$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GDAL virtual raster — rasterToVRT","title":"Create a GDAL virtual raster — rasterToVRT","text":"rasterToVRT() creates virtual raster dataset (VRT format) derived source raster options virtual subsetting, virtually resampling source data different pixel resolution, applying virtual kernel filter.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GDAL virtual raster — rasterToVRT","text":"","code":"rasterToVRT(   srcfile,   relativeToVRT = FALSE,   vrtfile = tempfile(\"tmprast\", fileext = \".vrt\"),   resolution = NULL,   subwindow = NULL,   src_align = TRUE,   resampling = \"nearest\",   krnl = NULL,   normalized = TRUE )"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GDAL virtual raster — rasterToVRT","text":"srcfile Source raster filename. relativeToVRT Logical. Indicates whether source filename interpreted relative .vrt file (TRUE) relative .vrt file (FALSE, default). TRUE, .vrt file assumed directory srcfile basename(srcfile) used .vrt file. Use TRUE .vrt file always stored directory srcfile. vrtfile Output VRT filename. resolution numeric vector length two (xres, yres). pixel size must expressed georeferenced units. must positive values. source pixel size used resolution specified. subwindow numeric vector length four (xmin, ymin, xmax, ymax). Selects subwindow source raster corners given georeferenced coordinates (source CRS). given, upper left corner VRT source, VRT extent larger source depending resolution. src_align Logical. TRUE: upper left corner VRT extent set upper left corner source pixel contains subwindow xmin, ymax. VRT pixel-aligned source VRT resolution source pixel size, otherwise VRT extent minimum rectangle contains subwindow given pixel size. Often, src_align=TRUE selecting raster minimum bounding box vector polygon. FALSE: VRT upper left corner exactly subwindow xmin, ymax, VRT extent minimum rectangle contains subwindow given pixel size. subwindow given, source raster extent used case src_align=FALSE effect. Use src_align=FALSE pixel-align two rasters different sizes, .e., intent target alignment. resampling resampling method use xsize, ysize VRT different size underlying source rectangle (number pixels). values allowed nearest, bilinear, cubic, cubicspline, lanczos, average mode (character). krnl filtering kernel specified pixel coefficients. krnl array dimensions (size, size), size must odd number. krnl can also given vector length size x size. example, 3x3 average filter given : kernel applied sub-sampled -sampled data. normalized Logical. Indicates whether kernel normalized. Defaults TRUE.","code":"krnl <- c( 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111, 0.11111)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GDAL virtual raster — rasterToVRT","text":"Returns VRT filename invisibly.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a GDAL virtual raster — rasterToVRT","text":"rasterToVRT() similarities command-line utility gdalbuildvrt (https://gdal.org/programs/gdalbuildvrt.html) wrapper build mosaics. rasterToVRT() somewhat tailored clipping pixel-aligning various raster data relation vector polygon boundaries. also supports VRT kernel filtering. VRT dataset saved plain-text file extension .vrt. file contains description dataset XML format. description includes source raster filename can full path (relativeToVRT = FALSE) relative path (relativeToVRT = TRUE). relative path, rasterToVRT() assumes .vrt file directory source file uses basename(srcfile). elements XML schema describe source data read, along algorithms potentially applied forth. Documentation XML format .vrt : https://gdal.org/drivers/raster/vrt.html. Since .vrt small plain-text file fast write requires little storage space. Read performance degraded certain simple operations (e.g., virtual clip without resampling). Reading slower virtual resampling different pixel resolution virtual kernel filtering since operations performed --fly (.vrt require front writing resampled kernel-filtered raster regular format). VRT sometimes useful intermediate raster series processing steps, e.g., tempfile (default). GDAL VRT format several capabilities uses beyond covered rasterToVRT(). See URLs full discussion.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a GDAL virtual raster — rasterToVRT","text":"Pixel alignment specified terms source raster pixels (.e., srcfile virtual raster). use case mind virtually clipping raster bounding box vector polygon keeping pixels aligned srcfile (src_align = TRUE). src_align set FALSE intent \"target alignment\". example, subwindow bounding box another raster different layout, also setting resolution pixel resolution target raster src_align = FALSE result virtual raster pixel-aligned target (.e., pixels virtual raster longer aligned srcfile). Resampling defaults nearest specified. Examples cases src_align given . rasterToVRT() assumes srcfile north-raster. Requires package xml2.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/rasterToVRT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a GDAL virtual raster — rasterToVRT","text":"","code":"### resample  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds <- new(GDALRaster, evt_file, TRUE) ds$res() #> [1] 30 30 ds$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds$close()  ## use combine() with one input to get a table of pixel counts for   ## the raster values vat <- combine(evt_file) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(vat[-1]) # drop the cmbid in this case #>    count storml_evt #> 1      1       7125 #> 2     13       9017 #> 3      3       7106 #> 4     14       9021 #> 5    397       7292 #> 6      2       7901 #> 7    681       7145 #> 8    876         NA #> 9   1082       7126 #> 10    32       7166 #> 11    98       9022 #> 12   570       7050 #> 13    28       7011 #> 14   889       7055 #> 15  4564       7046 #> 16  1280       9018 #> 17   679       7140 #> 18    60       7169 #> 19   199       7143 #> 20   304       7056 #> 21   267       7070 #> 22  2486       9016 #> 23    11       7057 #> 24   765       7144 sum(vat$count) #> [1] 15301  ## resample at 90-m resolution ## EVT is thematic vegetation type so use a majority value vrt_file <- rasterToVRT(evt_file,                         resolution=c(90,90),                         resampling=\"mode\")  ## .vrt is a small xml file pointing to the source raster file.size(vrt_file) #> [1] 1635  vat90m <- combine(vrt_file, var.names=c(\"evt90m\")) #> Combining... #> 0...10...20...30...40...50...60...70...80...90...100 - done. print(vat90m[-1]) #>    count evt90m #> 1      1   9017 #> 2      1   9021 #> 3      1   7011 #> 4     48   7292 #> 5     54     NA #> 6    119   7126 #> 7     75   7055 #> 8    614   7046 #> 9    152   9018 #> 10     2   7166 #> 11     9   9022 #> 12    59   7050 #> 13    59   7140 #> 14     4   7169 #> 15    13   7143 #> 16    27   7056 #> 17    27   7070 #> 18   322   9016 #> 19     2   7057 #> 20    75   7144 #> 21    64   7145 sum(vat90m$count) #> [1] 1728  ds <- new(GDALRaster, vrt_file, TRUE) ds$res() #> [1] 90 90 ds$bbox() #> [1]  323476.1 5101842.0  327796.1 5105082.0 ds$close()   ### clip  evt_file <- system.file(\"extdata/storml_evt.tif\", package=\"gdalraster\") ds_evt <- new(GDALRaster, evt_file, TRUE) ds_evt$bbox() #> [1]  323476.1 5101872.0  327766.1 5105082.0  ## WKT string for a boundary within the EVT extent bnd = \"POLYGON ((324467.3 5104814.2, 323909.4 5104365.4, 323794.2  5103455.8, 324970.7 5102885.8, 326420.0 5103595.3, 326389.6 5104747.5,  325298.1 5104929.4, 325298.1 5104929.4, 324467.3 5104814.2))\"  ## src_align = TRUE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=TRUE) ds_vrt <- new(GDALRaster, vrt_file, TRUE)  ## VRT is a virtual clip, pixel-aligned with the EVT raster bbox_from_wkt(bnd) #> [1]  323794.2 5102885.8  326420.0 5104929.4 ds_vrt$bbox() #> [1]  323776.1 5102862.0  326446.1 5104932.0 ds_vrt$res() #> [1] 30 30  ## src_align = FALSE vrt_file <- rasterToVRT(evt_file,                         subwindow = bbox_from_wkt(bnd),                         src_align=FALSE) ds_vrt_noalign <- new(GDALRaster, vrt_file, TRUE)  ## VRT upper left corner (xmin, ymax) is exactly bnd xmin, ymax ds_vrt_noalign$bbox() #> [1]  323794.2 5102859.4  326434.2 5104929.4 ds_vrt_noalign$res() #> [1] 30 30  ds_vrt$close() ds_vrt_noalign$close() ds_evt$close()   ### subset and pixel align two rasters  ## FARSITE landscape file for the Storm Lake area lcp_file <- system.file(\"extdata/storm_lake.lcp\", package=\"gdalraster\") ds_lcp <- new(GDALRaster, lcp_file, read_only=TRUE)  ## Landsat band 5 file covering the Storm Lake area b5_file <- system.file(\"extdata/sr_b5_20200829.tif\", package=\"gdalraster\") ds_b5 <- new(GDALRaster, b5_file, read_only=TRUE)  ds_lcp$bbox()  # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_lcp$res()   # 30 30 #> [1] 30 30  ds_b5$bbox()   # 323400.9 5101815.8  327870.9 5105175.8 #> [1]  323400.9 5101815.8  327870.9 5105175.8 ds_b5$res()    # 30 30 #> [1] 30 30  ## src_align = FALSE because we need target alignment in this case: vrt_file <- rasterToVRT(b5_file,                         resolution = ds_lcp$res(),                         subwindow = ds_lcp$bbox(),                         src_align = FALSE) ds_b5vrt <- new(GDALRaster, vrt_file, TRUE)  ds_b5vrt$bbox() # 323476.1 5101872.0  327766.1 5105082.0 #> [1]  323476.1 5101872.0  327766.1 5105082.0 ds_b5vrt$res()  # 30 30 #> [1] 30 30  ## read the the Landsat file pixel-aligned with the LCP file  ## summarize band 5 reflectance where FBFM = 165  ## LCP band 4 contains FBFM (a classification of fuel beds): ds_lcp$getMetadata(band=4, domain=\"\") #> [1] \"FUEL_MODEL_FILE=/netapp/sharedwebfs1/shared/landfire/public/temp_q8dTbIJ4w6Qi36Omkzk0/LCP_LF2022_FBFM40_220_CONUS/temp/merged_modified.tif\" #> [2] \"FUEL_MODEL_MAX=183\"                                                                                                                         #> [3] \"FUEL_MODEL_MIN=-9999\"                                                                                                                       #> [4] \"FUEL_MODEL_NUM_CLASSES=12\"                                                                                                                  #> [5] \"FUEL_MODEL_OPTION=0\"                                                                                                                        #> [6] \"FUEL_MODEL_OPTION_DESC=no custom models AND no conversion file needed\"                                                                      #> [7] \"FUEL_MODEL_VALUES=0,98,99,101,102,121,122,123,142,162,165,181,183\"                                                                           ## verify Landsat nodata (0): ds_b5vrt$getNoDataValue(band=1) #> [1] 0 ## will be read as NA and omitted from stats rs <- new(RunningStats, na_rm=TRUE)  ncols <- ds_lcp$getRasterXSize() nrows <- ds_lcp$getRasterYSize() for (row in 0:(nrows-1)) {     row_fbfm <- ds_lcp$read(band=4, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)     row_b5 <- ds_b5vrt$read(band=1, xoff=0, yoff=row,                             xsize=ncols, ysize=1,                             out_xsize=ncols, out_ysize=1)      rs$update(row_b5[row_fbfm == 165]) } rs$get_count() #> [1] 2498 rs$get_mean() #> [1] 12992.35 rs$get_min() #> [1] 7635 rs$get_max() #> [1] 17866 rs$get_sum() #> [1] 32454886 rs$get_var() #> [1] 1214912 rs$get_sd() #> [1] 1102.23  ds_b5vrt$close() ds_lcp$close() ds_b5$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GDAL configuration option — set_config_option","title":"Set GDAL configuration option — set_config_option","text":"set_config_option() sets GDAL runtime configuration option. Configuration options essentially global variables user can set. used alter default behavior certain raster format drivers, cases GDAL core. full description listing available options see https://gdal.org/user/configoptions.html.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(key, value)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GDAL configuration option — set_config_option","text":"key Character name configuration option. value Character value set option. value = \"\" (empty string) unset value previously set set_config_option().","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set GDAL configuration option — set_config_option","text":"return value, called side effects.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/set_config_option.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GDAL configuration option — set_config_option","text":"","code":"set_config_option(\"GDAL_CACHEMAX\", \"64\") get_config_option(\"GDAL_CACHEMAX\") #> [1] \"64\" ## unset: set_config_option(\"GDAL_CACHEMAX\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"srs_is_geographic() attempt import given WKT string spatial reference system, returns TRUE  root GEOGCS node. wrapper OSRIsGeographic() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"","code":"srs_is_geographic(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"srs Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"Logical. TRUE srs geographic, otherwise FALSE","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_geographic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if WKT definition is a geographic coordinate system — srs_is_geographic","text":"","code":"srs_is_geographic(epsg_to_wkt(5070)) #> [1] FALSE srs_is_geographic(srs_to_wkt(\"WGS84\")) #> [1] TRUE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if WKT definition is a projected coordinate system — srs_is_projected","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"srs_is_projected() attempt import given WKT string spatial reference system (SRS), returns TRUE SRS contains PROJCS node indicating projected coordinate system. wrapper OSRIsProjected() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"","code":"srs_is_projected(srs)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"srs Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"Logical. TRUE srs projected, otherwise FALSE","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_projected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if WKT definition is a projected coordinate system — srs_is_projected","text":"","code":"srs_is_projected(epsg_to_wkt(5070)) #> [1] TRUE srs_is_projected(srs_to_wkt(\"WGS84\")) #> [1] FALSE"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":null,"dir":"Reference","previous_headings":"","what":"Do these two spatial references describe the same system? — srs_is_same","title":"Do these two spatial references describe the same system? — srs_is_same","text":"srs_is_same() returns TRUE two spatial references describe system. wrapper OSRIsSame() GDAL Spatial Reference System C API.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do these two spatial references describe the same system? — srs_is_same","text":"","code":"srs_is_same(srs1, srs2)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do these two spatial references describe the same system? — srs_is_same","text":"srs1 Character OGC WKT string spatial reference system srs2 Character OGC WKT string spatial reference system","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do these two spatial references describe the same system? — srs_is_same","text":"Logical. TRUE two spatial references describe system, otherwise FALSE.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_is_same.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do these two spatial references describe the same system? — srs_is_same","text":"","code":"elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\") ds <- new(GDALRaster, elev_file, TRUE) srs_is_same(ds$getProjectionRef(), epsg_to_wkt(26912)) #> [1] TRUE srs_is_same(ds$getProjectionRef(), epsg_to_wkt(5070)) #> [1] FALSE ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"srs_to_wkt() converts spatial reference system (SRS) definition various text formats WKT. function examine input SRS, try deduce format, export WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"","code":"srs_to_wkt(srs, pretty = FALSE)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"srs Character string containing SRS definition various formats (see Details). pretty Logical. TRUE return nicely formatted WKT string display person. FALSE regular WKT string (default).","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"Character string containing OGC WKT.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"wrapper OSRSetFromUserInput() GDAL Spatial Reference System C API output WKT. input SRS may take following forms: WKT - convert WKT versions (see ) EPSG:n - EPSG code n AUTO:proj_id,unit_id,lon0,lat0 - WMS auto projections urn:ogc:def:crs:EPSG::n - OGC URNs PROJ.4 definitions filename - file read WKT, XML PROJ.4 definition well known name NAD27, NAD83, WGS84 WGS72 IGNF:xxxx, ESRI:xxxx - definitions PROJ database PROJJSON (PROJ >= 6.2) function intended flexible, nature imprecise must guess information format intended. epsg_to_wkt() used instead EPSG codes. GDAL 3.0, default format WKT export OGC WKT 1. WKT version can overridden using OSR_WKT_FORMAT configuration option (see set_config_option()). Valid values one : SFSQL, WKT1_SIMPLE, WKT1, WKT1_GDAL, WKT1_ESRI, WKT2_2015, WKT2_2018, WKT2, DEFAULT. SFSQL, WKT1 string without AXIS, TOWGS84, AUTHORITY EXTENSION node returned. WKT1_SIMPLE, WKT1 string without AXIS, AUTHORITY EXTENSION node returned. WKT1 alias WKT1_GDAL. WKT2 default latest revision implemented (currently WKT2_2018). WKT2_2019 can used alias WKT2_2018 since GDAL 3.2","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/srs_to_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spatial reference definition to OGC Well Known Text — srs_to_wkt","text":"","code":"srs_to_wkt(\"NAD83\") #> [1] \"GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4269\\\"]]\" writeLines(srs_to_wkt(\"NAD83\", pretty=TRUE)) #> GEOGCS[\"NAD83\", #>     DATUM[\"North_American_Datum_1983\", #>         SPHEROID[\"GRS 1980\",6378137,298.257222101, #>             AUTHORITY[\"EPSG\",\"7019\"]], #>         AUTHORITY[\"EPSG\",\"6269\"]], #>     PRIMEM[\"Greenwich\",0, #>         AUTHORITY[\"EPSG\",\"8901\"]], #>     UNIT[\"degree\",0.0174532925199433, #>         AUTHORITY[\"EPSG\",\"9122\"]], #>     AXIS[\"Latitude\",NORTH], #>     AXIS[\"Longitude\",EAST], #>     AUTHORITY[\"EPSG\",\"4269\"]] set_config_option(\"OSR_WKT_FORMAT\", \"WKT2\") writeLines(srs_to_wkt(\"NAD83\", pretty=TRUE)) #> GEOGCRS[\"NAD83\", #>     DATUM[\"North American Datum 1983\", #>         ELLIPSOID[\"GRS 1980\",6378137,298.257222101, #>             LENGTHUNIT[\"metre\",1]]], #>     PRIMEM[\"Greenwich\",0, #>         ANGLEUNIT[\"degree\",0.0174532925199433]], #>     CS[ellipsoidal,2], #>         AXIS[\"geodetic latitude (Lat)\",north, #>             ORDER[1], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         AXIS[\"geodetic longitude (Lon)\",east, #>             ORDER[2], #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>     ID[\"EPSG\",4269]] set_config_option(\"OSR_WKT_FORMAT\", \"\")"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform geospatial x/y coordinates — transform_xy","title":"Transform geospatial x/y coordinates — transform_xy","text":"transform_xy() transforms geospatial x/y coordinates new projection.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"transform_xy(pts, srs_from, srs_to)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform geospatial x/y coordinates — transform_xy","text":"pts Numeric array geospatial x/y coordinates srs_from Character string OGC WKT format specifying spatial reference system pts. srs_to Character string OGC WKT format specifying output spatial reference system.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform geospatial x/y coordinates — transform_xy","text":"Numeric array geospatial x/y coordinates projection specified srs_to.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform geospatial x/y coordinates — transform_xy","text":"transform_xy() included convenience function mainly internal use. See package sf full-featured coordinate transformation (https://r-spatial.github.io/sf/).","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/transform_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform geospatial x/y coordinates — transform_xy","text":"","code":"pt_file <- system.file(\"extdata/storml_pts.csv\", package=\"gdalraster\") pts <- read.csv(pt_file) print(pts) #>    id   xcoord  ycoord #> 1   1 324650.9 5103344 #> 2   2 324171.0 5103034 #> 3   3 323533.4 5103329 #> 4   4 325220.0 5103508 #> 5   5 325703.1 5102377 #> 6   6 326297.8 5103924 #> 7   7 325520.4 5104146 #> 8   8 326247.7 5102506 #> 9   9 327711.7 5104476 #> 10 10 324181.7 5103901 ## id, x, y in NAD83 / UTM zone 12N ## transform to NAD83 / CONUS Albers transform_xy( pts = as.matrix(pts[,-1]),                srs_from = epsg_to_wkt(26912),                srs_to = epsg_to_wkt(5070) ) #>           [,1]    [,2] #>  [1,] -1330885 2684892 #>  [2,] -1331408 2684660 #>  [3,] -1331994 2685048 #>  [4,] -1330297 2684967 #>  [5,] -1329991 2683777 #>  [6,] -1329167 2685212 #>  [7,] -1329903 2685550 #>  [8,] -1329432 2683821 #>  [9,] -1327683 2685541 #> [10,] -1331265 2685514"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":null,"dir":"Reference","previous_headings":"","what":"Raster reprojection — warp","title":"Raster reprojection — warp","text":"warp() wrapper gdalwarp command-line utility. See https://gdal.org/programs/gdalwarp.html details.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raster reprojection — warp","text":"","code":"warp(src_files, dst_filename, t_srs, cl_arg = NULL)"},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raster reprojection — warp","text":"src_files Character vector source file(s) reprojected. dst_filename Filename output raster. t_srs Character. Target spatial reference system. Usually EPSG code (\"EPSG:#####\") well known text (WKT) SRS definition. cl_arg Optional character vector command-line arguments gdalwarp addition -t_srs.","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raster reprojection — warp","text":"Logical indicating success (invisible TRUE). error raised operation fails.","code":""},{"path":[]},{"path":"https://usdaforestservice.github.io/gdalraster/reference/warp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raster reprojection — warp","text":"","code":"## reproject the elevation raster to NAD83 / CONUS Albers (EPSG:5070) elev_file <- system.file(\"extdata/storml_elev.tif\", package=\"gdalraster\")  ## command-line arguments for gdalwarp ## resample to 90-m resolution using average and keep pixels aligned: args = c(\"-tr\", \"90\", \"90\", \"-r\", \"average\", \"-tap\") ## output to Erdas Imagine format (HFA), creation option for compression: args = c(args, \"-of\", \"HFA\", \"-co\", \"COMPRESSED=YES\")  alb83_file <- paste0(tempdir(), \"/\", \"storml_elev_alb83.img\") warp(elev_file, alb83_file, t_srs=\"EPSG:5070\", cl_arg = args) #> 0...10...20...30...40...50...60...70...80...90...100 - done.  ds <- new(GDALRaster, alb83_file, read_only=TRUE) ds$getDriverLongName() #> [1] \"Erdas Imagine Images (.img)\" ds$getProjectionRef() #> [1] \"PROJCS[\\\"NAD83 / Conus Albers\\\",GEOGCS[\\\"NAD83\\\",DATUM[\\\"North_American_Datum_1983\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6269\\\"]],PRIMEM[\\\"Greenwich\\\",0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Albers_Conic_Equal_Area\\\"],PARAMETER[\\\"latitude_of_center\\\",23],PARAMETER[\\\"longitude_of_center\\\",-96],PARAMETER[\\\"standard_parallel_1\\\",29.5],PARAMETER[\\\"standard_parallel_2\\\",45.5],PARAMETER[\\\"false_easting\\\",0],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH]]\" ds$res() #> [1] 90 90 ds$getStatistics(band=1, approx_ok=FALSE, force=TRUE) #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> [1] 2438.0000 3042.0000 2674.9397  132.3393 ds$close()"},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-121-dev","dir":"Changelog","previous_headings":"","what":"gdalraster 1.2.1 (dev)","title":"gdalraster 1.2.1 (dev)","text":"GDALRaster::read(): data now read R integer type possible raster data type (#23) (2023-06-10) fix GDALRaster$getMetadata(): requesting band-level metadata domain default metadata domain returning dataset-level metadata instead (2023-05-29) documentation: add description GDAL_RASTERIO_RESAMPLING configuration option GDALRaster$read() (2023-05-29) documentation: add web article GDAL block cache GDAL_CACHEMAX configuration (2023-06-09)","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-120","dir":"Changelog","previous_headings":"","what":"gdalraster 1.2.0","title":"gdalraster 1.2.0","text":"CRAN release: 2023-05-28 starting v. 1.2.0, gdalraster require R >= 4.2.0 fix: check GEOS availability bbox geometry functions fix: wrong array dimensions read() (#5). Starting v. 1.2.0, read() return vector instead matrix better matches concept native GDAL-like interface (thanks Michael Sumner). add: has_geos() exported R add: srs_is_same() - wrapper OSRIsSame() GDAL Spatial Reference System C API documentation - minor edits throughout improve clarity","code":""},{"path":"https://usdaforestservice.github.io/gdalraster/news/index.html","id":"gdalraster-111","dir":"Changelog","previous_headings":"","what":"gdalraster 1.1.1","title":"gdalraster 1.1.1","text":"CRAN release: 2023-05-24 Initial public release.","code":""}]
