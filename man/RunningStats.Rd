% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/running_stats.R
\name{RunningStats}
\alias{RunningStats}
\alias{Rcpp_RunningStats}
\alias{Rcpp_RunningStats-class}
\alias{RunningStats-class}
\title{Class to calculate mean and variance in one pass}
\description{
Calculates summary statistics on a data stream.
Mean and variance are calculated with Welford's online algorithm
(\url{https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance}).
The min, max, sum and count are also tracked.
The memory usage of a \code{RunningStats} object is negligible, and input
can be intermittent. It scales to large datasets for applications such as
raster zonal statistics.
}
\section{Usage}{

\preformatted{
rs <- new(RunningStats, na_rm)

rs$update(newvalues)

rs$get_count()
rs$get_mean()
rs$get_min()
rs$get_max()
rs$get_sum()
rs$get_var()
rs$get_sd()

rs$reset()
}
}

\section{Details}{


\code{new(RunningStats, na_rm)}
Creates a new \code{RunningStats} object.
\code{na_rm = TRUE} to remove \code{NA} from the input data or \code{FALSE}
to retain \code{NA}.
Returns an object of class \code{RunningStats}.

\code{$update(newvalues)}
Adds a numeric vector of \code{newvalues} to the data stream.
No return value.

\code{$get_count()}
Returns the count of values currently in the stream.

\code{$get_mean()}
Returns the mean of values currently in the stream.

\code{$get_min()}
Returns the minimum value currently in the stream.

\code{$get_max()}
Returns the maximum value currently in the stream.

\code{$get_sum()}
Returns the sum of values currently in the stream.

\code{$get_var()}
Returns the variance of values currently in the stream (denominator n - 1).

\code{$get_sd()}
Returns the standard deviation of values currently in the stream
(denominator n - 1).

\code{$reset()}
Clears the \code{RunningStats} object to its initialized state.
No return value.
}

\examples{
set.seed(42)

rs <- new(RunningStats, na_rm=TRUE)
chunk <- runif(1000)
rs$update(chunk)
object.size(rs)

rs$get_count()
length(chunk)

rs$get_mean()
mean(chunk)

rs$get_min()
min(chunk)

rs$get_max()
max(chunk)

rs$get_var()
var(chunk)

rs$get_sd()
sd(chunk)

\dontrun{
## 10^9 values read in 10,000 chunks
## should take under 2 minutes on typical PC hardware
for (i in 1:1e4) {
  chunk <- runif(1e5)
  rs$update(chunk)
}
rs$get_count()
rs$get_mean()
rs$get_var()

object.size(rs)
}
}
