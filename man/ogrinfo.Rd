% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{ogrinfo}
\alias{ogrinfo}
\title{Retrieve information about a vector data source}
\usage{
ogrinfo(
  dsn,
  layers = NULL,
  cl_arg = NULL,
  open_options = NULL,
  read_only = TRUE
)
}
\arguments{
\item{dsn}{Character string. Data source name (e.g., filename, database
connection string, etc.)}

\item{layers}{Optional character vector of layer names in the source
dataset.}

\item{cl_arg}{Optional character vector of command-line arguments for
the GDAL \code{ogrinfo} command-line utility (see URL above).}

\item{open_options}{Optional character vector of dataset open options.}

\item{read_only}{Logical scalar. \code{TRUE} to open the data source read-only
(the default), or \code{FALSE} to open with write access.}
}
\value{
Character string containing information about the vector dataset,
or empty string ('""`) in case of error.
}
\description{
\code{ogrinfo()} is a wrapper of the \command{ogrinfo} command-line
utility (see \url{https://gdal.org/programs/ogrinfo.html}).
This function lists information about an OGR-supported data source. With
SQL statements it is also possible to edit data.
Refer to the GDAL documentation at the URL above for a description of
command-line arguments that can be passed in \code{cl_arg}.
}
\examples{
src <- system.file("extdata/ynp_fires_1984_2022.gpkg", package="gdalraster")

# Requires GDAL >= 3.7
if (as.integer(gdal_version()[2]) >= 3070000) {
  # Get the names of the layers in a GeoPackage file.
  info <- ogrinfo(src)
  writeLines(info)

  # Summary (-so) of a layer without showing details about every single
  # feature.
  # -nomd suppresses metadata printing. Some datasets may contain a lot of
  # metadata strings.
  args <- c("-so", "-nomd")
  info <- ogrinfo(src, "mtbs_perims", args)
  writeLines(info)

  # Retrieve information in JSON format without showing details about every
  # single feature.
  args <- c("-json", "-nomd")
  json <- ogrinfo(src, "mtbs_perims", args)
  #info <- jsonlite::fromJSON(json)

  # Attribute query to restrict the output of the features in a layer.
  args <- c("-ro", "-nomd", "-where", "ig_year = 2020")
  info <- ogrinfo(src, "mtbs_perims", args)
  writeLines(info)

  # Copy to a temporary in-memory file that is writeable.
  src_mem <- paste0("/vsimem/", basename(src))
  vsi_copy_file(src, src_mem)
  print(src_mem)

  # Add a column to a layer.
  args <- c("-sql", "ALTER TABLE mtbs_perims ADD burn_bnd_ha float")
  ogrinfo(src_mem, cl_arg = args, read_only = FALSE)

  # Update values of an attribute with SQL by using the SQLite dialect.
  sql <- "UPDATE mtbs_perims SET burn_bnd_ha = (burn_bnd_ac / 2.471)"
  args <- c("-dialect", "sqlite", "-sql", sql)
  ogrinfo(src_mem, cl_arg = args, read_only = FALSE)

  vsi_unlink(src_mem)
}
}
\seealso{
\code{\link[=ogr2ogr]{ogr2ogr()}}
}
