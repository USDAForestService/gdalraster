% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom.R
\name{g_measures}
\alias{g_measures}
\alias{g_area}
\alias{g_centroid}
\alias{g_distance}
\alias{g_length}
\title{Compute measurements for WKB/WKT geometries}
\usage{
g_area(geom, quiet = FALSE)

g_centroid(geom, quiet = FALSE)

g_distance(geom, other_geom, quiet = FALSE)

g_length(geom, quiet = FALSE)
}
\arguments{
\item{geom}{Either a raw vector of WKB or list of raw vectors, or a
character vector containing one or more WKT strings.}

\item{quiet}{Logical, \code{TRUE} to suppress warnings. Defaults to \code{FALSE}.}

\item{other_geom}{Either a raw vector of WKB or list of raw vectors, or a
character vector containing one or more WKT strings. Must contain the same
number of geometries as \code{geom}.}
}
\description{
These functions compute measurements for geometries. The input
geometries may be given as a single raw vector of WKB, a list of WKB raw
vectors, or a character vector containing one or more WKT strings.
}
\details{
These functions use the GEOS library via GDAL headers.

\code{g_area()} computes the area for a \code{Polygon} or \code{MultiPolygon}. Undefined
for all other geometry types (returns zero). Returns a numeric vector,
having length equal to the number of input geometries, containing
computed area or '0' if undefined.

\code{g_centroid()} returns a numeric vector of length 2 containing the centroid
(X, Y), or a two-column numeric matrix (X, Y) with number of rows equal to
the number of input geometries.
The GDAL documentation states "This method relates to the SFCOM
\code{ISurface::get_Centroid()} method however the current implementation based
on GEOS can operate on other geometry types such as multipoint, linestring,
geometrycollection such as multipolygons. OGC SF SQL 1.1 defines the
operation for surfaces (polygons). SQL/MM-Part 3 defines the operation for
surfaces and multisurfaces (multipolygons)."

\code{g_distance()} returns the distance between two geometries or \code{-1} if an
error occurs. Returns the shortest distance between the two geometries.
The distance is expressed into the same unit as the coordinates of the
geometries. Returns a numeric vector, having length equal to the number of
input geometry pairs, containing computed distance or '-1' if an error
occurs.

\code{g_length()} computes the length for \code{LineString} or \code{MultiCurve} objects.
Undefined for all other geometry types (returns zero). Returns a numeric
vector, having length equal to the number of input geometries, containing
computed length or '0' if undefined.
}
\note{
For \code{g_distance()}, \code{geom} and \code{other_geom} must contain the same number of
geometries (i.e., operates pair-wise on the inputs with no recycling), and
are assumed to be in the same coordinate reference system.

Geometry validity is not checked. In case you are unsure of the validity
of the input geometries, call \code{g_is_valid()} before, otherwise the result
might be wrong.
}
\examples{
g_area("POLYGON ((0 0, 10 10, 10 0, 0 0))")

g_centroid("POLYGON ((0 0, 10 10, 10 0, 0 0))")

g_distance("POINT (0 0)", "POINT (5 12)")

g_length("LINESTRING (0 0, 3 4)")

f <- system.file("extdata/ynp_fires_1984_2022.gpkg", package = "gdalraster")
lyr <- new(GDALVector, f, "mtbs_perims")

# read all features into a data frame
feat_set <- lyr$fetch(-1)
head(feat_set)

g_area(feat_set$geom) |> head()

g_centroid(feat_set$geom) |> head()

lyr$close()
}
