% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ogr_manage.R
\name{ogr_manage}
\alias{ogr_manage}
\alias{ogr_ds_exists}
\alias{ogr_ds_layer_count}
\alias{ogr_layer_exists}
\alias{ogr_layer_create}
\alias{ogr_layer_delete}
\alias{ogr_field_index}
\alias{ogr_field_create}
\alias{ogr_geom_field_create}
\title{Utility functions for managing vector data sources}
\usage{
ogr_ds_exists(dsn, with_update = FALSE)

ogr_ds_layer_count(dsn)

ogr_layer_exists(dsn, layer)

ogr_layer_create(
  dsn,
  layer,
  layer_defn = NULL,
  geom_type = NULL,
  srs = NULL,
  lco = NULL
)

ogr_layer_delete(dsn, layer)

ogr_field_index(dsn, layer, fld_name)

ogr_field_create(
  dsn,
  layer,
  fld_name,
  fld_defn = NULL,
  fld_type = "OFTInteger",
  fld_subtype = "OFSTNone",
  fld_width = 0,
  fld_precision = 0,
  is_nullable = TRUE,
  is_ignored = FALSE,
  is_unique = FALSE,
  default_value = ""
)

ogr_geom_field_create(
  dsn,
  layer,
  fld_name,
  geom_fld_defn = NULL,
  geom_type = NULL,
  srs = NULL,
  is_nullable = TRUE,
  is_ignored = FALSE
)
}
\arguments{
\item{dsn}{Character string. The vector data source name, e.g., a filename
or database connection string.}

\item{with_update}{Logical scalar. \code{TRUE} to test for update access on the
dataset, or \code{FALSE} (the default) to test for existence regardless of
read/write access.}

\item{layer}{Character string for a layer name in a vector dataset.}

\item{layer_defn}{A feature class definition for \code{layer} as a list of
attribute field definition(s), and at least one geometry field definition.
Each field definition is a list containing the field name, type and other
properties (see Details). If a \code{layer_defn} is given, it will be used and
any additional values passed for defining a single field will be ignored.
The first geometry field definition in \code{layer_defn} defines the latyer
\code{geom_type} and \code{srs}.}

\item{geom_type}{Character string specifying a geometry type (see Details).}

\item{srs}{Character string containing a spatial reference system definition
as OGC WKT or other well-known format (e.g., the input formats usable with
\code{\link[=srs_to_wkt]{srs_to_wkt()}}).}

\item{lco}{Optional character vector of format-specific creation options
for \code{layer} (\code{"NAME=VALUE"} pairs).}

\item{fld_name}{Character string containing the name of an attribute field
in \code{layer}.}

\item{fld_defn}{A field definition as list (see Details). Additional
arguments in \code{ogr_field_create()} will be ignored if a \code{fld_defn} is given.}

\item{fld_type}{Character string containing the name of a field data type
(e.g., \code{OFTInteger}, \code{OFTReal}, \code{OFTString}, see Details.)}

\item{fld_subtype}{Character string containing the name of a field subtype.
One of  \code{OFSTNone} (the default), \code{OFSTBoolean}, \code{OFSTInt16}, \code{OFSTFloat32},
\code{OFSTJSON}, \code{OFSTUUID}.}

\item{fld_width}{Optional integer scalar specifying max number of characters.}

\item{fld_precision}{Optional integer scalar specifying number of digits
after the decimal point.}

\item{is_nullable}{Optional NOT NULL field constraint (logical scalar).
Defaults to \code{TRUE}.}

\item{is_ignored}{Whether field is ignored when retrieving features (logical
scalar). Defaults to \code{FALSE}.}

\item{is_unique}{Optional UNIQUE constraint on the field (logical scalar).
Defaults to \code{FALSE}.}

\item{default_value}{Optional default value for the field as a character
string.}

\item{geom_fld_defn}{A geometry field definition as list (see Details).
Additional arguments in \code{ogr_geom_field_create()} will be ignored if a
\code{geom_fld_defn} is given.}

\item{format}{GDAL short name of the vector format as character string.
Examples of some common output formats include: \code{"GPKG"}, \code{"FlatGeobuf"},
\code{"PostgreSQL"}, \code{"ESRI Shapefile"}, \code{"SQLite"}.}

\item{dsco}{Optional character vector of format-specific creation options
for \code{dsn} (\code{"NAME=VALUE"} pairs).}
}
\value{
Functions for create/delete return a logical scalar indicating
success or failure of the operation. Functions that test existence also
return a logical scalar. Otherwise, an integer scalar (see Details).
}
\description{
Bindings to OGR wrap portions of GDAL's Vector API (ogr_core.h and
ogr_api.h).
This set of OGR management functions can be used to create new vector
datasets, test existence of dataset/layer/field, test read/write access,
create new layers in an existing dataset, delete layers, and create new
attribute and geometry fields in an existing layer. They are intended to be
complementary to \code{ogrinfo()} and \code{ogr2ogr()}, and to support implementation
of OGR bindings for vector I/O in a future release of {gdalraster}.
}
\details{
\code{ogr_ds_exists()} tests whether a vector dataset can be opened with the
given DSN, potentially testing for update access.

\code{ogr_ds_create()} creates a new vector data store, optionally creating
also a layer, and optionally creating one or more fields on the layer.
The attribute fields and geometry field(s) to create can be specified as a
feature class definition (\code{layer_defn} as list, see below), or
alternatively, by giving the \code{geom_type} and \code{srs}, optionally along with
one \code{fld_name} and \code{fld_type} to be created in the layer.

\code{ogr_ds_layer_count()} returns the number of layers in a GDAL vector dataset.

\code{ogr_layer_exists()} tests whether a layer can be accessed by name for a
given DSN.

\code{ogr_layer_create()} creates a new layer in a vector dataset, with a
specified geometry type and spatial reference definition. This function also
accepts a feature class definition given as a list of field names and their
definitions (see below).

\code{ogr_layer_delete()} deletes a layer in a vector dataset.

\code{ogr_field_index()} tests for existence of an attribute field by name.
Returns the field index on the layer, or \code{-1} if the field does not exist.

\code{ogr_field_create()} creates a new attribute field of specified data type in
a given DSN/layer. Several optional field properties can be specified in
addition to the type.

\code{ogr_geom_field_create()} creates a new geometry field of specified type in
a given DSN/layer.

All features in an OGR Layer share a common schema (feature class), modeled
in GDAL as OGR Feature Definition. The feature class definition includes the
set of attribute fields and their data types and the geometry field(s).
In R, a feature class definition is represented as a list, having as names
the attribute/geometry field names, with each list element holding a field
definition.

An attribute field definition is a list with named elements:

\if{html}{\out{<div class="sourceCode">}}\preformatted{$type       : OGR Field Type ("OFTReal", "OFTString" etc.)
$subtype    : optional ("OFSTBoolean", ...)
$width      : optional max number of characters
$precision  : optional number of digits after the decimal point
$is_nullable: optional NOT NULL constraint (logical scalar)
$is_unique  : optional UNIQUE constraint (logical scalar)
$default    : optional default value as character string
$is_ignored : optionally ignored when retrieving features (logical scalar)
$is_geom    : FALSE (the default) for attribute fields
}\if{html}{\out{</div>}}

An OGR field type is specified as a case-sensitive character string with
possible values:
\code{OFTInteger}, \code{OFTIntegerList}, \code{OFTReal}, \code{OFTRealList}, \code{OFTString},
\code{OFTStringList}, \code{OFTBinary},  \code{OFTDate}, \code{OFTTime}, \code{OFTDateTime},
\code{OFTInteger64}, \code{OFTInteger64List}.

An optional field subtype is specified as a case-sensitive character string
with possible values:
\code{OFSTNone}, \code{OFSTBoolean}, \code{OFSTInt16}, \code{OFSTFloat32}, \code{OFSTJSON},
\code{OFSTUUID}.

A geometry field definition is a list with named elements:

\if{html}{\out{<div class="sourceCode">}}\preformatted{$type       : geom type ("Point", "Polygon", etc.)
$srs        : optional spatial reference as WKT string
$is_nullable: optional NOT NULL constraint (logical scalar)
$is_ignored : optionally ignored when retrieving features (logical scalar)
$is_geom    : TRUE (required) for geometry fields
}\if{html}{\out{</div>}}

Geometry types are specified as a character string containing OGC WKT
(case-insensitive).
Common types include: \code{Point}, \code{LineString}, \code{Polygon}, \code{MultiPoint},
\code{MultiLineString}, \code{MultiPolygon}. See the GDAL documentation for a list
of all supported geometry types
(\link{https://gdal.org/api/vector_c_api.html#_CPPv418OGRwkbGeometryType}).
}
\seealso{
\link{https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry}
}
