Package: gdalraster
Title: Bindings to 'GDAL'
Version: 2.0.0.9005
Authors@R: c(
    person("Chris", "Toney", email = "chris.toney@usda.gov",
            role = c("aut", "cre"), comment = "R interface/additional functionality"),
    person("Michael D.","Sumner", role = c("ctb")),
    person("Frank", "Warmerdam",
            role = c("ctb", "cph"), comment = "GDAL API documentation; src/progress_r.cpp from gdal/port/cpl_progress.cpp"),
    person("Even", "Rouault",
            role = c("ctb", "cph"), comment = "GDAL API documentation"),
    person("Marius", "Appel",
            role = c("ctb", "cph"), comment = "configure.ac based on https://github.com/appelmar/gdalcubes"),
    person("Daniel", "James",
            role = c("ctb", "cph"), comment = "Boost combine hashes method in src/cmb_table.h"),
    person("Peter", "Dimov",
            role = c("ctb", "cph"), comment = "Boost combine hashes method in src/cmb_table.h"))
Description: API bindings to the Geospatial Data Abstraction Library ('GDAL',
    <https://gdal.org>). Implements the 'GDAL' Raster and Vector Data Models.
    Bindings are implemented with 'Rcpp' modules. Exposed C++ classes and
    stand-alone functions wrap much of the 'GDAL' API and provide additional
    functionality. Calling signatures resemble the native C, C++ and Python APIs
    provided by the 'GDAL' project. Class 'GDALRaster' encapsulates a
    'GDALDataset' and its raster band objects. Class 'GDALVector' encapsulates
    an 'OGRLayer' and the 'GDALDataset' that contains it. Class 'VSIFile'
    provides bindings to the 'GDAL' 'VSIVirtualHandle' API. Additional classes
    include 'CmbTable' for counting unique combinations of integers, and
    'RunningStats' for computing summary statistics efficiently on large data
    streams. C++ stand-alone functions provide bindings to most 'GDAL' raster
    and vector utilities including 'OGR' facilities for vector geoprocessing,
    several algorithms, the Geometry API ('GEOS' via 'GDAL' headers), the
    Spatial Reference Systems API, and methods for coordinate transformation.
    Bindings to the Virtual Systems Interface ('VSI') API implement standard
    file system operations, abstracted for URLs, cloud storage services,
    'Zip'/'GZip'/'7z'/'RAR', in-memory files, as well as regular local file
    systems. This provides a single interface for operating on file system
    objects that works the same for any storage backend. A custom raster
    calculator evaluates a user-defined R expression on a layer or stack of
    layers, with pixel x/y available as variables in the expression. Raster
    'combine()' identifies and counts unique pixel combinations across multiple
    input layers, with optional raster output of the pixel-level combination
    IDs. Basic plotting capability is provided for raster and vector display.
    'gdalraster' leans toward minimalism and the use of simple, lightweight
    objects for holding raw data. Currently, only minimal S3 class interfaces
    have been implemented for selected R objects that contain spatial data.
    'gdalraster' may be useful in applications that need scalable, low-level
    I/O, or prefer a direct 'GDAL' API.
License: MIT + file LICENSE
Copyright: See file inst/COPYRIGHTS for details.
URL: https://usdaforestservice.github.io/gdalraster/,
    https://github.com/USDAForestService/gdalraster
BugReports: https://github.com/USDAForestService/gdalraster/issues
Depends: R (>= 4.2.0)
Imports:
    bit64,
    graphics,
    grDevices,
    methods,
    nanoarrow,
    Rcpp (>= 1.0.7),
    stats,
    tools,
    utils,
    wk,
    xml2
LinkingTo: nanoarrow, Rcpp, RcppInt64
Suggests:
    gt,
    knitr,
    rmarkdown,
    scales,
    testthat (>= 3.0.0)
NeedsCompilation: yes
SystemRequirements: C++17, GDAL (>= 3.1.0, built against GEOS)
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
VignetteBuilder: knitr
Config/testthat/edition: 3
