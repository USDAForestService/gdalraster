// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gdalraster_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gdal_version
Rcpp::CharacterVector gdal_version();
RcppExport SEXP _gdalraster_gdal_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdal_version());
    return rcpp_result_gen;
END_RCPP
}
// _gdal_version_num
int _gdal_version_num();
RcppExport SEXP _gdalraster__gdal_version_num() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_gdal_version_num());
    return rcpp_result_gen;
END_RCPP
}
// gdal_formats
Rcpp::DataFrame gdal_formats(std::string format);
RcppExport SEXP _gdalraster_gdal_formats(SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(gdal_formats(format));
    return rcpp_result_gen;
END_RCPP
}
// get_config_option
std::string get_config_option(std::string key);
RcppExport SEXP _gdalraster_get_config_option(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(get_config_option(key));
    return rcpp_result_gen;
END_RCPP
}
// set_config_option
void set_config_option(std::string key, std::string value);
RcppExport SEXP _gdalraster_set_config_option(SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    set_config_option(key, value);
    return R_NilValue;
END_RCPP
}
// get_cache_used
int get_cache_used();
RcppExport SEXP _gdalraster_get_cache_used() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_cache_used());
    return rcpp_result_gen;
END_RCPP
}
// _dump_open_datasets
int _dump_open_datasets(std::string outfile);
RcppExport SEXP _gdalraster__dump_open_datasets(SEXP outfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    rcpp_result_gen = Rcpp::wrap(_dump_open_datasets(outfile));
    return rcpp_result_gen;
END_RCPP
}
// push_error_handler
void push_error_handler(std::string handler);
RcppExport SEXP _gdalraster_push_error_handler(SEXP handlerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type handler(handlerSEXP);
    push_error_handler(handler);
    return R_NilValue;
END_RCPP
}
// pop_error_handler
void pop_error_handler();
RcppExport SEXP _gdalraster_pop_error_handler() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    pop_error_handler();
    return R_NilValue;
END_RCPP
}
// _check_gdal_filename
Rcpp::CharacterVector _check_gdal_filename(Rcpp::CharacterVector filename);
RcppExport SEXP _gdalraster__check_gdal_filename(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(_check_gdal_filename(filename));
    return rcpp_result_gen;
END_RCPP
}
// get_num_cpus
int get_num_cpus();
RcppExport SEXP _gdalraster_get_num_cpus() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_num_cpus());
    return rcpp_result_gen;
END_RCPP
}
// get_usable_physical_ram
Rcpp::NumericVector get_usable_physical_ram();
RcppExport SEXP _gdalraster_get_usable_physical_ram() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_usable_physical_ram());
    return rcpp_result_gen;
END_RCPP
}
// has_spatialite
bool has_spatialite();
RcppExport SEXP _gdalraster_has_spatialite() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(has_spatialite());
    return rcpp_result_gen;
END_RCPP
}
// http_enabled
bool http_enabled();
RcppExport SEXP _gdalraster_http_enabled() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(http_enabled());
    return rcpp_result_gen;
END_RCPP
}
// _cpl_http_cleanup
void _cpl_http_cleanup();
RcppExport SEXP _gdalraster__cpl_http_cleanup() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    _cpl_http_cleanup();
    return R_NilValue;
END_RCPP
}
// create
bool create(std::string format, Rcpp::CharacterVector dst_filename, int xsize, int ysize, int nbands, std::string dataType, Rcpp::Nullable<Rcpp::CharacterVector> options);
RcppExport SEXP _gdalraster_create(SEXP formatSEXP, SEXP dst_filenameSEXP, SEXP xsizeSEXP, SEXP ysizeSEXP, SEXP nbandsSEXP, SEXP dataTypeSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type xsize(xsizeSEXP);
    Rcpp::traits::input_parameter< int >::type ysize(ysizeSEXP);
    Rcpp::traits::input_parameter< int >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(create(format, dst_filename, xsize, ysize, nbands, dataType, options));
    return rcpp_result_gen;
END_RCPP
}
// createCopy
bool createCopy(std::string format, Rcpp::CharacterVector dst_filename, Rcpp::CharacterVector src_filename, bool strict, Rcpp::Nullable<Rcpp::CharacterVector> options, bool quiet);
RcppExport SEXP _gdalraster_createCopy(SEXP formatSEXP, SEXP dst_filenameSEXP, SEXP src_filenameSEXP, SEXP strictSEXP, SEXP optionsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type strict(strictSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(createCopy(format, dst_filename, src_filename, strict, options, quiet));
    return rcpp_result_gen;
END_RCPP
}
// _apply_geotransform
Rcpp::NumericVector _apply_geotransform(const std::vector<double> gt, double pixel, double line);
RcppExport SEXP _gdalraster__apply_geotransform(SEXP gtSEXP, SEXP pixelSEXP, SEXP lineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type gt(gtSEXP);
    Rcpp::traits::input_parameter< double >::type pixel(pixelSEXP);
    Rcpp::traits::input_parameter< double >::type line(lineSEXP);
    rcpp_result_gen = Rcpp::wrap(_apply_geotransform(gt, pixel, line));
    return rcpp_result_gen;
END_RCPP
}
// inv_geotransform
Rcpp::NumericVector inv_geotransform(const std::vector<double> gt);
RcppExport SEXP _gdalraster_inv_geotransform(SEXP gtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type gt(gtSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_geotransform(gt));
    return rcpp_result_gen;
END_RCPP
}
// _get_pixel_line_gt
Rcpp::IntegerMatrix _get_pixel_line_gt(const Rcpp::RObject& xy, const std::vector<double> gt);
RcppExport SEXP _gdalraster__get_pixel_line_gt(SEXP xySEXP, SEXP gtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type gt(gtSEXP);
    rcpp_result_gen = Rcpp::wrap(_get_pixel_line_gt(xy, gt));
    return rcpp_result_gen;
END_RCPP
}
// _get_pixel_line_ds
Rcpp::IntegerMatrix _get_pixel_line_ds(const Rcpp::RObject& xy, const GDALRaster* ds);
RcppExport SEXP _gdalraster__get_pixel_line_ds(SEXP xySEXP, SEXP dsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const GDALRaster* >::type ds(dsSEXP);
    rcpp_result_gen = Rcpp::wrap(_get_pixel_line_ds(xy, ds));
    return rcpp_result_gen;
END_RCPP
}
// buildVRT
bool buildVRT(Rcpp::CharacterVector vrt_filename, Rcpp::CharacterVector input_rasters, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg, bool quiet);
RcppExport SEXP _gdalraster_buildVRT(SEXP vrt_filenameSEXP, SEXP input_rastersSEXP, SEXP cl_argSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type vrt_filename(vrt_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type input_rasters(input_rastersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(buildVRT(vrt_filename, input_rasters, cl_arg, quiet));
    return rcpp_result_gen;
END_RCPP
}
// _combine
Rcpp::DataFrame _combine(Rcpp::CharacterVector src_files, Rcpp::CharacterVector var_names, std::vector<int> bands, std::string dst_filename, std::string fmt, std::string dataType, Rcpp::Nullable<Rcpp::CharacterVector> options, bool quiet);
RcppExport SEXP _gdalraster__combine(SEXP src_filesSEXP, SEXP var_namesSEXP, SEXP bandsSEXP, SEXP dst_filenameSEXP, SEXP fmtSEXP, SEXP dataTypeSEXP, SEXP optionsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_files(src_filesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type var_names(var_namesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type bands(bandsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type fmt(fmtSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(_combine(src_files, var_names, bands, dst_filename, fmt, dataType, options, quiet));
    return rcpp_result_gen;
END_RCPP
}
// _value_count
Rcpp::DataFrame _value_count(const GDALRaster& src_ds, int band, bool quiet);
RcppExport SEXP _gdalraster__value_count(SEXP src_dsSEXP, SEXP bandSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const GDALRaster& >::type src_ds(src_dsSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(_value_count(src_ds, band, quiet));
    return rcpp_result_gen;
END_RCPP
}
// _dem_proc
bool _dem_proc(std::string mode, Rcpp::CharacterVector src_filename, Rcpp::CharacterVector dst_filename, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg, Rcpp::Nullable<Rcpp::String> col_file, bool quiet);
RcppExport SEXP _gdalraster__dem_proc(SEXP modeSEXP, SEXP src_filenameSEXP, SEXP dst_filenameSEXP, SEXP cl_argSEXP, SEXP col_fileSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::String> >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(_dem_proc(mode, src_filename, dst_filename, cl_arg, col_file, quiet));
    return rcpp_result_gen;
END_RCPP
}
// fillNodata
bool fillNodata(Rcpp::CharacterVector filename, int band, Rcpp::CharacterVector mask_file, double max_dist, int smooth_iterations, bool quiet);
RcppExport SEXP _gdalraster_fillNodata(SEXP filenameSEXP, SEXP bandSEXP, SEXP mask_fileSEXP, SEXP max_distSEXP, SEXP smooth_iterationsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type band(bandSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type mask_file(mask_fileSEXP);
    Rcpp::traits::input_parameter< double >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< int >::type smooth_iterations(smooth_iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(fillNodata(filename, band, mask_file, max_dist, smooth_iterations, quiet));
    return rcpp_result_gen;
END_RCPP
}
// footprint
bool footprint(Rcpp::CharacterVector src_filename, Rcpp::CharacterVector dst_filename, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg);
RcppExport SEXP _gdalraster_footprint(SEXP src_filenameSEXP, SEXP dst_filenameSEXP, SEXP cl_argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    rcpp_result_gen = Rcpp::wrap(footprint(src_filename, dst_filename, cl_arg));
    return rcpp_result_gen;
END_RCPP
}
// ogr2ogr
bool ogr2ogr(Rcpp::CharacterVector src_dsn, Rcpp::CharacterVector dst_dsn, Rcpp::Nullable<Rcpp::CharacterVector> src_layers, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg, Rcpp::Nullable<Rcpp::CharacterVector> open_options);
RcppExport SEXP _gdalraster_ogr2ogr(SEXP src_dsnSEXP, SEXP dst_dsnSEXP, SEXP src_layersSEXP, SEXP cl_argSEXP, SEXP open_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_dsn(src_dsnSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_dsn(dst_dsnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type src_layers(src_layersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type open_options(open_optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(ogr2ogr(src_dsn, dst_dsn, src_layers, cl_arg, open_options));
    return rcpp_result_gen;
END_RCPP
}
// ogrinfo
std::string ogrinfo(Rcpp::CharacterVector dsn, Rcpp::Nullable<Rcpp::CharacterVector> layers, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg, Rcpp::Nullable<Rcpp::CharacterVector> open_options, bool read_only, bool cout);
RcppExport SEXP _gdalraster_ogrinfo(SEXP dsnSEXP, SEXP layersSEXP, SEXP cl_argSEXP, SEXP open_optionsSEXP, SEXP read_onlySEXP, SEXP coutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type layers(layersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type open_options(open_optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type read_only(read_onlySEXP);
    Rcpp::traits::input_parameter< bool >::type cout(coutSEXP);
    rcpp_result_gen = Rcpp::wrap(ogrinfo(dsn, layers, cl_arg, open_options, read_only, cout));
    return rcpp_result_gen;
END_RCPP
}
// _polygonize
bool _polygonize(Rcpp::CharacterVector src_filename, int src_band, Rcpp::CharacterVector out_dsn, std::string out_layer, std::string fld_name, Rcpp::CharacterVector mask_file, bool nomask, int connectedness, bool quiet);
RcppExport SEXP _gdalraster__polygonize(SEXP src_filenameSEXP, SEXP src_bandSEXP, SEXP out_dsnSEXP, SEXP out_layerSEXP, SEXP fld_nameSEXP, SEXP mask_fileSEXP, SEXP nomaskSEXP, SEXP connectednessSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type src_band(src_bandSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type out_dsn(out_dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type out_layer(out_layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type mask_file(mask_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type nomask(nomaskSEXP);
    Rcpp::traits::input_parameter< int >::type connectedness(connectednessSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(_polygonize(src_filename, src_band, out_dsn, out_layer, fld_name, mask_file, nomask, connectedness, quiet));
    return rcpp_result_gen;
END_RCPP
}
// _rasterize
bool _rasterize(std::string src_dsn, std::string dst_filename, Rcpp::CharacterVector cl_arg, bool quiet);
RcppExport SEXP _gdalraster__rasterize(SEXP src_dsnSEXP, SEXP dst_filenameSEXP, SEXP cl_argSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type src_dsn(src_dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(_rasterize(src_dsn, dst_filename, cl_arg, quiet));
    return rcpp_result_gen;
END_RCPP
}
// sieveFilter
bool sieveFilter(Rcpp::CharacterVector src_filename, int src_band, Rcpp::CharacterVector dst_filename, int dst_band, int size_threshold, int connectedness, Rcpp::CharacterVector mask_filename, int mask_band, Rcpp::Nullable<Rcpp::CharacterVector> options, bool quiet);
RcppExport SEXP _gdalraster_sieveFilter(SEXP src_filenameSEXP, SEXP src_bandSEXP, SEXP dst_filenameSEXP, SEXP dst_bandSEXP, SEXP size_thresholdSEXP, SEXP connectednessSEXP, SEXP mask_filenameSEXP, SEXP mask_bandSEXP, SEXP optionsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type src_band(src_bandSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type dst_band(dst_bandSEXP);
    Rcpp::traits::input_parameter< int >::type size_threshold(size_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type connectedness(connectednessSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type mask_filename(mask_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type mask_band(mask_bandSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(sieveFilter(src_filename, src_band, dst_filename, dst_band, size_threshold, connectedness, mask_filename, mask_band, options, quiet));
    return rcpp_result_gen;
END_RCPP
}
// translate
bool translate(Rcpp::CharacterVector src_filename, Rcpp::CharacterVector dst_filename, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg, bool quiet);
RcppExport SEXP _gdalraster_translate(SEXP src_filenameSEXP, SEXP dst_filenameSEXP, SEXP cl_argSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(translate(src_filename, dst_filename, cl_arg, quiet));
    return rcpp_result_gen;
END_RCPP
}
// warp
bool warp(Rcpp::CharacterVector src_files, Rcpp::CharacterVector dst_filename, std::string t_srs, Rcpp::Nullable<Rcpp::CharacterVector> cl_arg, bool quiet);
RcppExport SEXP _gdalraster_warp(SEXP src_filesSEXP, SEXP dst_filenameSEXP, SEXP t_srsSEXP, SEXP cl_argSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_files(src_filesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_srs(t_srsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type cl_arg(cl_argSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(warp(src_files, dst_filename, t_srs, cl_arg, quiet));
    return rcpp_result_gen;
END_RCPP
}
// createColorRamp
Rcpp::IntegerMatrix createColorRamp(int start_index, Rcpp::IntegerVector start_color, int end_index, Rcpp::IntegerVector end_color, std::string palette_interp);
RcppExport SEXP _gdalraster_createColorRamp(SEXP start_indexSEXP, SEXP start_colorSEXP, SEXP end_indexSEXP, SEXP end_colorSEXP, SEXP palette_interpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_index(start_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type start_color(start_colorSEXP);
    Rcpp::traits::input_parameter< int >::type end_index(end_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type end_color(end_colorSEXP);
    Rcpp::traits::input_parameter< std::string >::type palette_interp(palette_interpSEXP);
    rcpp_result_gen = Rcpp::wrap(createColorRamp(start_index, start_color, end_index, end_color, palette_interp));
    return rcpp_result_gen;
END_RCPP
}
// bandCopyWholeRaster
bool bandCopyWholeRaster(Rcpp::CharacterVector src_filename, int src_band, Rcpp::CharacterVector dst_filename, int dst_band, Rcpp::Nullable<Rcpp::CharacterVector> options, bool quiet);
RcppExport SEXP _gdalraster_bandCopyWholeRaster(SEXP src_filenameSEXP, SEXP src_bandSEXP, SEXP dst_filenameSEXP, SEXP dst_bandSEXP, SEXP optionsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_filename(src_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type src_band(src_bandSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type dst_band(dst_bandSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(bandCopyWholeRaster(src_filename, src_band, dst_filename, dst_band, options, quiet));
    return rcpp_result_gen;
END_RCPP
}
// deleteDataset
bool deleteDataset(Rcpp::CharacterVector filename, std::string format);
RcppExport SEXP _gdalraster_deleteDataset(SEXP filenameSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(deleteDataset(filename, format));
    return rcpp_result_gen;
END_RCPP
}
// renameDataset
bool renameDataset(Rcpp::CharacterVector new_filename, Rcpp::CharacterVector old_filename, std::string format);
RcppExport SEXP _gdalraster_renameDataset(SEXP new_filenameSEXP, SEXP old_filenameSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type new_filename(new_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type old_filename(old_filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(renameDataset(new_filename, old_filename, format));
    return rcpp_result_gen;
END_RCPP
}
// copyDatasetFiles
bool copyDatasetFiles(Rcpp::CharacterVector new_filename, Rcpp::CharacterVector old_filename, std::string format);
RcppExport SEXP _gdalraster_copyDatasetFiles(SEXP new_filenameSEXP, SEXP old_filenameSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type new_filename(new_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type old_filename(old_filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(copyDatasetFiles(new_filename, old_filename, format));
    return rcpp_result_gen;
END_RCPP
}
// _getCreationOptions
std::string _getCreationOptions(std::string format);
RcppExport SEXP _gdalraster__getCreationOptions(SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(_getCreationOptions(format));
    return rcpp_result_gen;
END_RCPP
}
// _addFileInZip
bool _addFileInZip(std::string zip_filename, bool overwrite, std::string archive_filename, std::string in_filename, Rcpp::Nullable<Rcpp::CharacterVector> options, bool quiet);
RcppExport SEXP _gdalraster__addFileInZip(SEXP zip_filenameSEXP, SEXP overwriteSEXP, SEXP archive_filenameSEXP, SEXP in_filenameSEXP, SEXP optionsSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type zip_filename(zip_filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type overwrite(overwriteSEXP);
    Rcpp::traits::input_parameter< std::string >::type archive_filename(archive_filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type in_filename(in_filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(_addFileInZip(zip_filename, overwrite, archive_filename, in_filename, options, quiet));
    return rcpp_result_gen;
END_RCPP
}
// vsi_copy_file
int vsi_copy_file(Rcpp::CharacterVector src_file, Rcpp::CharacterVector target_file, bool show_progress);
RcppExport SEXP _gdalraster_vsi_copy_file(SEXP src_fileSEXP, SEXP target_fileSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src_file(src_fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type target_file(target_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_copy_file(src_file, target_file, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// vsi_curl_clear_cache
void vsi_curl_clear_cache(bool partial, Rcpp::CharacterVector file_prefix);
RcppExport SEXP _gdalraster_vsi_curl_clear_cache(SEXP partialSEXP, SEXP file_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type partial(partialSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file_prefix(file_prefixSEXP);
    vsi_curl_clear_cache(partial, file_prefix);
    return R_NilValue;
END_RCPP
}
// vsi_read_dir
Rcpp::CharacterVector vsi_read_dir(Rcpp::CharacterVector path, int max_files);
RcppExport SEXP _gdalraster_vsi_read_dir(SEXP pathSEXP, SEXP max_filesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type max_files(max_filesSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_read_dir(path, max_files));
    return rcpp_result_gen;
END_RCPP
}
// vsi_sync
bool vsi_sync(Rcpp::CharacterVector src, Rcpp::CharacterVector target, bool show_progress, Rcpp::Nullable<Rcpp::CharacterVector> options);
RcppExport SEXP _gdalraster_vsi_sync(SEXP srcSEXP, SEXP targetSEXP, SEXP show_progressSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type src(srcSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_sync(src, target, show_progress, options));
    return rcpp_result_gen;
END_RCPP
}
// vsi_mkdir
int vsi_mkdir(Rcpp::CharacterVector path, std::string mode, bool recursive);
RcppExport SEXP _gdalraster_vsi_mkdir(SEXP pathSEXP, SEXP modeSEXP, SEXP recursiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_mkdir(path, mode, recursive));
    return rcpp_result_gen;
END_RCPP
}
// vsi_rmdir
int vsi_rmdir(Rcpp::CharacterVector path, bool recursive);
RcppExport SEXP _gdalraster_vsi_rmdir(SEXP pathSEXP, SEXP recursiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_rmdir(path, recursive));
    return rcpp_result_gen;
END_RCPP
}
// vsi_unlink
int vsi_unlink(Rcpp::CharacterVector filename);
RcppExport SEXP _gdalraster_vsi_unlink(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_unlink(filename));
    return rcpp_result_gen;
END_RCPP
}
// vsi_unlink_batch
SEXP vsi_unlink_batch(Rcpp::CharacterVector filenames);
RcppExport SEXP _gdalraster_vsi_unlink_batch(SEXP filenamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filenames(filenamesSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_unlink_batch(filenames));
    return rcpp_result_gen;
END_RCPP
}
// vsi_stat
SEXP vsi_stat(Rcpp::CharacterVector filename, std::string info);
RcppExport SEXP _gdalraster_vsi_stat(SEXP filenameSEXP, SEXP infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type info(infoSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_stat(filename, info));
    return rcpp_result_gen;
END_RCPP
}
// vsi_rename
int vsi_rename(Rcpp::CharacterVector oldpath, Rcpp::CharacterVector newpath);
RcppExport SEXP _gdalraster_vsi_rename(SEXP oldpathSEXP, SEXP newpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type oldpath(oldpathSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type newpath(newpathSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_rename(oldpath, newpath));
    return rcpp_result_gen;
END_RCPP
}
// vsi_get_fs_prefixes
Rcpp::CharacterVector vsi_get_fs_prefixes();
RcppExport SEXP _gdalraster_vsi_get_fs_prefixes() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(vsi_get_fs_prefixes());
    return rcpp_result_gen;
END_RCPP
}
// _vsi_get_fs_options
std::string _vsi_get_fs_options(Rcpp::CharacterVector filename);
RcppExport SEXP _gdalraster__vsi_get_fs_options(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(_vsi_get_fs_options(filename));
    return rcpp_result_gen;
END_RCPP
}
// vsi_supports_seq_write
bool vsi_supports_seq_write(Rcpp::CharacterVector filename, bool allow_local_tmpfile);
RcppExport SEXP _gdalraster_vsi_supports_seq_write(SEXP filenameSEXP, SEXP allow_local_tmpfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_local_tmpfile(allow_local_tmpfileSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_supports_seq_write(filename, allow_local_tmpfile));
    return rcpp_result_gen;
END_RCPP
}
// vsi_supports_rnd_write
bool vsi_supports_rnd_write(Rcpp::CharacterVector filename, bool allow_local_tmpfile);
RcppExport SEXP _gdalraster_vsi_supports_rnd_write(SEXP filenameSEXP, SEXP allow_local_tmpfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type allow_local_tmpfile(allow_local_tmpfileSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_supports_rnd_write(filename, allow_local_tmpfile));
    return rcpp_result_gen;
END_RCPP
}
// vsi_get_disk_free_space
Rcpp::NumericVector vsi_get_disk_free_space(Rcpp::CharacterVector path);
RcppExport SEXP _gdalraster_vsi_get_disk_free_space(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_get_disk_free_space(path));
    return rcpp_result_gen;
END_RCPP
}
// vsi_set_path_option
void vsi_set_path_option(Rcpp::CharacterVector path_prefix, std::string key, std::string value);
RcppExport SEXP _gdalraster_vsi_set_path_option(SEXP path_prefixSEXP, SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path_prefix(path_prefixSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    vsi_set_path_option(path_prefix, key, value);
    return R_NilValue;
END_RCPP
}
// vsi_clear_path_options
void vsi_clear_path_options(Rcpp::CharacterVector path_prefix);
RcppExport SEXP _gdalraster_vsi_clear_path_options(SEXP path_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type path_prefix(path_prefixSEXP);
    vsi_clear_path_options(path_prefix);
    return R_NilValue;
END_RCPP
}
// vsi_get_file_metadata
SEXP vsi_get_file_metadata(Rcpp::CharacterVector filename, std::string domain);
RcppExport SEXP _gdalraster_vsi_get_file_metadata(SEXP filenameSEXP, SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(vsi_get_file_metadata(filename, domain));
    return rcpp_result_gen;
END_RCPP
}
// _getGEOSVersion
std::vector<int> _getGEOSVersion();
RcppExport SEXP _gdalraster__getGEOSVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_getGEOSVersion());
    return rcpp_result_gen;
END_RCPP
}
// has_geos
bool has_geos();
RcppExport SEXP _gdalraster_has_geos() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(has_geos());
    return rcpp_result_gen;
END_RCPP
}
// _g_create
std::string _g_create(Rcpp::NumericMatrix xy, std::string geom_type);
RcppExport SEXP _gdalraster__g_create(SEXP xySEXP, SEXP geom_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< std::string >::type geom_type(geom_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_create(xy, geom_type));
    return rcpp_result_gen;
END_RCPP
}
// _g_add_geom
std::string _g_add_geom(std::string sub_geom, std::string container);
RcppExport SEXP _gdalraster__g_add_geom(SEXP sub_geomSEXP, SEXP containerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sub_geom(sub_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type container(containerSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_add_geom(sub_geom, container));
    return rcpp_result_gen;
END_RCPP
}
// _g_is_valid
bool _g_is_valid(std::string geom);
RcppExport SEXP _gdalraster__g_is_valid(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_is_valid(geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_is_empty
bool _g_is_empty(std::string geom);
RcppExport SEXP _gdalraster__g_is_empty(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_is_empty(geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_name
std::string _g_name(std::string geom);
RcppExport SEXP _gdalraster__g_name(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_name(geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_intersects
bool _g_intersects(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_intersects(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_intersects(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_equals
bool _g_equals(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_equals(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_equals(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_disjoint
bool _g_disjoint(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_disjoint(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_disjoint(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_touches
bool _g_touches(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_touches(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_touches(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_contains
bool _g_contains(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_contains(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_contains(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_within
bool _g_within(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_within(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_within(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_crosses
bool _g_crosses(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_crosses(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_crosses(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_overlaps
bool _g_overlaps(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_overlaps(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_overlaps(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_buffer
std::string _g_buffer(std::string geom, double dist, int quad_segs);
RcppExport SEXP _gdalraster__g_buffer(SEXP geomSEXP, SEXP distSEXP, SEXP quad_segsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    Rcpp::traits::input_parameter< double >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type quad_segs(quad_segsSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_buffer(geom, dist, quad_segs));
    return rcpp_result_gen;
END_RCPP
}
// _g_intersection
std::string _g_intersection(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_intersection(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_intersection(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_union
std::string _g_union(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_union(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_union(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_difference
std::string _g_difference(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_difference(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_difference(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_sym_difference
std::string _g_sym_difference(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_sym_difference(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_sym_difference(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_distance
double _g_distance(std::string this_geom, std::string other_geom);
RcppExport SEXP _gdalraster__g_distance(SEXP this_geomSEXP, SEXP other_geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type this_geom(this_geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type other_geom(other_geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_distance(this_geom, other_geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_length
double _g_length(std::string geom);
RcppExport SEXP _gdalraster__g_length(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_length(geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_area
double _g_area(std::string geom);
RcppExport SEXP _gdalraster__g_area(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_area(geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_centroid
Rcpp::NumericVector _g_centroid(std::string geom);
RcppExport SEXP _gdalraster__g_centroid(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_centroid(geom));
    return rcpp_result_gen;
END_RCPP
}
// _g_transform
std::string _g_transform(std::string geom, std::string srs_from, std::string srs_to, bool wrap_date_line, int date_line_offset);
RcppExport SEXP _gdalraster__g_transform(SEXP geomSEXP, SEXP srs_fromSEXP, SEXP srs_toSEXP, SEXP wrap_date_lineSEXP, SEXP date_line_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geom(geomSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs_from(srs_fromSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs_to(srs_toSEXP);
    Rcpp::traits::input_parameter< bool >::type wrap_date_line(wrap_date_lineSEXP);
    Rcpp::traits::input_parameter< int >::type date_line_offset(date_line_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(_g_transform(geom, srs_from, srs_to, wrap_date_line, date_line_offset));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_ds_exists
bool _ogr_ds_exists(std::string dsn, bool with_update);
RcppExport SEXP _gdalraster__ogr_ds_exists(SEXP dsnSEXP, SEXP with_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< bool >::type with_update(with_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_ds_exists(dsn, with_update));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_ds_format
std::string _ogr_ds_format(std::string dsn);
RcppExport SEXP _gdalraster__ogr_ds_format(SEXP dsnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_ds_format(dsn));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_ds_test_cap
SEXP _ogr_ds_test_cap(std::string dsn, bool with_update);
RcppExport SEXP _gdalraster__ogr_ds_test_cap(SEXP dsnSEXP, SEXP with_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< bool >::type with_update(with_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_ds_test_cap(dsn, with_update));
    return rcpp_result_gen;
END_RCPP
}
// _create_ogr
bool _create_ogr(std::string format, std::string dst_filename, int xsize, int ysize, int nbands, std::string dataType, std::string layer, std::string geom_type, std::string srs, std::string fld_name, std::string fld_type, Rcpp::Nullable<Rcpp::CharacterVector> dsco, Rcpp::Nullable<Rcpp::CharacterVector> lco, Rcpp::Nullable<Rcpp::List> layer_defn);
RcppExport SEXP _gdalraster__create_ogr(SEXP formatSEXP, SEXP dst_filenameSEXP, SEXP xsizeSEXP, SEXP ysizeSEXP, SEXP nbandsSEXP, SEXP dataTypeSEXP, SEXP layerSEXP, SEXP geom_typeSEXP, SEXP srsSEXP, SEXP fld_nameSEXP, SEXP fld_typeSEXP, SEXP dscoSEXP, SEXP lcoSEXP, SEXP layer_defnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    Rcpp::traits::input_parameter< std::string >::type dst_filename(dst_filenameSEXP);
    Rcpp::traits::input_parameter< int >::type xsize(xsizeSEXP);
    Rcpp::traits::input_parameter< int >::type ysize(ysizeSEXP);
    Rcpp::traits::input_parameter< int >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataType(dataTypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type geom_type(geom_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_type(fld_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type dsco(dscoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type lco(lcoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type layer_defn(layer_defnSEXP);
    rcpp_result_gen = Rcpp::wrap(_create_ogr(format, dst_filename, xsize, ysize, nbands, dataType, layer, geom_type, srs, fld_name, fld_type, dsco, lco, layer_defn));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_ds_layer_count
int _ogr_ds_layer_count(std::string dsn);
RcppExport SEXP _gdalraster__ogr_ds_layer_count(SEXP dsnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_ds_layer_count(dsn));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_ds_layer_names
SEXP _ogr_ds_layer_names(std::string dsn);
RcppExport SEXP _gdalraster__ogr_ds_layer_names(SEXP dsnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_ds_layer_names(dsn));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_layer_exists
bool _ogr_layer_exists(std::string dsn, std::string layer);
RcppExport SEXP _gdalraster__ogr_layer_exists(SEXP dsnSEXP, SEXP layerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_layer_exists(dsn, layer));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_layer_test_cap
SEXP _ogr_layer_test_cap(std::string dsn, std::string layer, bool with_update);
RcppExport SEXP _gdalraster__ogr_layer_test_cap(SEXP dsnSEXP, SEXP layerSEXP, SEXP with_updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< bool >::type with_update(with_updateSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_layer_test_cap(dsn, layer, with_update));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_layer_create
bool _ogr_layer_create(std::string dsn, std::string layer, Rcpp::Nullable<Rcpp::List> layer_defn, std::string geom_type, std::string srs, Rcpp::Nullable<Rcpp::CharacterVector> options);
RcppExport SEXP _gdalraster__ogr_layer_create(SEXP dsnSEXP, SEXP layerSEXP, SEXP layer_defnSEXP, SEXP geom_typeSEXP, SEXP srsSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type layer_defn(layer_defnSEXP);
    Rcpp::traits::input_parameter< std::string >::type geom_type(geom_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_layer_create(dsn, layer, layer_defn, geom_type, srs, options));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_layer_delete
bool _ogr_layer_delete(std::string dsn, std::string layer);
RcppExport SEXP _gdalraster__ogr_layer_delete(SEXP dsnSEXP, SEXP layerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_layer_delete(dsn, layer));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_layer_field_names
SEXP _ogr_layer_field_names(std::string dsn, std::string layer);
RcppExport SEXP _gdalraster__ogr_layer_field_names(SEXP dsnSEXP, SEXP layerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_layer_field_names(dsn, layer));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_field_index
int _ogr_field_index(std::string dsn, std::string layer, std::string fld_name);
RcppExport SEXP _gdalraster__ogr_field_index(SEXP dsnSEXP, SEXP layerSEXP, SEXP fld_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_field_index(dsn, layer, fld_name));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_field_create
bool _ogr_field_create(std::string dsn, std::string layer, std::string fld_name, std::string fld_type, std::string fld_subtype, int fld_width, int fld_precision, bool is_nullable, bool is_ignored, bool is_unique, std::string default_value);
RcppExport SEXP _gdalraster__ogr_field_create(SEXP dsnSEXP, SEXP layerSEXP, SEXP fld_nameSEXP, SEXP fld_typeSEXP, SEXP fld_subtypeSEXP, SEXP fld_widthSEXP, SEXP fld_precisionSEXP, SEXP is_nullableSEXP, SEXP is_ignoredSEXP, SEXP is_uniqueSEXP, SEXP default_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_type(fld_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_subtype(fld_subtypeSEXP);
    Rcpp::traits::input_parameter< int >::type fld_width(fld_widthSEXP);
    Rcpp::traits::input_parameter< int >::type fld_precision(fld_precisionSEXP);
    Rcpp::traits::input_parameter< bool >::type is_nullable(is_nullableSEXP);
    Rcpp::traits::input_parameter< bool >::type is_ignored(is_ignoredSEXP);
    Rcpp::traits::input_parameter< bool >::type is_unique(is_uniqueSEXP);
    Rcpp::traits::input_parameter< std::string >::type default_value(default_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_field_create(dsn, layer, fld_name, fld_type, fld_subtype, fld_width, fld_precision, is_nullable, is_ignored, is_unique, default_value));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_geom_field_create
bool _ogr_geom_field_create(std::string dsn, std::string layer, std::string fld_name, std::string geom_type, std::string srs, bool is_nullable, bool is_ignored);
RcppExport SEXP _gdalraster__ogr_geom_field_create(SEXP dsnSEXP, SEXP layerSEXP, SEXP fld_nameSEXP, SEXP geom_typeSEXP, SEXP srsSEXP, SEXP is_nullableSEXP, SEXP is_ignoredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type geom_type(geom_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_nullable(is_nullableSEXP);
    Rcpp::traits::input_parameter< bool >::type is_ignored(is_ignoredSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_geom_field_create(dsn, layer, fld_name, geom_type, srs, is_nullable, is_ignored));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_field_rename
bool _ogr_field_rename(std::string dsn, std::string layer, std::string fld_name, std::string new_name);
RcppExport SEXP _gdalraster__ogr_field_rename(SEXP dsnSEXP, SEXP layerSEXP, SEXP fld_nameSEXP, SEXP new_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_name(new_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_field_rename(dsn, layer, fld_name, new_name));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_field_delete
bool _ogr_field_delete(std::string dsn, std::string layer, std::string fld_name);
RcppExport SEXP _gdalraster__ogr_field_delete(SEXP dsnSEXP, SEXP layerSEXP, SEXP fld_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer(layerSEXP);
    Rcpp::traits::input_parameter< std::string >::type fld_name(fld_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_field_delete(dsn, layer, fld_name));
    return rcpp_result_gen;
END_RCPP
}
// _ogr_execute_sql
SEXP _ogr_execute_sql(std::string dsn, std::string sql, std::string spatial_filter, std::string dialect);
RcppExport SEXP _gdalraster__ogr_execute_sql(SEXP dsnSEXP, SEXP sqlSEXP, SEXP spatial_filterSEXP, SEXP dialectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dsn(dsnSEXP);
    Rcpp::traits::input_parameter< std::string >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< std::string >::type spatial_filter(spatial_filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type dialect(dialectSEXP);
    rcpp_result_gen = Rcpp::wrap(_ogr_execute_sql(dsn, sql, spatial_filter, dialect));
    return rcpp_result_gen;
END_RCPP
}
// _getPROJVersion
std::vector<int> _getPROJVersion();
RcppExport SEXP _gdalraster__getPROJVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_getPROJVersion());
    return rcpp_result_gen;
END_RCPP
}
// _getPROJSearchPaths
Rcpp::CharacterVector _getPROJSearchPaths();
RcppExport SEXP _gdalraster__getPROJSearchPaths() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_getPROJSearchPaths());
    return rcpp_result_gen;
END_RCPP
}
// _setPROJSearchPaths
void _setPROJSearchPaths(Rcpp::CharacterVector paths);
RcppExport SEXP _gdalraster__setPROJSearchPaths(SEXP pathsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type paths(pathsSEXP);
    _setPROJSearchPaths(paths);
    return R_NilValue;
END_RCPP
}
// _getPROJEnableNetwork
Rcpp::LogicalVector _getPROJEnableNetwork();
RcppExport SEXP _gdalraster__getPROJEnableNetwork() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(_getPROJEnableNetwork());
    return rcpp_result_gen;
END_RCPP
}
// _setPROJEnableNetwork
void _setPROJEnableNetwork(int enabled);
RcppExport SEXP _gdalraster__setPROJEnableNetwork(SEXP enabledSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type enabled(enabledSEXP);
    _setPROJEnableNetwork(enabled);
    return R_NilValue;
END_RCPP
}
// inv_project
Rcpp::NumericMatrix inv_project(const Rcpp::RObject& pts, std::string srs, std::string well_known_gcs);
RcppExport SEXP _gdalraster_inv_project(SEXP ptsSEXP, SEXP srsSEXP, SEXP well_known_gcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    Rcpp::traits::input_parameter< std::string >::type well_known_gcs(well_known_gcsSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_project(pts, srs, well_known_gcs));
    return rcpp_result_gen;
END_RCPP
}
// transform_xy
Rcpp::NumericMatrix transform_xy(const Rcpp::RObject& pts, std::string srs_from, std::string srs_to);
RcppExport SEXP _gdalraster_transform_xy(SEXP ptsSEXP, SEXP srs_fromSEXP, SEXP srs_toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RObject& >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs_from(srs_fromSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs_to(srs_toSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_xy(pts, srs_from, srs_to));
    return rcpp_result_gen;
END_RCPP
}
// epsg_to_wkt
std::string epsg_to_wkt(int epsg, bool pretty);
RcppExport SEXP _gdalraster_epsg_to_wkt(SEXP epsgSEXP, SEXP prettySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type epsg(epsgSEXP);
    Rcpp::traits::input_parameter< bool >::type pretty(prettySEXP);
    rcpp_result_gen = Rcpp::wrap(epsg_to_wkt(epsg, pretty));
    return rcpp_result_gen;
END_RCPP
}
// srs_to_wkt
std::string srs_to_wkt(std::string srs, bool pretty);
RcppExport SEXP _gdalraster_srs_to_wkt(SEXP srsSEXP, SEXP prettySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    Rcpp::traits::input_parameter< bool >::type pretty(prettySEXP);
    rcpp_result_gen = Rcpp::wrap(srs_to_wkt(srs, pretty));
    return rcpp_result_gen;
END_RCPP
}
// srs_is_geographic
bool srs_is_geographic(std::string srs);
RcppExport SEXP _gdalraster_srs_is_geographic(SEXP srsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    rcpp_result_gen = Rcpp::wrap(srs_is_geographic(srs));
    return rcpp_result_gen;
END_RCPP
}
// srs_is_projected
bool srs_is_projected(std::string srs);
RcppExport SEXP _gdalraster_srs_is_projected(SEXP srsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    rcpp_result_gen = Rcpp::wrap(srs_is_projected(srs));
    return rcpp_result_gen;
END_RCPP
}
// srs_is_same
bool srs_is_same(std::string srs1, std::string srs2, std::string criterion, bool ignore_axis_mapping, bool ignore_coord_epoch);
RcppExport SEXP _gdalraster_srs_is_same(SEXP srs1SEXP, SEXP srs2SEXP, SEXP criterionSEXP, SEXP ignore_axis_mappingSEXP, SEXP ignore_coord_epochSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type srs1(srs1SEXP);
    Rcpp::traits::input_parameter< std::string >::type srs2(srs2SEXP);
    Rcpp::traits::input_parameter< std::string >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_axis_mapping(ignore_axis_mappingSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_coord_epoch(ignore_coord_epochSEXP);
    rcpp_result_gen = Rcpp::wrap(srs_is_same(srs1, srs2, criterion, ignore_axis_mapping, ignore_coord_epoch));
    return rcpp_result_gen;
END_RCPP
}
// bbox_from_wkt
Rcpp::NumericVector bbox_from_wkt(std::string wkt, double extend_x, double extend_y);
RcppExport SEXP _gdalraster_bbox_from_wkt(SEXP wktSEXP, SEXP extend_xSEXP, SEXP extend_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type wkt(wktSEXP);
    Rcpp::traits::input_parameter< double >::type extend_x(extend_xSEXP);
    Rcpp::traits::input_parameter< double >::type extend_y(extend_ySEXP);
    rcpp_result_gen = Rcpp::wrap(bbox_from_wkt(wkt, extend_x, extend_y));
    return rcpp_result_gen;
END_RCPP
}
// bbox_to_wkt
Rcpp::String bbox_to_wkt(Rcpp::NumericVector bbox, double extend_x, double extend_y);
RcppExport SEXP _gdalraster_bbox_to_wkt(SEXP bboxSEXP, SEXP extend_xSEXP, SEXP extend_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type bbox(bboxSEXP);
    Rcpp::traits::input_parameter< double >::type extend_x(extend_xSEXP);
    Rcpp::traits::input_parameter< double >::type extend_y(extend_ySEXP);
    rcpp_result_gen = Rcpp::wrap(bbox_to_wkt(bbox, extend_x, extend_y));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_mod_cmb_table();
RcppExport SEXP _rcpp_module_boot_mod_GDALRaster();
RcppExport SEXP _rcpp_module_boot_mod_running_stats();
RcppExport SEXP _rcpp_module_boot_mod_VSIFile();

static const R_CallMethodDef CallEntries[] = {
    {"_gdalraster_gdal_version", (DL_FUNC) &_gdalraster_gdal_version, 0},
    {"_gdalraster__gdal_version_num", (DL_FUNC) &_gdalraster__gdal_version_num, 0},
    {"_gdalraster_gdal_formats", (DL_FUNC) &_gdalraster_gdal_formats, 1},
    {"_gdalraster_get_config_option", (DL_FUNC) &_gdalraster_get_config_option, 1},
    {"_gdalraster_set_config_option", (DL_FUNC) &_gdalraster_set_config_option, 2},
    {"_gdalraster_get_cache_used", (DL_FUNC) &_gdalraster_get_cache_used, 0},
    {"_gdalraster__dump_open_datasets", (DL_FUNC) &_gdalraster__dump_open_datasets, 1},
    {"_gdalraster_push_error_handler", (DL_FUNC) &_gdalraster_push_error_handler, 1},
    {"_gdalraster_pop_error_handler", (DL_FUNC) &_gdalraster_pop_error_handler, 0},
    {"_gdalraster__check_gdal_filename", (DL_FUNC) &_gdalraster__check_gdal_filename, 1},
    {"_gdalraster_get_num_cpus", (DL_FUNC) &_gdalraster_get_num_cpus, 0},
    {"_gdalraster_get_usable_physical_ram", (DL_FUNC) &_gdalraster_get_usable_physical_ram, 0},
    {"_gdalraster_has_spatialite", (DL_FUNC) &_gdalraster_has_spatialite, 0},
    {"_gdalraster_http_enabled", (DL_FUNC) &_gdalraster_http_enabled, 0},
    {"_gdalraster__cpl_http_cleanup", (DL_FUNC) &_gdalraster__cpl_http_cleanup, 0},
    {"_gdalraster_create", (DL_FUNC) &_gdalraster_create, 7},
    {"_gdalraster_createCopy", (DL_FUNC) &_gdalraster_createCopy, 6},
    {"_gdalraster__apply_geotransform", (DL_FUNC) &_gdalraster__apply_geotransform, 3},
    {"_gdalraster_inv_geotransform", (DL_FUNC) &_gdalraster_inv_geotransform, 1},
    {"_gdalraster__get_pixel_line_gt", (DL_FUNC) &_gdalraster__get_pixel_line_gt, 2},
    {"_gdalraster__get_pixel_line_ds", (DL_FUNC) &_gdalraster__get_pixel_line_ds, 2},
    {"_gdalraster_buildVRT", (DL_FUNC) &_gdalraster_buildVRT, 4},
    {"_gdalraster__combine", (DL_FUNC) &_gdalraster__combine, 8},
    {"_gdalraster__value_count", (DL_FUNC) &_gdalraster__value_count, 3},
    {"_gdalraster__dem_proc", (DL_FUNC) &_gdalraster__dem_proc, 6},
    {"_gdalraster_fillNodata", (DL_FUNC) &_gdalraster_fillNodata, 6},
    {"_gdalraster_footprint", (DL_FUNC) &_gdalraster_footprint, 3},
    {"_gdalraster_ogr2ogr", (DL_FUNC) &_gdalraster_ogr2ogr, 5},
    {"_gdalraster_ogrinfo", (DL_FUNC) &_gdalraster_ogrinfo, 6},
    {"_gdalraster__polygonize", (DL_FUNC) &_gdalraster__polygonize, 9},
    {"_gdalraster__rasterize", (DL_FUNC) &_gdalraster__rasterize, 4},
    {"_gdalraster_sieveFilter", (DL_FUNC) &_gdalraster_sieveFilter, 10},
    {"_gdalraster_translate", (DL_FUNC) &_gdalraster_translate, 4},
    {"_gdalraster_warp", (DL_FUNC) &_gdalraster_warp, 5},
    {"_gdalraster_createColorRamp", (DL_FUNC) &_gdalraster_createColorRamp, 5},
    {"_gdalraster_bandCopyWholeRaster", (DL_FUNC) &_gdalraster_bandCopyWholeRaster, 6},
    {"_gdalraster_deleteDataset", (DL_FUNC) &_gdalraster_deleteDataset, 2},
    {"_gdalraster_renameDataset", (DL_FUNC) &_gdalraster_renameDataset, 3},
    {"_gdalraster_copyDatasetFiles", (DL_FUNC) &_gdalraster_copyDatasetFiles, 3},
    {"_gdalraster__getCreationOptions", (DL_FUNC) &_gdalraster__getCreationOptions, 1},
    {"_gdalraster__addFileInZip", (DL_FUNC) &_gdalraster__addFileInZip, 6},
    {"_gdalraster_vsi_copy_file", (DL_FUNC) &_gdalraster_vsi_copy_file, 3},
    {"_gdalraster_vsi_curl_clear_cache", (DL_FUNC) &_gdalraster_vsi_curl_clear_cache, 2},
    {"_gdalraster_vsi_read_dir", (DL_FUNC) &_gdalraster_vsi_read_dir, 2},
    {"_gdalraster_vsi_sync", (DL_FUNC) &_gdalraster_vsi_sync, 4},
    {"_gdalraster_vsi_mkdir", (DL_FUNC) &_gdalraster_vsi_mkdir, 3},
    {"_gdalraster_vsi_rmdir", (DL_FUNC) &_gdalraster_vsi_rmdir, 2},
    {"_gdalraster_vsi_unlink", (DL_FUNC) &_gdalraster_vsi_unlink, 1},
    {"_gdalraster_vsi_unlink_batch", (DL_FUNC) &_gdalraster_vsi_unlink_batch, 1},
    {"_gdalraster_vsi_stat", (DL_FUNC) &_gdalraster_vsi_stat, 2},
    {"_gdalraster_vsi_rename", (DL_FUNC) &_gdalraster_vsi_rename, 2},
    {"_gdalraster_vsi_get_fs_prefixes", (DL_FUNC) &_gdalraster_vsi_get_fs_prefixes, 0},
    {"_gdalraster__vsi_get_fs_options", (DL_FUNC) &_gdalraster__vsi_get_fs_options, 1},
    {"_gdalraster_vsi_supports_seq_write", (DL_FUNC) &_gdalraster_vsi_supports_seq_write, 2},
    {"_gdalraster_vsi_supports_rnd_write", (DL_FUNC) &_gdalraster_vsi_supports_rnd_write, 2},
    {"_gdalraster_vsi_get_disk_free_space", (DL_FUNC) &_gdalraster_vsi_get_disk_free_space, 1},
    {"_gdalraster_vsi_set_path_option", (DL_FUNC) &_gdalraster_vsi_set_path_option, 3},
    {"_gdalraster_vsi_clear_path_options", (DL_FUNC) &_gdalraster_vsi_clear_path_options, 1},
    {"_gdalraster_vsi_get_file_metadata", (DL_FUNC) &_gdalraster_vsi_get_file_metadata, 2},
    {"_gdalraster__getGEOSVersion", (DL_FUNC) &_gdalraster__getGEOSVersion, 0},
    {"_gdalraster_has_geos", (DL_FUNC) &_gdalraster_has_geos, 0},
    {"_gdalraster__g_create", (DL_FUNC) &_gdalraster__g_create, 2},
    {"_gdalraster__g_add_geom", (DL_FUNC) &_gdalraster__g_add_geom, 2},
    {"_gdalraster__g_is_valid", (DL_FUNC) &_gdalraster__g_is_valid, 1},
    {"_gdalraster__g_is_empty", (DL_FUNC) &_gdalraster__g_is_empty, 1},
    {"_gdalraster__g_name", (DL_FUNC) &_gdalraster__g_name, 1},
    {"_gdalraster__g_intersects", (DL_FUNC) &_gdalraster__g_intersects, 2},
    {"_gdalraster__g_equals", (DL_FUNC) &_gdalraster__g_equals, 2},
    {"_gdalraster__g_disjoint", (DL_FUNC) &_gdalraster__g_disjoint, 2},
    {"_gdalraster__g_touches", (DL_FUNC) &_gdalraster__g_touches, 2},
    {"_gdalraster__g_contains", (DL_FUNC) &_gdalraster__g_contains, 2},
    {"_gdalraster__g_within", (DL_FUNC) &_gdalraster__g_within, 2},
    {"_gdalraster__g_crosses", (DL_FUNC) &_gdalraster__g_crosses, 2},
    {"_gdalraster__g_overlaps", (DL_FUNC) &_gdalraster__g_overlaps, 2},
    {"_gdalraster__g_buffer", (DL_FUNC) &_gdalraster__g_buffer, 3},
    {"_gdalraster__g_intersection", (DL_FUNC) &_gdalraster__g_intersection, 2},
    {"_gdalraster__g_union", (DL_FUNC) &_gdalraster__g_union, 2},
    {"_gdalraster__g_difference", (DL_FUNC) &_gdalraster__g_difference, 2},
    {"_gdalraster__g_sym_difference", (DL_FUNC) &_gdalraster__g_sym_difference, 2},
    {"_gdalraster__g_distance", (DL_FUNC) &_gdalraster__g_distance, 2},
    {"_gdalraster__g_length", (DL_FUNC) &_gdalraster__g_length, 1},
    {"_gdalraster__g_area", (DL_FUNC) &_gdalraster__g_area, 1},
    {"_gdalraster__g_centroid", (DL_FUNC) &_gdalraster__g_centroid, 1},
    {"_gdalraster__g_transform", (DL_FUNC) &_gdalraster__g_transform, 5},
    {"_gdalraster__ogr_ds_exists", (DL_FUNC) &_gdalraster__ogr_ds_exists, 2},
    {"_gdalraster__ogr_ds_format", (DL_FUNC) &_gdalraster__ogr_ds_format, 1},
    {"_gdalraster__ogr_ds_test_cap", (DL_FUNC) &_gdalraster__ogr_ds_test_cap, 2},
    {"_gdalraster__create_ogr", (DL_FUNC) &_gdalraster__create_ogr, 14},
    {"_gdalraster__ogr_ds_layer_count", (DL_FUNC) &_gdalraster__ogr_ds_layer_count, 1},
    {"_gdalraster__ogr_ds_layer_names", (DL_FUNC) &_gdalraster__ogr_ds_layer_names, 1},
    {"_gdalraster__ogr_layer_exists", (DL_FUNC) &_gdalraster__ogr_layer_exists, 2},
    {"_gdalraster__ogr_layer_test_cap", (DL_FUNC) &_gdalraster__ogr_layer_test_cap, 3},
    {"_gdalraster__ogr_layer_create", (DL_FUNC) &_gdalraster__ogr_layer_create, 6},
    {"_gdalraster__ogr_layer_delete", (DL_FUNC) &_gdalraster__ogr_layer_delete, 2},
    {"_gdalraster__ogr_layer_field_names", (DL_FUNC) &_gdalraster__ogr_layer_field_names, 2},
    {"_gdalraster__ogr_field_index", (DL_FUNC) &_gdalraster__ogr_field_index, 3},
    {"_gdalraster__ogr_field_create", (DL_FUNC) &_gdalraster__ogr_field_create, 11},
    {"_gdalraster__ogr_geom_field_create", (DL_FUNC) &_gdalraster__ogr_geom_field_create, 7},
    {"_gdalraster__ogr_field_rename", (DL_FUNC) &_gdalraster__ogr_field_rename, 4},
    {"_gdalraster__ogr_field_delete", (DL_FUNC) &_gdalraster__ogr_field_delete, 3},
    {"_gdalraster__ogr_execute_sql", (DL_FUNC) &_gdalraster__ogr_execute_sql, 4},
    {"_gdalraster__getPROJVersion", (DL_FUNC) &_gdalraster__getPROJVersion, 0},
    {"_gdalraster__getPROJSearchPaths", (DL_FUNC) &_gdalraster__getPROJSearchPaths, 0},
    {"_gdalraster__setPROJSearchPaths", (DL_FUNC) &_gdalraster__setPROJSearchPaths, 1},
    {"_gdalraster__getPROJEnableNetwork", (DL_FUNC) &_gdalraster__getPROJEnableNetwork, 0},
    {"_gdalraster__setPROJEnableNetwork", (DL_FUNC) &_gdalraster__setPROJEnableNetwork, 1},
    {"_gdalraster_inv_project", (DL_FUNC) &_gdalraster_inv_project, 3},
    {"_gdalraster_transform_xy", (DL_FUNC) &_gdalraster_transform_xy, 3},
    {"_gdalraster_epsg_to_wkt", (DL_FUNC) &_gdalraster_epsg_to_wkt, 2},
    {"_gdalraster_srs_to_wkt", (DL_FUNC) &_gdalraster_srs_to_wkt, 2},
    {"_gdalraster_srs_is_geographic", (DL_FUNC) &_gdalraster_srs_is_geographic, 1},
    {"_gdalraster_srs_is_projected", (DL_FUNC) &_gdalraster_srs_is_projected, 1},
    {"_gdalraster_srs_is_same", (DL_FUNC) &_gdalraster_srs_is_same, 5},
    {"_gdalraster_bbox_from_wkt", (DL_FUNC) &_gdalraster_bbox_from_wkt, 3},
    {"_gdalraster_bbox_to_wkt", (DL_FUNC) &_gdalraster_bbox_to_wkt, 3},
    {"_rcpp_module_boot_mod_cmb_table", (DL_FUNC) &_rcpp_module_boot_mod_cmb_table, 0},
    {"_rcpp_module_boot_mod_GDALRaster", (DL_FUNC) &_rcpp_module_boot_mod_GDALRaster, 0},
    {"_rcpp_module_boot_mod_running_stats", (DL_FUNC) &_rcpp_module_boot_mod_running_stats, 0},
    {"_rcpp_module_boot_mod_VSIFile", (DL_FUNC) &_rcpp_module_boot_mod_VSIFile, 0},
    {NULL, NULL, 0}
};

void _gdal_init(DllInfo *dll);
RcppExport void R_init_gdalraster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    _gdal_init(dll);
}
